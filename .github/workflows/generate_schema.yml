name: Update library
on:
  schedule:
    - cron: '0 */2 * * 3'
  workflow_dispatch:
    inputs:
      force_update:
        type: boolean
        required: false
        description: 'Force update the library'

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.get-version.outputs.skip }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: develop
          sparse-checkout: |
            version.txt
          sparse-checkout-cone-mode: false
          fetch-depth: 0
      - name: Check the APK version
        id: get-version
        run: |
          # If current version is the same as the latest version, exit
          latest_version=$(curl -s https://ba.pokeguy.dev/com.YostarJP.BlueArchive/version.txt)
          echo "::notice title=Latest APK Version::$latest_version"
          # Skip this step if the version.txt file does not exist
          if [ ! -f version.txt ]; then
            echo "Version file not found."
            # Update the version.txt file with the latest version
            echo "version=$latest_version" >> $GITHUB_OUTPUT
            echo "skip=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Exit 0 if env variable SKIP is true
          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "Forcing update..."
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "version=$latest_version" >> $GITHUB_OUTPUT
            exit 0
          fi
          current_version=$(cat version.txt)
          if [ "$current_version" = "$latest_version" ]; then
            echo "Current version is the same as the latest version: $current_version. Skipping..."
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "version=$latest_version" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Update the version.txt file with the latest version
          echo "version=$latest_version" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

  generate-schema:
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.skip == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: develop
          sparse-checkout-cone-mode: false
          fetch-depth: 0
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{secrets.ARONA_FBS_GENERATOR_PRIVATE_KEY}}
            ${{secrets.ARONA_UNFLATD_PRIVATE_KEY}}
            ${{secrets.ARONA_FBS_UTILS_PRIVATE_KEY}}
            ${{secrets.ARONA_TREE_SITTER_FLATBUFFER}}
      - name: Download decompiled zip file
        run: curl -s https://ba.pokeguy.dev/com.YostarJP.BlueArchive/decompiled/${{ needs.determine-version.outputs.version }}/decompiled.zip -o output.zip
      - name: Unzip the file
        run: unzip output.zip -d output "DiffableCs/BlueArchive/**"
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '^1.22.5'
      - name: Generate the schema
        env:
          GOPRIVATE: github.com/arisu-archive
        run: |
          git config --global --add url."git@github.com:".insteadOf "https://github.com/"
          go run github.com/arisu-archive/arona-unflatd@develop d -i ./output/DiffableCs/BlueArchive -o ./.schema/flatdata -n FlatData
          go run github.com/arisu-archive/arona-unflatd@develop d -i ./output/DiffableCs/BlueArchive -o ./.schema/excel -n "MX.Data.Excel"
      - name: Install FlatBuffers compiler
        run: |
          sudo apt update
          sudo apt install flatbuffers-compiler
      - name: Compile the schema into code
        env:
          GOPRIVATE: github.com/arisu-archive
        run: |
          ./.scripts/compile.sh
          ./.scripts/process_flatbuffers.sh
      - name: Update version file
        run: echo -n "${{ needs.determine-version.outputs.version }}" > version.txt
      - name: Reset the git config
        run: git config --global --unset url."git@github.com:".insteadOf "https://github.com/"
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: "['./.schema', 'version.txt', 'go/', 'python/']"
          message: 'chore(apk): generate schema for ${{ needs.determine-version.outputs.version }}'
          default_author: github_actions
          push: true
          new_branch: chore/generate-schema-${{ needs.determine-version.outputs.version }}
        env:
            GITHUB_TOKEN: ${{ github.token }}
      - name: Create pull request
        run: |
          version=${{ needs.determine-version.outputs.version }}
          branch_name="chore/generate-schema-${version}"
          gh pr create -B develop -H $branch_name \
                        --title 'chore(apk): generate schema for ${{ needs.determine-version.outputs.version }}' \
                        --body '* Version: ${{ needs.determine-version.outputs.version }}' \
                        --label needs-review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
