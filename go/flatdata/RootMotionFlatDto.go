// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// RootMotionFlatDto represents a FlatBuffers table
type RootMotionFlatDto struct {
	fbsutils.FlatBuffer
	Forms     []FormDto   `json:"forms"`
	ExSkills  []MotionDto `json:"ex_skills"`
	MoveLeft  MotionDto   `json:"move_left"`
	MoveRight MotionDto   `json:"move_right"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *RootMotionFlatDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("RootMotionFlat"))
	}
	RootMotionFlatStart(b)
	RootMotionFlatStartFormsVector(b, len(t.Forms))
	for i := range len(t.Forms) {
		// The array should be reversed.
		b.PrependUOffsetT(t.Forms[len(t.Forms)-i-1].MarshalModel(b))
	}
	RootMotionFlatAddForms(b, b.EndVector(len(t.Forms)))
	RootMotionFlatStartExSkillsVector(b, len(t.ExSkills))
	for i := range len(t.ExSkills) {
		// The array should be reversed.
		b.PrependUOffsetT(t.ExSkills[len(t.ExSkills)-i-1].MarshalModel(b))
	}
	RootMotionFlatAddExSkills(b, b.EndVector(len(t.ExSkills)))
	RootMotionFlatAddMoveLeft(b, t.MoveLeft.MarshalModel(b))
	RootMotionFlatAddMoveRight(b, t.MoveRight.MarshalModel(b))
	return RootMotionFlatEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *RootMotionFlatDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *RootMotionFlatDto) UnmarshalMessage(e *RootMotionFlat) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("RootMotionFlat"))
	}
	t.Forms = make([]FormDto, e.FormsLength())
	for i := range e.FormsLength() {
		d := new(Form)
		if !e.Forms(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.Forms[i].UnmarshalMessage(d)
	}
	t.ExSkills = make([]MotionDto, e.ExSkillsLength())
	for i := range e.ExSkillsLength() {
		d := new(Motion)
		if !e.ExSkills(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.ExSkills[i].UnmarshalMessage(d)
	}
	t.MoveLeft.UnmarshalMessage(e.MoveLeft(nil))
	t.MoveRight.UnmarshalMessage(e.MoveRight(nil))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *RootMotionFlatDto) Unmarshal(data []byte) error {
	root := GetRootAsRootMotionFlat(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (RootMotionFlatDto) FlatDataName() string {
	return "RootMotionFlat"
}
