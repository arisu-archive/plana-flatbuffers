// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstMinigameCCGExcelDto represents a FlatBuffers table
type ConstMinigameCCGExcelDto struct {
	fbsutils.FlatBuffer
	TurnDrawCount                   int32   `json:"turn_draw_count"`
	ConquestMapBoundaryOffsetRight  float32 `json:"conquest_map_boundary_offset_right"`
	ConquestMapBoundaryOffsetTop    float32 `json:"conquest_map_boundary_offset_top"`
	ConquestMapBoundaryOffsetBottom float32 `json:"conquest_map_boundary_offset_bottom"`
	ConquestMapCenterOffsetX        float32 `json:"conquest_map_center_offset_x"`
	ConquestMapCenterOffsetY        float32 `json:"conquest_map_center_offset_y"`
	CameraAngle                     float32 `json:"camera_angle"`
	CameraZoomMax                   float32 `json:"camera_zoom_max"`
	CameraZoomMin                   float32 `json:"camera_zoom_min"`
	CameraZoomDefault               float32 `json:"camera_zoom_default"`
	ThemaLoadingProgressTime        float32 `json:"thema_loading_progress_time"`
	MapAllyRotation                 float32 `json:"map_ally_rotation"`
	AniAllyBattleAttack             string  `json:"ani_ally_battle_attack"`
	MaxHandCount                    int32   `json:"max_hand_count"`
	MaxCost                         int32   `json:"max_cost"`
	StartCost                       int32   `json:"start_cost"`
	TurnCost                        int32   `json:"turn_cost"`
	StrikerSwapFrontCost            int32   `json:"striker_swap_front_cost"`
	StrikerMaxEquipCount            int32   `json:"striker_max_equip_count"`
	StartDrawCount                  int32   `json:"start_draw_count"`
	CampReviveHealthRate            int32   `json:"camp_revive_health_rate"`
	BaseRewardRerollPoint           int32   `json:"base_reward_reroll_point"`
	SelectRewardOptionCount         int32   `json:"select_reward_option_count"`
	AlternativeCardImagePath        string  `json:"alternative_card_image_path"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstMinigameCCGExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMinigameCCG"))
	}
	__offset_ani_ally_battle_attack := b.CreateString(fbsutils.Convert(t.AniAllyBattleAttack, t.FlatBuffer.TableKey))
	__offset_alternative_card_image_path := b.CreateString(fbsutils.Convert(t.AlternativeCardImagePath, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelStart(b)
	ConstMinigameCCGExcelAddTurnDrawCount(b, fbsutils.Convert(t.TurnDrawCount, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddConquestMapBoundaryOffsetRight(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetRight, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddConquestMapBoundaryOffsetTop(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetTop, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddConquestMapBoundaryOffsetBottom(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetBottom, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddConquestMapCenterOffsetX(b, fbsutils.Convert(t.ConquestMapCenterOffsetX, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddConquestMapCenterOffsetY(b, fbsutils.Convert(t.ConquestMapCenterOffsetY, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddCameraAngle(b, fbsutils.Convert(t.CameraAngle, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddCameraZoomMax(b, fbsutils.Convert(t.CameraZoomMax, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddCameraZoomMin(b, fbsutils.Convert(t.CameraZoomMin, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddCameraZoomDefault(b, fbsutils.Convert(t.CameraZoomDefault, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddThemaLoadingProgressTime(b, fbsutils.Convert(t.ThemaLoadingProgressTime, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddMapAllyRotation(b, fbsutils.Convert(t.MapAllyRotation, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddAniAllyBattleAttack(b, __offset_ani_ally_battle_attack)
	ConstMinigameCCGExcelAddMaxHandCount(b, fbsutils.Convert(t.MaxHandCount, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddMaxCost(b, fbsutils.Convert(t.MaxCost, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddStartCost(b, fbsutils.Convert(t.StartCost, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddTurnCost(b, fbsutils.Convert(t.TurnCost, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddStrikerSwapFrontCost(b, fbsutils.Convert(t.StrikerSwapFrontCost, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddStrikerMaxEquipCount(b, fbsutils.Convert(t.StrikerMaxEquipCount, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddStartDrawCount(b, fbsutils.Convert(t.StartDrawCount, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddCampReviveHealthRate(b, fbsutils.Convert(t.CampReviveHealthRate, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddBaseRewardRerollPoint(b, fbsutils.Convert(t.BaseRewardRerollPoint, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddSelectRewardOptionCount(b, fbsutils.Convert(t.SelectRewardOptionCount, t.FlatBuffer.TableKey))
	ConstMinigameCCGExcelAddAlternativeCardImagePath(b, __offset_alternative_card_image_path)
	return ConstMinigameCCGExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstMinigameCCGExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstMinigameCCGExcelDto) UnmarshalMessage(e *ConstMinigameCCGExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMinigameCCG"))
	}
	t.TurnDrawCount = fbsutils.Convert(e.TurnDrawCount(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetRight = fbsutils.Convert(e.ConquestMapBoundaryOffsetRight(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetTop = fbsutils.Convert(e.ConquestMapBoundaryOffsetTop(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetBottom = fbsutils.Convert(e.ConquestMapBoundaryOffsetBottom(), t.FlatBuffer.TableKey)
	t.ConquestMapCenterOffsetX = fbsutils.Convert(e.ConquestMapCenterOffsetX(), t.FlatBuffer.TableKey)
	t.ConquestMapCenterOffsetY = fbsutils.Convert(e.ConquestMapCenterOffsetY(), t.FlatBuffer.TableKey)
	t.CameraAngle = fbsutils.Convert(e.CameraAngle(), t.FlatBuffer.TableKey)
	t.CameraZoomMax = fbsutils.Convert(e.CameraZoomMax(), t.FlatBuffer.TableKey)
	t.CameraZoomMin = fbsutils.Convert(e.CameraZoomMin(), t.FlatBuffer.TableKey)
	t.CameraZoomDefault = fbsutils.Convert(e.CameraZoomDefault(), t.FlatBuffer.TableKey)
	t.ThemaLoadingProgressTime = fbsutils.Convert(e.ThemaLoadingProgressTime(), t.FlatBuffer.TableKey)
	t.MapAllyRotation = fbsutils.Convert(e.MapAllyRotation(), t.FlatBuffer.TableKey)
	t.AniAllyBattleAttack = fbsutils.Convert(string(e.AniAllyBattleAttack()), t.FlatBuffer.TableKey)
	t.MaxHandCount = fbsutils.Convert(e.MaxHandCount(), t.FlatBuffer.TableKey)
	t.MaxCost = fbsutils.Convert(e.MaxCost(), t.FlatBuffer.TableKey)
	t.StartCost = fbsutils.Convert(e.StartCost(), t.FlatBuffer.TableKey)
	t.TurnCost = fbsutils.Convert(e.TurnCost(), t.FlatBuffer.TableKey)
	t.StrikerSwapFrontCost = fbsutils.Convert(e.StrikerSwapFrontCost(), t.FlatBuffer.TableKey)
	t.StrikerMaxEquipCount = fbsutils.Convert(e.StrikerMaxEquipCount(), t.FlatBuffer.TableKey)
	t.StartDrawCount = fbsutils.Convert(e.StartDrawCount(), t.FlatBuffer.TableKey)
	t.CampReviveHealthRate = fbsutils.Convert(e.CampReviveHealthRate(), t.FlatBuffer.TableKey)
	t.BaseRewardRerollPoint = fbsutils.Convert(e.BaseRewardRerollPoint(), t.FlatBuffer.TableKey)
	t.SelectRewardOptionCount = fbsutils.Convert(e.SelectRewardOptionCount(), t.FlatBuffer.TableKey)
	t.AlternativeCardImagePath = fbsutils.Convert(string(e.AlternativeCardImagePath()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstMinigameCCGExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstMinigameCCGExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstMinigameCCGExcelDto) FlatDataName() string {
	return "ConstMinigameCCGExcel"
}
