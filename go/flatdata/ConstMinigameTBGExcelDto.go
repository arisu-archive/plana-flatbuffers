// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstMinigameTBGExcelDto represents a FlatBuffers table
type ConstMinigameTBGExcelDto struct {
	fbsutils.FlatBuffer
	AniAllyBattleAttack             string  `json:"ani_ally_battle_attack"`
	AniEnemyBattleAttack            string  `json:"ani_enemy_battle_attack"`
	CameraAngle                     float32 `json:"camera_angle"`
	CameraZoomDefault               float32 `json:"camera_zoom_default"`
	CameraZoomMax                   float32 `json:"camera_zoom_max"`
	CameraZoomMin                   float32 `json:"camera_zoom_min"`
	ConquestMapBoundaryOffsetBottom float32 `json:"conquest_map_boundary_offset_bottom"`
	ConquestMapBoundaryOffsetLeft   float32 `json:"conquest_map_boundary_offset_left"`
	ConquestMapBoundaryOffsetRight  float32 `json:"conquest_map_boundary_offset_right"`
	ConquestMapBoundaryOffsetTop    float32 `json:"conquest_map_boundary_offset_top"`
	ConquestMapCenterOffsetX        float32 `json:"conquest_map_center_offset_x"`
	ConquestMapCenterOffsetY        float32 `json:"conquest_map_center_offset_y"`
	EffectAllyBattleAttack          string  `json:"effect_ally_battle_attack"`
	EffectAllyBattleDamage          string  `json:"effect_ally_battle_damage"`
	EffectEnemyBattleAttack         string  `json:"effect_enemy_battle_attack"`
	EffectEnemyBattleDamage         string  `json:"effect_enemy_battle_damage"`
	EncounterAllyRotation           float32 `json:"encounter_ally_rotation"`
	EncounterEnemyRotation          float32 `json:"encounter_enemy_rotation"`
	EncounterRewardReceiveIndex     int32   `json:"encounter_reward_receive_index"`
	MapAllyRotation                 float32 `json:"map_ally_rotation"`
	ThemaLoadingProgressTime        float32 `json:"thema_loading_progress_time"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstMinigameTBGExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMinigameTBG"))
	}
	ConstMinigameTBGExcelStart(b)
	ConstMinigameTBGExcelAddAniAllyBattleAttack(b, b.CreateString(fbsutils.Convert(t.AniAllyBattleAttack, t.FlatBuffer.TableKey)))
	ConstMinigameTBGExcelAddAniEnemyBattleAttack(b, b.CreateString(fbsutils.Convert(t.AniEnemyBattleAttack, t.FlatBuffer.TableKey)))
	ConstMinigameTBGExcelAddCameraAngle(b, fbsutils.Convert(t.CameraAngle, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddCameraZoomDefault(b, fbsutils.Convert(t.CameraZoomDefault, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddCameraZoomMax(b, fbsutils.Convert(t.CameraZoomMax, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddCameraZoomMin(b, fbsutils.Convert(t.CameraZoomMin, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddConquestMapBoundaryOffsetBottom(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetBottom, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddConquestMapBoundaryOffsetLeft(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetLeft, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddConquestMapBoundaryOffsetRight(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetRight, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddConquestMapBoundaryOffsetTop(b, fbsutils.Convert(t.ConquestMapBoundaryOffsetTop, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddConquestMapCenterOffsetX(b, fbsutils.Convert(t.ConquestMapCenterOffsetX, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddConquestMapCenterOffsetY(b, fbsutils.Convert(t.ConquestMapCenterOffsetY, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddEffectAllyBattleAttack(b, b.CreateString(fbsutils.Convert(t.EffectAllyBattleAttack, t.FlatBuffer.TableKey)))
	ConstMinigameTBGExcelAddEffectAllyBattleDamage(b, b.CreateString(fbsutils.Convert(t.EffectAllyBattleDamage, t.FlatBuffer.TableKey)))
	ConstMinigameTBGExcelAddEffectEnemyBattleAttack(b, b.CreateString(fbsutils.Convert(t.EffectEnemyBattleAttack, t.FlatBuffer.TableKey)))
	ConstMinigameTBGExcelAddEffectEnemyBattleDamage(b, b.CreateString(fbsutils.Convert(t.EffectEnemyBattleDamage, t.FlatBuffer.TableKey)))
	ConstMinigameTBGExcelAddEncounterAllyRotation(b, fbsutils.Convert(t.EncounterAllyRotation, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddEncounterEnemyRotation(b, fbsutils.Convert(t.EncounterEnemyRotation, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddEncounterRewardReceiveIndex(b, fbsutils.Convert(t.EncounterRewardReceiveIndex, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddMapAllyRotation(b, fbsutils.Convert(t.MapAllyRotation, t.FlatBuffer.TableKey))
	ConstMinigameTBGExcelAddThemaLoadingProgressTime(b, fbsutils.Convert(t.ThemaLoadingProgressTime, t.FlatBuffer.TableKey))
	return ConstMinigameTBGExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstMinigameTBGExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstMinigameTBGExcelDto) UnmarshalMessage(e *ConstMinigameTBGExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMinigameTBG"))
	}
	t.AniAllyBattleAttack = fbsutils.Convert(string(e.AniAllyBattleAttack()), t.FlatBuffer.TableKey)
	t.AniEnemyBattleAttack = fbsutils.Convert(string(e.AniEnemyBattleAttack()), t.FlatBuffer.TableKey)
	t.CameraAngle = fbsutils.Convert(e.CameraAngle(), t.FlatBuffer.TableKey)
	t.CameraZoomDefault = fbsutils.Convert(e.CameraZoomDefault(), t.FlatBuffer.TableKey)
	t.CameraZoomMax = fbsutils.Convert(e.CameraZoomMax(), t.FlatBuffer.TableKey)
	t.CameraZoomMin = fbsutils.Convert(e.CameraZoomMin(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetBottom = fbsutils.Convert(e.ConquestMapBoundaryOffsetBottom(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetLeft = fbsutils.Convert(e.ConquestMapBoundaryOffsetLeft(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetRight = fbsutils.Convert(e.ConquestMapBoundaryOffsetRight(), t.FlatBuffer.TableKey)
	t.ConquestMapBoundaryOffsetTop = fbsutils.Convert(e.ConquestMapBoundaryOffsetTop(), t.FlatBuffer.TableKey)
	t.ConquestMapCenterOffsetX = fbsutils.Convert(e.ConquestMapCenterOffsetX(), t.FlatBuffer.TableKey)
	t.ConquestMapCenterOffsetY = fbsutils.Convert(e.ConquestMapCenterOffsetY(), t.FlatBuffer.TableKey)
	t.EffectAllyBattleAttack = fbsutils.Convert(string(e.EffectAllyBattleAttack()), t.FlatBuffer.TableKey)
	t.EffectAllyBattleDamage = fbsutils.Convert(string(e.EffectAllyBattleDamage()), t.FlatBuffer.TableKey)
	t.EffectEnemyBattleAttack = fbsutils.Convert(string(e.EffectEnemyBattleAttack()), t.FlatBuffer.TableKey)
	t.EffectEnemyBattleDamage = fbsutils.Convert(string(e.EffectEnemyBattleDamage()), t.FlatBuffer.TableKey)
	t.EncounterAllyRotation = fbsutils.Convert(e.EncounterAllyRotation(), t.FlatBuffer.TableKey)
	t.EncounterEnemyRotation = fbsutils.Convert(e.EncounterEnemyRotation(), t.FlatBuffer.TableKey)
	t.EncounterRewardReceiveIndex = fbsutils.Convert(e.EncounterRewardReceiveIndex(), t.FlatBuffer.TableKey)
	t.MapAllyRotation = fbsutils.Convert(e.MapAllyRotation(), t.FlatBuffer.TableKey)
	t.ThemaLoadingProgressTime = fbsutils.Convert(e.ThemaLoadingProgressTime(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstMinigameTBGExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstMinigameTBGExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstMinigameTBGExcelDto) FlatDataName() string {
	return "ConstMinigameTBGExcel"
}
