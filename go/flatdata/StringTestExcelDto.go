// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// StringTestExcelDto represents a FlatBuffers table
type StringTestExcelDto struct {
	fbsutils.FlatBuffer
	String    []string `json:"string"`
	Sentence1 string   `json:"sentence1"`
	Script    string   `json:"script"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *StringTestExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("StringTest"))
	}
	StringTestExcelStart(b)
	StringTestExcelStartStringVector(b, len(t.String))
	for i := range len(t.String) {
		b.PrependUOffsetT(b.CreateString(t.String[len(t.String)-i-1]))
	}
	StringTestExcelAddString(b, b.EndVector(len(t.String)))
	StringTestExcelAddSentence1(b, b.CreateString(fbsutils.Convert(t.Sentence1, t.FlatBuffer.TableKey)))
	StringTestExcelAddScript(b, b.CreateString(fbsutils.Convert(t.Script, t.FlatBuffer.TableKey)))
	return StringTestExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *StringTestExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishStringTestExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *StringTestExcelDto) UnmarshalMessage(e *StringTestExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("StringTest"))
	}
	t.String = make([]string, e.StringLength())
	for i := range e.StringLength() {
		t.String[i] = fbsutils.Convert(string(e.String(i)), t.FlatBuffer.TableKey)
	}
	t.Sentence1 = fbsutils.Convert(string(e.Sentence1()), t.FlatBuffer.TableKey)
	t.Script = fbsutils.Convert(string(e.Script()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *StringTestExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsStringTestExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (StringTestExcelDto) FlatDataName() string {
	return "StringTestExcel"
}
