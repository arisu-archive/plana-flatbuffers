// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AcademyRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAcademyRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *AcademyRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AcademyRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAcademyRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *AcademyRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AcademyRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AcademyRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AcademyRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AcademyRewardExcel) Location() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcademyRewardExcel) ScheduleGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateScheduleGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *AcademyRewardExcel) OrderInGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateOrderInGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *AcademyRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *AcademyRewardExcel) ProgressTexture() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcademyRewardExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *AcademyRewardExcel) LocationRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateLocationRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *AcademyRewardExcel) FavorExp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateFavorExp(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *AcademyRewardExcel) SecretStoneAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateSecretStoneAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *AcademyRewardExcel) SecretStoneProb() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateSecretStoneProb(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *AcademyRewardExcel) ExtraFavorExp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateExtraFavorExp(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *AcademyRewardExcel) ExtraFavorExpProb() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateExtraFavorExpProb(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *AcademyRewardExcel) ExtraRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *AcademyRewardExcel) ExtraRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateExtraRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *AcademyRewardExcel) ExtraRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AcademyRewardExcel) ExtraRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateExtraRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *AcademyRewardExcel) ExtraRewardAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AcademyRewardExcel) ExtraRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateExtraRewardAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *AcademyRewardExcel) ExtraRewardProb(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AcademyRewardExcel) ExtraRewardProbLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateExtraRewardProb(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *AcademyRewardExcel) IsExtraRewardDisplayed(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *AcademyRewardExcel) IsExtraRewardDisplayedLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateIsExtraRewardDisplayed(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *AcademyRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *AcademyRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *AcademyRewardExcel) RewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AcademyRewardExcel) RewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *AcademyRewardExcel) RewardAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AcademyRewardExcel) RewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyRewardExcel) MutateRewardAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func AcademyRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func AcademyRewardExcelAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(location), 0)
}
func AcademyRewardExcelAddScheduleGroupId(builder *flatbuffers.Builder, scheduleGroupId int64) {
	builder.PrependInt64Slot(1, scheduleGroupId, 0)
}
func AcademyRewardExcelAddOrderInGroup(builder *flatbuffers.Builder, orderInGroup int64) {
	builder.PrependInt64Slot(2, orderInGroup, 0)
}
func AcademyRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(3, id, 0)
}
func AcademyRewardExcelAddProgressTexture(builder *flatbuffers.Builder, progressTexture flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(progressTexture), 0)
}
func AcademyRewardExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(5, localizeEtcId, 0)
}
func AcademyRewardExcelAddLocationRank(builder *flatbuffers.Builder, locationRank int64) {
	builder.PrependInt64Slot(6, locationRank, 0)
}
func AcademyRewardExcelAddFavorExp(builder *flatbuffers.Builder, favorExp int64) {
	builder.PrependInt64Slot(7, favorExp, 0)
}
func AcademyRewardExcelAddSecretStoneAmount(builder *flatbuffers.Builder, secretStoneAmount int64) {
	builder.PrependInt64Slot(8, secretStoneAmount, 0)
}
func AcademyRewardExcelAddSecretStoneProb(builder *flatbuffers.Builder, secretStoneProb int64) {
	builder.PrependInt64Slot(9, secretStoneProb, 0)
}
func AcademyRewardExcelAddExtraFavorExp(builder *flatbuffers.Builder, extraFavorExp int64) {
	builder.PrependInt64Slot(10, extraFavorExp, 0)
}
func AcademyRewardExcelAddExtraFavorExpProb(builder *flatbuffers.Builder, extraFavorExpProb int64) {
	builder.PrependInt64Slot(11, extraFavorExpProb, 0)
}
func AcademyRewardExcelAddExtraRewardParcelType(builder *flatbuffers.Builder, extraRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(extraRewardParcelType), 0)
}
func AcademyRewardExcelStartExtraRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AcademyRewardExcelAddExtraRewardParcelId(builder *flatbuffers.Builder, extraRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(extraRewardParcelId), 0)
}
func AcademyRewardExcelStartExtraRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AcademyRewardExcelAddExtraRewardAmount(builder *flatbuffers.Builder, extraRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(extraRewardAmount), 0)
}
func AcademyRewardExcelStartExtraRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AcademyRewardExcelAddExtraRewardProb(builder *flatbuffers.Builder, extraRewardProb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(extraRewardProb), 0)
}
func AcademyRewardExcelStartExtraRewardProbVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AcademyRewardExcelAddIsExtraRewardDisplayed(builder *flatbuffers.Builder, isExtraRewardDisplayed flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(isExtraRewardDisplayed), 0)
}
func AcademyRewardExcelStartIsExtraRewardDisplayedVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func AcademyRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func AcademyRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AcademyRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(rewardParcelId), 0)
}
func AcademyRewardExcelStartRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AcademyRewardExcelAddRewardAmount(builder *flatbuffers.Builder, rewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(rewardAmount), 0)
}
func AcademyRewardExcelStartRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AcademyRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
