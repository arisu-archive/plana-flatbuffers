// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GroundVector3Dto represents a FlatBuffers table
type GroundVector3Dto struct {
	fbsutils.FlatBuffer
	X float32 `json:"x"`
	Y float32 `json:"y"`
	Z float32 `json:"z"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GroundVector3Dto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundVector3"))
	}
	GroundVector3Start(b)
	GroundVector3AddX(b, fbsutils.Convert(t.X, t.FlatBuffer.TableKey))
	GroundVector3AddY(b, fbsutils.Convert(t.Y, t.FlatBuffer.TableKey))
	GroundVector3AddZ(b, fbsutils.Convert(t.Z, t.FlatBuffer.TableKey))
	return GroundVector3End(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GroundVector3Dto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GroundVector3Dto) UnmarshalMessage(e *GroundVector3) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundVector3"))
	}
	t.X = fbsutils.Convert(e.X(), t.FlatBuffer.TableKey)
	t.Y = fbsutils.Convert(e.Y(), t.FlatBuffer.TableKey)
	t.Z = fbsutils.Convert(e.Z(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GroundVector3Dto) Unmarshal(data []byte) error {
	root := GetRootAsGroundVector3(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GroundVector3Dto) FlatDataName() string {
	return "GroundVector3"
}
