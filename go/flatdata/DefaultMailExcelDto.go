// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// DefaultMailExcelDto represents a FlatBuffers table
type DefaultMailExcelDto struct {
	fbsutils.FlatBuffer
	Id                 int64        `json:"id"`
	LocalizeCodeId     uint32       `json:"localize_code_id"`
	MailType           MailType     `json:"mail_type"`
	MailSendPeriodFrom string       `json:"mail_send_period_from"`
	MailSendPeriodTo   string       `json:"mail_send_period_to"`
	RewardParcelType   []ParcelType `json:"reward_parcel_type"`
	RewardParcelId     []int64      `json:"reward_parcel_id"`
	RewardParcelAmount []int64      `json:"reward_parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *DefaultMailExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("DefaultMail"))
	}
	DefaultMailExcelStart(b)
	DefaultMailExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	DefaultMailExcelAddLocalizeCodeId(b, fbsutils.Convert(t.LocalizeCodeId, t.FlatBuffer.TableKey))
	DefaultMailExcelAddMailType(b, fbsutils.Convert(t.MailType, t.FlatBuffer.TableKey))
	DefaultMailExcelAddMailSendPeriodFrom(b, b.CreateString(fbsutils.Convert(t.MailSendPeriodFrom, t.FlatBuffer.TableKey)))
	DefaultMailExcelAddMailSendPeriodTo(b, b.CreateString(fbsutils.Convert(t.MailSendPeriodTo, t.FlatBuffer.TableKey)))
	DefaultMailExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	DefaultMailExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	DefaultMailExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	DefaultMailExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	DefaultMailExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	DefaultMailExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	return DefaultMailExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *DefaultMailExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishDefaultMailExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *DefaultMailExcelDto) UnmarshalMessage(e *DefaultMailExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("DefaultMail"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.LocalizeCodeId = fbsutils.Convert(e.LocalizeCodeId(), t.FlatBuffer.TableKey)
	t.MailType = MailType(fbsutils.Convert(int32(e.MailType()), t.FlatBuffer.TableKey))
	t.MailSendPeriodFrom = fbsutils.Convert(string(e.MailSendPeriodFrom()), t.FlatBuffer.TableKey)
	t.MailSendPeriodTo = fbsutils.Convert(string(e.MailSendPeriodTo()), t.FlatBuffer.TableKey)
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *DefaultMailExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsDefaultMailExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (DefaultMailExcelDto) FlatDataName() string {
	return "DefaultMailExcel"
}
