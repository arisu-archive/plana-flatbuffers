// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentCharacterBonusExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentCharacterBonusExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentCharacterBonusExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentCharacterBonusExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentCharacterBonusExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentCharacterBonusExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentCharacterBonusExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentCharacterBonusExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentCharacterBonusExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentCharacterBonusExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCharacterBonusExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentCharacterBonusExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCharacterBonusExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentCharacterBonusExcel) EventContentItemType(j int) EventContentItemType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return EventContentItemType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentCharacterBonusExcel) EventContentItemTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentCharacterBonusExcel) MutateEventContentItemType(j int, n EventContentItemType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentCharacterBonusExcel) BonusPercentage(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentCharacterBonusExcel) BonusPercentageLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentCharacterBonusExcel) MutateBonusPercentage(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func EventContentCharacterBonusExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventContentCharacterBonusExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentCharacterBonusExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(1, characterId, 0)
}
func EventContentCharacterBonusExcelAddEventContentItemType(builder *flatbuffers.Builder, eventContentItemType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(eventContentItemType), 0)
}
func EventContentCharacterBonusExcelStartEventContentItemTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentCharacterBonusExcelAddBonusPercentage(builder *flatbuffers.Builder, bonusPercentage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bonusPercentage), 0)
}
func EventContentCharacterBonusExcelStartBonusPercentageVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentCharacterBonusExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
