// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MissionExcelDto represents a FlatBuffers table
type MissionExcelDto struct {
	fbsutils.FlatBuffer
	Id                            int64                            `json:"id"`
	Category                      MissionCategory                  `json:"category"`
	Description                   uint32                           `json:"description"`
	ResetType                     MissionResetType                 `json:"reset_type"`
	ToastDisplayType              MissionToastDisplayConditionType `json:"toast_display_type"`
	ToastImagePath                string                           `json:"toast_image_path"`
	ViewFlag                      bool                             `json:"view_flag"`
	Limit                         bool                             `json:"limit"`
	StartDate                     string                           `json:"start_date"`
	EndDate                       string                           `json:"end_date"`
	EndDay                        int64                            `json:"end_day"`
	StartableEndDate              string                           `json:"startable_end_date"`
	DateAutoRefer                 ContentType                      `json:"date_auto_refer"`
	DisplayOrder                  int64                            `json:"display_order"`
	PreMissionId                  []int64                          `json:"pre_mission_id"`
	AccountType                   AccountState                     `json:"account_type"`
	AccountLevel                  int64                            `json:"account_level"`
	ContentTags                   []SuddenMissionContentType       `json:"content_tags"`
	ShortcutUi                    []string                         `json:"shortcut_ui"`
	ChallengeStageShortcut        int64                            `json:"challenge_stage_shortcut"`
	CompleteConditionType         MissionCompleteConditionType     `json:"complete_condition_type"`
	CompleteConditionCount        int64                            `json:"complete_condition_count"`
	CompleteConditionParameter    []int64                          `json:"complete_condition_parameter"`
	CompleteConditionParameterTag []Tag                            `json:"complete_condition_parameter_tag"`
	RewardIcon                    string                           `json:"reward_icon"`
	MissionRewardParcelType       []ParcelType                     `json:"mission_reward_parcel_type"`
	MissionRewardParcelId         []int64                          `json:"mission_reward_parcel_id"`
	MissionRewardAmount           []int32                          `json:"mission_reward_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MissionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Mission"))
	}
	__offset_toast_image_path := b.CreateString(fbsutils.Convert(t.ToastImagePath, t.FlatBuffer.TableKey))
	__offset_start_date := b.CreateString(fbsutils.Convert(t.StartDate, t.FlatBuffer.TableKey))
	__offset_end_date := b.CreateString(fbsutils.Convert(t.EndDate, t.FlatBuffer.TableKey))
	__offset_startable_end_date := b.CreateString(fbsutils.Convert(t.StartableEndDate, t.FlatBuffer.TableKey))
	var __offset_shortcut_ui flatbuffers.UOffsetT
	__stringOffsets_shortcut_ui := make([]flatbuffers.UOffsetT, len(t.ShortcutUi))
	for i := range len(t.ShortcutUi) {
		__stringOffsets_shortcut_ui[i] = b.CreateString(fbsutils.Convert(t.ShortcutUi[i], t.FlatBuffer.TableKey))
	}
	MissionExcelStartShortcutUiVector(b, len(t.ShortcutUi))
	for i := range len(t.ShortcutUi) {
		b.PrependUOffsetT(__stringOffsets_shortcut_ui[len(t.ShortcutUi)-i-1])
	}
	__offset_shortcut_ui = b.EndVector(len(t.ShortcutUi))
	__offset_reward_icon := b.CreateString(fbsutils.Convert(t.RewardIcon, t.FlatBuffer.TableKey))
	MissionExcelStart(b)
	MissionExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	MissionExcelAddCategory(b, fbsutils.Convert(t.Category, t.FlatBuffer.TableKey))
	MissionExcelAddDescription(b, fbsutils.Convert(t.Description, t.FlatBuffer.TableKey))
	MissionExcelAddResetType(b, fbsutils.Convert(t.ResetType, t.FlatBuffer.TableKey))
	MissionExcelAddToastDisplayType(b, fbsutils.Convert(t.ToastDisplayType, t.FlatBuffer.TableKey))
	MissionExcelAddToastImagePath(b, __offset_toast_image_path)
	MissionExcelAddViewFlag(b, t.ViewFlag)
	MissionExcelAddLimit(b, t.Limit)
	MissionExcelAddStartDate(b, __offset_start_date)
	MissionExcelAddEndDate(b, __offset_end_date)
	MissionExcelAddEndDay(b, fbsutils.Convert(t.EndDay, t.FlatBuffer.TableKey))
	MissionExcelAddStartableEndDate(b, __offset_startable_end_date)
	MissionExcelAddDateAutoRefer(b, fbsutils.Convert(t.DateAutoRefer, t.FlatBuffer.TableKey))
	MissionExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	MissionExcelStartPreMissionIdVector(b, len(t.PreMissionId))
	for i := range len(t.PreMissionId) {
		b.PrependInt64(fbsutils.Convert(t.PreMissionId[len(t.PreMissionId)-i-1], t.FlatBuffer.TableKey))
	}
	MissionExcelAddPreMissionId(b, b.EndVector(len(t.PreMissionId)))
	MissionExcelAddAccountType(b, fbsutils.Convert(t.AccountType, t.FlatBuffer.TableKey))
	MissionExcelAddAccountLevel(b, fbsutils.Convert(t.AccountLevel, t.FlatBuffer.TableKey))
	MissionExcelStartContentTagsVector(b, len(t.ContentTags))
	for i := range len(t.ContentTags) {
		b.PrependInt32(fbsutils.Convert(int32(t.ContentTags[len(t.ContentTags)-i-1]), t.FlatBuffer.TableKey))
	}
	MissionExcelAddContentTags(b, b.EndVector(len(t.ContentTags)))
	MissionExcelAddShortcutUi(b, __offset_shortcut_ui)
	MissionExcelAddChallengeStageShortcut(b, fbsutils.Convert(t.ChallengeStageShortcut, t.FlatBuffer.TableKey))
	MissionExcelAddCompleteConditionType(b, fbsutils.Convert(t.CompleteConditionType, t.FlatBuffer.TableKey))
	MissionExcelAddCompleteConditionCount(b, fbsutils.Convert(t.CompleteConditionCount, t.FlatBuffer.TableKey))
	MissionExcelStartCompleteConditionParameterVector(b, len(t.CompleteConditionParameter))
	for i := range len(t.CompleteConditionParameter) {
		b.PrependInt64(fbsutils.Convert(t.CompleteConditionParameter[len(t.CompleteConditionParameter)-i-1], t.FlatBuffer.TableKey))
	}
	MissionExcelAddCompleteConditionParameter(b, b.EndVector(len(t.CompleteConditionParameter)))
	MissionExcelStartCompleteConditionParameterTagVector(b, len(t.CompleteConditionParameterTag))
	for i := range len(t.CompleteConditionParameterTag) {
		b.PrependInt32(fbsutils.Convert(int32(t.CompleteConditionParameterTag[len(t.CompleteConditionParameterTag)-i-1]), t.FlatBuffer.TableKey))
	}
	MissionExcelAddCompleteConditionParameterTag(b, b.EndVector(len(t.CompleteConditionParameterTag)))
	MissionExcelAddRewardIcon(b, __offset_reward_icon)
	MissionExcelStartMissionRewardParcelTypeVector(b, len(t.MissionRewardParcelType))
	for i := range len(t.MissionRewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.MissionRewardParcelType[len(t.MissionRewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	MissionExcelAddMissionRewardParcelType(b, b.EndVector(len(t.MissionRewardParcelType)))
	MissionExcelStartMissionRewardParcelIdVector(b, len(t.MissionRewardParcelId))
	for i := range len(t.MissionRewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.MissionRewardParcelId[len(t.MissionRewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	MissionExcelAddMissionRewardParcelId(b, b.EndVector(len(t.MissionRewardParcelId)))
	MissionExcelStartMissionRewardAmountVector(b, len(t.MissionRewardAmount))
	for i := range len(t.MissionRewardAmount) {
		b.PrependInt32(fbsutils.Convert(t.MissionRewardAmount[len(t.MissionRewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	MissionExcelAddMissionRewardAmount(b, b.EndVector(len(t.MissionRewardAmount)))
	return MissionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MissionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MissionExcelDto) UnmarshalMessage(e *MissionExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Mission"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Category = MissionCategory(fbsutils.Convert(int32(e.Category()), t.FlatBuffer.TableKey))
	t.Description = fbsutils.Convert(e.Description(), t.FlatBuffer.TableKey)
	t.ResetType = MissionResetType(fbsutils.Convert(int32(e.ResetType()), t.FlatBuffer.TableKey))
	t.ToastDisplayType = MissionToastDisplayConditionType(fbsutils.Convert(int32(e.ToastDisplayType()), t.FlatBuffer.TableKey))
	t.ToastImagePath = fbsutils.Convert(string(e.ToastImagePath()), t.FlatBuffer.TableKey)
	t.ViewFlag = e.ViewFlag()
	t.Limit = e.Limit()
	t.StartDate = fbsutils.Convert(string(e.StartDate()), t.FlatBuffer.TableKey)
	t.EndDate = fbsutils.Convert(string(e.EndDate()), t.FlatBuffer.TableKey)
	t.EndDay = fbsutils.Convert(e.EndDay(), t.FlatBuffer.TableKey)
	t.StartableEndDate = fbsutils.Convert(string(e.StartableEndDate()), t.FlatBuffer.TableKey)
	t.DateAutoRefer = ContentType(fbsutils.Convert(int32(e.DateAutoRefer()), t.FlatBuffer.TableKey))
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.PreMissionId = make([]int64, e.PreMissionIdLength())
	for i := range e.PreMissionIdLength() {
		t.PreMissionId[i] = fbsutils.Convert(e.PreMissionId(i), t.FlatBuffer.TableKey)
	}
	t.AccountType = AccountState(fbsutils.Convert(int32(e.AccountType()), t.FlatBuffer.TableKey))
	t.AccountLevel = fbsutils.Convert(e.AccountLevel(), t.FlatBuffer.TableKey)
	t.ContentTags = make([]SuddenMissionContentType, e.ContentTagsLength())
	for i := range e.ContentTagsLength() {
		t.ContentTags[i] = SuddenMissionContentType(fbsutils.Convert(int32(e.ContentTags(i)), t.FlatBuffer.TableKey))
	}
	t.ShortcutUi = make([]string, e.ShortcutUiLength())
	for i := range e.ShortcutUiLength() {
		t.ShortcutUi[i] = fbsutils.Convert(string(e.ShortcutUi(i)), t.FlatBuffer.TableKey)
	}
	t.ChallengeStageShortcut = fbsutils.Convert(e.ChallengeStageShortcut(), t.FlatBuffer.TableKey)
	t.CompleteConditionType = MissionCompleteConditionType(fbsutils.Convert(int32(e.CompleteConditionType()), t.FlatBuffer.TableKey))
	t.CompleteConditionCount = fbsutils.Convert(e.CompleteConditionCount(), t.FlatBuffer.TableKey)
	t.CompleteConditionParameter = make([]int64, e.CompleteConditionParameterLength())
	for i := range e.CompleteConditionParameterLength() {
		t.CompleteConditionParameter[i] = fbsutils.Convert(e.CompleteConditionParameter(i), t.FlatBuffer.TableKey)
	}
	t.CompleteConditionParameterTag = make([]Tag, e.CompleteConditionParameterTagLength())
	for i := range e.CompleteConditionParameterTagLength() {
		t.CompleteConditionParameterTag[i] = Tag(fbsutils.Convert(int32(e.CompleteConditionParameterTag(i)), t.FlatBuffer.TableKey))
	}
	t.RewardIcon = fbsutils.Convert(string(e.RewardIcon()), t.FlatBuffer.TableKey)
	t.MissionRewardParcelType = make([]ParcelType, e.MissionRewardParcelTypeLength())
	for i := range e.MissionRewardParcelTypeLength() {
		t.MissionRewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.MissionRewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.MissionRewardParcelId = make([]int64, e.MissionRewardParcelIdLength())
	for i := range e.MissionRewardParcelIdLength() {
		t.MissionRewardParcelId[i] = fbsutils.Convert(e.MissionRewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.MissionRewardAmount = make([]int32, e.MissionRewardAmountLength())
	for i := range e.MissionRewardAmountLength() {
		t.MissionRewardAmount[i] = fbsutils.Convert(e.MissionRewardAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MissionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMissionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MissionExcelDto) FlatDataName() string {
	return "MissionExcel"
}
