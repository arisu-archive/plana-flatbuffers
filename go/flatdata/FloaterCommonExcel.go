// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FloaterCommonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFloaterCommonExcel(buf []byte, offset flatbuffers.UOffsetT) *FloaterCommonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FloaterCommonExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishFloaterCommonExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFloaterCommonExcel(buf []byte, offset flatbuffers.UOffsetT) *FloaterCommonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FloaterCommonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFloaterCommonExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FloaterCommonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FloaterCommonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FloaterCommonExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloaterCommonExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FloaterCommonExcel) TacticEntityType() TacticEntityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return TacticEntityType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FloaterCommonExcel) MutateTacticEntityType(n TacticEntityType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *FloaterCommonExcel) FloaterOffsetPosX() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloaterCommonExcel) MutateFloaterOffsetPosX(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *FloaterCommonExcel) FloaterOffsetPosY() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloaterCommonExcel) MutateFloaterOffsetPosY(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *FloaterCommonExcel) FloaterRandomPosRangeX() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloaterCommonExcel) MutateFloaterRandomPosRangeX(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *FloaterCommonExcel) FloaterRandomPosRangeY() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloaterCommonExcel) MutateFloaterRandomPosRangeY(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func FloaterCommonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func FloaterCommonExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func FloaterCommonExcelAddTacticEntityType(builder *flatbuffers.Builder, tacticEntityType TacticEntityType) {
	builder.PrependInt32Slot(1, int32(tacticEntityType), 0)
}
func FloaterCommonExcelAddFloaterOffsetPosX(builder *flatbuffers.Builder, floaterOffsetPosX int32) {
	builder.PrependInt32Slot(2, floaterOffsetPosX, 0)
}
func FloaterCommonExcelAddFloaterOffsetPosY(builder *flatbuffers.Builder, floaterOffsetPosY int32) {
	builder.PrependInt32Slot(3, floaterOffsetPosY, 0)
}
func FloaterCommonExcelAddFloaterRandomPosRangeX(builder *flatbuffers.Builder, floaterRandomPosRangeX int32) {
	builder.PrependInt32Slot(4, floaterRandomPosRangeX, 0)
}
func FloaterCommonExcelAddFloaterRandomPosRangeY(builder *flatbuffers.Builder, floaterRandomPosRangeY int32) {
	builder.PrependInt32Slot(5, floaterRandomPosRangeY, 0)
}
func FloaterCommonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
