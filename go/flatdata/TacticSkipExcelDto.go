// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TacticSkipExcelDto represents a FlatBuffers table
type TacticSkipExcelDto struct {
	fbsutils.FlatBuffer
	LevelDiff int32 `json:"level_diff"`
	HpResult  int64 `json:"hp_result"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TacticSkipExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TacticSkip"))
	}
	TacticSkipExcelStart(b)
	TacticSkipExcelAddLevelDiff(b, fbsutils.Convert(t.LevelDiff, t.FlatBuffer.TableKey))
	TacticSkipExcelAddHpResult(b, fbsutils.Convert(t.HpResult, t.FlatBuffer.TableKey))
	return TacticSkipExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TacticSkipExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishTacticSkipExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TacticSkipExcelDto) UnmarshalMessage(e *TacticSkipExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TacticSkip"))
	}
	t.LevelDiff = fbsutils.Convert(e.LevelDiff(), t.FlatBuffer.TableKey)
	t.HpResult = fbsutils.Convert(e.HpResult(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TacticSkipExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTacticSkipExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TacticSkipExcelDto) FlatDataName() string {
	return "TacticSkipExcel"
}
