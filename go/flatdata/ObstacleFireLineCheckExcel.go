// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObstacleFireLineCheckExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsObstacleFireLineCheckExcel(buf []byte, offset flatbuffers.UOffsetT) *ObstacleFireLineCheckExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObstacleFireLineCheckExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishObstacleFireLineCheckExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsObstacleFireLineCheckExcel(buf []byte, offset flatbuffers.UOffsetT) *ObstacleFireLineCheckExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObstacleFireLineCheckExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedObstacleFireLineCheckExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ObstacleFireLineCheckExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObstacleFireLineCheckExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ObstacleFireLineCheckExcel) MyObstacleFireLineCheck() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ObstacleFireLineCheckExcel) MutateMyObstacleFireLineCheck(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *ObstacleFireLineCheckExcel) AllyObstacleFireLineCheck() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ObstacleFireLineCheckExcel) MutateAllyObstacleFireLineCheck(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *ObstacleFireLineCheckExcel) EnemyObstacleFireLineCheck() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ObstacleFireLineCheckExcel) MutateEnemyObstacleFireLineCheck(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ObstacleFireLineCheckExcel) EmptyObstacleFireLineCheck() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ObstacleFireLineCheckExcel) MutateEmptyObstacleFireLineCheck(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func ObstacleFireLineCheckExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ObstacleFireLineCheckExcelAddMyObstacleFireLineCheck(builder *flatbuffers.Builder, myObstacleFireLineCheck bool) {
	builder.PrependBoolSlot(0, myObstacleFireLineCheck, false)
}
func ObstacleFireLineCheckExcelAddAllyObstacleFireLineCheck(builder *flatbuffers.Builder, allyObstacleFireLineCheck bool) {
	builder.PrependBoolSlot(1, allyObstacleFireLineCheck, false)
}
func ObstacleFireLineCheckExcelAddEnemyObstacleFireLineCheck(builder *flatbuffers.Builder, enemyObstacleFireLineCheck bool) {
	builder.PrependBoolSlot(2, enemyObstacleFireLineCheck, false)
}
func ObstacleFireLineCheckExcelAddEmptyObstacleFireLineCheck(builder *flatbuffers.Builder, emptyObstacleFireLineCheck bool) {
	builder.PrependBoolSlot(3, emptyObstacleFireLineCheck, false)
}
func ObstacleFireLineCheckExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
