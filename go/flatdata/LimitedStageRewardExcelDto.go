// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// LimitedStageRewardExcelDto represents a FlatBuffers table
type LimitedStageRewardExcelDto struct {
	fbsutils.FlatBuffer
	GroupId          int64      `json:"group_id"`
	RewardTag        RewardTag  `json:"reward_tag"`
	RewardProb       int32      `json:"reward_prob"`
	RewardParcelType ParcelType `json:"reward_parcel_type"`
	RewardId         int64      `json:"reward_id"`
	RewardAmount     int32      `json:"reward_amount"`
	IsDisplayed      bool       `json:"is_displayed"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *LimitedStageRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("LimitedStageReward"))
	}
	LimitedStageRewardExcelStart(b)
	LimitedStageRewardExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	LimitedStageRewardExcelAddRewardTag(b, fbsutils.Convert(t.RewardTag, t.FlatBuffer.TableKey))
	LimitedStageRewardExcelAddRewardProb(b, fbsutils.Convert(t.RewardProb, t.FlatBuffer.TableKey))
	LimitedStageRewardExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	LimitedStageRewardExcelAddRewardId(b, fbsutils.Convert(t.RewardId, t.FlatBuffer.TableKey))
	LimitedStageRewardExcelAddRewardAmount(b, fbsutils.Convert(t.RewardAmount, t.FlatBuffer.TableKey))
	LimitedStageRewardExcelAddIsDisplayed(b, t.IsDisplayed)
	return LimitedStageRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *LimitedStageRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *LimitedStageRewardExcelDto) UnmarshalMessage(e *LimitedStageRewardExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("LimitedStageReward"))
	}
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.RewardTag = RewardTag(fbsutils.Convert(int32(e.RewardTag()), t.FlatBuffer.TableKey))
	t.RewardProb = fbsutils.Convert(e.RewardProb(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	t.RewardId = fbsutils.Convert(e.RewardId(), t.FlatBuffer.TableKey)
	t.RewardAmount = fbsutils.Convert(e.RewardAmount(), t.FlatBuffer.TableKey)
	t.IsDisplayed = e.IsDisplayed()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *LimitedStageRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsLimitedStageRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (LimitedStageRewardExcelDto) FlatDataName() string {
	return "LimitedStageRewardExcel"
}
