// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GachaCraftNodeExcelDto represents a FlatBuffers table
type GachaCraftNodeExcelDto struct {
	fbsutils.FlatBuffer
	Id                         int64  `json:"id"`
	Tier                       int64  `json:"tier"`
	QuickCraftNodeDisplayOrder int32  `json:"quick_craft_node_display_order"`
	NodeQuality                int64  `json:"node_quality"`
	Icon                       string `json:"icon"`
	LocalizeKey                uint32 `json:"localize_key"`
	Property                   int64  `json:"property"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GachaCraftNodeExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GachaCraftNode"))
	}
	GachaCraftNodeExcelStart(b)
	GachaCraftNodeExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	GachaCraftNodeExcelAddTier(b, fbsutils.Convert(t.Tier, t.FlatBuffer.TableKey))
	GachaCraftNodeExcelAddQuickCraftNodeDisplayOrder(b, fbsutils.Convert(t.QuickCraftNodeDisplayOrder, t.FlatBuffer.TableKey))
	GachaCraftNodeExcelAddNodeQuality(b, fbsutils.Convert(t.NodeQuality, t.FlatBuffer.TableKey))
	GachaCraftNodeExcelAddIcon(b, b.CreateString(fbsutils.Convert(t.Icon, t.FlatBuffer.TableKey)))
	GachaCraftNodeExcelAddLocalizeKey(b, fbsutils.Convert(t.LocalizeKey, t.FlatBuffer.TableKey))
	GachaCraftNodeExcelAddProperty(b, fbsutils.Convert(t.Property, t.FlatBuffer.TableKey))
	return GachaCraftNodeExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GachaCraftNodeExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GachaCraftNodeExcelDto) UnmarshalMessage(e *GachaCraftNodeExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GachaCraftNode"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Tier = fbsutils.Convert(e.Tier(), t.FlatBuffer.TableKey)
	t.QuickCraftNodeDisplayOrder = fbsutils.Convert(e.QuickCraftNodeDisplayOrder(), t.FlatBuffer.TableKey)
	t.NodeQuality = fbsutils.Convert(e.NodeQuality(), t.FlatBuffer.TableKey)
	t.Icon = fbsutils.Convert(string(e.Icon()), t.FlatBuffer.TableKey)
	t.LocalizeKey = fbsutils.Convert(e.LocalizeKey(), t.FlatBuffer.TableKey)
	t.Property = fbsutils.Convert(e.Property(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GachaCraftNodeExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGachaCraftNodeExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GachaCraftNodeExcelDto) FlatDataName() string {
	return "GachaCraftNodeExcel"
}
