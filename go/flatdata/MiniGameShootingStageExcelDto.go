// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameShootingStageExcelDto represents a FlatBuffers table
type MiniGameShootingStageExcelDto struct {
	fbsutils.FlatBuffer
	UniqueId                  int64      `json:"unique_id"`
	BgmId                     []int64    `json:"bgm_id"`
	CostGoodsId               int64      `json:"cost_goods_id"`
	Difficulty                Difficulty `json:"difficulty"`
	DesignLevel               string     `json:"design_level"`
	ArtLevel                  string     `json:"art_level"`
	StartBattleDuration       int64      `json:"start_battle_duration"`
	DefaultBattleDuration     int64      `json:"default_battle_duration"`
	DefaultLogicEffect        string     `json:"default_logic_effect"`
	CameraSizeRate            float32    `json:"camera_size_rate"`
	EventContentStageRewardId int64      `json:"event_content_stage_reward_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameShootingStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MiniGameShootingStage"))
	}
	__offset_design_level := b.CreateString(fbsutils.Convert(t.DesignLevel, t.FlatBuffer.TableKey))
	__offset_art_level := b.CreateString(fbsutils.Convert(t.ArtLevel, t.FlatBuffer.TableKey))
	__offset_default_logic_effect := b.CreateString(fbsutils.Convert(t.DefaultLogicEffect, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelStart(b)
	MiniGameShootingStageExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelStartBgmIdVector(b, len(t.BgmId))
	for i := range len(t.BgmId) {
		b.PrependInt64(fbsutils.Convert(t.BgmId[len(t.BgmId)-i-1], t.FlatBuffer.TableKey))
	}
	MiniGameShootingStageExcelAddBgmId(b, b.EndVector(len(t.BgmId)))
	MiniGameShootingStageExcelAddCostGoodsId(b, fbsutils.Convert(t.CostGoodsId, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelAddDifficulty(b, fbsutils.Convert(t.Difficulty, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelAddDesignLevel(b, __offset_design_level)
	MiniGameShootingStageExcelAddArtLevel(b, __offset_art_level)
	MiniGameShootingStageExcelAddStartBattleDuration(b, fbsutils.Convert(t.StartBattleDuration, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelAddDefaultBattleDuration(b, fbsutils.Convert(t.DefaultBattleDuration, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelAddDefaultLogicEffect(b, __offset_default_logic_effect)
	MiniGameShootingStageExcelAddCameraSizeRate(b, fbsutils.Convert(t.CameraSizeRate, t.FlatBuffer.TableKey))
	MiniGameShootingStageExcelAddEventContentStageRewardId(b, fbsutils.Convert(t.EventContentStageRewardId, t.FlatBuffer.TableKey))
	return MiniGameShootingStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameShootingStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameShootingStageExcelDto) UnmarshalMessage(e *MiniGameShootingStageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MiniGameShootingStage"))
	}
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.BgmId = make([]int64, e.BgmIdLength())
	for i := range e.BgmIdLength() {
		t.BgmId[i] = fbsutils.Convert(e.BgmId(i), t.FlatBuffer.TableKey)
	}
	t.CostGoodsId = fbsutils.Convert(e.CostGoodsId(), t.FlatBuffer.TableKey)
	t.Difficulty = Difficulty(fbsutils.Convert(int32(e.Difficulty()), t.FlatBuffer.TableKey))
	t.DesignLevel = fbsutils.Convert(string(e.DesignLevel()), t.FlatBuffer.TableKey)
	t.ArtLevel = fbsutils.Convert(string(e.ArtLevel()), t.FlatBuffer.TableKey)
	t.StartBattleDuration = fbsutils.Convert(e.StartBattleDuration(), t.FlatBuffer.TableKey)
	t.DefaultBattleDuration = fbsutils.Convert(e.DefaultBattleDuration(), t.FlatBuffer.TableKey)
	t.DefaultLogicEffect = fbsutils.Convert(string(e.DefaultLogicEffect()), t.FlatBuffer.TableKey)
	t.CameraSizeRate = fbsutils.Convert(e.CameraSizeRate(), t.FlatBuffer.TableKey)
	t.EventContentStageRewardId = fbsutils.Convert(e.EventContentStageRewardId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameShootingStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameShootingStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameShootingStageExcelDto) FlatDataName() string {
	return "MiniGameShootingStageExcel"
}
