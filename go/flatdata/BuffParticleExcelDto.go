// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BuffParticleExcelDto represents a FlatBuffers table
type BuffParticleExcelDto struct {
	fbsutils.FlatBuffer
	ResourcePath string `json:"resource_path"`
	BuffName     string `json:"buff_name"`
	BuffType     string `json:"buff_type"`
	UniqueName   string `json:"unique_name"`
	UniqueId     int64  `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BuffParticleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BuffParticle"))
	}
	BuffParticleExcelStart(b)
	BuffParticleExcelAddResourcePath(b, b.CreateString(fbsutils.Convert(t.ResourcePath, t.FlatBuffer.TableKey)))
	BuffParticleExcelAddBuffName(b, b.CreateString(fbsutils.Convert(t.BuffName, t.FlatBuffer.TableKey)))
	BuffParticleExcelAddBuffType(b, b.CreateString(fbsutils.Convert(t.BuffType, t.FlatBuffer.TableKey)))
	BuffParticleExcelAddUniqueName(b, b.CreateString(fbsutils.Convert(t.UniqueName, t.FlatBuffer.TableKey)))
	BuffParticleExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return BuffParticleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BuffParticleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BuffParticleExcelDto) UnmarshalMessage(e *BuffParticleExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BuffParticle"))
	}
	t.ResourcePath = fbsutils.Convert(string(e.ResourcePath()), t.FlatBuffer.TableKey)
	t.BuffName = fbsutils.Convert(string(e.BuffName()), t.FlatBuffer.TableKey)
	t.BuffType = fbsutils.Convert(string(e.BuffType()), t.FlatBuffer.TableKey)
	t.UniqueName = fbsutils.Convert(string(e.UniqueName()), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BuffParticleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBuffParticleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BuffParticleExcelDto) FlatDataName() string {
	return "BuffParticleExcel"
}
