// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TranscendenceRecipeExcelDto represents a FlatBuffers table
type TranscendenceRecipeExcelDto struct {
	fbsutils.FlatBuffer
	Id                 int64         `json:"id"`
	DevName            string        `json:"dev_name"`
	CostCurrencyType   CurrencyTypes `json:"cost_currency_type"`
	CostCurrencyAmount int64         `json:"cost_currency_amount"`
	ParcelType         []ParcelType  `json:"parcel_type"`
	ParcelId           []int64       `json:"parcel_id"`
	ParcelAmount       []int32       `json:"parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TranscendenceRecipeExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TranscendenceRecipe"))
	}
	__offset_dev_name := b.CreateString(fbsutils.Convert(t.DevName, t.FlatBuffer.TableKey))
	TranscendenceRecipeExcelStart(b)
	TranscendenceRecipeExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	TranscendenceRecipeExcelAddDevName(b, __offset_dev_name)
	TranscendenceRecipeExcelAddCostCurrencyType(b, fbsutils.Convert(t.CostCurrencyType, t.FlatBuffer.TableKey))
	TranscendenceRecipeExcelAddCostCurrencyAmount(b, fbsutils.Convert(t.CostCurrencyAmount, t.FlatBuffer.TableKey))
	TranscendenceRecipeExcelStartParcelTypeVector(b, len(t.ParcelType))
	for i := range len(t.ParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.ParcelType[len(t.ParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	TranscendenceRecipeExcelAddParcelType(b, b.EndVector(len(t.ParcelType)))
	TranscendenceRecipeExcelStartParcelIdVector(b, len(t.ParcelId))
	for i := range len(t.ParcelId) {
		b.PrependInt64(fbsutils.Convert(t.ParcelId[len(t.ParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	TranscendenceRecipeExcelAddParcelId(b, b.EndVector(len(t.ParcelId)))
	TranscendenceRecipeExcelStartParcelAmountVector(b, len(t.ParcelAmount))
	for i := range len(t.ParcelAmount) {
		b.PrependInt32(fbsutils.Convert(t.ParcelAmount[len(t.ParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	TranscendenceRecipeExcelAddParcelAmount(b, b.EndVector(len(t.ParcelAmount)))
	return TranscendenceRecipeExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TranscendenceRecipeExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TranscendenceRecipeExcelDto) UnmarshalMessage(e *TranscendenceRecipeExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TranscendenceRecipe"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.DevName = fbsutils.Convert(string(e.DevName()), t.FlatBuffer.TableKey)
	t.CostCurrencyType = CurrencyTypes(fbsutils.Convert(int32(e.CostCurrencyType()), t.FlatBuffer.TableKey))
	t.CostCurrencyAmount = fbsutils.Convert(e.CostCurrencyAmount(), t.FlatBuffer.TableKey)
	t.ParcelType = make([]ParcelType, e.ParcelTypeLength())
	for i := range e.ParcelTypeLength() {
		t.ParcelType[i] = ParcelType(fbsutils.Convert(int32(e.ParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.ParcelId = make([]int64, e.ParcelIdLength())
	for i := range e.ParcelIdLength() {
		t.ParcelId[i] = fbsutils.Convert(e.ParcelId(i), t.FlatBuffer.TableKey)
	}
	t.ParcelAmount = make([]int32, e.ParcelAmountLength())
	for i := range e.ParcelAmountLength() {
		t.ParcelAmount[i] = fbsutils.Convert(e.ParcelAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TranscendenceRecipeExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTranscendenceRecipeExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TranscendenceRecipeExcelDto) FlatDataName() string {
	return "TranscendenceRecipeExcel"
}
