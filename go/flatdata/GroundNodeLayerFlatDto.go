// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GroundNodeLayerFlatDto represents a FlatBuffers table
type GroundNodeLayerFlatDto struct {
	fbsutils.FlatBuffer
	Layers []int8 `json:"layers"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GroundNodeLayerFlatDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundNodeLayerFlat"))
	}
	GroundNodeLayerFlatStart(b)
	GroundNodeLayerFlatStartLayersVector(b, len(t.Layers))
	for i := range len(t.Layers) {
		b.PrependInt8(fbsutils.Convert(t.Layers[len(t.Layers)-i-1], t.FlatBuffer.TableKey))
	}
	GroundNodeLayerFlatAddLayers(b, b.EndVector(len(t.Layers)))
	return GroundNodeLayerFlatEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GroundNodeLayerFlatDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishGroundNodeLayerFlatBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GroundNodeLayerFlatDto) UnmarshalMessage(e *GroundNodeLayerFlat) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundNodeLayerFlat"))
	}
	t.Layers = make([]int8, e.LayersLength())
	for i := range e.LayersLength() {
		t.Layers[i] = fbsutils.Convert(e.Layers(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GroundNodeLayerFlatDto) Unmarshal(data []byte) error {
	root := GetRootAsGroundNodeLayerFlat(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GroundNodeLayerFlatDto) FlatDataName() string {
	return "GroundNodeLayerFlat"
}
