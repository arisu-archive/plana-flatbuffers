// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConstMinigameRoadPuzzleExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConstMinigameRoadPuzzleExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstMinigameRoadPuzzleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConstMinigameRoadPuzzleExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConstMinigameRoadPuzzleExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstMinigameRoadPuzzleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConstMinigameRoadPuzzleExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConstMinigameRoadPuzzleExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConstMinigameRoadPuzzleExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConstMinigameRoadPuzzleExcel) RoadPuzzleMapBoundaryOffsetLeft() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateRoadPuzzleMapBoundaryOffsetLeft(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) RoadPuzzleMapBoundaryOffsetRight() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateRoadPuzzleMapBoundaryOffsetRight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) RoadPuzzleMapBoundaryOffsetTop() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateRoadPuzzleMapBoundaryOffsetTop(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) RoadPuzzleMapBoundaryOffsetBottom() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateRoadPuzzleMapBoundaryOffsetBottom(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) RoadPuzzleMapCenterOffsetX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateRoadPuzzleMapCenterOffsetX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) RoadPuzzleMapCenterOffsetY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateRoadPuzzleMapCenterOffsetY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) CameraAngle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateCameraAngle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) CameraZoomMax() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateCameraZoomMax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) CameraZoomMin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateCameraZoomMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) CameraZoomDefault() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateCameraZoomDefault(n float32) bool {
	return rcv._tab.MutateFloat32Slot(22, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) StageLoadingProgressTime() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateStageLoadingProgressTime(n float32) bool {
	return rcv._tab.MutateFloat32Slot(24, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) TileRotationDegree() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateTileRotationDegree(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) StartStageIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateStartStageIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *ConstMinigameRoadPuzzleExcel) LoopStageIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstMinigameRoadPuzzleExcel) MutateLoopStageIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func ConstMinigameRoadPuzzleExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetLeft(builder *flatbuffers.Builder, roadPuzzleMapBoundaryOffsetLeft float32) {
	builder.PrependFloat32Slot(0, roadPuzzleMapBoundaryOffsetLeft, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetRight(builder *flatbuffers.Builder, roadPuzzleMapBoundaryOffsetRight float32) {
	builder.PrependFloat32Slot(1, roadPuzzleMapBoundaryOffsetRight, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetTop(builder *flatbuffers.Builder, roadPuzzleMapBoundaryOffsetTop float32) {
	builder.PrependFloat32Slot(2, roadPuzzleMapBoundaryOffsetTop, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetBottom(builder *flatbuffers.Builder, roadPuzzleMapBoundaryOffsetBottom float32) {
	builder.PrependFloat32Slot(3, roadPuzzleMapBoundaryOffsetBottom, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetX(builder *flatbuffers.Builder, roadPuzzleMapCenterOffsetX float32) {
	builder.PrependFloat32Slot(4, roadPuzzleMapCenterOffsetX, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetY(builder *flatbuffers.Builder, roadPuzzleMapCenterOffsetY float32) {
	builder.PrependFloat32Slot(5, roadPuzzleMapCenterOffsetY, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddCameraAngle(builder *flatbuffers.Builder, cameraAngle float32) {
	builder.PrependFloat32Slot(6, cameraAngle, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddCameraZoomMax(builder *flatbuffers.Builder, cameraZoomMax float32) {
	builder.PrependFloat32Slot(7, cameraZoomMax, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddCameraZoomMin(builder *flatbuffers.Builder, cameraZoomMin float32) {
	builder.PrependFloat32Slot(8, cameraZoomMin, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddCameraZoomDefault(builder *flatbuffers.Builder, cameraZoomDefault float32) {
	builder.PrependFloat32Slot(9, cameraZoomDefault, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddStageLoadingProgressTime(builder *flatbuffers.Builder, stageLoadingProgressTime float32) {
	builder.PrependFloat32Slot(10, stageLoadingProgressTime, 0.0)
}
func ConstMinigameRoadPuzzleExcelAddTileRotationDegree(builder *flatbuffers.Builder, tileRotationDegree int32) {
	builder.PrependInt32Slot(11, tileRotationDegree, 0)
}
func ConstMinigameRoadPuzzleExcelAddStartStageIndex(builder *flatbuffers.Builder, startStageIndex int32) {
	builder.PrependInt32Slot(12, startStageIndex, 0)
}
func ConstMinigameRoadPuzzleExcelAddLoopStageIndex(builder *flatbuffers.Builder, loopStageIndex int32) {
	builder.PrependInt32Slot(13, loopStageIndex, 0)
}
func ConstMinigameRoadPuzzleExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
