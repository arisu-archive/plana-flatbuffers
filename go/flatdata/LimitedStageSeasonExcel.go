// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LimitedStageSeasonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsLimitedStageSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *LimitedStageSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LimitedStageSeasonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLimitedStageSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *LimitedStageSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LimitedStageSeasonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LimitedStageSeasonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LimitedStageSeasonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LimitedStageSeasonExcel) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LimitedStageSeasonExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LimitedStageSeasonExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *LimitedStageSeasonExcel) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LimitedStageSeasonExcel) TypeACount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LimitedStageSeasonExcel) MutateTypeACount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *LimitedStageSeasonExcel) TypeBCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LimitedStageSeasonExcel) MutateTypeBCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *LimitedStageSeasonExcel) TypeCCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LimitedStageSeasonExcel) MutateTypeCCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func LimitedStageSeasonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func LimitedStageSeasonExcelAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(endDate), 0)
}
func LimitedStageSeasonExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func LimitedStageSeasonExcelAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(startDate), 0)
}
func LimitedStageSeasonExcelAddTypeACount(builder *flatbuffers.Builder, typeACount int64) {
	builder.PrependInt64Slot(3, typeACount, 0)
}
func LimitedStageSeasonExcelAddTypeBCount(builder *flatbuffers.Builder, typeBCount int64) {
	builder.PrependInt64Slot(4, typeBCount, 0)
}
func LimitedStageSeasonExcelAddTypeCCount(builder *flatbuffers.Builder, typeCCount int64) {
	builder.PrependInt64Slot(5, typeCCount, 0)
}
func LimitedStageSeasonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
