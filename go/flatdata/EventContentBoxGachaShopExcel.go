// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentBoxGachaShopExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentBoxGachaShopExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBoxGachaShopExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentBoxGachaShopExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentBoxGachaShopExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBoxGachaShopExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentBoxGachaShopExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentBoxGachaShopExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentBoxGachaShopExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentBoxGachaShopExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentBoxGachaShopExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentBoxGachaShopExcel) GroupElementAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) MutateGroupElementAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentBoxGachaShopExcel) Round() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) MutateRound(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EventContentBoxGachaShopExcel) IsLegacy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentBoxGachaShopExcel) MutateIsLegacy(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *EventContentBoxGachaShopExcel) IsPrize() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentBoxGachaShopExcel) MutateIsPrize(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *EventContentBoxGachaShopExcel) GoodsId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) GoodsIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) MutateGoodsId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentBoxGachaShopExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaShopExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func EventContentBoxGachaShopExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func EventContentBoxGachaShopExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentBoxGachaShopExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(1, groupId, 0)
}
func EventContentBoxGachaShopExcelAddGroupElementAmount(builder *flatbuffers.Builder, groupElementAmount int64) {
	builder.PrependInt64Slot(2, groupElementAmount, 0)
}
func EventContentBoxGachaShopExcelAddRound(builder *flatbuffers.Builder, round int64) {
	builder.PrependInt64Slot(3, round, 0)
}
func EventContentBoxGachaShopExcelAddIsLegacy(builder *flatbuffers.Builder, isLegacy bool) {
	builder.PrependBoolSlot(4, isLegacy, false)
}
func EventContentBoxGachaShopExcelAddIsPrize(builder *flatbuffers.Builder, isPrize bool) {
	builder.PrependBoolSlot(5, isPrize, false)
}
func EventContentBoxGachaShopExcelAddGoodsId(builder *flatbuffers.Builder, goodsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(goodsId), 0)
}
func EventContentBoxGachaShopExcelStartGoodsIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentBoxGachaShopExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(7, displayOrder, 0)
}
func EventContentBoxGachaShopExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
