// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentZoneExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentZoneExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentZoneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentZoneExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentZoneExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentZoneExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentZoneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentZoneExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentZoneExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentZoneExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentZoneExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentZoneExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentZoneExcel) OriginalZoneId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateOriginalZoneId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentZoneExcel) LocationId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateLocationId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentZoneExcel) LocationRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateLocationRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EventContentZoneExcel) EventPointForLocationRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateEventPointForLocationRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentZoneExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *EventContentZoneExcel) StudentVisitProb(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentZoneExcel) StudentVisitProbLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateStudentVisitProb(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentZoneExcel) RewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *EventContentZoneExcel) Tags(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentZoneExcel) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateTags(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentZoneExcel) WhiteListTags(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentZoneExcel) WhiteListTagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneExcel) MutateWhiteListTags(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func EventContentZoneExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func EventContentZoneExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func EventContentZoneExcelAddOriginalZoneId(builder *flatbuffers.Builder, originalZoneId int64) {
	builder.PrependInt64Slot(1, originalZoneId, 0)
}
func EventContentZoneExcelAddLocationId(builder *flatbuffers.Builder, locationId int64) {
	builder.PrependInt64Slot(2, locationId, 0)
}
func EventContentZoneExcelAddLocationRank(builder *flatbuffers.Builder, locationRank int64) {
	builder.PrependInt64Slot(3, locationRank, 0)
}
func EventContentZoneExcelAddEventPointForLocationRank(builder *flatbuffers.Builder, eventPointForLocationRank int64) {
	builder.PrependInt64Slot(4, eventPointForLocationRank, 0)
}
func EventContentZoneExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(5, localizeEtcId, 0)
}
func EventContentZoneExcelAddStudentVisitProb(builder *flatbuffers.Builder, studentVisitProb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(studentVisitProb), 0)
}
func EventContentZoneExcelStartStudentVisitProbVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentZoneExcelAddRewardGroupId(builder *flatbuffers.Builder, rewardGroupId int64) {
	builder.PrependInt64Slot(7, rewardGroupId, 0)
}
func EventContentZoneExcelAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(tags), 0)
}
func EventContentZoneExcelStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentZoneExcelAddWhiteListTags(builder *flatbuffers.Builder, whiteListTags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(whiteListTags), 0)
}
func EventContentZoneExcelStartWhiteListTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentZoneExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
