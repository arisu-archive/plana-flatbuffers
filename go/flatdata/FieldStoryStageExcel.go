// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldStoryStageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldStoryStageExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldStoryStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldStoryStageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFieldStoryStageExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldStoryStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldStoryStageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FieldStoryStageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldStoryStageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldStoryStageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FieldStoryStageExcel) SeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *FieldStoryStageExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldStoryStageExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *FieldStoryStageExcel) StageTopography() StageTopography {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return StageTopography(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateStageTopography(n StageTopography) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *FieldStoryStageExcel) RecommandLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateRecommandLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *FieldStoryStageExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *FieldStoryStageExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *FieldStoryStageExcel) FixedEchelonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldStoryStageExcel) MutateFixedEchelonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *FieldStoryStageExcel) SkipFormationSettings() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FieldStoryStageExcel) MutateSkipFormationSettings(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func FieldStoryStageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func FieldStoryStageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func FieldStoryStageExcelAddSeasonId(builder *flatbuffers.Builder, seasonId int64) {
	builder.PrependInt64Slot(1, seasonId, 0)
}
func FieldStoryStageExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func FieldStoryStageExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(3, battleDuration, 0)
}
func FieldStoryStageExcelAddStageTopography(builder *flatbuffers.Builder, stageTopography StageTopography) {
	builder.PrependInt32Slot(4, int32(stageTopography), 0)
}
func FieldStoryStageExcelAddRecommandLevel(builder *flatbuffers.Builder, recommandLevel int32) {
	builder.PrependInt32Slot(5, recommandLevel, 0)
}
func FieldStoryStageExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(6, groundId, 0)
}
func FieldStoryStageExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(7, bgmId, 0)
}
func FieldStoryStageExcelAddFixedEchelonId(builder *flatbuffers.Builder, fixedEchelonId int64) {
	builder.PrependInt64Slot(8, fixedEchelonId, 0)
}
func FieldStoryStageExcelAddSkipFormationSettings(builder *flatbuffers.Builder, skipFormationSettings bool) {
	builder.PrependBoolSlot(9, skipFormationSettings, false)
}
func FieldStoryStageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
