// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstArenaExcelDto represents a FlatBuffers table
type ConstArenaExcelDto struct {
	fbsutils.FlatBuffer
	ArenaHistoryQueryLimitDays         int32      `json:"arena_history_query_limit_days"`
	ShowSeasonId                       int64      `json:"show_season_id"`
	ShowSeasonChangeInfoEndTime        string     `json:"show_season_change_info_end_time"`
	ShowSeasonChangeInfoStartTime      string     `json:"show_season_change_info_start_time"`
	SkipAllowedTimeMilliSeconds        int64      `json:"skip_allowed_time_milli_seconds"`
	EchelonSettingIntervalMilliSeconds int64      `json:"echelon_setting_interval_milli_seconds"`
	AutoRefreshIntervalMilliSeconds    int64      `json:"auto_refresh_interval_milli_seconds"`
	TopRankerCountLimit                int64      `json:"top_ranker_count_limit"`
	DefenseVictoryRewardMaxCount       int64      `json:"defense_victory_reward_max_count"`
	HiddenCharacterImagePath           string     `json:"hidden_character_image_path"`
	TimeSpanInDaysForBattleHistory     int64      `json:"time_span_in_days_for_battle_history"`
	NpcCharacterSkillLevel             int64      `json:"npc_character_skill_level"`
	NpcSupportCharacterCount           int64      `json:"npc_support_character_count"`
	NpcMainCharacterCount              int64      `json:"npc_main_character_count"`
	NpcName                            []string   `json:"npc_name"`
	StatSumFactor                      []int64    `json:"stat_sum_factor"`
	StatMulFactor                      []int64    `json:"stat_mul_factor"`
	ModifiedStatType                   []StatType `json:"modified_stat_type"`
	RelativeOpponentRankEnd            []int64    `json:"relative_opponent_rank_end"`
	RelativeOpponentRankStart          []int64    `json:"relative_opponent_rank_start"`
	MapSlotHideRank                    int64      `json:"map_slot_hide_rank"`
	CharacterSlotHideRank              []int64    `json:"character_slot_hide_rank"`
	OpenScenarioId                     string     `json:"open_scenario_id"`
	DailyRewardResetTime               string     `json:"daily_reward_reset_time"`
	TicketCost                         int64      `json:"ticket_cost"`
	EnterCostId                        int64      `json:"enter_cost_id"`
	EnterCostType                      ParcelType `json:"enter_cost_type"`
	TimeRewardMaxAmount                int64      `json:"time_reward_max_amount"`
	EndAlarm                           int64      `json:"end_alarm"`
	TssStartCoolTime                   int64      `json:"tss_start_cool_time"`
	DefenseCoolTime                    int64      `json:"defense_cool_time"`
	BattleDuration                     int64      `json:"battle_duration"`
	AttackCoolTime                     int64      `json:"attack_cool_time"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstArenaExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstArena"))
	}
	ConstArenaExcelStart(b)
	ConstArenaExcelAddArenaHistoryQueryLimitDays(b, fbsutils.Convert(t.ArenaHistoryQueryLimitDays, t.FlatBuffer.TableKey))
	ConstArenaExcelAddShowSeasonId(b, fbsutils.Convert(t.ShowSeasonId, t.FlatBuffer.TableKey))
	ConstArenaExcelAddShowSeasonChangeInfoEndTime(b, b.CreateString(fbsutils.Convert(t.ShowSeasonChangeInfoEndTime, t.FlatBuffer.TableKey)))
	ConstArenaExcelAddShowSeasonChangeInfoStartTime(b, b.CreateString(fbsutils.Convert(t.ShowSeasonChangeInfoStartTime, t.FlatBuffer.TableKey)))
	ConstArenaExcelAddSkipAllowedTimeMilliSeconds(b, fbsutils.Convert(t.SkipAllowedTimeMilliSeconds, t.FlatBuffer.TableKey))
	ConstArenaExcelAddEchelonSettingIntervalMilliSeconds(b, fbsutils.Convert(t.EchelonSettingIntervalMilliSeconds, t.FlatBuffer.TableKey))
	ConstArenaExcelAddAutoRefreshIntervalMilliSeconds(b, fbsutils.Convert(t.AutoRefreshIntervalMilliSeconds, t.FlatBuffer.TableKey))
	ConstArenaExcelAddTopRankerCountLimit(b, fbsutils.Convert(t.TopRankerCountLimit, t.FlatBuffer.TableKey))
	ConstArenaExcelAddDefenseVictoryRewardMaxCount(b, fbsutils.Convert(t.DefenseVictoryRewardMaxCount, t.FlatBuffer.TableKey))
	ConstArenaExcelAddHiddenCharacterImagePath(b, b.CreateString(fbsutils.Convert(t.HiddenCharacterImagePath, t.FlatBuffer.TableKey)))
	ConstArenaExcelAddTimeSpanInDaysForBattleHistory(b, fbsutils.Convert(t.TimeSpanInDaysForBattleHistory, t.FlatBuffer.TableKey))
	ConstArenaExcelAddNpcCharacterSkillLevel(b, fbsutils.Convert(t.NpcCharacterSkillLevel, t.FlatBuffer.TableKey))
	ConstArenaExcelAddNpcSupportCharacterCount(b, fbsutils.Convert(t.NpcSupportCharacterCount, t.FlatBuffer.TableKey))
	ConstArenaExcelAddNpcMainCharacterCount(b, fbsutils.Convert(t.NpcMainCharacterCount, t.FlatBuffer.TableKey))
	ConstArenaExcelStartNpcNameVector(b, len(t.NpcName))
	for i := range len(t.NpcName) {
		b.PrependUOffsetT(b.CreateString(t.NpcName[len(t.NpcName)-i-1]))
	}
	ConstArenaExcelAddNpcName(b, b.EndVector(len(t.NpcName)))
	ConstArenaExcelStartStatSumFactorVector(b, len(t.StatSumFactor))
	for i := range len(t.StatSumFactor) {
		b.PrependInt64(fbsutils.Convert(t.StatSumFactor[len(t.StatSumFactor)-i-1], t.FlatBuffer.TableKey))
	}
	ConstArenaExcelAddStatSumFactor(b, b.EndVector(len(t.StatSumFactor)))
	ConstArenaExcelStartStatMulFactorVector(b, len(t.StatMulFactor))
	for i := range len(t.StatMulFactor) {
		b.PrependInt64(fbsutils.Convert(t.StatMulFactor[len(t.StatMulFactor)-i-1], t.FlatBuffer.TableKey))
	}
	ConstArenaExcelAddStatMulFactor(b, b.EndVector(len(t.StatMulFactor)))
	ConstArenaExcelStartModifiedStatTypeVector(b, len(t.ModifiedStatType))
	for i := range len(t.ModifiedStatType) {
		b.PrependInt32(fbsutils.Convert(int32(t.ModifiedStatType[len(t.ModifiedStatType)-i-1]), t.FlatBuffer.TableKey))
	}
	ConstArenaExcelAddModifiedStatType(b, b.EndVector(len(t.ModifiedStatType)))
	ConstArenaExcelStartRelativeOpponentRankEndVector(b, len(t.RelativeOpponentRankEnd))
	for i := range len(t.RelativeOpponentRankEnd) {
		b.PrependInt64(fbsutils.Convert(t.RelativeOpponentRankEnd[len(t.RelativeOpponentRankEnd)-i-1], t.FlatBuffer.TableKey))
	}
	ConstArenaExcelAddRelativeOpponentRankEnd(b, b.EndVector(len(t.RelativeOpponentRankEnd)))
	ConstArenaExcelStartRelativeOpponentRankStartVector(b, len(t.RelativeOpponentRankStart))
	for i := range len(t.RelativeOpponentRankStart) {
		b.PrependInt64(fbsutils.Convert(t.RelativeOpponentRankStart[len(t.RelativeOpponentRankStart)-i-1], t.FlatBuffer.TableKey))
	}
	ConstArenaExcelAddRelativeOpponentRankStart(b, b.EndVector(len(t.RelativeOpponentRankStart)))
	ConstArenaExcelAddMapSlotHideRank(b, fbsutils.Convert(t.MapSlotHideRank, t.FlatBuffer.TableKey))
	ConstArenaExcelStartCharacterSlotHideRankVector(b, len(t.CharacterSlotHideRank))
	for i := range len(t.CharacterSlotHideRank) {
		b.PrependInt64(fbsutils.Convert(t.CharacterSlotHideRank[len(t.CharacterSlotHideRank)-i-1], t.FlatBuffer.TableKey))
	}
	ConstArenaExcelAddCharacterSlotHideRank(b, b.EndVector(len(t.CharacterSlotHideRank)))
	ConstArenaExcelAddOpenScenarioId(b, b.CreateString(fbsutils.Convert(t.OpenScenarioId, t.FlatBuffer.TableKey)))
	ConstArenaExcelAddDailyRewardResetTime(b, b.CreateString(fbsutils.Convert(t.DailyRewardResetTime, t.FlatBuffer.TableKey)))
	ConstArenaExcelAddTicketCost(b, fbsutils.Convert(t.TicketCost, t.FlatBuffer.TableKey))
	ConstArenaExcelAddEnterCostId(b, fbsutils.Convert(t.EnterCostId, t.FlatBuffer.TableKey))
	ConstArenaExcelAddEnterCostType(b, fbsutils.Convert(t.EnterCostType, t.FlatBuffer.TableKey))
	ConstArenaExcelAddTimeRewardMaxAmount(b, fbsutils.Convert(t.TimeRewardMaxAmount, t.FlatBuffer.TableKey))
	ConstArenaExcelAddEndAlarm(b, fbsutils.Convert(t.EndAlarm, t.FlatBuffer.TableKey))
	ConstArenaExcelAddTssStartCoolTime(b, fbsutils.Convert(t.TssStartCoolTime, t.FlatBuffer.TableKey))
	ConstArenaExcelAddDefenseCoolTime(b, fbsutils.Convert(t.DefenseCoolTime, t.FlatBuffer.TableKey))
	ConstArenaExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	ConstArenaExcelAddAttackCoolTime(b, fbsutils.Convert(t.AttackCoolTime, t.FlatBuffer.TableKey))
	return ConstArenaExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstArenaExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstArenaExcelDto) UnmarshalMessage(e *ConstArenaExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstArena"))
	}
	t.ArenaHistoryQueryLimitDays = fbsutils.Convert(e.ArenaHistoryQueryLimitDays(), t.FlatBuffer.TableKey)
	t.ShowSeasonId = fbsutils.Convert(e.ShowSeasonId(), t.FlatBuffer.TableKey)
	t.ShowSeasonChangeInfoEndTime = fbsutils.Convert(string(e.ShowSeasonChangeInfoEndTime()), t.FlatBuffer.TableKey)
	t.ShowSeasonChangeInfoStartTime = fbsutils.Convert(string(e.ShowSeasonChangeInfoStartTime()), t.FlatBuffer.TableKey)
	t.SkipAllowedTimeMilliSeconds = fbsutils.Convert(e.SkipAllowedTimeMilliSeconds(), t.FlatBuffer.TableKey)
	t.EchelonSettingIntervalMilliSeconds = fbsutils.Convert(e.EchelonSettingIntervalMilliSeconds(), t.FlatBuffer.TableKey)
	t.AutoRefreshIntervalMilliSeconds = fbsutils.Convert(e.AutoRefreshIntervalMilliSeconds(), t.FlatBuffer.TableKey)
	t.TopRankerCountLimit = fbsutils.Convert(e.TopRankerCountLimit(), t.FlatBuffer.TableKey)
	t.DefenseVictoryRewardMaxCount = fbsutils.Convert(e.DefenseVictoryRewardMaxCount(), t.FlatBuffer.TableKey)
	t.HiddenCharacterImagePath = fbsutils.Convert(string(e.HiddenCharacterImagePath()), t.FlatBuffer.TableKey)
	t.TimeSpanInDaysForBattleHistory = fbsutils.Convert(e.TimeSpanInDaysForBattleHistory(), t.FlatBuffer.TableKey)
	t.NpcCharacterSkillLevel = fbsutils.Convert(e.NpcCharacterSkillLevel(), t.FlatBuffer.TableKey)
	t.NpcSupportCharacterCount = fbsutils.Convert(e.NpcSupportCharacterCount(), t.FlatBuffer.TableKey)
	t.NpcMainCharacterCount = fbsutils.Convert(e.NpcMainCharacterCount(), t.FlatBuffer.TableKey)
	t.NpcName = make([]string, e.NpcNameLength())
	for i := range e.NpcNameLength() {
		t.NpcName[i] = fbsutils.Convert(string(e.NpcName(i)), t.FlatBuffer.TableKey)
	}
	t.StatSumFactor = make([]int64, e.StatSumFactorLength())
	for i := range e.StatSumFactorLength() {
		t.StatSumFactor[i] = fbsutils.Convert(e.StatSumFactor(i), t.FlatBuffer.TableKey)
	}
	t.StatMulFactor = make([]int64, e.StatMulFactorLength())
	for i := range e.StatMulFactorLength() {
		t.StatMulFactor[i] = fbsutils.Convert(e.StatMulFactor(i), t.FlatBuffer.TableKey)
	}
	t.ModifiedStatType = make([]StatType, e.ModifiedStatTypeLength())
	for i := range e.ModifiedStatTypeLength() {
		t.ModifiedStatType[i] = StatType(fbsutils.Convert(int32(e.ModifiedStatType(i)), t.FlatBuffer.TableKey))
	}
	t.RelativeOpponentRankEnd = make([]int64, e.RelativeOpponentRankEndLength())
	for i := range e.RelativeOpponentRankEndLength() {
		t.RelativeOpponentRankEnd[i] = fbsutils.Convert(e.RelativeOpponentRankEnd(i), t.FlatBuffer.TableKey)
	}
	t.RelativeOpponentRankStart = make([]int64, e.RelativeOpponentRankStartLength())
	for i := range e.RelativeOpponentRankStartLength() {
		t.RelativeOpponentRankStart[i] = fbsutils.Convert(e.RelativeOpponentRankStart(i), t.FlatBuffer.TableKey)
	}
	t.MapSlotHideRank = fbsutils.Convert(e.MapSlotHideRank(), t.FlatBuffer.TableKey)
	t.CharacterSlotHideRank = make([]int64, e.CharacterSlotHideRankLength())
	for i := range e.CharacterSlotHideRankLength() {
		t.CharacterSlotHideRank[i] = fbsutils.Convert(e.CharacterSlotHideRank(i), t.FlatBuffer.TableKey)
	}
	t.OpenScenarioId = fbsutils.Convert(string(e.OpenScenarioId()), t.FlatBuffer.TableKey)
	t.DailyRewardResetTime = fbsutils.Convert(string(e.DailyRewardResetTime()), t.FlatBuffer.TableKey)
	t.TicketCost = fbsutils.Convert(e.TicketCost(), t.FlatBuffer.TableKey)
	t.EnterCostId = fbsutils.Convert(e.EnterCostId(), t.FlatBuffer.TableKey)
	t.EnterCostType = ParcelType(fbsutils.Convert(int32(e.EnterCostType()), t.FlatBuffer.TableKey))
	t.TimeRewardMaxAmount = fbsutils.Convert(e.TimeRewardMaxAmount(), t.FlatBuffer.TableKey)
	t.EndAlarm = fbsutils.Convert(e.EndAlarm(), t.FlatBuffer.TableKey)
	t.TssStartCoolTime = fbsutils.Convert(e.TssStartCoolTime(), t.FlatBuffer.TableKey)
	t.DefenseCoolTime = fbsutils.Convert(e.DefenseCoolTime(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.AttackCoolTime = fbsutils.Convert(e.AttackCoolTime(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstArenaExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstArenaExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstArenaExcelDto) FlatDataName() string {
	return "ConstArenaExcel"
}
