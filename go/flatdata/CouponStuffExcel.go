// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CouponStuffExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCouponStuffExcel(buf []byte, offset flatbuffers.UOffsetT) *CouponStuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CouponStuffExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCouponStuffExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCouponStuffExcel(buf []byte, offset flatbuffers.UOffsetT) *CouponStuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CouponStuffExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCouponStuffExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CouponStuffExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CouponStuffExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CouponStuffExcel) StuffId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CouponStuffExcel) MutateStuffId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CouponStuffExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CouponStuffExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *CouponStuffExcel) ParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CouponStuffExcel) MutateParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CouponStuffExcel) LimitAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CouponStuffExcel) MutateLimitAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *CouponStuffExcel) CouponStuffNameLocalizeKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CouponStuffExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CouponStuffExcelAddStuffId(builder *flatbuffers.Builder, stuffId int64) {
	builder.PrependInt64Slot(0, stuffId, 0)
}
func CouponStuffExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(1, int32(parcelType), 0)
}
func CouponStuffExcelAddParcelId(builder *flatbuffers.Builder, parcelId int64) {
	builder.PrependInt64Slot(2, parcelId, 0)
}
func CouponStuffExcelAddLimitAmount(builder *flatbuffers.Builder, limitAmount int32) {
	builder.PrependInt32Slot(3, limitAmount, 0)
}
func CouponStuffExcelAddCouponStuffNameLocalizeKey(builder *flatbuffers.Builder, couponStuffNameLocalizeKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(couponStuffNameLocalizeKey), 0)
}
func CouponStuffExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
