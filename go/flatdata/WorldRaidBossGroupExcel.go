// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WorldRaidBossGroupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsWorldRaidBossGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *WorldRaidBossGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorldRaidBossGroupExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWorldRaidBossGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *WorldRaidBossGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WorldRaidBossGroupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WorldRaidBossGroupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorldRaidBossGroupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WorldRaidBossGroupExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *WorldRaidBossGroupExcel) WorldRaidBossGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateWorldRaidBossGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *WorldRaidBossGroupExcel) WorldBossName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) WorldBossPopupPortrait() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) WorldBossPopupBg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) WorldBossParcelPortrait() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) WorldBossListParcel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) WorldBossHp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateWorldBossHp(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *WorldRaidBossGroupExcel) UiHideBeforeSpawn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WorldRaidBossGroupExcel) MutateUiHideBeforeSpawn(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *WorldRaidBossGroupExcel) HideAnotherBossKilled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WorldRaidBossGroupExcel) MutateHideAnotherBossKilled(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *WorldRaidBossGroupExcel) WorldBossClearRewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateWorldBossClearRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *WorldRaidBossGroupExcel) AnotherBossKilled(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) AnotherBossKilledLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateAnotherBossKilled(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *WorldRaidBossGroupExcel) EchelonConstraintGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateEchelonConstraintGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *WorldRaidBossGroupExcel) ExclusiveOperatorBossSpawn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) ExclusiveOperatorBossKill() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) ExclusiveOperatorScenarioBattle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) ExclusiveOperatorBossDamaged() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidBossGroupExcel) BossGroupOpenCondition() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidBossGroupExcel) MutateBossGroupOpenCondition(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func WorldRaidBossGroupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func WorldRaidBossGroupExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func WorldRaidBossGroupExcelAddWorldRaidBossGroupId(builder *flatbuffers.Builder, worldRaidBossGroupId int64) {
	builder.PrependInt64Slot(1, worldRaidBossGroupId, 0)
}
func WorldRaidBossGroupExcelAddWorldBossName(builder *flatbuffers.Builder, worldBossName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(worldBossName), 0)
}
func WorldRaidBossGroupExcelAddWorldBossPopupPortrait(builder *flatbuffers.Builder, worldBossPopupPortrait flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(worldBossPopupPortrait), 0)
}
func WorldRaidBossGroupExcelAddWorldBossPopupBg(builder *flatbuffers.Builder, worldBossPopupBg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(worldBossPopupBg), 0)
}
func WorldRaidBossGroupExcelAddWorldBossParcelPortrait(builder *flatbuffers.Builder, worldBossParcelPortrait flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(worldBossParcelPortrait), 0)
}
func WorldRaidBossGroupExcelAddWorldBossListParcel(builder *flatbuffers.Builder, worldBossListParcel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(worldBossListParcel), 0)
}
func WorldRaidBossGroupExcelAddWorldBossHp(builder *flatbuffers.Builder, worldBossHp int64) {
	builder.PrependInt64Slot(7, worldBossHp, 0)
}
func WorldRaidBossGroupExcelAddUiHideBeforeSpawn(builder *flatbuffers.Builder, uiHideBeforeSpawn bool) {
	builder.PrependBoolSlot(8, uiHideBeforeSpawn, false)
}
func WorldRaidBossGroupExcelAddHideAnotherBossKilled(builder *flatbuffers.Builder, hideAnotherBossKilled bool) {
	builder.PrependBoolSlot(9, hideAnotherBossKilled, false)
}
func WorldRaidBossGroupExcelAddWorldBossClearRewardGroupId(builder *flatbuffers.Builder, worldBossClearRewardGroupId int64) {
	builder.PrependInt64Slot(10, worldBossClearRewardGroupId, 0)
}
func WorldRaidBossGroupExcelAddAnotherBossKilled(builder *flatbuffers.Builder, anotherBossKilled flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(anotherBossKilled), 0)
}
func WorldRaidBossGroupExcelStartAnotherBossKilledVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func WorldRaidBossGroupExcelAddEchelonConstraintGroupId(builder *flatbuffers.Builder, echelonConstraintGroupId int64) {
	builder.PrependInt64Slot(12, echelonConstraintGroupId, 0)
}
func WorldRaidBossGroupExcelAddExclusiveOperatorBossSpawn(builder *flatbuffers.Builder, exclusiveOperatorBossSpawn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(exclusiveOperatorBossSpawn), 0)
}
func WorldRaidBossGroupExcelAddExclusiveOperatorBossKill(builder *flatbuffers.Builder, exclusiveOperatorBossKill flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(exclusiveOperatorBossKill), 0)
}
func WorldRaidBossGroupExcelAddExclusiveOperatorScenarioBattle(builder *flatbuffers.Builder, exclusiveOperatorScenarioBattle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(exclusiveOperatorScenarioBattle), 0)
}
func WorldRaidBossGroupExcelAddExclusiveOperatorBossDamaged(builder *flatbuffers.Builder, exclusiveOperatorBossDamaged flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(exclusiveOperatorBossDamaged), 0)
}
func WorldRaidBossGroupExcelAddBossGroupOpenCondition(builder *flatbuffers.Builder, bossGroupOpenCondition int64) {
	builder.PrependInt64Slot(17, bossGroupOpenCondition, 0)
}
func WorldRaidBossGroupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
