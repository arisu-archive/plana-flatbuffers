// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestUnexpectedEventExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestUnexpectedEventExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestUnexpectedEventExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestUnexpectedEventExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishConquestUnexpectedEventExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConquestUnexpectedEventExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestUnexpectedEventExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestUnexpectedEventExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConquestUnexpectedEventExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConquestUnexpectedEventExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestUnexpectedEventExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestUnexpectedEventExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventConditionType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateUnexpectedEventConditionType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventConditionUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateUnexpectedEventConditionUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventConditionAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateUnexpectedEventConditionAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventOccurDailyLimitCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateUnexpectedEventOccurDailyLimitCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *ConquestUnexpectedEventExcel) UnitCountPerStep() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateUnitCountPerStep(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventPrefab(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventPrefabLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventUnitId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) UnexpectedEventUnitIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestUnexpectedEventExcel) MutateUnexpectedEventUnitId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ConquestUnexpectedEventExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ConquestUnexpectedEventExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func ConquestUnexpectedEventExcelAddUnexpectedEventConditionType(builder *flatbuffers.Builder, unexpectedEventConditionType ParcelType) {
	builder.PrependInt32Slot(1, int32(unexpectedEventConditionType), 0)
}
func ConquestUnexpectedEventExcelAddUnexpectedEventConditionUniqueId(builder *flatbuffers.Builder, unexpectedEventConditionUniqueId int64) {
	builder.PrependInt64Slot(2, unexpectedEventConditionUniqueId, 0)
}
func ConquestUnexpectedEventExcelAddUnexpectedEventConditionAmount(builder *flatbuffers.Builder, unexpectedEventConditionAmount int64) {
	builder.PrependInt64Slot(3, unexpectedEventConditionAmount, 0)
}
func ConquestUnexpectedEventExcelAddUnexpectedEventOccurDailyLimitCount(builder *flatbuffers.Builder, unexpectedEventOccurDailyLimitCount int32) {
	builder.PrependInt32Slot(4, unexpectedEventOccurDailyLimitCount, 0)
}
func ConquestUnexpectedEventExcelAddUnitCountPerStep(builder *flatbuffers.Builder, unitCountPerStep int32) {
	builder.PrependInt32Slot(5, unitCountPerStep, 0)
}
func ConquestUnexpectedEventExcelAddUnexpectedEventPrefab(builder *flatbuffers.Builder, unexpectedEventPrefab flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(unexpectedEventPrefab), 0)
}
func ConquestUnexpectedEventExcelStartUnexpectedEventPrefabVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestUnexpectedEventExcelAddUnexpectedEventUnitId(builder *flatbuffers.Builder, unexpectedEventUnitId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(unexpectedEventUnitId), 0)
}
func ConquestUnexpectedEventExcelStartUnexpectedEventUnitIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConquestUnexpectedEventExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
