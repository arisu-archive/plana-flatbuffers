// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// LimitedStageSeasonExcelDto represents a FlatBuffers table
type LimitedStageSeasonExcelDto struct {
	fbsutils.FlatBuffer
	TypeCCount int64  `json:"type_c_count"`
	TypeBCount int64  `json:"type_b_count"`
	TypeACount int64  `json:"type_a_count"`
	EndDate    string `json:"end_date"`
	StartDate  string `json:"start_date"`
	Id         int64  `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *LimitedStageSeasonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("LimitedStageSeason"))
	}
	LimitedStageSeasonExcelStart(b)
	LimitedStageSeasonExcelAddTypeCCount(b, fbsutils.Convert(t.TypeCCount, t.FlatBuffer.TableKey))
	LimitedStageSeasonExcelAddTypeBCount(b, fbsutils.Convert(t.TypeBCount, t.FlatBuffer.TableKey))
	LimitedStageSeasonExcelAddTypeACount(b, fbsutils.Convert(t.TypeACount, t.FlatBuffer.TableKey))
	LimitedStageSeasonExcelAddEndDate(b, b.CreateString(fbsutils.Convert(t.EndDate, t.FlatBuffer.TableKey)))
	LimitedStageSeasonExcelAddStartDate(b, b.CreateString(fbsutils.Convert(t.StartDate, t.FlatBuffer.TableKey)))
	LimitedStageSeasonExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return LimitedStageSeasonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *LimitedStageSeasonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *LimitedStageSeasonExcelDto) UnmarshalMessage(e *LimitedStageSeasonExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("LimitedStageSeason"))
	}
	t.TypeCCount = fbsutils.Convert(e.TypeCCount(), t.FlatBuffer.TableKey)
	t.TypeBCount = fbsutils.Convert(e.TypeBCount(), t.FlatBuffer.TableKey)
	t.TypeACount = fbsutils.Convert(e.TypeACount(), t.FlatBuffer.TableKey)
	t.EndDate = fbsutils.Convert(string(e.EndDate()), t.FlatBuffer.TableKey)
	t.StartDate = fbsutils.Convert(string(e.StartDate()), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *LimitedStageSeasonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsLimitedStageSeasonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (LimitedStageSeasonExcelDto) FlatDataName() string {
	return "LimitedStageSeasonExcel"
}
