// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AniStateDataDto represents a FlatBuffers table
type AniStateDataDto struct {
	fbsutils.FlatBuffer
	ClipName            string            `json:"clip_name"`
	Events              []AniEventDataDto `json:"events"`
	FrameRate           float32           `json:"frame_rate"`
	IsLooping           bool              `json:"is_looping"`
	Length              float32           `json:"length"`
	SpeedParameterName  string            `json:"speed_parameter_name"`
	SpeedParamter       float32           `json:"speed_paramter"`
	StateName           string            `json:"state_name"`
	StateNameWithPrefix string            `json:"state_name_with_prefix"`
	StatePrefix         string            `json:"state_prefix"`
	StateSpeed          float32           `json:"state_speed"`
	Tag                 string            `json:"tag"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AniStateDataDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("AniStateData"))
	}
	AniStateDataStart(b)
	AniStateDataAddClipName(b, b.CreateString(fbsutils.Convert(t.ClipName, t.FlatBuffer.TableKey)))
	AniStateDataStartEventsVector(b, len(t.Events))
	for i := range len(t.Events) {
		// The array should be reversed.
		b.PrependUOffsetT(t.Events[len(t.Events)-i-1].MarshalModel(b))
	}
	AniStateDataAddEvents(b, b.EndVector(len(t.Events)))
	AniStateDataAddFrameRate(b, fbsutils.Convert(t.FrameRate, t.FlatBuffer.TableKey))
	AniStateDataAddIsLooping(b, t.IsLooping)
	AniStateDataAddLength(b, fbsutils.Convert(t.Length, t.FlatBuffer.TableKey))
	AniStateDataAddSpeedParameterName(b, b.CreateString(fbsutils.Convert(t.SpeedParameterName, t.FlatBuffer.TableKey)))
	AniStateDataAddSpeedParamter(b, fbsutils.Convert(t.SpeedParamter, t.FlatBuffer.TableKey))
	AniStateDataAddStateName(b, b.CreateString(fbsutils.Convert(t.StateName, t.FlatBuffer.TableKey)))
	AniStateDataAddStateNameWithPrefix(b, b.CreateString(fbsutils.Convert(t.StateNameWithPrefix, t.FlatBuffer.TableKey)))
	AniStateDataAddStatePrefix(b, b.CreateString(fbsutils.Convert(t.StatePrefix, t.FlatBuffer.TableKey)))
	AniStateDataAddStateSpeed(b, fbsutils.Convert(t.StateSpeed, t.FlatBuffer.TableKey))
	AniStateDataAddTag(b, b.CreateString(fbsutils.Convert(t.Tag, t.FlatBuffer.TableKey)))
	return AniStateDataEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AniStateDataDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AniStateDataDto) UnmarshalMessage(e *AniStateData) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("AniStateData"))
	}
	t.ClipName = fbsutils.Convert(string(e.ClipName()), t.FlatBuffer.TableKey)
	t.Events = make([]AniEventDataDto, e.EventsLength())
	for i := range e.EventsLength() {
		d := new(AniEventData)
		if !e.Events(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.Events[i].UnmarshalMessage(d)
	}
	t.FrameRate = fbsutils.Convert(e.FrameRate(), t.FlatBuffer.TableKey)
	t.IsLooping = e.IsLooping()
	t.Length = fbsutils.Convert(e.Length(), t.FlatBuffer.TableKey)
	t.SpeedParameterName = fbsutils.Convert(string(e.SpeedParameterName()), t.FlatBuffer.TableKey)
	t.SpeedParamter = fbsutils.Convert(e.SpeedParamter(), t.FlatBuffer.TableKey)
	t.StateName = fbsutils.Convert(string(e.StateName()), t.FlatBuffer.TableKey)
	t.StateNameWithPrefix = fbsutils.Convert(string(e.StateNameWithPrefix()), t.FlatBuffer.TableKey)
	t.StatePrefix = fbsutils.Convert(string(e.StatePrefix()), t.FlatBuffer.TableKey)
	t.StateSpeed = fbsutils.Convert(e.StateSpeed(), t.FlatBuffer.TableKey)
	t.Tag = fbsutils.Convert(string(e.Tag()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AniStateDataDto) Unmarshal(data []byte) error {
	root := GetRootAsAniStateData(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AniStateDataDto) FlatDataName() string {
	return "AniStateData"
}
