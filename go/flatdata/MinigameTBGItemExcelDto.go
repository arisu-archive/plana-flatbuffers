// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGItemExcelDto represents a FlatBuffers table
type MinigameTBGItemExcelDto struct {
	fbsutils.FlatBuffer
	UniqueId           int64             `json:"unique_id"`
	ItemType           TBGItemType       `json:"item_type"`
	TbgItemEffectType  TBGItemEffectType `json:"tbg_item_effect_type"`
	ItemParameter      int32             `json:"item_parameter"`
	LocalizeEtcId      string            `json:"localize_etc_id"`
	Icon               string            `json:"icon"`
	BuffIcon           string            `json:"buff_icon"`
	EncounterCount     int32             `json:"encounter_count"`
	DiceEffectAniClip  string            `json:"dice_effect_ani_clip"`
	BuffIconHudVisible bool              `json:"buff_icon_hud_visible"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGItemExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MinigameTBGItem"))
	}
	MinigameTBGItemExcelStart(b)
	MinigameTBGItemExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MinigameTBGItemExcelAddItemType(b, fbsutils.Convert(t.ItemType, t.FlatBuffer.TableKey))
	MinigameTBGItemExcelAddTbgItemEffectType(b, fbsutils.Convert(t.TbgItemEffectType, t.FlatBuffer.TableKey))
	MinigameTBGItemExcelAddItemParameter(b, fbsutils.Convert(t.ItemParameter, t.FlatBuffer.TableKey))
	MinigameTBGItemExcelAddLocalizeEtcId(b, b.CreateString(fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey)))
	MinigameTBGItemExcelAddIcon(b, b.CreateString(fbsutils.Convert(t.Icon, t.FlatBuffer.TableKey)))
	MinigameTBGItemExcelAddBuffIcon(b, b.CreateString(fbsutils.Convert(t.BuffIcon, t.FlatBuffer.TableKey)))
	MinigameTBGItemExcelAddEncounterCount(b, fbsutils.Convert(t.EncounterCount, t.FlatBuffer.TableKey))
	MinigameTBGItemExcelAddDiceEffectAniClip(b, b.CreateString(fbsutils.Convert(t.DiceEffectAniClip, t.FlatBuffer.TableKey)))
	MinigameTBGItemExcelAddBuffIconHudVisible(b, t.BuffIconHudVisible)
	return MinigameTBGItemExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGItemExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishMinigameTBGItemExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGItemExcelDto) UnmarshalMessage(e *MinigameTBGItemExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MinigameTBGItem"))
	}
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.ItemType = TBGItemType(fbsutils.Convert(int32(e.ItemType()), t.FlatBuffer.TableKey))
	t.TbgItemEffectType = TBGItemEffectType(fbsutils.Convert(int32(e.TbgItemEffectType()), t.FlatBuffer.TableKey))
	t.ItemParameter = fbsutils.Convert(e.ItemParameter(), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(string(e.LocalizeEtcId()), t.FlatBuffer.TableKey)
	t.Icon = fbsutils.Convert(string(e.Icon()), t.FlatBuffer.TableKey)
	t.BuffIcon = fbsutils.Convert(string(e.BuffIcon()), t.FlatBuffer.TableKey)
	t.EncounterCount = fbsutils.Convert(e.EncounterCount(), t.FlatBuffer.TableKey)
	t.DiceEffectAniClip = fbsutils.Convert(string(e.DiceEffectAniClip()), t.FlatBuffer.TableKey)
	t.BuffIconHudVisible = e.BuffIconHudVisible()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGItemExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGItemExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGItemExcelDto) FlatDataName() string {
	return "MinigameTBGItemExcel"
}
