// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WorldRaidStageExcelTableDto represents a FlatBuffers table
type WorldRaidStageExcelTableDto struct {
	fbsutils.FlatBuffer
	DataList []WorldRaidStageExcelDto `json:"data_list"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WorldRaidStageExcelTableDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WorldRaidStage"))
	}
	var __offset_data_list flatbuffers.UOffsetT
	__nestedOffsets_data_list := make([]flatbuffers.UOffsetT, len(t.DataList))
	for i := range len(t.DataList) {
		t.DataList[i].InitKey(t.FlatBuffer.TableKey)
		__nestedOffsets_data_list[i] = t.DataList[i].MarshalModel(b)
	}
	WorldRaidStageExcelTableStartDataListVector(b, len(t.DataList))
	for i := range len(t.DataList) {
		b.PrependUOffsetT(__nestedOffsets_data_list[len(t.DataList)-i-1])
	}
	__offset_data_list = b.EndVector(len(t.DataList))
	WorldRaidStageExcelTableStart(b)
	WorldRaidStageExcelTableAddDataList(b, __offset_data_list)
	return WorldRaidStageExcelTableEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WorldRaidStageExcelTableDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidStageExcelTableDto) UnmarshalMessage(e *WorldRaidStageExcelTable) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WorldRaidStage"))
	}
	t.DataList = make([]WorldRaidStageExcelDto, e.DataListLength())
	for i := range e.DataListLength() {
		d := new(WorldRaidStageExcel)
		if !e.DataList(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.DataList[i].UnmarshalMessage(d)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidStageExcelTableDto) Unmarshal(data []byte) error {
	root := GetRootAsWorldRaidStageExcelTable(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WorldRaidStageExcelTableDto) FlatDataName() string {
	return "WorldRaidStageExcelTable"
}
