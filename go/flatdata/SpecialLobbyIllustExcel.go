// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SpecialLobbyIllustExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsSpecialLobbyIllustExcel(buf []byte, offset flatbuffers.UOffsetT) *SpecialLobbyIllustExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SpecialLobbyIllustExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSpecialLobbyIllustExcel(buf []byte, offset flatbuffers.UOffsetT) *SpecialLobbyIllustExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SpecialLobbyIllustExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SpecialLobbyIllustExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SpecialLobbyIllustExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SpecialLobbyIllustExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SpecialLobbyIllustExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SpecialLobbyIllustExcel) DevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SpecialLobbyIllustExcel) CharacterCostumeUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SpecialLobbyIllustExcel) MutateCharacterCostumeUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *SpecialLobbyIllustExcel) PrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SpecialLobbyIllustExcel) SlotTextureName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SpecialLobbyIllustExcel) RewardTextureName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SpecialLobbyIllustExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SpecialLobbyIllustExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(0, uniqueId, 0)
}
func SpecialLobbyIllustExcelAddDevName(builder *flatbuffers.Builder, devName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(devName), 0)
}
func SpecialLobbyIllustExcelAddCharacterCostumeUniqueId(builder *flatbuffers.Builder, characterCostumeUniqueId int64) {
	builder.PrependInt64Slot(2, characterCostumeUniqueId, 0)
}
func SpecialLobbyIllustExcelAddPrefabName(builder *flatbuffers.Builder, prefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(prefabName), 0)
}
func SpecialLobbyIllustExcelAddSlotTextureName(builder *flatbuffers.Builder, slotTextureName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(slotTextureName), 0)
}
func SpecialLobbyIllustExcelAddRewardTextureName(builder *flatbuffers.Builder, rewardTextureName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rewardTextureName), 0)
}
func SpecialLobbyIllustExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
