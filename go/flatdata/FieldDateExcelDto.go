// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldDateExcelDto represents a FlatBuffers table
type FieldDateExcelDto struct {
	fbsutils.FlatBuffer
	SeasonId               int64              `json:"season_id"`
	UniqueId               int64              `json:"unique_id"`
	OpenDate               int64              `json:"open_date"`
	DateLocalizeKey        string             `json:"date_localize_key"`
	EntrySceneId           int64              `json:"entry_scene_id"`
	StartConditionType     FieldConditionType `json:"start_condition_type"`
	StartConditionId       int64              `json:"start_condition_id"`
	EndConditionType       FieldConditionType `json:"end_condition_type"`
	EndConditionId         int64              `json:"end_condition_id"`
	EndReadyConditionType  FieldConditionType `json:"end_ready_condition_type"`
	EndReadyConditionId    int64              `json:"end_ready_condition_id"`
	OpenConditionStage     int64              `json:"open_condition_stage"`
	CharacterIconPath      string             `json:"character_icon_path"`
	DateResultBgPath       string             `json:"date_result_bg_path"`
	DateResultSpinePath    string             `json:"date_result_spine_path"`
	DateResultSpineOffsetX float32            `json:"date_result_spine_offset_x"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldDateExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldDate"))
	}
	__offset_date_localize_key := b.CreateString(fbsutils.Convert(t.DateLocalizeKey, t.FlatBuffer.TableKey))
	__offset_character_icon_path := b.CreateString(fbsutils.Convert(t.CharacterIconPath, t.FlatBuffer.TableKey))
	__offset_date_result_bg_path := b.CreateString(fbsutils.Convert(t.DateResultBgPath, t.FlatBuffer.TableKey))
	__offset_date_result_spine_path := b.CreateString(fbsutils.Convert(t.DateResultSpinePath, t.FlatBuffer.TableKey))
	FieldDateExcelStart(b)
	FieldDateExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	FieldDateExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	FieldDateExcelAddOpenDate(b, fbsutils.Convert(t.OpenDate, t.FlatBuffer.TableKey))
	FieldDateExcelAddDateLocalizeKey(b, __offset_date_localize_key)
	FieldDateExcelAddEntrySceneId(b, fbsutils.Convert(t.EntrySceneId, t.FlatBuffer.TableKey))
	FieldDateExcelAddStartConditionType(b, fbsutils.Convert(t.StartConditionType, t.FlatBuffer.TableKey))
	FieldDateExcelAddStartConditionId(b, fbsutils.Convert(t.StartConditionId, t.FlatBuffer.TableKey))
	FieldDateExcelAddEndConditionType(b, fbsutils.Convert(t.EndConditionType, t.FlatBuffer.TableKey))
	FieldDateExcelAddEndConditionId(b, fbsutils.Convert(t.EndConditionId, t.FlatBuffer.TableKey))
	FieldDateExcelAddEndReadyConditionType(b, fbsutils.Convert(t.EndReadyConditionType, t.FlatBuffer.TableKey))
	FieldDateExcelAddEndReadyConditionId(b, fbsutils.Convert(t.EndReadyConditionId, t.FlatBuffer.TableKey))
	FieldDateExcelAddOpenConditionStage(b, fbsutils.Convert(t.OpenConditionStage, t.FlatBuffer.TableKey))
	FieldDateExcelAddCharacterIconPath(b, __offset_character_icon_path)
	FieldDateExcelAddDateResultBgPath(b, __offset_date_result_bg_path)
	FieldDateExcelAddDateResultSpinePath(b, __offset_date_result_spine_path)
	FieldDateExcelAddDateResultSpineOffsetX(b, fbsutils.Convert(t.DateResultSpineOffsetX, t.FlatBuffer.TableKey))
	return FieldDateExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldDateExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldDateExcelDto) UnmarshalMessage(e *FieldDateExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldDate"))
	}
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.OpenDate = fbsutils.Convert(e.OpenDate(), t.FlatBuffer.TableKey)
	t.DateLocalizeKey = fbsutils.Convert(string(e.DateLocalizeKey()), t.FlatBuffer.TableKey)
	t.EntrySceneId = fbsutils.Convert(e.EntrySceneId(), t.FlatBuffer.TableKey)
	t.StartConditionType = FieldConditionType(fbsutils.Convert(int32(e.StartConditionType()), t.FlatBuffer.TableKey))
	t.StartConditionId = fbsutils.Convert(e.StartConditionId(), t.FlatBuffer.TableKey)
	t.EndConditionType = FieldConditionType(fbsutils.Convert(int32(e.EndConditionType()), t.FlatBuffer.TableKey))
	t.EndConditionId = fbsutils.Convert(e.EndConditionId(), t.FlatBuffer.TableKey)
	t.EndReadyConditionType = FieldConditionType(fbsutils.Convert(int32(e.EndReadyConditionType()), t.FlatBuffer.TableKey))
	t.EndReadyConditionId = fbsutils.Convert(e.EndReadyConditionId(), t.FlatBuffer.TableKey)
	t.OpenConditionStage = fbsutils.Convert(e.OpenConditionStage(), t.FlatBuffer.TableKey)
	t.CharacterIconPath = fbsutils.Convert(string(e.CharacterIconPath()), t.FlatBuffer.TableKey)
	t.DateResultBgPath = fbsutils.Convert(string(e.DateResultBgPath()), t.FlatBuffer.TableKey)
	t.DateResultSpinePath = fbsutils.Convert(string(e.DateResultSpinePath()), t.FlatBuffer.TableKey)
	t.DateResultSpineOffsetX = fbsutils.Convert(e.DateResultSpineOffsetX(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldDateExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldDateExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldDateExcelDto) FlatDataName() string {
	return "FieldDateExcel"
}
