// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TimeAttackDungeonRewardExcelDto represents a FlatBuffers table
type TimeAttackDungeonRewardExcelDto struct {
	fbsutils.FlatBuffer
	Id                        int64                         `json:"id"`
	RewardMaxPoint            int64                         `json:"reward_max_point"`
	RewardType                []TimeAttackDungeonRewardType `json:"reward_type"`
	RewardMinPoint            []int64                       `json:"reward_min_point"`
	RewardParcelType          []ParcelType                  `json:"reward_parcel_type"`
	RewardParcelId            []int64                       `json:"reward_parcel_id"`
	RewardParcelDefaultAmount []int64                       `json:"reward_parcel_default_amount"`
	RewardParcelMaxAmount     []int64                       `json:"reward_parcel_max_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TimeAttackDungeonRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TimeAttackDungeonReward"))
	}
	TimeAttackDungeonRewardExcelStart(b)
	TimeAttackDungeonRewardExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	TimeAttackDungeonRewardExcelAddRewardMaxPoint(b, fbsutils.Convert(t.RewardMaxPoint, t.FlatBuffer.TableKey))
	TimeAttackDungeonRewardExcelStartRewardTypeVector(b, len(t.RewardType))
	for i := range len(t.RewardType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardType[len(t.RewardType)-i-1]), t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonRewardExcelAddRewardType(b, b.EndVector(len(t.RewardType)))
	TimeAttackDungeonRewardExcelStartRewardMinPointVector(b, len(t.RewardMinPoint))
	for i := range len(t.RewardMinPoint) {
		b.PrependInt64(fbsutils.Convert(t.RewardMinPoint[len(t.RewardMinPoint)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonRewardExcelAddRewardMinPoint(b, b.EndVector(len(t.RewardMinPoint)))
	TimeAttackDungeonRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	TimeAttackDungeonRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	TimeAttackDungeonRewardExcelStartRewardParcelDefaultAmountVector(b, len(t.RewardParcelDefaultAmount))
	for i := range len(t.RewardParcelDefaultAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelDefaultAmount[len(t.RewardParcelDefaultAmount)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonRewardExcelAddRewardParcelDefaultAmount(b, b.EndVector(len(t.RewardParcelDefaultAmount)))
	TimeAttackDungeonRewardExcelStartRewardParcelMaxAmountVector(b, len(t.RewardParcelMaxAmount))
	for i := range len(t.RewardParcelMaxAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelMaxAmount[len(t.RewardParcelMaxAmount)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonRewardExcelAddRewardParcelMaxAmount(b, b.EndVector(len(t.RewardParcelMaxAmount)))
	return TimeAttackDungeonRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TimeAttackDungeonRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishTimeAttackDungeonRewardExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TimeAttackDungeonRewardExcelDto) UnmarshalMessage(e *TimeAttackDungeonRewardExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TimeAttackDungeonReward"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.RewardMaxPoint = fbsutils.Convert(e.RewardMaxPoint(), t.FlatBuffer.TableKey)
	t.RewardType = make([]TimeAttackDungeonRewardType, e.RewardTypeLength())
	for i := range e.RewardTypeLength() {
		t.RewardType[i] = TimeAttackDungeonRewardType(fbsutils.Convert(int32(e.RewardType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardMinPoint = make([]int64, e.RewardMinPointLength())
	for i := range e.RewardMinPointLength() {
		t.RewardMinPoint[i] = fbsutils.Convert(e.RewardMinPoint(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelDefaultAmount = make([]int64, e.RewardParcelDefaultAmountLength())
	for i := range e.RewardParcelDefaultAmountLength() {
		t.RewardParcelDefaultAmount[i] = fbsutils.Convert(e.RewardParcelDefaultAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelMaxAmount = make([]int64, e.RewardParcelMaxAmountLength())
	for i := range e.RewardParcelMaxAmountLength() {
		t.RewardParcelMaxAmount[i] = fbsutils.Convert(e.RewardParcelMaxAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TimeAttackDungeonRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTimeAttackDungeonRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TimeAttackDungeonRewardExcelDto) FlatDataName() string {
	return "TimeAttackDungeonRewardExcel"
}
