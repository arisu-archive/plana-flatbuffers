// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldSceneExcelDto represents a FlatBuffers table
type FieldSceneExcelDto struct {
	fbsutils.FlatBuffer
	UniqueId                           int64   `json:"unique_id"`
	DateId                             int64   `json:"date_id"`
	GroupId                            int64   `json:"group_id"`
	ArtLevelPath                       string  `json:"art_level_path"`
	DesignLevelPath                    string  `json:"design_level_path"`
	BgmId                              int64   `json:"bgm_id"`
	ConditionalBgmQuestId              []int64 `json:"conditional_bgm_quest_id"`
	BeginConditionalBgmScenarioGroupId []int64 `json:"begin_conditional_bgm_scenario_group_id"`
	BeginConditionalBgmInteractionId   []int64 `json:"begin_conditional_bgm_interaction_id"`
	EndConditionalBgmScenarioGroupId   []int64 `json:"end_conditional_bgm_scenario_group_id"`
	EndConditionalBgmInteractionId     []int64 `json:"end_conditional_bgm_interaction_id"`
	ConditionalBgmId                   []int64 `json:"conditional_bgm_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldSceneExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldScene"))
	}
	FieldSceneExcelStart(b)
	FieldSceneExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	FieldSceneExcelAddDateId(b, fbsutils.Convert(t.DateId, t.FlatBuffer.TableKey))
	FieldSceneExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	FieldSceneExcelAddArtLevelPath(b, b.CreateString(fbsutils.Convert(t.ArtLevelPath, t.FlatBuffer.TableKey)))
	FieldSceneExcelAddDesignLevelPath(b, b.CreateString(fbsutils.Convert(t.DesignLevelPath, t.FlatBuffer.TableKey)))
	FieldSceneExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	FieldSceneExcelStartConditionalBgmQuestIdVector(b, len(t.ConditionalBgmQuestId))
	for i := range len(t.ConditionalBgmQuestId) {
		b.PrependInt64(fbsutils.Convert(t.ConditionalBgmQuestId[len(t.ConditionalBgmQuestId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldSceneExcelAddConditionalBgmQuestId(b, b.EndVector(len(t.ConditionalBgmQuestId)))
	FieldSceneExcelStartBeginConditionalBgmScenarioGroupIdVector(b, len(t.BeginConditionalBgmScenarioGroupId))
	for i := range len(t.BeginConditionalBgmScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.BeginConditionalBgmScenarioGroupId[len(t.BeginConditionalBgmScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldSceneExcelAddBeginConditionalBgmScenarioGroupId(b, b.EndVector(len(t.BeginConditionalBgmScenarioGroupId)))
	FieldSceneExcelStartBeginConditionalBgmInteractionIdVector(b, len(t.BeginConditionalBgmInteractionId))
	for i := range len(t.BeginConditionalBgmInteractionId) {
		b.PrependInt64(fbsutils.Convert(t.BeginConditionalBgmInteractionId[len(t.BeginConditionalBgmInteractionId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldSceneExcelAddBeginConditionalBgmInteractionId(b, b.EndVector(len(t.BeginConditionalBgmInteractionId)))
	FieldSceneExcelStartEndConditionalBgmScenarioGroupIdVector(b, len(t.EndConditionalBgmScenarioGroupId))
	for i := range len(t.EndConditionalBgmScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.EndConditionalBgmScenarioGroupId[len(t.EndConditionalBgmScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldSceneExcelAddEndConditionalBgmScenarioGroupId(b, b.EndVector(len(t.EndConditionalBgmScenarioGroupId)))
	FieldSceneExcelStartEndConditionalBgmInteractionIdVector(b, len(t.EndConditionalBgmInteractionId))
	for i := range len(t.EndConditionalBgmInteractionId) {
		b.PrependInt64(fbsutils.Convert(t.EndConditionalBgmInteractionId[len(t.EndConditionalBgmInteractionId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldSceneExcelAddEndConditionalBgmInteractionId(b, b.EndVector(len(t.EndConditionalBgmInteractionId)))
	FieldSceneExcelStartConditionalBgmIdVector(b, len(t.ConditionalBgmId))
	for i := range len(t.ConditionalBgmId) {
		b.PrependInt64(fbsutils.Convert(t.ConditionalBgmId[len(t.ConditionalBgmId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldSceneExcelAddConditionalBgmId(b, b.EndVector(len(t.ConditionalBgmId)))
	return FieldSceneExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldSceneExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishFieldSceneExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldSceneExcelDto) UnmarshalMessage(e *FieldSceneExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldScene"))
	}
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.DateId = fbsutils.Convert(e.DateId(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.ArtLevelPath = fbsutils.Convert(string(e.ArtLevelPath()), t.FlatBuffer.TableKey)
	t.DesignLevelPath = fbsutils.Convert(string(e.DesignLevelPath()), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.ConditionalBgmQuestId = make([]int64, e.ConditionalBgmQuestIdLength())
	for i := range e.ConditionalBgmQuestIdLength() {
		t.ConditionalBgmQuestId[i] = fbsutils.Convert(e.ConditionalBgmQuestId(i), t.FlatBuffer.TableKey)
	}
	t.BeginConditionalBgmScenarioGroupId = make([]int64, e.BeginConditionalBgmScenarioGroupIdLength())
	for i := range e.BeginConditionalBgmScenarioGroupIdLength() {
		t.BeginConditionalBgmScenarioGroupId[i] = fbsutils.Convert(e.BeginConditionalBgmScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.BeginConditionalBgmInteractionId = make([]int64, e.BeginConditionalBgmInteractionIdLength())
	for i := range e.BeginConditionalBgmInteractionIdLength() {
		t.BeginConditionalBgmInteractionId[i] = fbsutils.Convert(e.BeginConditionalBgmInteractionId(i), t.FlatBuffer.TableKey)
	}
	t.EndConditionalBgmScenarioGroupId = make([]int64, e.EndConditionalBgmScenarioGroupIdLength())
	for i := range e.EndConditionalBgmScenarioGroupIdLength() {
		t.EndConditionalBgmScenarioGroupId[i] = fbsutils.Convert(e.EndConditionalBgmScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.EndConditionalBgmInteractionId = make([]int64, e.EndConditionalBgmInteractionIdLength())
	for i := range e.EndConditionalBgmInteractionIdLength() {
		t.EndConditionalBgmInteractionId[i] = fbsutils.Convert(e.EndConditionalBgmInteractionId(i), t.FlatBuffer.TableKey)
	}
	t.ConditionalBgmId = make([]int64, e.ConditionalBgmIdLength())
	for i := range e.ConditionalBgmIdLength() {
		t.ConditionalBgmId[i] = fbsutils.Convert(e.ConditionalBgmId(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldSceneExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldSceneExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldSceneExcelDto) FlatDataName() string {
	return "FieldSceneExcel"
}
