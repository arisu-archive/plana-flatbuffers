// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstNewbieContentExcelDto represents a FlatBuffers table
type ConstNewbieContentExcelDto struct {
	fbsutils.FlatBuffer
	NewbieGachaReleaseDate          string `json:"newbie_gacha_release_date"`
	NewbieGachaCheckDays            int32  `json:"newbie_gacha_check_days"`
	NewbieGachaTokenGraceTime       int32  `json:"newbie_gacha_token_grace_time"`
	NewbieAttendanceReleaseDate     string `json:"newbie_attendance_release_date"`
	NewbieAttendanceStartableEndDay int32  `json:"newbie_attendance_startable_end_day"`
	NewbieAttendanceEndDay          int32  `json:"newbie_attendance_end_day"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstNewbieContentExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstNewbieContent"))
	}
	ConstNewbieContentExcelStart(b)
	ConstNewbieContentExcelAddNewbieGachaReleaseDate(b, b.CreateString(fbsutils.Convert(t.NewbieGachaReleaseDate, t.FlatBuffer.TableKey)))
	ConstNewbieContentExcelAddNewbieGachaCheckDays(b, fbsutils.Convert(t.NewbieGachaCheckDays, t.FlatBuffer.TableKey))
	ConstNewbieContentExcelAddNewbieGachaTokenGraceTime(b, fbsutils.Convert(t.NewbieGachaTokenGraceTime, t.FlatBuffer.TableKey))
	ConstNewbieContentExcelAddNewbieAttendanceReleaseDate(b, b.CreateString(fbsutils.Convert(t.NewbieAttendanceReleaseDate, t.FlatBuffer.TableKey)))
	ConstNewbieContentExcelAddNewbieAttendanceStartableEndDay(b, fbsutils.Convert(t.NewbieAttendanceStartableEndDay, t.FlatBuffer.TableKey))
	ConstNewbieContentExcelAddNewbieAttendanceEndDay(b, fbsutils.Convert(t.NewbieAttendanceEndDay, t.FlatBuffer.TableKey))
	return ConstNewbieContentExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstNewbieContentExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishConstNewbieContentExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstNewbieContentExcelDto) UnmarshalMessage(e *ConstNewbieContentExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstNewbieContent"))
	}
	t.NewbieGachaReleaseDate = fbsutils.Convert(string(e.NewbieGachaReleaseDate()), t.FlatBuffer.TableKey)
	t.NewbieGachaCheckDays = fbsutils.Convert(e.NewbieGachaCheckDays(), t.FlatBuffer.TableKey)
	t.NewbieGachaTokenGraceTime = fbsutils.Convert(e.NewbieGachaTokenGraceTime(), t.FlatBuffer.TableKey)
	t.NewbieAttendanceReleaseDate = fbsutils.Convert(string(e.NewbieAttendanceReleaseDate()), t.FlatBuffer.TableKey)
	t.NewbieAttendanceStartableEndDay = fbsutils.Convert(e.NewbieAttendanceStartableEndDay(), t.FlatBuffer.TableKey)
	t.NewbieAttendanceEndDay = fbsutils.Convert(e.NewbieAttendanceEndDay(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstNewbieContentExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstNewbieContentExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstNewbieContentExcelDto) FlatDataName() string {
	return "ConstNewbieContentExcel"
}
