// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentCharacterBonusExcelDto represents a FlatBuffers table
type EventContentCharacterBonusExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId       int64                  `json:"event_content_id"`
	CharacterId          int64                  `json:"character_id"`
	EventContentItemType []EventContentItemType `json:"event_content_item_type"`
	BonusPercentage      []int64                `json:"bonus_percentage"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentCharacterBonusExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentCharacterBonus"))
	}
	EventContentCharacterBonusExcelStart(b)
	EventContentCharacterBonusExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentCharacterBonusExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	EventContentCharacterBonusExcelStartEventContentItemTypeVector(b, len(t.EventContentItemType))
	for i := range len(t.EventContentItemType) {
		b.PrependInt32(fbsutils.Convert(int32(t.EventContentItemType[len(t.EventContentItemType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentCharacterBonusExcelAddEventContentItemType(b, b.EndVector(len(t.EventContentItemType)))
	EventContentCharacterBonusExcelStartBonusPercentageVector(b, len(t.BonusPercentage))
	for i := range len(t.BonusPercentage) {
		b.PrependInt64(fbsutils.Convert(t.BonusPercentage[len(t.BonusPercentage)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentCharacterBonusExcelAddBonusPercentage(b, b.EndVector(len(t.BonusPercentage)))
	return EventContentCharacterBonusExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentCharacterBonusExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishEventContentCharacterBonusExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCharacterBonusExcelDto) UnmarshalMessage(e *EventContentCharacterBonusExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentCharacterBonus"))
	}
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.EventContentItemType = make([]EventContentItemType, e.EventContentItemTypeLength())
	for i := range e.EventContentItemTypeLength() {
		t.EventContentItemType[i] = EventContentItemType(fbsutils.Convert(int32(e.EventContentItemType(i)), t.FlatBuffer.TableKey))
	}
	t.BonusPercentage = make([]int64, e.BonusPercentageLength())
	for i := range e.BonusPercentageLength() {
		t.BonusPercentage[i] = fbsutils.Convert(e.BonusPercentage(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCharacterBonusExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentCharacterBonusExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentCharacterBonusExcelDto) FlatDataName() string {
	return "EventContentCharacterBonusExcel"
}
