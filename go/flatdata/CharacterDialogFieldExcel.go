// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterDialogFieldExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterDialogFieldExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogFieldExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterDialogFieldExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCharacterDialogFieldExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCharacterDialogFieldExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogFieldExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterDialogFieldExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCharacterDialogFieldExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CharacterDialogFieldExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterDialogFieldExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterDialogFieldExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogFieldExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterDialogFieldExcel) Phase() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogFieldExcel) MutatePhase(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *CharacterDialogFieldExcel) TargetIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogFieldExcel) MutateTargetIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *CharacterDialogFieldExcel) DialogType() FieldDialogType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return FieldDialogType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogFieldExcel) MutateDialogType(n FieldDialogType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *CharacterDialogFieldExcel) Duration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogFieldExcel) MutateDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterDialogFieldExcel) MotionName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogFieldExcel) IsInteractionDialog() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogFieldExcel) MutateIsInteractionDialog(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *CharacterDialogFieldExcel) HideUi() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogFieldExcel) MutateHideUi(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *CharacterDialogFieldExcel) LocalizeKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogFieldExcel) LocalizeJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CharacterDialogFieldExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func CharacterDialogFieldExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(0, groupId, 0)
}
func CharacterDialogFieldExcelAddPhase(builder *flatbuffers.Builder, phase int32) {
	builder.PrependInt32Slot(1, phase, 0)
}
func CharacterDialogFieldExcelAddTargetIndex(builder *flatbuffers.Builder, targetIndex int32) {
	builder.PrependInt32Slot(2, targetIndex, 0)
}
func CharacterDialogFieldExcelAddDialogType(builder *flatbuffers.Builder, dialogType FieldDialogType) {
	builder.PrependInt32Slot(3, int32(dialogType), 0)
}
func CharacterDialogFieldExcelAddDuration(builder *flatbuffers.Builder, duration int64) {
	builder.PrependInt64Slot(4, duration, 0)
}
func CharacterDialogFieldExcelAddMotionName(builder *flatbuffers.Builder, motionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(motionName), 0)
}
func CharacterDialogFieldExcelAddIsInteractionDialog(builder *flatbuffers.Builder, isInteractionDialog bool) {
	builder.PrependBoolSlot(6, isInteractionDialog, false)
}
func CharacterDialogFieldExcelAddHideUi(builder *flatbuffers.Builder, hideUi bool) {
	builder.PrependBoolSlot(7, hideUi, false)
}
func CharacterDialogFieldExcelAddLocalizeKr(builder *flatbuffers.Builder, localizeKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(localizeKr), 0)
}
func CharacterDialogFieldExcelAddLocalizeJp(builder *flatbuffers.Builder, localizeJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(localizeJp), 0)
}
func CharacterDialogFieldExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
