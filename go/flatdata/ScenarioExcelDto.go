// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioExcelDto represents a FlatBuffers table
type ScenarioExcelDto struct {
	fbsutils.FlatBuffer
	None        []ScenarioBGType          `json:"none"`
	Idle        []ScenarioCharacterAction `json:"idle"`
	Cafe        DialogCategory            `json:"cafe"`
	Talk        DialogType                `json:"talk"`
	Open        StoryCondition            `json:"open"`
	EnterConver EmojiEvent                `json:"enter_conver"`
	Center      ScenarioZoomAnchors       `json:"center"`
	Instant     ScenarioZoomType          `json:"instant"`
	Prologue    ScenarioContentType       `json:"prologue"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Scenario"))
	}
	ScenarioExcelStart(b)
	ScenarioExcelStartNoneVector(b, len(t.None))
	for i := range len(t.None) {
		b.PrependInt32(fbsutils.Convert(int32(t.None[len(t.None)-i-1]), t.FlatBuffer.TableKey))
	}
	ScenarioExcelAddNone(b, b.EndVector(len(t.None)))
	ScenarioExcelStartIdleVector(b, len(t.Idle))
	for i := range len(t.Idle) {
		b.PrependInt32(fbsutils.Convert(int32(t.Idle[len(t.Idle)-i-1]), t.FlatBuffer.TableKey))
	}
	ScenarioExcelAddIdle(b, b.EndVector(len(t.Idle)))
	ScenarioExcelAddCafe(b, fbsutils.Convert(t.Cafe, t.FlatBuffer.TableKey))
	ScenarioExcelAddTalk(b, fbsutils.Convert(t.Talk, t.FlatBuffer.TableKey))
	ScenarioExcelAddOpen(b, fbsutils.Convert(t.Open, t.FlatBuffer.TableKey))
	ScenarioExcelAddEnterConver(b, fbsutils.Convert(t.EnterConver, t.FlatBuffer.TableKey))
	ScenarioExcelAddCenter(b, fbsutils.Convert(t.Center, t.FlatBuffer.TableKey))
	ScenarioExcelAddInstant(b, fbsutils.Convert(t.Instant, t.FlatBuffer.TableKey))
	ScenarioExcelAddPrologue(b, fbsutils.Convert(t.Prologue, t.FlatBuffer.TableKey))
	return ScenarioExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishScenarioExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioExcelDto) UnmarshalMessage(e *ScenarioExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Scenario"))
	}
	t.None = make([]ScenarioBGType, e.NoneLength())
	for i := range e.NoneLength() {
		t.None[i] = ScenarioBGType(fbsutils.Convert(int32(e.None(i)), t.FlatBuffer.TableKey))
	}
	t.Idle = make([]ScenarioCharacterAction, e.IdleLength())
	for i := range e.IdleLength() {
		t.Idle[i] = ScenarioCharacterAction(fbsutils.Convert(int32(e.Idle(i)), t.FlatBuffer.TableKey))
	}
	t.Cafe = DialogCategory(fbsutils.Convert(int32(e.Cafe()), t.FlatBuffer.TableKey))
	t.Talk = DialogType(fbsutils.Convert(int32(e.Talk()), t.FlatBuffer.TableKey))
	t.Open = StoryCondition(fbsutils.Convert(int32(e.Open()), t.FlatBuffer.TableKey))
	t.EnterConver = EmojiEvent(fbsutils.Convert(int32(e.EnterConver()), t.FlatBuffer.TableKey))
	t.Center = ScenarioZoomAnchors(fbsutils.Convert(int32(e.Center()), t.FlatBuffer.TableKey))
	t.Instant = ScenarioZoomType(fbsutils.Convert(int32(e.Instant()), t.FlatBuffer.TableKey))
	t.Prologue = ScenarioContentType(fbsutils.Convert(int32(e.Prologue()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioExcelDto) FlatDataName() string {
	return "ScenarioExcel"
}
