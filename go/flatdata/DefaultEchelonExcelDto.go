// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// DefaultEchelonExcelDto represents a FlatBuffers table
type DefaultEchelonExcelDto struct {
	fbsutils.FlatBuffer
	EchlonId  int32   `json:"echlon_id"`
	LeaderId  int64   `json:"leader_id"`
	MainId    []int64 `json:"main_id"`
	SupportId []int64 `json:"support_id"`
	TssId     int64   `json:"tss_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *DefaultEchelonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("DefaultEchelon"))
	}
	DefaultEchelonExcelStart(b)
	DefaultEchelonExcelAddEchlonId(b, fbsutils.Convert(t.EchlonId, t.FlatBuffer.TableKey))
	DefaultEchelonExcelAddLeaderId(b, fbsutils.Convert(t.LeaderId, t.FlatBuffer.TableKey))
	DefaultEchelonExcelStartMainIdVector(b, len(t.MainId))
	for i := range len(t.MainId) {
		b.PrependInt64(fbsutils.Convert(t.MainId[len(t.MainId)-i-1], t.FlatBuffer.TableKey))
	}
	DefaultEchelonExcelAddMainId(b, b.EndVector(len(t.MainId)))
	DefaultEchelonExcelStartSupportIdVector(b, len(t.SupportId))
	for i := range len(t.SupportId) {
		b.PrependInt64(fbsutils.Convert(t.SupportId[len(t.SupportId)-i-1], t.FlatBuffer.TableKey))
	}
	DefaultEchelonExcelAddSupportId(b, b.EndVector(len(t.SupportId)))
	DefaultEchelonExcelAddTssId(b, fbsutils.Convert(t.TssId, t.FlatBuffer.TableKey))
	return DefaultEchelonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *DefaultEchelonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishDefaultEchelonExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *DefaultEchelonExcelDto) UnmarshalMessage(e *DefaultEchelonExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("DefaultEchelon"))
	}
	t.EchlonId = fbsutils.Convert(e.EchlonId(), t.FlatBuffer.TableKey)
	t.LeaderId = fbsutils.Convert(e.LeaderId(), t.FlatBuffer.TableKey)
	t.MainId = make([]int64, e.MainIdLength())
	for i := range e.MainIdLength() {
		t.MainId[i] = fbsutils.Convert(e.MainId(i), t.FlatBuffer.TableKey)
	}
	t.SupportId = make([]int64, e.SupportIdLength())
	for i := range e.SupportIdLength() {
		t.SupportId[i] = fbsutils.Convert(e.SupportId(i), t.FlatBuffer.TableKey)
	}
	t.TssId = fbsutils.Convert(e.TssId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *DefaultEchelonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsDefaultEchelonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (DefaultEchelonExcelDto) FlatDataName() string {
	return "DefaultEchelonExcel"
}
