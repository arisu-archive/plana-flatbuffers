// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FloaterCommonExcelDto represents a FlatBuffers table
type FloaterCommonExcelDto struct {
	fbsutils.FlatBuffer
	Id                     int64            `json:"id"`
	TacticEntityType       TacticEntityType `json:"tactic_entity_type"`
	FloaterOffsetPosX      int32            `json:"floater_offset_pos_x"`
	FloaterOffsetPosY      int32            `json:"floater_offset_pos_y"`
	FloaterRandomPosRangeX int32            `json:"floater_random_pos_range_x"`
	FloaterRandomPosRangeY int32            `json:"floater_random_pos_range_y"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FloaterCommonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FloaterCommon"))
	}
	FloaterCommonExcelStart(b)
	FloaterCommonExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	FloaterCommonExcelAddTacticEntityType(b, fbsutils.Convert(t.TacticEntityType, t.FlatBuffer.TableKey))
	FloaterCommonExcelAddFloaterOffsetPosX(b, fbsutils.Convert(t.FloaterOffsetPosX, t.FlatBuffer.TableKey))
	FloaterCommonExcelAddFloaterOffsetPosY(b, fbsutils.Convert(t.FloaterOffsetPosY, t.FlatBuffer.TableKey))
	FloaterCommonExcelAddFloaterRandomPosRangeX(b, fbsutils.Convert(t.FloaterRandomPosRangeX, t.FlatBuffer.TableKey))
	FloaterCommonExcelAddFloaterRandomPosRangeY(b, fbsutils.Convert(t.FloaterRandomPosRangeY, t.FlatBuffer.TableKey))
	return FloaterCommonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FloaterCommonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishFloaterCommonExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FloaterCommonExcelDto) UnmarshalMessage(e *FloaterCommonExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FloaterCommon"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.TacticEntityType = TacticEntityType(fbsutils.Convert(int32(e.TacticEntityType()), t.FlatBuffer.TableKey))
	t.FloaterOffsetPosX = fbsutils.Convert(e.FloaterOffsetPosX(), t.FlatBuffer.TableKey)
	t.FloaterOffsetPosY = fbsutils.Convert(e.FloaterOffsetPosY(), t.FlatBuffer.TableKey)
	t.FloaterRandomPosRangeX = fbsutils.Convert(e.FloaterRandomPosRangeX(), t.FlatBuffer.TableKey)
	t.FloaterRandomPosRangeY = fbsutils.Convert(e.FloaterRandomPosRangeY(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FloaterCommonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFloaterCommonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FloaterCommonExcelDto) FlatDataName() string {
	return "FloaterCommonExcel"
}
