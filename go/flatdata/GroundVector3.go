// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GroundVector3 struct {
	_tab flatbuffers.Table
}

func GetRootAsGroundVector3(buf []byte, offset flatbuffers.UOffsetT) *GroundVector3 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroundVector3{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGroundVector3(buf []byte, offset flatbuffers.UOffsetT) *GroundVector3 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroundVector3{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GroundVector3) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroundVector3) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroundVector3) Z() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GroundVector3) MutateZ(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *GroundVector3) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GroundVector3) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *GroundVector3) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GroundVector3) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func GroundVector3Start(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GroundVector3AddZ(builder *flatbuffers.Builder, z float32) {
	builder.PrependFloat32Slot(0, z, 0.0)
}
func GroundVector3AddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(1, y, 0.0)
}
func GroundVector3AddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(2, x, 0.0)
}
func GroundVector3End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
