// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GroundGridFlatDto represents a FlatBuffers table
type GroundGridFlatDto struct {
	fbsutils.FlatBuffer
	X       int32               `json:"x"`
	Y       int32               `json:"y"`
	StartX  float32             `json:"start_x"`
	StartY  float32             `json:"start_y"`
	Gap     float32             `json:"gap"`
	Nodes   []GroundNodeFlatDto `json:"nodes"`
	Version string              `json:"version"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GroundGridFlatDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundGridFlat"))
	}
	var __offset_nodes flatbuffers.UOffsetT
	__nestedOffsets_nodes := make([]flatbuffers.UOffsetT, len(t.Nodes))
	for i := range len(t.Nodes) {
		t.Nodes[i].InitKey(t.FlatBuffer.TableKey)
		__nestedOffsets_nodes[i] = t.Nodes[i].MarshalModel(b)
	}
	GroundGridFlatStartNodesVector(b, len(t.Nodes))
	for i := range len(t.Nodes) {
		b.PrependUOffsetT(__nestedOffsets_nodes[len(t.Nodes)-i-1])
	}
	__offset_nodes = b.EndVector(len(t.Nodes))
	__offset_version := b.CreateString(fbsutils.Convert(t.Version, t.FlatBuffer.TableKey))
	GroundGridFlatStart(b)
	GroundGridFlatAddX(b, fbsutils.Convert(t.X, t.FlatBuffer.TableKey))
	GroundGridFlatAddY(b, fbsutils.Convert(t.Y, t.FlatBuffer.TableKey))
	GroundGridFlatAddStartX(b, fbsutils.Convert(t.StartX, t.FlatBuffer.TableKey))
	GroundGridFlatAddStartY(b, fbsutils.Convert(t.StartY, t.FlatBuffer.TableKey))
	GroundGridFlatAddGap(b, fbsutils.Convert(t.Gap, t.FlatBuffer.TableKey))
	GroundGridFlatAddNodes(b, __offset_nodes)
	GroundGridFlatAddVersion(b, __offset_version)
	return GroundGridFlatEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GroundGridFlatDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GroundGridFlatDto) UnmarshalMessage(e *GroundGridFlat) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundGridFlat"))
	}
	t.X = fbsutils.Convert(e.X(), t.FlatBuffer.TableKey)
	t.Y = fbsutils.Convert(e.Y(), t.FlatBuffer.TableKey)
	t.StartX = fbsutils.Convert(e.StartX(), t.FlatBuffer.TableKey)
	t.StartY = fbsutils.Convert(e.StartY(), t.FlatBuffer.TableKey)
	t.Gap = fbsutils.Convert(e.Gap(), t.FlatBuffer.TableKey)
	t.Nodes = make([]GroundNodeFlatDto, e.NodesLength())
	for i := range e.NodesLength() {
		d := new(GroundNodeFlat)
		if !e.Nodes(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.Nodes[i].UnmarshalMessage(d)
	}
	t.Version = fbsutils.Convert(string(e.Version()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GroundGridFlatDto) Unmarshal(data []byte) error {
	root := GetRootAsGroundGridFlat(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GroundGridFlatDto) FlatDataName() string {
	return "GroundGridFlat"
}
