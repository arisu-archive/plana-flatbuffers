// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScenarioScriptField1Excel struct {
	_tab flatbuffers.Table
}

func GetRootAsScenarioScriptField1Excel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioScriptField1Excel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScenarioScriptField1Excel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScenarioScriptField1Excel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioScriptField1Excel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScenarioScriptField1Excel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScenarioScriptField1Excel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScenarioScriptField1Excel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScenarioScriptField1Excel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioScriptField1Excel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ScenarioScriptField1Excel) SelectionGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioScriptField1Excel) MutateSelectionGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ScenarioScriptField1Excel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioScriptField1Excel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ScenarioScriptField1Excel) Sound() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioScriptField1Excel) Transition() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioScriptField1Excel) MutateTransition(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *ScenarioScriptField1Excel) BgName() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioScriptField1Excel) MutateBgName(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *ScenarioScriptField1Excel) BgEffect() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioScriptField1Excel) MutateBgEffect(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *ScenarioScriptField1Excel) PopupFileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioScriptField1Excel) ScriptKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioScriptField1Excel) TextJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioScriptField1Excel) VoiceJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ScenarioScriptField1ExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func ScenarioScriptField1ExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(0, groupId, 0)
}
func ScenarioScriptField1ExcelAddSelectionGroup(builder *flatbuffers.Builder, selectionGroup int64) {
	builder.PrependInt64Slot(1, selectionGroup, 0)
}
func ScenarioScriptField1ExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(2, bgmId, 0)
}
func ScenarioScriptField1ExcelAddSound(builder *flatbuffers.Builder, sound flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sound), 0)
}
func ScenarioScriptField1ExcelAddTransition(builder *flatbuffers.Builder, transition uint32) {
	builder.PrependUint32Slot(4, transition, 0)
}
func ScenarioScriptField1ExcelAddBgName(builder *flatbuffers.Builder, bgName uint32) {
	builder.PrependUint32Slot(5, bgName, 0)
}
func ScenarioScriptField1ExcelAddBgEffect(builder *flatbuffers.Builder, bgEffect uint32) {
	builder.PrependUint32Slot(6, bgEffect, 0)
}
func ScenarioScriptField1ExcelAddPopupFileName(builder *flatbuffers.Builder, popupFileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(popupFileName), 0)
}
func ScenarioScriptField1ExcelAddScriptKr(builder *flatbuffers.Builder, scriptKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(scriptKr), 0)
}
func ScenarioScriptField1ExcelAddTextJp(builder *flatbuffers.Builder, textJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(textJp), 0)
}
func ScenarioScriptField1ExcelAddVoiceJp(builder *flatbuffers.Builder, voiceJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(voiceJp), 0)
}
func ScenarioScriptField1ExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
