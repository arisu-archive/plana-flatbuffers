// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TagExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTagExcel(buf []byte, offset flatbuffers.UOffsetT) *TagExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TagExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTagExcel(buf []byte, offset flatbuffers.UOffsetT) *TagExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TagExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TagExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TagExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TagExcel) None() Club {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Club(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TagExcel) MutateNone(n Club) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *TagExcel) Furniture() Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Tag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TagExcel) MutateFurniture(n Tag) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func TagExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TagExcelAddNone(builder *flatbuffers.Builder, none Club) {
	builder.PrependInt32Slot(0, int32(none), 0)
}
func TagExcelAddFurniture(builder *flatbuffers.Builder, furniture Tag) {
	builder.PrependInt32Slot(1, int32(furniture), 0)
}
func TagExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
