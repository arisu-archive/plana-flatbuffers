// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// PickupDuplicateBonusExcelDto represents a FlatBuffers table
type PickupDuplicateBonusExcelDto struct {
	fbsutils.FlatBuffer
	Id                 int64            `json:"id"`
	ShopCategoryType   ShopCategoryType `json:"shop_category_type"`
	ShopId             int64            `json:"shop_id"`
	PickupCharacterId  int64            `json:"pickup_character_id"`
	RewardParcelType   ParcelType       `json:"reward_parcel_type"`
	RewardParcelId     int64            `json:"reward_parcel_id"`
	RewardParcelAmount int64            `json:"reward_parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *PickupDuplicateBonusExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("PickupDuplicateBonus"))
	}
	PickupDuplicateBonusExcelStart(b)
	PickupDuplicateBonusExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	PickupDuplicateBonusExcelAddShopCategoryType(b, fbsutils.Convert(t.ShopCategoryType, t.FlatBuffer.TableKey))
	PickupDuplicateBonusExcelAddShopId(b, fbsutils.Convert(t.ShopId, t.FlatBuffer.TableKey))
	PickupDuplicateBonusExcelAddPickupCharacterId(b, fbsutils.Convert(t.PickupCharacterId, t.FlatBuffer.TableKey))
	PickupDuplicateBonusExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	PickupDuplicateBonusExcelAddRewardParcelId(b, fbsutils.Convert(t.RewardParcelId, t.FlatBuffer.TableKey))
	PickupDuplicateBonusExcelAddRewardParcelAmount(b, fbsutils.Convert(t.RewardParcelAmount, t.FlatBuffer.TableKey))
	return PickupDuplicateBonusExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *PickupDuplicateBonusExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishPickupDuplicateBonusExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *PickupDuplicateBonusExcelDto) UnmarshalMessage(e *PickupDuplicateBonusExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("PickupDuplicateBonus"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.ShopCategoryType = ShopCategoryType(fbsutils.Convert(int32(e.ShopCategoryType()), t.FlatBuffer.TableKey))
	t.ShopId = fbsutils.Convert(e.ShopId(), t.FlatBuffer.TableKey)
	t.PickupCharacterId = fbsutils.Convert(e.PickupCharacterId(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	t.RewardParcelId = fbsutils.Convert(e.RewardParcelId(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = fbsutils.Convert(e.RewardParcelAmount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *PickupDuplicateBonusExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsPickupDuplicateBonusExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (PickupDuplicateBonusExcelDto) FlatDataName() string {
	return "PickupDuplicateBonusExcel"
}
