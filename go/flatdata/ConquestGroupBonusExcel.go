// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestGroupBonusExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestGroupBonusExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestGroupBonusExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestGroupBonusExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishConquestGroupBonusExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConquestGroupBonusExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestGroupBonusExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestGroupBonusExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConquestGroupBonusExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConquestGroupBonusExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestGroupBonusExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestGroupBonusExcel) ConquestBonusId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateConquestBonusId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestGroupBonusExcel) School(j int) School {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return School(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) SchoolLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateSchool(j int, n School) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) RecommandLocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateRecommandLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ConquestGroupBonusExcel) BonusParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusCharacterCount1(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusCharacterCount1Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusCharacterCount1(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusPercentage1(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusPercentage1Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusPercentage1(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusCharacterCount2(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusCharacterCount2Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusCharacterCount2(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusPercentage2(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusPercentage2Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusPercentage2(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusCharacterCount3(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusCharacterCount3Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusCharacterCount3(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *ConquestGroupBonusExcel) BonusPercentage3(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) BonusPercentage3Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBonusExcel) MutateBonusPercentage3(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ConquestGroupBonusExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func ConquestGroupBonusExcelAddConquestBonusId(builder *flatbuffers.Builder, conquestBonusId int64) {
	builder.PrependInt64Slot(0, conquestBonusId, 0)
}
func ConquestGroupBonusExcelAddSchool(builder *flatbuffers.Builder, school flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(school), 0)
}
func ConquestGroupBonusExcelStartSchoolVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestGroupBonusExcelAddRecommandLocalizeEtcId(builder *flatbuffers.Builder, recommandLocalizeEtcId uint32) {
	builder.PrependUint32Slot(2, recommandLocalizeEtcId, 0)
}
func ConquestGroupBonusExcelAddBonusParcelType(builder *flatbuffers.Builder, bonusParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bonusParcelType), 0)
}
func ConquestGroupBonusExcelStartBonusParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestGroupBonusExcelAddBonusId(builder *flatbuffers.Builder, bonusId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(bonusId), 0)
}
func ConquestGroupBonusExcelStartBonusIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConquestGroupBonusExcelAddBonusCharacterCount1(builder *flatbuffers.Builder, bonusCharacterCount1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(bonusCharacterCount1), 0)
}
func ConquestGroupBonusExcelStartBonusCharacterCount1Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestGroupBonusExcelAddBonusPercentage1(builder *flatbuffers.Builder, bonusPercentage1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(bonusPercentage1), 0)
}
func ConquestGroupBonusExcelStartBonusPercentage1Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConquestGroupBonusExcelAddBonusCharacterCount2(builder *flatbuffers.Builder, bonusCharacterCount2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(bonusCharacterCount2), 0)
}
func ConquestGroupBonusExcelStartBonusCharacterCount2Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestGroupBonusExcelAddBonusPercentage2(builder *flatbuffers.Builder, bonusPercentage2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(bonusPercentage2), 0)
}
func ConquestGroupBonusExcelStartBonusPercentage2Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConquestGroupBonusExcelAddBonusCharacterCount3(builder *flatbuffers.Builder, bonusCharacterCount3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(bonusCharacterCount3), 0)
}
func ConquestGroupBonusExcelStartBonusCharacterCount3Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestGroupBonusExcelAddBonusPercentage3(builder *flatbuffers.Builder, bonusPercentage3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(bonusPercentage3), 0)
}
func ConquestGroupBonusExcelStartBonusPercentage3Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConquestGroupBonusExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
