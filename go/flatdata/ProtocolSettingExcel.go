// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProtocolSettingExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsProtocolSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *ProtocolSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProtocolSettingExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishProtocolSettingExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsProtocolSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *ProtocolSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProtocolSettingExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedProtocolSettingExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ProtocolSettingExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProtocolSettingExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProtocolSettingExcel) Protocol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProtocolSettingExcel) OpenConditionContent() OpenConditionContent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return OpenConditionContent(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProtocolSettingExcel) MutateOpenConditionContent(n OpenConditionContent) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ProtocolSettingExcel) Currency() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProtocolSettingExcel) MutateCurrency(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ProtocolSettingExcel) Inventory() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProtocolSettingExcel) MutateInventory(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ProtocolSettingExcel) Mail() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProtocolSettingExcel) MutateMail(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func ProtocolSettingExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ProtocolSettingExcelAddProtocol(builder *flatbuffers.Builder, protocol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(protocol), 0)
}
func ProtocolSettingExcelAddOpenConditionContent(builder *flatbuffers.Builder, openConditionContent OpenConditionContent) {
	builder.PrependInt32Slot(1, int32(openConditionContent), 0)
}
func ProtocolSettingExcelAddCurrency(builder *flatbuffers.Builder, currency bool) {
	builder.PrependBoolSlot(2, currency, false)
}
func ProtocolSettingExcelAddInventory(builder *flatbuffers.Builder, inventory bool) {
	builder.PrependBoolSlot(3, inventory, false)
}
func ProtocolSettingExcelAddMail(builder *flatbuffers.Builder, mail bool) {
	builder.PrependBoolSlot(4, mail, false)
}
func ProtocolSettingExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
