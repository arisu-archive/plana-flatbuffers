// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BossPhaseExcelDto represents a FlatBuffers table
type BossPhaseExcelDto struct {
	fbsutils.FlatBuffer
	AiPhase                     int64  `json:"ai_phase"`
	Id                          int64  `json:"id"`
	NormalAttackSkillUniqueName string `json:"normal_attack_skill_unique_name"`
	UseExSkill                  []bool `json:"use_ex_skill"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BossPhaseExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BossPhase"))
	}
	BossPhaseExcelStart(b)
	BossPhaseExcelAddAiPhase(b, fbsutils.Convert(t.AiPhase, t.FlatBuffer.TableKey))
	BossPhaseExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	BossPhaseExcelAddNormalAttackSkillUniqueName(b, b.CreateString(fbsutils.Convert(t.NormalAttackSkillUniqueName, t.FlatBuffer.TableKey)))
	BossPhaseExcelStartUseExSkillVector(b, len(t.UseExSkill))
	for i := range len(t.UseExSkill) {
		b.PrependBool(t.UseExSkill[len(t.UseExSkill)-i-1])
	}
	BossPhaseExcelAddUseExSkill(b, b.EndVector(len(t.UseExSkill)))
	return BossPhaseExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BossPhaseExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BossPhaseExcelDto) UnmarshalMessage(e *BossPhaseExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BossPhase"))
	}
	t.AiPhase = fbsutils.Convert(e.AiPhase(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.NormalAttackSkillUniqueName = fbsutils.Convert(string(e.NormalAttackSkillUniqueName()), t.FlatBuffer.TableKey)
	t.UseExSkill = make([]bool, e.UseExSkillLength())
	for i := range e.UseExSkillLength() {
		t.UseExSkill[i] = e.UseExSkill(i)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BossPhaseExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBossPhaseExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BossPhaseExcelDto) FlatDataName() string {
	return "BossPhaseExcel"
}
