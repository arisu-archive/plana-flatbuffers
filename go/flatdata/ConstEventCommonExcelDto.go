// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstEventCommonExcelDto represents a FlatBuffers table
type ConstEventCommonExcelDto struct {
	fbsutils.FlatBuffer
	EventStoryReplayHideEventContentId   int32  `json:"event_story_replay_hide_event_content_id"`
	TreasureLimitVariationClearLoopCount int32  `json:"treasure_limit_variation_clear_loop_count"`
	TreasureLimitVariationLoopCount      int32  `json:"treasure_limit_variation_loop_count"`
	TreasureLoopVariationAmount          int32  `json:"treasure_loop_variation_amount"`
	TreasureNormalVariationAmount        int32  `json:"treasure_normal_variation_amount"`
	SpecialOperactionCollectionGroupId   int64  `json:"special_operaction_collection_group_id"`
	MeetupScenarioReplayTitleLocalize    string `json:"meetup_scenario_replay_title_localize"`
	MeetupScenarioReplayResource         string `json:"meetup_scenario_replay_resource"`
	CardShopProbWeightRarity             Rarity `json:"card_shop_prob_weight_rarity"`
	CardShopProbWeightCount              int64  `json:"card_shop_prob_weight_count"`
	SubEventInstantClear                 bool   `json:"sub_event_instant_clear"`
	SubEventChangeLimitSeconds           int64  `json:"sub_event_change_limit_seconds"`
	EventStrategyPlayTimeLimitInSeconds  int64  `json:"event_strategy_play_time_limit_in_seconds"`
	EventContentHardStageCount           int32  `json:"event_content_hard_stage_count"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstEventCommonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstEventCommon"))
	}
	ConstEventCommonExcelStart(b)
	ConstEventCommonExcelAddEventStoryReplayHideEventContentId(b, fbsutils.Convert(t.EventStoryReplayHideEventContentId, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddTreasureLimitVariationClearLoopCount(b, fbsutils.Convert(t.TreasureLimitVariationClearLoopCount, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddTreasureLimitVariationLoopCount(b, fbsutils.Convert(t.TreasureLimitVariationLoopCount, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddTreasureLoopVariationAmount(b, fbsutils.Convert(t.TreasureLoopVariationAmount, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddTreasureNormalVariationAmount(b, fbsutils.Convert(t.TreasureNormalVariationAmount, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddSpecialOperactionCollectionGroupId(b, fbsutils.Convert(t.SpecialOperactionCollectionGroupId, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddMeetupScenarioReplayTitleLocalize(b, b.CreateString(fbsutils.Convert(t.MeetupScenarioReplayTitleLocalize, t.FlatBuffer.TableKey)))
	ConstEventCommonExcelAddMeetupScenarioReplayResource(b, b.CreateString(fbsutils.Convert(t.MeetupScenarioReplayResource, t.FlatBuffer.TableKey)))
	ConstEventCommonExcelAddCardShopProbWeightRarity(b, fbsutils.Convert(t.CardShopProbWeightRarity, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddCardShopProbWeightCount(b, fbsutils.Convert(t.CardShopProbWeightCount, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddSubEventInstantClear(b, t.SubEventInstantClear)
	ConstEventCommonExcelAddSubEventChangeLimitSeconds(b, fbsutils.Convert(t.SubEventChangeLimitSeconds, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddEventStrategyPlayTimeLimitInSeconds(b, fbsutils.Convert(t.EventStrategyPlayTimeLimitInSeconds, t.FlatBuffer.TableKey))
	ConstEventCommonExcelAddEventContentHardStageCount(b, fbsutils.Convert(t.EventContentHardStageCount, t.FlatBuffer.TableKey))
	return ConstEventCommonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstEventCommonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstEventCommonExcelDto) UnmarshalMessage(e *ConstEventCommonExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstEventCommon"))
	}
	t.EventStoryReplayHideEventContentId = fbsutils.Convert(e.EventStoryReplayHideEventContentId(), t.FlatBuffer.TableKey)
	t.TreasureLimitVariationClearLoopCount = fbsutils.Convert(e.TreasureLimitVariationClearLoopCount(), t.FlatBuffer.TableKey)
	t.TreasureLimitVariationLoopCount = fbsutils.Convert(e.TreasureLimitVariationLoopCount(), t.FlatBuffer.TableKey)
	t.TreasureLoopVariationAmount = fbsutils.Convert(e.TreasureLoopVariationAmount(), t.FlatBuffer.TableKey)
	t.TreasureNormalVariationAmount = fbsutils.Convert(e.TreasureNormalVariationAmount(), t.FlatBuffer.TableKey)
	t.SpecialOperactionCollectionGroupId = fbsutils.Convert(e.SpecialOperactionCollectionGroupId(), t.FlatBuffer.TableKey)
	t.MeetupScenarioReplayTitleLocalize = fbsutils.Convert(string(e.MeetupScenarioReplayTitleLocalize()), t.FlatBuffer.TableKey)
	t.MeetupScenarioReplayResource = fbsutils.Convert(string(e.MeetupScenarioReplayResource()), t.FlatBuffer.TableKey)
	t.CardShopProbWeightRarity = Rarity(fbsutils.Convert(int32(e.CardShopProbWeightRarity()), t.FlatBuffer.TableKey))
	t.CardShopProbWeightCount = fbsutils.Convert(e.CardShopProbWeightCount(), t.FlatBuffer.TableKey)
	t.SubEventInstantClear = e.SubEventInstantClear()
	t.SubEventChangeLimitSeconds = fbsutils.Convert(e.SubEventChangeLimitSeconds(), t.FlatBuffer.TableKey)
	t.EventStrategyPlayTimeLimitInSeconds = fbsutils.Convert(e.EventStrategyPlayTimeLimitInSeconds(), t.FlatBuffer.TableKey)
	t.EventContentHardStageCount = fbsutils.Convert(e.EventContentHardStageCount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstEventCommonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstEventCommonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstEventCommonExcelDto) FlatDataName() string {
	return "ConstEventCommonExcel"
}
