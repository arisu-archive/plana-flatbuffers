// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameRoadExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameRoadExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameRoadExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishMinigameRoadExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMinigameRoadExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameRoadExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMinigameRoadExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MinigameRoadExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameRoadExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameRoadExcel) None(j int) RoadPuzzleMapTileType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return RoadPuzzleMapTileType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MinigameRoadExcel) NoneLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameRoadExcel) MutateNone(j int, n RoadPuzzleMapTileType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func MinigameRoadExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MinigameRoadExcelAddNone(builder *flatbuffers.Builder, none flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(none), 0)
}
func MinigameRoadExcelStartNoneVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MinigameRoadExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
