// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConstCombatExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConstCombatExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstCombatExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConstCombatExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConstCombatExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstCombatExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConstCombatExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConstCombatExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConstCombatExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConstCombatExcel) AccuracyConstA() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateAccuracyConstA(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConstCombatExcel) AccuracyConstB() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateAccuracyConstB(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ConstCombatExcel) AccuracyConstC() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateAccuracyConstC(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ConstCombatExcel) AccuracyConstD() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateAccuracyConstD(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ConstCombatExcel) AimIkMaxDegree() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutateAimIkMaxDegree(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *ConstCombatExcel) AimIkMinDegree() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutateAimIkMinDegree(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *ConstCombatExcel) AllowedMaxTimeScale() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateAllowedMaxTimeScale(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ConstCombatExcel) ArenaMinimumClearTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateArenaMinimumClearTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *ConstCombatExcel) AuraExitThresholdMargin() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateAuraExitThresholdMargin(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *ConstCombatExcel) BodyRotateSpeed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateBodyRotateSpeed(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *ConstCombatExcel) BuffIconBlinkTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateBuffIconBlinkTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *ConstCombatExcel) BulletTimeScale() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateBulletTimeScale(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *ConstCombatExcel) CampaignAlertPopupLevelGap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCampaignAlertPopupLevelGap(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *ConstCombatExcel) ChampionRegenCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateChampionRegenCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *ConstCombatExcel) CheckCheaterMaxUseCostArena() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCheckCheaterMaxUseCostArena(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *ConstCombatExcel) CheckCheaterMaxUseCostMultiFloorRaid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCheckCheaterMaxUseCostMultiFloorRaid(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *ConstCombatExcel) CheckCheaterMaxUseCostNonArena() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCheckCheaterMaxUseCostNonArena(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *ConstCombatExcel) CriticalConstA() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCriticalConstA(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *ConstCombatExcel) CriticalConstB() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCriticalConstB(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *ConstCombatExcel) CriticalConstC() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCriticalConstC(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func (rcv *ConstCombatExcel) CriticalConstD() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCriticalConstD(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

func (rcv *ConstCombatExcel) CrowdControlFactor() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateCrowdControlFactor(n int64) bool {
	return rcv._tab.MutateInt64Slot(46, n)
}

func (rcv *ConstCombatExcel) DefenceConstA() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateDefenceConstA(n int64) bool {
	return rcv._tab.MutateInt64Slot(48, n)
}

func (rcv *ConstCombatExcel) DefenceConstB() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateDefenceConstB(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *ConstCombatExcel) DefenceConstC() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateDefenceConstC(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

func (rcv *ConstCombatExcel) DefenceConstD() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateDefenceConstD(n int64) bool {
	return rcv._tab.MutateInt64Slot(54, n)
}

func (rcv *ConstCombatExcel) DyingTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateDyingTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

func (rcv *ConstCombatExcel) EchelonExtensionCostRegenRatio() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonExtensionCostRegenRatio(n int64) bool {
	return rcv._tab.MutateInt64Slot(58, n)
}

func (rcv *ConstCombatExcel) EchelonExtensionEchelonInitCommonCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonExtensionEchelonInitCommonCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

func (rcv *ConstCombatExcel) EchelonExtensionEchelonMaxCommonCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonExtensionEchelonMaxCommonCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

func (rcv *ConstCombatExcel) EchelonExtensionEngageTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) EchelonExtensionEngageWithSupporterTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) EchelonExtensionMaxOverloadCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonExtensionMaxOverloadCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(68, n)
}

func (rcv *ConstCombatExcel) EchelonExtensionOverloadCostRegenRatio() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonExtensionOverloadCostRegenRatio(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

func (rcv *ConstCombatExcel) EchelonExtensionVictoryTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) EchelonInitCommonCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonInitCommonCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

func (rcv *ConstCombatExcel) EchelonMaxCommonCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonMaxCommonCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(76, n)
}

func (rcv *ConstCombatExcel) EchelonMaxOverloadCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonMaxOverloadCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(78, n)
}

func (rcv *ConstCombatExcel) EchelonOverloadCostRegenRatio() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEchelonOverloadCostRegenRatio(n int64) bool {
	return rcv._tab.MutateInt64Slot(80, n)
}

func (rcv *ConstCombatExcel) EffectTeleportDistance() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutateEffectTeleportDistance(n float32) bool {
	return rcv._tab.MutateFloat32Slot(82, n)
}

func (rcv *ConstCombatExcel) EliminateRaidOpenScenarioId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) EmojiDefaultTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEmojiDefaultTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

func (rcv *ConstCombatExcel) EnemyRegenCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateEnemyRegenCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(88, n)
}

func (rcv *ConstCombatExcel) EngageTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) EngageWithSupporterTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) ExcessiveTouchCheckCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateExcessiveTouchCheckCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(94, n)
}

func (rcv *ConstCombatExcel) ExcessiveTouchCheckTime() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutateExcessiveTouchCheckTime(n float32) bool {
	return rcv._tab.MutateFloat32Slot(96, n)
}

func (rcv *ConstCombatExcel) FastTimeScale() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateFastTimeScale(n int64) bool {
	return rcv._tab.MutateInt64Slot(98, n)
}

func (rcv *ConstCombatExcel) MaxGroupBuffLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateMaxGroupBuffLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(100, n)
}

func (rcv *ConstCombatExcel) MaxRaidBossSkillSlot() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateMaxRaidBossSkillSlot(n int64) bool {
	return rcv._tab.MutateInt64Slot(102, n)
}

func (rcv *ConstCombatExcel) MaxRaidTicketCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateMaxRaidTicketCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(104, n)
}

func (rcv *ConstCombatExcel) MinimumClearLevelGap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateMinimumClearLevelGap(n int32) bool {
	return rcv._tab.MutateInt32Slot(106, n)
}

func (rcv *ConstCombatExcel) MinimumClearTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateMinimumClearTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(108, n)
}

func (rcv *ConstCombatExcel) MoveCorrectionSkipRatio() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateMoveCorrectionSkipRatio(n int32) bool {
	return rcv._tab.MutateInt32Slot(110, n)
}

func (rcv *ConstCombatExcel) NormalTimeScale() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateNormalTimeScale(n int64) bool {
	return rcv._tab.MutateInt64Slot(112, n)
}

func (rcv *ConstCombatExcel) PlayerRegenCostDelay() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutatePlayerRegenCostDelay(n int64) bool {
	return rcv._tab.MutateInt64Slot(114, n)
}

func (rcv *ConstCombatExcel) PublicSpeechBubbleOffsetX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutatePublicSpeechBubbleOffsetX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(116, n)
}

func (rcv *ConstCombatExcel) PublicSpeechBubbleOffsetY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutatePublicSpeechBubbleOffsetY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(118, n)
}

func (rcv *ConstCombatExcel) PublicSpeechBubbleOffsetZ() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstCombatExcel) MutatePublicSpeechBubbleOffsetZ(n float32) bool {
	return rcv._tab.MutateFloat32Slot(120, n)
}

func (rcv *ConstCombatExcel) RaidOpenScenarioId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) RaidRankingJumpMinimumWaitingTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateRaidRankingJumpMinimumWaitingTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(124, n)
}

func (rcv *ConstCombatExcel) RandomAnimationOutput() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateRandomAnimationOutput(n int64) bool {
	return rcv._tab.MutateInt64Slot(126, n)
}

func (rcv *ConstCombatExcel) ShowBufficonExSkill() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstCombatExcel) MutateShowBufficonExSkill(n bool) bool {
	return rcv._tab.MutateBoolSlot(128, n)
}

func (rcv *ConstCombatExcel) ShowBufficonExtraPassiveSkill() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstCombatExcel) MutateShowBufficonExtraPassiveSkill(n bool) bool {
	return rcv._tab.MutateBoolSlot(130, n)
}

func (rcv *ConstCombatExcel) ShowBufficonGroundPassiveSkill() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstCombatExcel) MutateShowBufficonGroundPassiveSkill(n bool) bool {
	return rcv._tab.MutateBoolSlot(132, n)
}

func (rcv *ConstCombatExcel) ShowBufficonLeaderSkill() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstCombatExcel) MutateShowBufficonLeaderSkill(n bool) bool {
	return rcv._tab.MutateBoolSlot(134, n)
}

func (rcv *ConstCombatExcel) ShowBufficonPassiveSkill() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstCombatExcel) MutateShowBufficonPassiveSkill(n bool) bool {
	return rcv._tab.MutateBoolSlot(136, n)
}

func (rcv *ConstCombatExcel) ShowRaidListCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateShowRaidListCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(138, n)
}

func (rcv *ConstCombatExcel) SkillHandCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateSkillHandCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(140, n)
}

func (rcv *ConstCombatExcel) SkillSlotCoolTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateSkillSlotCoolTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(142, n)
}

func (rcv *ConstCombatExcel) SlowTimeScale() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateSlowTimeScale(n int64) bool {
	return rcv._tab.MutateInt64Slot(144, n)
}

func (rcv *ConstCombatExcel) SummonedTeleportDistance() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateSummonedTeleportDistance(n int64) bool {
	return rcv._tab.MutateInt64Slot(146, n)
}

func (rcv *ConstCombatExcel) SuppliesConditionStringId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) TimeLimitAlarm() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateTimeLimitAlarm(n int64) bool {
	return rcv._tab.MutateInt64Slot(150, n)
}

func (rcv *ConstCombatExcel) TimeLineActionRotateSpeed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateTimeLineActionRotateSpeed(n int64) bool {
	return rcv._tab.MutateInt64Slot(152, n)
}

func (rcv *ConstCombatExcel) TsaInteractionDamageFactor() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateTsaInteractionDamageFactor(n int64) bool {
	return rcv._tab.MutateInt64Slot(154, n)
}

func (rcv *ConstCombatExcel) UiDisplayDelayAfterSkillCutIn() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateUiDisplayDelayAfterSkillCutIn(n int64) bool {
	return rcv._tab.MutateInt64Slot(156, n)
}

func (rcv *ConstCombatExcel) UseInitialRangeForCoverMove() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstCombatExcel) MutateUseInitialRangeForCoverMove(n bool) bool {
	return rcv._tab.MutateBoolSlot(158, n)
}

func (rcv *ConstCombatExcel) VictoryInteractionRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateVictoryInteractionRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(160, n)
}

func (rcv *ConstCombatExcel) VictoryTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstCombatExcel) Worldbossbattlehigh() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldbossbattlehigh(n int64) bool {
	return rcv._tab.MutateInt64Slot(164, n)
}

func (rcv *ConstCombatExcel) Worldbossbattlelittle() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldbossbattlelittle(n int64) bool {
	return rcv._tab.MutateInt64Slot(166, n)
}

func (rcv *ConstCombatExcel) Worldbossbattlemiddle() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldbossbattlemiddle(n int64) bool {
	return rcv._tab.MutateInt64Slot(168, n)
}

func (rcv *ConstCombatExcel) Worldbossbattleveryhigh() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldbossbattleveryhigh(n int64) bool {
	return rcv._tab.MutateInt64Slot(170, n)
}

func (rcv *ConstCombatExcel) WorldRaidAutoSyncTermSecond() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldRaidAutoSyncTermSecond(n int64) bool {
	return rcv._tab.MutateInt64Slot(172, n)
}

func (rcv *ConstCombatExcel) WorldRaidBossHpDecreaseTerm() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldRaidBossHpDecreaseTerm(n int64) bool {
	return rcv._tab.MutateInt64Slot(174, n)
}

func (rcv *ConstCombatExcel) WorldRaidBossParcelReactionDelay() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstCombatExcel) MutateWorldRaidBossParcelReactionDelay(n int64) bool {
	return rcv._tab.MutateInt64Slot(176, n)
}

func ConstCombatExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(87)
}
func ConstCombatExcelAddAccuracyConstA(builder *flatbuffers.Builder, accuracyConstA int64) {
	builder.PrependInt64Slot(0, accuracyConstA, 0)
}
func ConstCombatExcelAddAccuracyConstB(builder *flatbuffers.Builder, accuracyConstB int64) {
	builder.PrependInt64Slot(1, accuracyConstB, 0)
}
func ConstCombatExcelAddAccuracyConstC(builder *flatbuffers.Builder, accuracyConstC int64) {
	builder.PrependInt64Slot(2, accuracyConstC, 0)
}
func ConstCombatExcelAddAccuracyConstD(builder *flatbuffers.Builder, accuracyConstD int64) {
	builder.PrependInt64Slot(3, accuracyConstD, 0)
}
func ConstCombatExcelAddAimIkMaxDegree(builder *flatbuffers.Builder, aimIkMaxDegree float32) {
	builder.PrependFloat32Slot(4, aimIkMaxDegree, 0.0)
}
func ConstCombatExcelAddAimIkMinDegree(builder *flatbuffers.Builder, aimIkMinDegree float32) {
	builder.PrependFloat32Slot(5, aimIkMinDegree, 0.0)
}
func ConstCombatExcelAddAllowedMaxTimeScale(builder *flatbuffers.Builder, allowedMaxTimeScale int64) {
	builder.PrependInt64Slot(6, allowedMaxTimeScale, 0)
}
func ConstCombatExcelAddArenaMinimumClearTime(builder *flatbuffers.Builder, arenaMinimumClearTime int32) {
	builder.PrependInt32Slot(7, arenaMinimumClearTime, 0)
}
func ConstCombatExcelAddAuraExitThresholdMargin(builder *flatbuffers.Builder, auraExitThresholdMargin int64) {
	builder.PrependInt64Slot(8, auraExitThresholdMargin, 0)
}
func ConstCombatExcelAddBodyRotateSpeed(builder *flatbuffers.Builder, bodyRotateSpeed int64) {
	builder.PrependInt64Slot(9, bodyRotateSpeed, 0)
}
func ConstCombatExcelAddBuffIconBlinkTime(builder *flatbuffers.Builder, buffIconBlinkTime int32) {
	builder.PrependInt32Slot(10, buffIconBlinkTime, 0)
}
func ConstCombatExcelAddBulletTimeScale(builder *flatbuffers.Builder, bulletTimeScale int64) {
	builder.PrependInt64Slot(11, bulletTimeScale, 0)
}
func ConstCombatExcelAddCampaignAlertPopupLevelGap(builder *flatbuffers.Builder, campaignAlertPopupLevelGap int32) {
	builder.PrependInt32Slot(12, campaignAlertPopupLevelGap, 0)
}
func ConstCombatExcelAddChampionRegenCost(builder *flatbuffers.Builder, championRegenCost int64) {
	builder.PrependInt64Slot(13, championRegenCost, 0)
}
func ConstCombatExcelAddCheckCheaterMaxUseCostArena(builder *flatbuffers.Builder, checkCheaterMaxUseCostArena int32) {
	builder.PrependInt32Slot(14, checkCheaterMaxUseCostArena, 0)
}
func ConstCombatExcelAddCheckCheaterMaxUseCostMultiFloorRaid(builder *flatbuffers.Builder, checkCheaterMaxUseCostMultiFloorRaid int32) {
	builder.PrependInt32Slot(15, checkCheaterMaxUseCostMultiFloorRaid, 0)
}
func ConstCombatExcelAddCheckCheaterMaxUseCostNonArena(builder *flatbuffers.Builder, checkCheaterMaxUseCostNonArena int32) {
	builder.PrependInt32Slot(16, checkCheaterMaxUseCostNonArena, 0)
}
func ConstCombatExcelAddCriticalConstA(builder *flatbuffers.Builder, criticalConstA int64) {
	builder.PrependInt64Slot(17, criticalConstA, 0)
}
func ConstCombatExcelAddCriticalConstB(builder *flatbuffers.Builder, criticalConstB int64) {
	builder.PrependInt64Slot(18, criticalConstB, 0)
}
func ConstCombatExcelAddCriticalConstC(builder *flatbuffers.Builder, criticalConstC int64) {
	builder.PrependInt64Slot(19, criticalConstC, 0)
}
func ConstCombatExcelAddCriticalConstD(builder *flatbuffers.Builder, criticalConstD int64) {
	builder.PrependInt64Slot(20, criticalConstD, 0)
}
func ConstCombatExcelAddCrowdControlFactor(builder *flatbuffers.Builder, crowdControlFactor int64) {
	builder.PrependInt64Slot(21, crowdControlFactor, 0)
}
func ConstCombatExcelAddDefenceConstA(builder *flatbuffers.Builder, defenceConstA int64) {
	builder.PrependInt64Slot(22, defenceConstA, 0)
}
func ConstCombatExcelAddDefenceConstB(builder *flatbuffers.Builder, defenceConstB int64) {
	builder.PrependInt64Slot(23, defenceConstB, 0)
}
func ConstCombatExcelAddDefenceConstC(builder *flatbuffers.Builder, defenceConstC int64) {
	builder.PrependInt64Slot(24, defenceConstC, 0)
}
func ConstCombatExcelAddDefenceConstD(builder *flatbuffers.Builder, defenceConstD int64) {
	builder.PrependInt64Slot(25, defenceConstD, 0)
}
func ConstCombatExcelAddDyingTime(builder *flatbuffers.Builder, dyingTime int32) {
	builder.PrependInt32Slot(26, dyingTime, 0)
}
func ConstCombatExcelAddEchelonExtensionCostRegenRatio(builder *flatbuffers.Builder, echelonExtensionCostRegenRatio int64) {
	builder.PrependInt64Slot(27, echelonExtensionCostRegenRatio, 0)
}
func ConstCombatExcelAddEchelonExtensionEchelonInitCommonCost(builder *flatbuffers.Builder, echelonExtensionEchelonInitCommonCost int32) {
	builder.PrependInt32Slot(28, echelonExtensionEchelonInitCommonCost, 0)
}
func ConstCombatExcelAddEchelonExtensionEchelonMaxCommonCost(builder *flatbuffers.Builder, echelonExtensionEchelonMaxCommonCost int32) {
	builder.PrependInt32Slot(29, echelonExtensionEchelonMaxCommonCost, 0)
}
func ConstCombatExcelAddEchelonExtensionEngageTimelinePath(builder *flatbuffers.Builder, echelonExtensionEngageTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(echelonExtensionEngageTimelinePath), 0)
}
func ConstCombatExcelAddEchelonExtensionEngageWithSupporterTimelinePath(builder *flatbuffers.Builder, echelonExtensionEngageWithSupporterTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(echelonExtensionEngageWithSupporterTimelinePath), 0)
}
func ConstCombatExcelAddEchelonExtensionMaxOverloadCost(builder *flatbuffers.Builder, echelonExtensionMaxOverloadCost int64) {
	builder.PrependInt64Slot(32, echelonExtensionMaxOverloadCost, 0)
}
func ConstCombatExcelAddEchelonExtensionOverloadCostRegenRatio(builder *flatbuffers.Builder, echelonExtensionOverloadCostRegenRatio int64) {
	builder.PrependInt64Slot(33, echelonExtensionOverloadCostRegenRatio, 0)
}
func ConstCombatExcelAddEchelonExtensionVictoryTimelinePath(builder *flatbuffers.Builder, echelonExtensionVictoryTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(echelonExtensionVictoryTimelinePath), 0)
}
func ConstCombatExcelAddEchelonInitCommonCost(builder *flatbuffers.Builder, echelonInitCommonCost int32) {
	builder.PrependInt32Slot(35, echelonInitCommonCost, 0)
}
func ConstCombatExcelAddEchelonMaxCommonCost(builder *flatbuffers.Builder, echelonMaxCommonCost int32) {
	builder.PrependInt32Slot(36, echelonMaxCommonCost, 0)
}
func ConstCombatExcelAddEchelonMaxOverloadCost(builder *flatbuffers.Builder, echelonMaxOverloadCost int64) {
	builder.PrependInt64Slot(37, echelonMaxOverloadCost, 0)
}
func ConstCombatExcelAddEchelonOverloadCostRegenRatio(builder *flatbuffers.Builder, echelonOverloadCostRegenRatio int64) {
	builder.PrependInt64Slot(38, echelonOverloadCostRegenRatio, 0)
}
func ConstCombatExcelAddEffectTeleportDistance(builder *flatbuffers.Builder, effectTeleportDistance float32) {
	builder.PrependFloat32Slot(39, effectTeleportDistance, 0.0)
}
func ConstCombatExcelAddEliminateRaidOpenScenarioId(builder *flatbuffers.Builder, eliminateRaidOpenScenarioId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(eliminateRaidOpenScenarioId), 0)
}
func ConstCombatExcelAddEmojiDefaultTime(builder *flatbuffers.Builder, emojiDefaultTime int32) {
	builder.PrependInt32Slot(41, emojiDefaultTime, 0)
}
func ConstCombatExcelAddEnemyRegenCost(builder *flatbuffers.Builder, enemyRegenCost int64) {
	builder.PrependInt64Slot(42, enemyRegenCost, 0)
}
func ConstCombatExcelAddEngageTimelinePath(builder *flatbuffers.Builder, engageTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(engageTimelinePath), 0)
}
func ConstCombatExcelAddEngageWithSupporterTimelinePath(builder *flatbuffers.Builder, engageWithSupporterTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(engageWithSupporterTimelinePath), 0)
}
func ConstCombatExcelAddExcessiveTouchCheckCount(builder *flatbuffers.Builder, excessiveTouchCheckCount int32) {
	builder.PrependInt32Slot(45, excessiveTouchCheckCount, 0)
}
func ConstCombatExcelAddExcessiveTouchCheckTime(builder *flatbuffers.Builder, excessiveTouchCheckTime float32) {
	builder.PrependFloat32Slot(46, excessiveTouchCheckTime, 0.0)
}
func ConstCombatExcelAddFastTimeScale(builder *flatbuffers.Builder, fastTimeScale int64) {
	builder.PrependInt64Slot(47, fastTimeScale, 0)
}
func ConstCombatExcelAddMaxGroupBuffLevel(builder *flatbuffers.Builder, maxGroupBuffLevel int32) {
	builder.PrependInt32Slot(48, maxGroupBuffLevel, 0)
}
func ConstCombatExcelAddMaxRaidBossSkillSlot(builder *flatbuffers.Builder, maxRaidBossSkillSlot int64) {
	builder.PrependInt64Slot(49, maxRaidBossSkillSlot, 0)
}
func ConstCombatExcelAddMaxRaidTicketCount(builder *flatbuffers.Builder, maxRaidTicketCount int64) {
	builder.PrependInt64Slot(50, maxRaidTicketCount, 0)
}
func ConstCombatExcelAddMinimumClearLevelGap(builder *flatbuffers.Builder, minimumClearLevelGap int32) {
	builder.PrependInt32Slot(51, minimumClearLevelGap, 0)
}
func ConstCombatExcelAddMinimumClearTime(builder *flatbuffers.Builder, minimumClearTime int32) {
	builder.PrependInt32Slot(52, minimumClearTime, 0)
}
func ConstCombatExcelAddMoveCorrectionSkipRatio(builder *flatbuffers.Builder, moveCorrectionSkipRatio int32) {
	builder.PrependInt32Slot(53, moveCorrectionSkipRatio, 0)
}
func ConstCombatExcelAddNormalTimeScale(builder *flatbuffers.Builder, normalTimeScale int64) {
	builder.PrependInt64Slot(54, normalTimeScale, 0)
}
func ConstCombatExcelAddPlayerRegenCostDelay(builder *flatbuffers.Builder, playerRegenCostDelay int64) {
	builder.PrependInt64Slot(55, playerRegenCostDelay, 0)
}
func ConstCombatExcelAddPublicSpeechBubbleOffsetX(builder *flatbuffers.Builder, publicSpeechBubbleOffsetX float32) {
	builder.PrependFloat32Slot(56, publicSpeechBubbleOffsetX, 0.0)
}
func ConstCombatExcelAddPublicSpeechBubbleOffsetY(builder *flatbuffers.Builder, publicSpeechBubbleOffsetY float32) {
	builder.PrependFloat32Slot(57, publicSpeechBubbleOffsetY, 0.0)
}
func ConstCombatExcelAddPublicSpeechBubbleOffsetZ(builder *flatbuffers.Builder, publicSpeechBubbleOffsetZ float32) {
	builder.PrependFloat32Slot(58, publicSpeechBubbleOffsetZ, 0.0)
}
func ConstCombatExcelAddRaidOpenScenarioId(builder *flatbuffers.Builder, raidOpenScenarioId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(raidOpenScenarioId), 0)
}
func ConstCombatExcelAddRaidRankingJumpMinimumWaitingTime(builder *flatbuffers.Builder, raidRankingJumpMinimumWaitingTime int64) {
	builder.PrependInt64Slot(60, raidRankingJumpMinimumWaitingTime, 0)
}
func ConstCombatExcelAddRandomAnimationOutput(builder *flatbuffers.Builder, randomAnimationOutput int64) {
	builder.PrependInt64Slot(61, randomAnimationOutput, 0)
}
func ConstCombatExcelAddShowBufficonExSkill(builder *flatbuffers.Builder, showBufficonExSkill bool) {
	builder.PrependBoolSlot(62, showBufficonExSkill, false)
}
func ConstCombatExcelAddShowBufficonExtraPassiveSkill(builder *flatbuffers.Builder, showBufficonExtraPassiveSkill bool) {
	builder.PrependBoolSlot(63, showBufficonExtraPassiveSkill, false)
}
func ConstCombatExcelAddShowBufficonGroundPassiveSkill(builder *flatbuffers.Builder, showBufficonGroundPassiveSkill bool) {
	builder.PrependBoolSlot(64, showBufficonGroundPassiveSkill, false)
}
func ConstCombatExcelAddShowBufficonLeaderSkill(builder *flatbuffers.Builder, showBufficonLeaderSkill bool) {
	builder.PrependBoolSlot(65, showBufficonLeaderSkill, false)
}
func ConstCombatExcelAddShowBufficonPassiveSkill(builder *flatbuffers.Builder, showBufficonPassiveSkill bool) {
	builder.PrependBoolSlot(66, showBufficonPassiveSkill, false)
}
func ConstCombatExcelAddShowRaidListCount(builder *flatbuffers.Builder, showRaidListCount int32) {
	builder.PrependInt32Slot(67, showRaidListCount, 0)
}
func ConstCombatExcelAddSkillHandCount(builder *flatbuffers.Builder, skillHandCount int32) {
	builder.PrependInt32Slot(68, skillHandCount, 0)
}
func ConstCombatExcelAddSkillSlotCoolTime(builder *flatbuffers.Builder, skillSlotCoolTime int64) {
	builder.PrependInt64Slot(69, skillSlotCoolTime, 0)
}
func ConstCombatExcelAddSlowTimeScale(builder *flatbuffers.Builder, slowTimeScale int64) {
	builder.PrependInt64Slot(70, slowTimeScale, 0)
}
func ConstCombatExcelAddSummonedTeleportDistance(builder *flatbuffers.Builder, summonedTeleportDistance int64) {
	builder.PrependInt64Slot(71, summonedTeleportDistance, 0)
}
func ConstCombatExcelAddSuppliesConditionStringId(builder *flatbuffers.Builder, suppliesConditionStringId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(72, flatbuffers.UOffsetT(suppliesConditionStringId), 0)
}
func ConstCombatExcelAddTimeLimitAlarm(builder *flatbuffers.Builder, timeLimitAlarm int64) {
	builder.PrependInt64Slot(73, timeLimitAlarm, 0)
}
func ConstCombatExcelAddTimeLineActionRotateSpeed(builder *flatbuffers.Builder, timeLineActionRotateSpeed int64) {
	builder.PrependInt64Slot(74, timeLineActionRotateSpeed, 0)
}
func ConstCombatExcelAddTsaInteractionDamageFactor(builder *flatbuffers.Builder, tsaInteractionDamageFactor int64) {
	builder.PrependInt64Slot(75, tsaInteractionDamageFactor, 0)
}
func ConstCombatExcelAddUiDisplayDelayAfterSkillCutIn(builder *flatbuffers.Builder, uiDisplayDelayAfterSkillCutIn int64) {
	builder.PrependInt64Slot(76, uiDisplayDelayAfterSkillCutIn, 0)
}
func ConstCombatExcelAddUseInitialRangeForCoverMove(builder *flatbuffers.Builder, useInitialRangeForCoverMove bool) {
	builder.PrependBoolSlot(77, useInitialRangeForCoverMove, false)
}
func ConstCombatExcelAddVictoryInteractionRate(builder *flatbuffers.Builder, victoryInteractionRate int64) {
	builder.PrependInt64Slot(78, victoryInteractionRate, 0)
}
func ConstCombatExcelAddVictoryTimelinePath(builder *flatbuffers.Builder, victoryTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(victoryTimelinePath), 0)
}
func ConstCombatExcelAddWorldbossbattlehigh(builder *flatbuffers.Builder, worldbossbattlehigh int64) {
	builder.PrependInt64Slot(80, worldbossbattlehigh, 0)
}
func ConstCombatExcelAddWorldbossbattlelittle(builder *flatbuffers.Builder, worldbossbattlelittle int64) {
	builder.PrependInt64Slot(81, worldbossbattlelittle, 0)
}
func ConstCombatExcelAddWorldbossbattlemiddle(builder *flatbuffers.Builder, worldbossbattlemiddle int64) {
	builder.PrependInt64Slot(82, worldbossbattlemiddle, 0)
}
func ConstCombatExcelAddWorldbossbattleveryhigh(builder *flatbuffers.Builder, worldbossbattleveryhigh int64) {
	builder.PrependInt64Slot(83, worldbossbattleveryhigh, 0)
}
func ConstCombatExcelAddWorldRaidAutoSyncTermSecond(builder *flatbuffers.Builder, worldRaidAutoSyncTermSecond int64) {
	builder.PrependInt64Slot(84, worldRaidAutoSyncTermSecond, 0)
}
func ConstCombatExcelAddWorldRaidBossHpDecreaseTerm(builder *flatbuffers.Builder, worldRaidBossHpDecreaseTerm int64) {
	builder.PrependInt64Slot(85, worldRaidBossHpDecreaseTerm, 0)
}
func ConstCombatExcelAddWorldRaidBossParcelReactionDelay(builder *flatbuffers.Builder, worldRaidBossParcelReactionDelay int64) {
	builder.PrependInt64Slot(86, worldRaidBossParcelReactionDelay, 0)
}
func ConstCombatExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
