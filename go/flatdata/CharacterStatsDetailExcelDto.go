// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterStatsDetailExcelDto represents a FlatBuffers table
type CharacterStatsDetailExcelDto struct {
	fbsutils.FlatBuffer
	Id              int64      `json:"id"`
	DetailShowStats []StatType `json:"detail_show_stats"`
	IsStatsPercent  []bool     `json:"is_stats_percent"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterStatsDetailExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterStatsDetail"))
	}
	CharacterStatsDetailExcelStart(b)
	CharacterStatsDetailExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterStatsDetailExcelStartDetailShowStatsVector(b, len(t.DetailShowStats))
	for i := range len(t.DetailShowStats) {
		b.PrependInt32(fbsutils.Convert(int32(t.DetailShowStats[len(t.DetailShowStats)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterStatsDetailExcelAddDetailShowStats(b, b.EndVector(len(t.DetailShowStats)))
	CharacterStatsDetailExcelStartIsStatsPercentVector(b, len(t.IsStatsPercent))
	for i := range len(t.IsStatsPercent) {
		b.PrependBool(t.IsStatsPercent[len(t.IsStatsPercent)-i-1])
	}
	CharacterStatsDetailExcelAddIsStatsPercent(b, b.EndVector(len(t.IsStatsPercent)))
	return CharacterStatsDetailExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterStatsDetailExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishCharacterStatsDetailExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatsDetailExcelDto) UnmarshalMessage(e *CharacterStatsDetailExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterStatsDetail"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.DetailShowStats = make([]StatType, e.DetailShowStatsLength())
	for i := range e.DetailShowStatsLength() {
		t.DetailShowStats[i] = StatType(fbsutils.Convert(int32(e.DetailShowStats(i)), t.FlatBuffer.TableKey))
	}
	t.IsStatsPercent = make([]bool, e.IsStatsPercentLength())
	for i := range e.IsStatsPercentLength() {
		t.IsStatsPercent[i] = e.IsStatsPercent(i)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatsDetailExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterStatsDetailExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterStatsDetailExcelDto) FlatDataName() string {
	return "CharacterStatsDetailExcel"
}
