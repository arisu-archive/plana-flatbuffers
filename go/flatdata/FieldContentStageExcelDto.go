// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldContentStageExcelDto represents a FlatBuffers table
type FieldContentStageExcelDto struct {
	fbsutils.FlatBuffer
	AreaId                int64           `json:"area_id"`
	BattleDuration        int64           `json:"battle_duration"`
	BgmId                 int64           `json:"bgm_id"`
	DailyLastPlay         bool            `json:"daily_last_play"`
	FixedEchelonId        int64           `json:"fixed_echelon_id"`
	GroundId              int64           `json:"ground_id"`
	GroupId               int64           `json:"group_id"`
	Id                    int64           `json:"id"`
	InstantClear          bool            `json:"instant_clear"`
	Name                  string          `json:"name"`
	PrevStageId           int64           `json:"prev_stage_id"`
	RecommandLevel        int32           `json:"recommand_level"`
	SeasonId              int64           `json:"season_id"`
	SkipFormationSettings bool            `json:"skip_formation_settings"`
	StageDifficulty       StageDifficulty `json:"stage_difficulty"`
	StageEnterCostAmount  int32           `json:"stage_enter_cost_amount"`
	StageEnterCostId      int64           `json:"stage_enter_cost_id"`
	StageEnterCostType    ParcelType      `json:"stage_enter_cost_type"`
	StageTopography       StageTopography `json:"stage_topography"`
	StarGoalAmount        []int32         `json:"star_goal_amount"`
	StarGoal              []StarGoalType  `json:"star_goal"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldContentStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldContentStage"))
	}
	FieldContentStageExcelStart(b)
	FieldContentStageExcelAddAreaId(b, fbsutils.Convert(t.AreaId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddDailyLastPlay(b, t.DailyLastPlay)
	FieldContentStageExcelAddFixedEchelonId(b, fbsutils.Convert(t.FixedEchelonId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddInstantClear(b, t.InstantClear)
	FieldContentStageExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	FieldContentStageExcelAddPrevStageId(b, fbsutils.Convert(t.PrevStageId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddRecommandLevel(b, fbsutils.Convert(t.RecommandLevel, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddSkipFormationSettings(b, t.SkipFormationSettings)
	FieldContentStageExcelAddStageDifficulty(b, fbsutils.Convert(t.StageDifficulty, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddStageEnterCostAmount(b, fbsutils.Convert(t.StageEnterCostAmount, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddStageEnterCostId(b, fbsutils.Convert(t.StageEnterCostId, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddStageEnterCostType(b, fbsutils.Convert(t.StageEnterCostType, t.FlatBuffer.TableKey))
	FieldContentStageExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	FieldContentStageExcelStartStarGoalAmountVector(b, len(t.StarGoalAmount))
	for i := range len(t.StarGoalAmount) {
		b.PrependInt32(fbsutils.Convert(t.StarGoalAmount[len(t.StarGoalAmount)-i-1], t.FlatBuffer.TableKey))
	}
	FieldContentStageExcelAddStarGoalAmount(b, b.EndVector(len(t.StarGoalAmount)))
	FieldContentStageExcelStartStarGoalVector(b, len(t.StarGoal))
	for i := range len(t.StarGoal) {
		b.PrependInt32(fbsutils.Convert(int32(t.StarGoal[len(t.StarGoal)-i-1]), t.FlatBuffer.TableKey))
	}
	FieldContentStageExcelAddStarGoal(b, b.EndVector(len(t.StarGoal)))
	return FieldContentStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldContentStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldContentStageExcelDto) UnmarshalMessage(e *FieldContentStageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldContentStage"))
	}
	t.AreaId = fbsutils.Convert(e.AreaId(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.DailyLastPlay = e.DailyLastPlay()
	t.FixedEchelonId = fbsutils.Convert(e.FixedEchelonId(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.InstantClear = e.InstantClear()
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.PrevStageId = fbsutils.Convert(e.PrevStageId(), t.FlatBuffer.TableKey)
	t.RecommandLevel = fbsutils.Convert(e.RecommandLevel(), t.FlatBuffer.TableKey)
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	t.SkipFormationSettings = e.SkipFormationSettings()
	t.StageDifficulty = StageDifficulty(fbsutils.Convert(int32(e.StageDifficulty()), t.FlatBuffer.TableKey))
	t.StageEnterCostAmount = fbsutils.Convert(e.StageEnterCostAmount(), t.FlatBuffer.TableKey)
	t.StageEnterCostId = fbsutils.Convert(e.StageEnterCostId(), t.FlatBuffer.TableKey)
	t.StageEnterCostType = ParcelType(fbsutils.Convert(int32(e.StageEnterCostType()), t.FlatBuffer.TableKey))
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	t.StarGoalAmount = make([]int32, e.StarGoalAmountLength())
	for i := range e.StarGoalAmountLength() {
		t.StarGoalAmount[i] = fbsutils.Convert(e.StarGoalAmount(i), t.FlatBuffer.TableKey)
	}
	t.StarGoal = make([]StarGoalType, e.StarGoalLength())
	for i := range e.StarGoalLength() {
		t.StarGoal[i] = StarGoalType(fbsutils.Convert(int32(e.StarGoal(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldContentStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldContentStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldContentStageExcelDto) FlatDataName() string {
	return "FieldContentStageExcel"
}
