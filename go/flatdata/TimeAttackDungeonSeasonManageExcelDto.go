// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TimeAttackDungeonSeasonManageExcelDto represents a FlatBuffers table
type TimeAttackDungeonSeasonManageExcelDto struct {
	fbsutils.FlatBuffer
	Id                        int64   `json:"id"`
	StartDate                 string  `json:"start_date"`
	EndNoteLabelStartDate     string  `json:"end_note_label_start_date"`
	EndDate                   string  `json:"end_date"`
	UiSlot                    int64   `json:"ui_slot"`
	DungeonId                 int64   `json:"dungeon_id"`
	DifficultyGeas            []int64 `json:"difficulty_geas"`
	TimeAttackDungeonRewardId int64   `json:"time_attack_dungeon_reward_id"`
	RoomLifeTimeInSeconds     int64   `json:"room_life_time_in_seconds"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TimeAttackDungeonSeasonManageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TimeAttackDungeonSeasonManage"))
	}
	__offset_start_date := b.CreateString(fbsutils.Convert(t.StartDate, t.FlatBuffer.TableKey))
	__offset_end_note_label_start_date := b.CreateString(fbsutils.Convert(t.EndNoteLabelStartDate, t.FlatBuffer.TableKey))
	__offset_end_date := b.CreateString(fbsutils.Convert(t.EndDate, t.FlatBuffer.TableKey))
	TimeAttackDungeonSeasonManageExcelStart(b)
	TimeAttackDungeonSeasonManageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	TimeAttackDungeonSeasonManageExcelAddStartDate(b, __offset_start_date)
	TimeAttackDungeonSeasonManageExcelAddEndNoteLabelStartDate(b, __offset_end_note_label_start_date)
	TimeAttackDungeonSeasonManageExcelAddEndDate(b, __offset_end_date)
	TimeAttackDungeonSeasonManageExcelAddUiSlot(b, fbsutils.Convert(t.UiSlot, t.FlatBuffer.TableKey))
	TimeAttackDungeonSeasonManageExcelAddDungeonId(b, fbsutils.Convert(t.DungeonId, t.FlatBuffer.TableKey))
	TimeAttackDungeonSeasonManageExcelStartDifficultyGeasVector(b, len(t.DifficultyGeas))
	for i := range len(t.DifficultyGeas) {
		b.PrependInt64(fbsutils.Convert(t.DifficultyGeas[len(t.DifficultyGeas)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonSeasonManageExcelAddDifficultyGeas(b, b.EndVector(len(t.DifficultyGeas)))
	TimeAttackDungeonSeasonManageExcelAddTimeAttackDungeonRewardId(b, fbsutils.Convert(t.TimeAttackDungeonRewardId, t.FlatBuffer.TableKey))
	TimeAttackDungeonSeasonManageExcelAddRoomLifeTimeInSeconds(b, fbsutils.Convert(t.RoomLifeTimeInSeconds, t.FlatBuffer.TableKey))
	return TimeAttackDungeonSeasonManageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TimeAttackDungeonSeasonManageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TimeAttackDungeonSeasonManageExcelDto) UnmarshalMessage(e *TimeAttackDungeonSeasonManageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TimeAttackDungeonSeasonManage"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.StartDate = fbsutils.Convert(string(e.StartDate()), t.FlatBuffer.TableKey)
	t.EndNoteLabelStartDate = fbsutils.Convert(string(e.EndNoteLabelStartDate()), t.FlatBuffer.TableKey)
	t.EndDate = fbsutils.Convert(string(e.EndDate()), t.FlatBuffer.TableKey)
	t.UiSlot = fbsutils.Convert(e.UiSlot(), t.FlatBuffer.TableKey)
	t.DungeonId = fbsutils.Convert(e.DungeonId(), t.FlatBuffer.TableKey)
	t.DifficultyGeas = make([]int64, e.DifficultyGeasLength())
	for i := range e.DifficultyGeasLength() {
		t.DifficultyGeas[i] = fbsutils.Convert(e.DifficultyGeas(i), t.FlatBuffer.TableKey)
	}
	t.TimeAttackDungeonRewardId = fbsutils.Convert(e.TimeAttackDungeonRewardId(), t.FlatBuffer.TableKey)
	t.RoomLifeTimeInSeconds = fbsutils.Convert(e.RoomLifeTimeInSeconds(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TimeAttackDungeonSeasonManageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTimeAttackDungeonSeasonManageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TimeAttackDungeonSeasonManageExcelDto) FlatDataName() string {
	return "TimeAttackDungeonSeasonManageExcel"
}
