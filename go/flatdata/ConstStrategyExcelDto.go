// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstStrategyExcelDto represents a FlatBuffers table
type ConstStrategyExcelDto struct {
	fbsutils.FlatBuffer
	HexaMapBoundaryOffset                float32       `json:"hexa_map_boundary_offset"`
	HexaMapStartCameraOffset             float32       `json:"hexa_map_start_camera_offset"`
	CameraZoomMax                        float32       `json:"camera_zoom_max"`
	CameraZoomMin                        float32       `json:"camera_zoom_min"`
	CameraZoomDefault                    float32       `json:"camera_zoom_default"`
	HealCostType                         CurrencyTypes `json:"heal_cost_type"`
	HealCostAmount                       []int64       `json:"heal_cost_amount"`
	CanHealHpRate                        int32         `json:"can_heal_hp_rate"`
	PlayTimeLimitInSeconds               int64         `json:"play_time_limit_in_seconds"`
	AdventureEchelonCount                int32         `json:"adventure_echelon_count"`
	RaidEchelonCount                     int32         `json:"raid_echelon_count"`
	DefaultEchelonCount                  int32         `json:"default_echelon_count"`
	EventContentEchelonCount             int32         `json:"event_content_echelon_count"`
	TimeAttackDungeonEchelonCount        int32         `json:"time_attack_dungeon_echelon_count"`
	WorldRaidEchelonCount                int32         `json:"world_raid_echelon_count"`
	TacticSkipClearTimeSeconds           int32         `json:"tactic_skip_clear_time_seconds"`
	TacticSkipFramePerSecond             int32         `json:"tactic_skip_frame_per_second"`
	ConquestEchelonCount                 int32         `json:"conquest_echelon_count"`
	StoryEchelonCount                    int32         `json:"story_echelon_count"`
	MultiSweepPresetCount                int32         `json:"multi_sweep_preset_count"`
	MultiSweepPresetNameMaxLength        int32         `json:"multi_sweep_preset_name_max_length"`
	MultiSweepPresetSelectStageMaxCount  int32         `json:"multi_sweep_preset_select_stage_max_count"`
	MultiSweepPresetMaxSweepCount        int32         `json:"multi_sweep_preset_max_sweep_count"`
	MultiSweepPresetSelectParcelMaxCount int32         `json:"multi_sweep_preset_select_parcel_max_count"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstStrategyExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstStrategy"))
	}
	ConstStrategyExcelStart(b)
	ConstStrategyExcelAddHexaMapBoundaryOffset(b, fbsutils.Convert(t.HexaMapBoundaryOffset, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddHexaMapStartCameraOffset(b, fbsutils.Convert(t.HexaMapStartCameraOffset, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddCameraZoomMax(b, fbsutils.Convert(t.CameraZoomMax, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddCameraZoomMin(b, fbsutils.Convert(t.CameraZoomMin, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddCameraZoomDefault(b, fbsutils.Convert(t.CameraZoomDefault, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddHealCostType(b, fbsutils.Convert(t.HealCostType, t.FlatBuffer.TableKey))
	ConstStrategyExcelStartHealCostAmountVector(b, len(t.HealCostAmount))
	for i := range len(t.HealCostAmount) {
		b.PrependInt64(fbsutils.Convert(t.HealCostAmount[len(t.HealCostAmount)-i-1], t.FlatBuffer.TableKey))
	}
	ConstStrategyExcelAddHealCostAmount(b, b.EndVector(len(t.HealCostAmount)))
	ConstStrategyExcelAddCanHealHpRate(b, fbsutils.Convert(t.CanHealHpRate, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddPlayTimeLimitInSeconds(b, fbsutils.Convert(t.PlayTimeLimitInSeconds, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddAdventureEchelonCount(b, fbsutils.Convert(t.AdventureEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddRaidEchelonCount(b, fbsutils.Convert(t.RaidEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddDefaultEchelonCount(b, fbsutils.Convert(t.DefaultEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddEventContentEchelonCount(b, fbsutils.Convert(t.EventContentEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddTimeAttackDungeonEchelonCount(b, fbsutils.Convert(t.TimeAttackDungeonEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddWorldRaidEchelonCount(b, fbsutils.Convert(t.WorldRaidEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddTacticSkipClearTimeSeconds(b, fbsutils.Convert(t.TacticSkipClearTimeSeconds, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddTacticSkipFramePerSecond(b, fbsutils.Convert(t.TacticSkipFramePerSecond, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddConquestEchelonCount(b, fbsutils.Convert(t.ConquestEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddStoryEchelonCount(b, fbsutils.Convert(t.StoryEchelonCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddMultiSweepPresetCount(b, fbsutils.Convert(t.MultiSweepPresetCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddMultiSweepPresetNameMaxLength(b, fbsutils.Convert(t.MultiSweepPresetNameMaxLength, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddMultiSweepPresetSelectStageMaxCount(b, fbsutils.Convert(t.MultiSweepPresetSelectStageMaxCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddMultiSweepPresetMaxSweepCount(b, fbsutils.Convert(t.MultiSweepPresetMaxSweepCount, t.FlatBuffer.TableKey))
	ConstStrategyExcelAddMultiSweepPresetSelectParcelMaxCount(b, fbsutils.Convert(t.MultiSweepPresetSelectParcelMaxCount, t.FlatBuffer.TableKey))
	return ConstStrategyExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstStrategyExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishConstStrategyExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstStrategyExcelDto) UnmarshalMessage(e *ConstStrategyExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstStrategy"))
	}
	t.HexaMapBoundaryOffset = fbsutils.Convert(e.HexaMapBoundaryOffset(), t.FlatBuffer.TableKey)
	t.HexaMapStartCameraOffset = fbsutils.Convert(e.HexaMapStartCameraOffset(), t.FlatBuffer.TableKey)
	t.CameraZoomMax = fbsutils.Convert(e.CameraZoomMax(), t.FlatBuffer.TableKey)
	t.CameraZoomMin = fbsutils.Convert(e.CameraZoomMin(), t.FlatBuffer.TableKey)
	t.CameraZoomDefault = fbsutils.Convert(e.CameraZoomDefault(), t.FlatBuffer.TableKey)
	t.HealCostType = CurrencyTypes(fbsutils.Convert(int32(e.HealCostType()), t.FlatBuffer.TableKey))
	t.HealCostAmount = make([]int64, e.HealCostAmountLength())
	for i := range e.HealCostAmountLength() {
		t.HealCostAmount[i] = fbsutils.Convert(e.HealCostAmount(i), t.FlatBuffer.TableKey)
	}
	t.CanHealHpRate = fbsutils.Convert(e.CanHealHpRate(), t.FlatBuffer.TableKey)
	t.PlayTimeLimitInSeconds = fbsutils.Convert(e.PlayTimeLimitInSeconds(), t.FlatBuffer.TableKey)
	t.AdventureEchelonCount = fbsutils.Convert(e.AdventureEchelonCount(), t.FlatBuffer.TableKey)
	t.RaidEchelonCount = fbsutils.Convert(e.RaidEchelonCount(), t.FlatBuffer.TableKey)
	t.DefaultEchelonCount = fbsutils.Convert(e.DefaultEchelonCount(), t.FlatBuffer.TableKey)
	t.EventContentEchelonCount = fbsutils.Convert(e.EventContentEchelonCount(), t.FlatBuffer.TableKey)
	t.TimeAttackDungeonEchelonCount = fbsutils.Convert(e.TimeAttackDungeonEchelonCount(), t.FlatBuffer.TableKey)
	t.WorldRaidEchelonCount = fbsutils.Convert(e.WorldRaidEchelonCount(), t.FlatBuffer.TableKey)
	t.TacticSkipClearTimeSeconds = fbsutils.Convert(e.TacticSkipClearTimeSeconds(), t.FlatBuffer.TableKey)
	t.TacticSkipFramePerSecond = fbsutils.Convert(e.TacticSkipFramePerSecond(), t.FlatBuffer.TableKey)
	t.ConquestEchelonCount = fbsutils.Convert(e.ConquestEchelonCount(), t.FlatBuffer.TableKey)
	t.StoryEchelonCount = fbsutils.Convert(e.StoryEchelonCount(), t.FlatBuffer.TableKey)
	t.MultiSweepPresetCount = fbsutils.Convert(e.MultiSweepPresetCount(), t.FlatBuffer.TableKey)
	t.MultiSweepPresetNameMaxLength = fbsutils.Convert(e.MultiSweepPresetNameMaxLength(), t.FlatBuffer.TableKey)
	t.MultiSweepPresetSelectStageMaxCount = fbsutils.Convert(e.MultiSweepPresetSelectStageMaxCount(), t.FlatBuffer.TableKey)
	t.MultiSweepPresetMaxSweepCount = fbsutils.Convert(e.MultiSweepPresetMaxSweepCount(), t.FlatBuffer.TableKey)
	t.MultiSweepPresetSelectParcelMaxCount = fbsutils.Convert(e.MultiSweepPresetSelectParcelMaxCount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstStrategyExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstStrategyExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstStrategyExcelDto) FlatDataName() string {
	return "ConstStrategyExcel"
}
