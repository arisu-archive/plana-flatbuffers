// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import "strconv"

type FieldConditionType int32

const (
	FieldConditionTypeInvalid         FieldConditionType = 0
	FieldConditionTypeInteraction     FieldConditionType = 1
	FieldConditionTypeQuestInProgress FieldConditionType = 2
	FieldConditionTypeQuestClear      FieldConditionType = 3
	FieldConditionTypeDate            FieldConditionType = 4
	FieldConditionTypeStageClear      FieldConditionType = 5
	FieldConditionTypeHasKeyword      FieldConditionType = 6
	FieldConditionTypeHasEvidence     FieldConditionType = 7
	FieldConditionTypeOpenDate        FieldConditionType = 8
	FieldConditionTypeOpenDateAfter   FieldConditionType = 9
)

var EnumNamesFieldConditionType = map[FieldConditionType]string{
	FieldConditionTypeInvalid:         "Invalid",
	FieldConditionTypeInteraction:     "Interaction",
	FieldConditionTypeQuestInProgress: "QuestInProgress",
	FieldConditionTypeQuestClear:      "QuestClear",
	FieldConditionTypeDate:            "Date",
	FieldConditionTypeStageClear:      "StageClear",
	FieldConditionTypeHasKeyword:      "HasKeyword",
	FieldConditionTypeHasEvidence:     "HasEvidence",
	FieldConditionTypeOpenDate:        "OpenDate",
	FieldConditionTypeOpenDateAfter:   "OpenDateAfter",
}

var EnumValuesFieldConditionType = map[string]FieldConditionType{
	"Invalid":         FieldConditionTypeInvalid,
	"Interaction":     FieldConditionTypeInteraction,
	"QuestInProgress": FieldConditionTypeQuestInProgress,
	"QuestClear":      FieldConditionTypeQuestClear,
	"Date":            FieldConditionTypeDate,
	"StageClear":      FieldConditionTypeStageClear,
	"HasKeyword":      FieldConditionTypeHasKeyword,
	"HasEvidence":     FieldConditionTypeHasEvidence,
	"OpenDate":        FieldConditionTypeOpenDate,
	"OpenDateAfter":   FieldConditionTypeOpenDateAfter,
}

func (v FieldConditionType) String() string {
	if s, ok := EnumNamesFieldConditionType[v]; ok {
		return s
	}
	return "FieldConditionType(" + strconv.FormatInt(int64(v), 10) + ")"
}
