// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// PresetCharacterGroupSettingExcelDto represents a FlatBuffers table
type PresetCharacterGroupSettingExcelDto struct {
	fbsutils.FlatBuffer
	CharacterId         int64    `json:"character_id"`
	ArenaSimulatorFixed bool     `json:"arena_simulator_fixed"`
	PresetType          []string `json:"preset_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *PresetCharacterGroupSettingExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("PresetCharacterGroupSetting"))
	}
	PresetCharacterGroupSettingExcelStart(b)
	PresetCharacterGroupSettingExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	PresetCharacterGroupSettingExcelAddArenaSimulatorFixed(b, t.ArenaSimulatorFixed)
	PresetCharacterGroupSettingExcelStartPresetTypeVector(b, len(t.PresetType))
	for i := range len(t.PresetType) {
		b.PrependUOffsetT(b.CreateString(t.PresetType[len(t.PresetType)-i-1]))
	}
	PresetCharacterGroupSettingExcelAddPresetType(b, b.EndVector(len(t.PresetType)))
	return PresetCharacterGroupSettingExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *PresetCharacterGroupSettingExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishPresetCharacterGroupSettingExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *PresetCharacterGroupSettingExcelDto) UnmarshalMessage(e *PresetCharacterGroupSettingExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("PresetCharacterGroupSetting"))
	}
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.ArenaSimulatorFixed = e.ArenaSimulatorFixed()
	t.PresetType = make([]string, e.PresetTypeLength())
	for i := range e.PresetTypeLength() {
		t.PresetType[i] = fbsutils.Convert(string(e.PresetType(i)), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *PresetCharacterGroupSettingExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsPresetCharacterGroupSettingExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (PresetCharacterGroupSettingExcelDto) FlatDataName() string {
	return "PresetCharacterGroupSettingExcel"
}
