// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BulletArmorDamageFactorExcelDto represents a FlatBuffers table
type BulletArmorDamageFactorExcelDto struct {
	fbsutils.FlatBuffer
	DamageFactorGroupId  string          `json:"damage_factor_group_id"`
	BulletType           BulletType      `json:"bullet_type"`
	ArmorType            ArmorType       `json:"armor_type"`
	DamageRate           int64           `json:"damage_rate"`
	DamageAttribute      DamageAttribute `json:"damage_attribute"`
	MinDamageRate        int64           `json:"min_damage_rate"`
	MaxDamageRate        int64           `json:"max_damage_rate"`
	ShowHighlightFloater bool            `json:"show_highlight_floater"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BulletArmorDamageFactorExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BulletArmorDamageFactor"))
	}
	BulletArmorDamageFactorExcelStart(b)
	BulletArmorDamageFactorExcelAddDamageFactorGroupId(b, b.CreateString(fbsutils.Convert(t.DamageFactorGroupId, t.FlatBuffer.TableKey)))
	BulletArmorDamageFactorExcelAddBulletType(b, fbsutils.Convert(t.BulletType, t.FlatBuffer.TableKey))
	BulletArmorDamageFactorExcelAddArmorType(b, fbsutils.Convert(t.ArmorType, t.FlatBuffer.TableKey))
	BulletArmorDamageFactorExcelAddDamageRate(b, fbsutils.Convert(t.DamageRate, t.FlatBuffer.TableKey))
	BulletArmorDamageFactorExcelAddDamageAttribute(b, fbsutils.Convert(t.DamageAttribute, t.FlatBuffer.TableKey))
	BulletArmorDamageFactorExcelAddMinDamageRate(b, fbsutils.Convert(t.MinDamageRate, t.FlatBuffer.TableKey))
	BulletArmorDamageFactorExcelAddMaxDamageRate(b, fbsutils.Convert(t.MaxDamageRate, t.FlatBuffer.TableKey))
	BulletArmorDamageFactorExcelAddShowHighlightFloater(b, t.ShowHighlightFloater)
	return BulletArmorDamageFactorExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BulletArmorDamageFactorExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishBulletArmorDamageFactorExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BulletArmorDamageFactorExcelDto) UnmarshalMessage(e *BulletArmorDamageFactorExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BulletArmorDamageFactor"))
	}
	t.DamageFactorGroupId = fbsutils.Convert(string(e.DamageFactorGroupId()), t.FlatBuffer.TableKey)
	t.BulletType = BulletType(fbsutils.Convert(int32(e.BulletType()), t.FlatBuffer.TableKey))
	t.ArmorType = ArmorType(fbsutils.Convert(int32(e.ArmorType()), t.FlatBuffer.TableKey))
	t.DamageRate = fbsutils.Convert(e.DamageRate(), t.FlatBuffer.TableKey)
	t.DamageAttribute = DamageAttribute(fbsutils.Convert(int32(e.DamageAttribute()), t.FlatBuffer.TableKey))
	t.MinDamageRate = fbsutils.Convert(e.MinDamageRate(), t.FlatBuffer.TableKey)
	t.MaxDamageRate = fbsutils.Convert(e.MaxDamageRate(), t.FlatBuffer.TableKey)
	t.ShowHighlightFloater = e.ShowHighlightFloater()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BulletArmorDamageFactorExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBulletArmorDamageFactorExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BulletArmorDamageFactorExcelDto) FlatDataName() string {
	return "BulletArmorDamageFactorExcel"
}
