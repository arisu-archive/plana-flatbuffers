// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GuideMissionSeasonExcelDto represents a FlatBuffers table
type GuideMissionSeasonExcelDto struct {
	fbsutils.FlatBuffer
	Id                              int64               `json:"id"`
	TitleLocalizeCode               string              `json:"title_localize_code"`
	PermanentInfomationLocalizeCode string              `json:"permanent_infomation_localize_code"`
	InfomationLocalizeCode          string              `json:"infomation_localize_code"`
	AccountType                     AccountState        `json:"account_type"`
	Enabled                         bool                `json:"enabled"`
	BannerOpenDate                  string              `json:"banner_open_date"`
	StartDate                       string              `json:"start_date"`
	StartableEndDate                string              `json:"startable_end_date"`
	EndDate                         string              `json:"end_date"`
	CloseBannerAfterCompletion      bool                `json:"close_banner_after_completion"`
	MaximumLoginCount               int64               `json:"maximum_login_count"`
	ExpiryDate                      int64               `json:"expiry_date"`
	SpineCharacterId                int64               `json:"spine_character_id"`
	RequirementParcelImage          string              `json:"requirement_parcel_image"`
	RewardImage                     string              `json:"reward_image"`
	LobbyBannerImage                string              `json:"lobby_banner_image"`
	BackgroundImage                 string              `json:"background_image"`
	TitleImage                      string              `json:"title_image"`
	RequirementParcelType           ParcelType          `json:"requirement_parcel_type"`
	RequirementParcelId             int64               `json:"requirement_parcel_id"`
	RequirementParcelAmount         int32               `json:"requirement_parcel_amount"`
	TabType                         GuideMissionTabType `json:"tab_type"`
	IsPermanent                     bool                `json:"is_permanent"`
	PreSeasonId                     int64               `json:"pre_season_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GuideMissionSeasonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GuideMissionSeason"))
	}
	GuideMissionSeasonExcelStart(b)
	GuideMissionSeasonExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddTitleLocalizeCode(b, b.CreateString(fbsutils.Convert(t.TitleLocalizeCode, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddPermanentInfomationLocalizeCode(b, b.CreateString(fbsutils.Convert(t.PermanentInfomationLocalizeCode, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddInfomationLocalizeCode(b, b.CreateString(fbsutils.Convert(t.InfomationLocalizeCode, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddAccountType(b, fbsutils.Convert(t.AccountType, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddEnabled(b, t.Enabled)
	GuideMissionSeasonExcelAddBannerOpenDate(b, b.CreateString(fbsutils.Convert(t.BannerOpenDate, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddStartDate(b, b.CreateString(fbsutils.Convert(t.StartDate, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddStartableEndDate(b, b.CreateString(fbsutils.Convert(t.StartableEndDate, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddEndDate(b, b.CreateString(fbsutils.Convert(t.EndDate, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddCloseBannerAfterCompletion(b, t.CloseBannerAfterCompletion)
	GuideMissionSeasonExcelAddMaximumLoginCount(b, fbsutils.Convert(t.MaximumLoginCount, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddExpiryDate(b, fbsutils.Convert(t.ExpiryDate, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddSpineCharacterId(b, fbsutils.Convert(t.SpineCharacterId, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddRequirementParcelImage(b, b.CreateString(fbsutils.Convert(t.RequirementParcelImage, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddRewardImage(b, b.CreateString(fbsutils.Convert(t.RewardImage, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddLobbyBannerImage(b, b.CreateString(fbsutils.Convert(t.LobbyBannerImage, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddBackgroundImage(b, b.CreateString(fbsutils.Convert(t.BackgroundImage, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddTitleImage(b, b.CreateString(fbsutils.Convert(t.TitleImage, t.FlatBuffer.TableKey)))
	GuideMissionSeasonExcelAddRequirementParcelType(b, fbsutils.Convert(t.RequirementParcelType, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddRequirementParcelId(b, fbsutils.Convert(t.RequirementParcelId, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddRequirementParcelAmount(b, fbsutils.Convert(t.RequirementParcelAmount, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddTabType(b, fbsutils.Convert(t.TabType, t.FlatBuffer.TableKey))
	GuideMissionSeasonExcelAddIsPermanent(b, t.IsPermanent)
	GuideMissionSeasonExcelAddPreSeasonId(b, fbsutils.Convert(t.PreSeasonId, t.FlatBuffer.TableKey))
	return GuideMissionSeasonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GuideMissionSeasonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GuideMissionSeasonExcelDto) UnmarshalMessage(e *GuideMissionSeasonExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GuideMissionSeason"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.TitleLocalizeCode = fbsutils.Convert(string(e.TitleLocalizeCode()), t.FlatBuffer.TableKey)
	t.PermanentInfomationLocalizeCode = fbsutils.Convert(string(e.PermanentInfomationLocalizeCode()), t.FlatBuffer.TableKey)
	t.InfomationLocalizeCode = fbsutils.Convert(string(e.InfomationLocalizeCode()), t.FlatBuffer.TableKey)
	t.AccountType = AccountState(fbsutils.Convert(int32(e.AccountType()), t.FlatBuffer.TableKey))
	t.Enabled = e.Enabled()
	t.BannerOpenDate = fbsutils.Convert(string(e.BannerOpenDate()), t.FlatBuffer.TableKey)
	t.StartDate = fbsutils.Convert(string(e.StartDate()), t.FlatBuffer.TableKey)
	t.StartableEndDate = fbsutils.Convert(string(e.StartableEndDate()), t.FlatBuffer.TableKey)
	t.EndDate = fbsutils.Convert(string(e.EndDate()), t.FlatBuffer.TableKey)
	t.CloseBannerAfterCompletion = e.CloseBannerAfterCompletion()
	t.MaximumLoginCount = fbsutils.Convert(e.MaximumLoginCount(), t.FlatBuffer.TableKey)
	t.ExpiryDate = fbsutils.Convert(e.ExpiryDate(), t.FlatBuffer.TableKey)
	t.SpineCharacterId = fbsutils.Convert(e.SpineCharacterId(), t.FlatBuffer.TableKey)
	t.RequirementParcelImage = fbsutils.Convert(string(e.RequirementParcelImage()), t.FlatBuffer.TableKey)
	t.RewardImage = fbsutils.Convert(string(e.RewardImage()), t.FlatBuffer.TableKey)
	t.LobbyBannerImage = fbsutils.Convert(string(e.LobbyBannerImage()), t.FlatBuffer.TableKey)
	t.BackgroundImage = fbsutils.Convert(string(e.BackgroundImage()), t.FlatBuffer.TableKey)
	t.TitleImage = fbsutils.Convert(string(e.TitleImage()), t.FlatBuffer.TableKey)
	t.RequirementParcelType = ParcelType(fbsutils.Convert(int32(e.RequirementParcelType()), t.FlatBuffer.TableKey))
	t.RequirementParcelId = fbsutils.Convert(e.RequirementParcelId(), t.FlatBuffer.TableKey)
	t.RequirementParcelAmount = fbsutils.Convert(e.RequirementParcelAmount(), t.FlatBuffer.TableKey)
	t.TabType = GuideMissionTabType(fbsutils.Convert(int32(e.TabType()), t.FlatBuffer.TableKey))
	t.IsPermanent = e.IsPermanent()
	t.PreSeasonId = fbsutils.Convert(e.PreSeasonId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GuideMissionSeasonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGuideMissionSeasonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GuideMissionSeasonExcelDto) FlatDataName() string {
	return "GuideMissionSeasonExcel"
}
