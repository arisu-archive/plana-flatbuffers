// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ArenaLevelSectionExcelDto represents a FlatBuffers table
type ArenaLevelSectionExcelDto struct {
	fbsutils.FlatBuffer
	ArenaSeasonId int64 `json:"arena_season_id"`
	StartLevel    int64 `json:"start_level"`
	LastLevel     int64 `json:"last_level"`
	UserCount     int64 `json:"user_count"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ArenaLevelSectionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ArenaLevelSection"))
	}
	ArenaLevelSectionExcelStart(b)
	ArenaLevelSectionExcelAddArenaSeasonId(b, fbsutils.Convert(t.ArenaSeasonId, t.FlatBuffer.TableKey))
	ArenaLevelSectionExcelAddStartLevel(b, fbsutils.Convert(t.StartLevel, t.FlatBuffer.TableKey))
	ArenaLevelSectionExcelAddLastLevel(b, fbsutils.Convert(t.LastLevel, t.FlatBuffer.TableKey))
	ArenaLevelSectionExcelAddUserCount(b, fbsutils.Convert(t.UserCount, t.FlatBuffer.TableKey))
	return ArenaLevelSectionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ArenaLevelSectionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ArenaLevelSectionExcelDto) UnmarshalMessage(e *ArenaLevelSectionExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ArenaLevelSection"))
	}
	t.ArenaSeasonId = fbsutils.Convert(e.ArenaSeasonId(), t.FlatBuffer.TableKey)
	t.StartLevel = fbsutils.Convert(e.StartLevel(), t.FlatBuffer.TableKey)
	t.LastLevel = fbsutils.Convert(e.LastLevel(), t.FlatBuffer.TableKey)
	t.UserCount = fbsutils.Convert(e.UserCount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ArenaLevelSectionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsArenaLevelSectionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ArenaLevelSectionExcelDto) FlatDataName() string {
	return "ArenaLevelSectionExcel"
}
