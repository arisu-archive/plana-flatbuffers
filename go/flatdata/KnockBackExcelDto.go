// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// KnockBackExcelDto represents a FlatBuffers table
type KnockBackExcelDto struct {
	fbsutils.FlatBuffer
	Speed float32 `json:"speed"`
	Dist  float32 `json:"dist"`
	Index int64   `json:"index"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *KnockBackExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("KnockBack"))
	}
	KnockBackExcelStart(b)
	KnockBackExcelAddSpeed(b, fbsutils.Convert(t.Speed, t.FlatBuffer.TableKey))
	KnockBackExcelAddDist(b, fbsutils.Convert(t.Dist, t.FlatBuffer.TableKey))
	KnockBackExcelAddIndex(b, fbsutils.Convert(t.Index, t.FlatBuffer.TableKey))
	return KnockBackExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *KnockBackExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *KnockBackExcelDto) UnmarshalMessage(e *KnockBackExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("KnockBack"))
	}
	t.Speed = fbsutils.Convert(e.Speed(), t.FlatBuffer.TableKey)
	t.Dist = fbsutils.Convert(e.Dist(), t.FlatBuffer.TableKey)
	t.Index = fbsutils.Convert(e.Index(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *KnockBackExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsKnockBackExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (KnockBackExcelDto) FlatDataName() string {
	return "KnockBackExcel"
}
