// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestStepExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestStepExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestStepExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestStepExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConquestStepExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestStepExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestStepExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConquestStepExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestStepExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestStepExcel) TreasureBoxCountPerStepOpen() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateTreasureBoxCountPerStepOpen(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ConquestStepExcel) TreasureBoxObjectId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateTreasureBoxObjectId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ConquestStepExcel) UnexpectedEventPrefab() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestStepExcel) UnexpectedEventUnitId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConquestStepExcel) UnexpectedEventUnitIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateUnexpectedEventUnitId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConquestStepExcel) StepEnterItemAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateStepEnterItemAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ConquestStepExcel) StepEnterItemUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateStepEnterItemUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ConquestStepExcel) StepEnterItemType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateStepEnterItemType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *ConquestStepExcel) StepEnterScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateStepEnterScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ConquestStepExcel) StepGoalLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestStepExcel) Step() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateStep(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *ConquestStepExcel) MapDifficulty() StageDifficulty {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return StageDifficulty(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateMapDifficulty(n StageDifficulty) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *ConquestStepExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestStepExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func ConquestStepExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func ConquestStepExcelAddTreasureBoxCountPerStepOpen(builder *flatbuffers.Builder, treasureBoxCountPerStepOpen int32) {
	builder.PrependInt32Slot(0, treasureBoxCountPerStepOpen, 0)
}
func ConquestStepExcelAddTreasureBoxObjectId(builder *flatbuffers.Builder, treasureBoxObjectId int64) {
	builder.PrependInt64Slot(1, treasureBoxObjectId, 0)
}
func ConquestStepExcelAddUnexpectedEventPrefab(builder *flatbuffers.Builder, unexpectedEventPrefab flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unexpectedEventPrefab), 0)
}
func ConquestStepExcelAddUnexpectedEventUnitId(builder *flatbuffers.Builder, unexpectedEventUnitId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(unexpectedEventUnitId), 0)
}
func ConquestStepExcelStartUnexpectedEventUnitIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConquestStepExcelAddStepEnterItemAmount(builder *flatbuffers.Builder, stepEnterItemAmount int64) {
	builder.PrependInt64Slot(4, stepEnterItemAmount, 0)
}
func ConquestStepExcelAddStepEnterItemUniqueId(builder *flatbuffers.Builder, stepEnterItemUniqueId int64) {
	builder.PrependInt64Slot(5, stepEnterItemUniqueId, 0)
}
func ConquestStepExcelAddStepEnterItemType(builder *flatbuffers.Builder, stepEnterItemType ParcelType) {
	builder.PrependInt32Slot(6, int32(stepEnterItemType), 0)
}
func ConquestStepExcelAddStepEnterScenarioGroupId(builder *flatbuffers.Builder, stepEnterScenarioGroupId int64) {
	builder.PrependInt64Slot(7, stepEnterScenarioGroupId, 0)
}
func ConquestStepExcelAddStepGoalLocalize(builder *flatbuffers.Builder, stepGoalLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(stepGoalLocalize), 0)
}
func ConquestStepExcelAddStep(builder *flatbuffers.Builder, step int32) {
	builder.PrependInt32Slot(9, step, 0)
}
func ConquestStepExcelAddMapDifficulty(builder *flatbuffers.Builder, mapDifficulty StageDifficulty) {
	builder.PrependInt32Slot(10, int32(mapDifficulty), 0)
}
func ConquestStepExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(11, eventContentId, 0)
}
func ConquestStepExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
