// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BlendInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsBlendInfo(buf []byte, offset flatbuffers.UOffsetT) *BlendInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BlendInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBlendInfo(buf []byte, offset flatbuffers.UOffsetT) *BlendInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BlendInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BlendInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BlendInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BlendInfo) From() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlendInfo) MutateFrom(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *BlendInfo) To() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlendInfo) MutateTo(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *BlendInfo) Blend() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BlendInfo) MutateBlend(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func BlendInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BlendInfoAddFrom(builder *flatbuffers.Builder, from int32) {
	builder.PrependInt32Slot(0, from, 0)
}
func BlendInfoAddTo(builder *flatbuffers.Builder, to int32) {
	builder.PrependInt32Slot(1, to, 0)
}
func BlendInfoAddBlend(builder *flatbuffers.Builder, blend float32) {
	builder.PrependFloat32Slot(2, blend, 0.0)
}
func BlendInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
