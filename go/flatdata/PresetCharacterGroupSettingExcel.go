// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PresetCharacterGroupSettingExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsPresetCharacterGroupSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *PresetCharacterGroupSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PresetCharacterGroupSettingExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPresetCharacterGroupSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *PresetCharacterGroupSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PresetCharacterGroupSettingExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PresetCharacterGroupSettingExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PresetCharacterGroupSettingExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PresetCharacterGroupSettingExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupSettingExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PresetCharacterGroupSettingExcel) ArenaSimulatorFixed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PresetCharacterGroupSettingExcel) MutateArenaSimulatorFixed(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *PresetCharacterGroupSettingExcel) PresetType(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PresetCharacterGroupSettingExcel) PresetTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PresetCharacterGroupSettingExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PresetCharacterGroupSettingExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(0, characterId, 0)
}
func PresetCharacterGroupSettingExcelAddArenaSimulatorFixed(builder *flatbuffers.Builder, arenaSimulatorFixed bool) {
	builder.PrependBoolSlot(1, arenaSimulatorFixed, false)
}
func PresetCharacterGroupSettingExcelAddPresetType(builder *flatbuffers.Builder, presetType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(presetType), 0)
}
func PresetCharacterGroupSettingExcelStartPresetTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PresetCharacterGroupSettingExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
