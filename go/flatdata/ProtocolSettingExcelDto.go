// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ProtocolSettingExcelDto represents a FlatBuffers table
type ProtocolSettingExcelDto struct {
	fbsutils.FlatBuffer
	Currency             bool                 `json:"currency"`
	Inventory            bool                 `json:"inventory"`
	Mail                 bool                 `json:"mail"`
	OpenConditionContent OpenConditionContent `json:"open_condition_content"`
	Protocol             string               `json:"protocol"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ProtocolSettingExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ProtocolSetting"))
	}
	ProtocolSettingExcelStart(b)
	ProtocolSettingExcelAddCurrency(b, t.Currency)
	ProtocolSettingExcelAddInventory(b, t.Inventory)
	ProtocolSettingExcelAddMail(b, t.Mail)
	ProtocolSettingExcelAddOpenConditionContent(b, fbsutils.Convert(t.OpenConditionContent, t.FlatBuffer.TableKey))
	ProtocolSettingExcelAddProtocol(b, b.CreateString(fbsutils.Convert(t.Protocol, t.FlatBuffer.TableKey)))
	return ProtocolSettingExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ProtocolSettingExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ProtocolSettingExcelDto) UnmarshalMessage(e *ProtocolSettingExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ProtocolSetting"))
	}
	t.Currency = e.Currency()
	t.Inventory = e.Inventory()
	t.Mail = e.Mail()
	t.OpenConditionContent = OpenConditionContent(fbsutils.Convert(int32(e.OpenConditionContent()), t.FlatBuffer.TableKey))
	t.Protocol = fbsutils.Convert(string(e.Protocol()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ProtocolSettingExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsProtocolSettingExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ProtocolSettingExcelDto) FlatDataName() string {
	return "ProtocolSettingExcel"
}
