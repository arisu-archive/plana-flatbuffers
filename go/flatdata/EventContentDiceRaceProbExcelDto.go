// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentDiceRaceProbExcelDto represents a FlatBuffers table
type EventContentDiceRaceProbExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId                 int64                          `json:"event_content_id"`
	EventContentDiceRaceResultType EventContentDiceRaceResultType `json:"event_content_dice_race_result_type"`
	CostItemId                     int64                          `json:"cost_item_id"`
	CostItemAmount                 int32                          `json:"cost_item_amount"`
	DiceResult                     int32                          `json:"dice_result"`
	Prob                           int32                          `json:"prob"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentDiceRaceProbExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentDiceRaceProb"))
	}
	EventContentDiceRaceProbExcelStart(b)
	EventContentDiceRaceProbExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentDiceRaceProbExcelAddEventContentDiceRaceResultType(b, fbsutils.Convert(t.EventContentDiceRaceResultType, t.FlatBuffer.TableKey))
	EventContentDiceRaceProbExcelAddCostItemId(b, fbsutils.Convert(t.CostItemId, t.FlatBuffer.TableKey))
	EventContentDiceRaceProbExcelAddCostItemAmount(b, fbsutils.Convert(t.CostItemAmount, t.FlatBuffer.TableKey))
	EventContentDiceRaceProbExcelAddDiceResult(b, fbsutils.Convert(t.DiceResult, t.FlatBuffer.TableKey))
	EventContentDiceRaceProbExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	return EventContentDiceRaceProbExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentDiceRaceProbExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishEventContentDiceRaceProbExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentDiceRaceProbExcelDto) UnmarshalMessage(e *EventContentDiceRaceProbExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentDiceRaceProb"))
	}
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.EventContentDiceRaceResultType = EventContentDiceRaceResultType(fbsutils.Convert(int32(e.EventContentDiceRaceResultType()), t.FlatBuffer.TableKey))
	t.CostItemId = fbsutils.Convert(e.CostItemId(), t.FlatBuffer.TableKey)
	t.CostItemAmount = fbsutils.Convert(e.CostItemAmount(), t.FlatBuffer.TableKey)
	t.DiceResult = fbsutils.Convert(e.DiceResult(), t.FlatBuffer.TableKey)
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentDiceRaceProbExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentDiceRaceProbExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentDiceRaceProbExcelDto) FlatDataName() string {
	return "EventContentDiceRaceProbExcel"
}
