// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ArenaSeasonExcelDto represents a FlatBuffers table
type ArenaSeasonExcelDto struct {
	fbsutils.FlatBuffer
	UniqueId         int64  `json:"unique_id"`
	SeasonStartDate  string `json:"season_start_date"`
	SeasonEndDate    string `json:"season_end_date"`
	SeasonGroupLimit int64  `json:"season_group_limit"`
	PrevSeasonId     int64  `json:"prev_season_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ArenaSeasonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ArenaSeason"))
	}
	ArenaSeasonExcelStart(b)
	ArenaSeasonExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	ArenaSeasonExcelAddSeasonStartDate(b, b.CreateString(fbsutils.Convert(t.SeasonStartDate, t.FlatBuffer.TableKey)))
	ArenaSeasonExcelAddSeasonEndDate(b, b.CreateString(fbsutils.Convert(t.SeasonEndDate, t.FlatBuffer.TableKey)))
	ArenaSeasonExcelAddSeasonGroupLimit(b, fbsutils.Convert(t.SeasonGroupLimit, t.FlatBuffer.TableKey))
	ArenaSeasonExcelAddPrevSeasonId(b, fbsutils.Convert(t.PrevSeasonId, t.FlatBuffer.TableKey))
	return ArenaSeasonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ArenaSeasonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishArenaSeasonExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ArenaSeasonExcelDto) UnmarshalMessage(e *ArenaSeasonExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ArenaSeason"))
	}
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.SeasonStartDate = fbsutils.Convert(string(e.SeasonStartDate()), t.FlatBuffer.TableKey)
	t.SeasonEndDate = fbsutils.Convert(string(e.SeasonEndDate()), t.FlatBuffer.TableKey)
	t.SeasonGroupLimit = fbsutils.Convert(e.SeasonGroupLimit(), t.FlatBuffer.TableKey)
	t.PrevSeasonId = fbsutils.Convert(e.PrevSeasonId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ArenaSeasonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsArenaSeasonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ArenaSeasonExcelDto) FlatDataName() string {
	return "ArenaSeasonExcel"
}
