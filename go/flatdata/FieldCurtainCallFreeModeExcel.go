// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldCurtainCallFreeModeExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldCurtainCallFreeModeExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldCurtainCallFreeModeExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldCurtainCallFreeModeExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFieldCurtainCallFreeModeExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldCurtainCallFreeModeExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldCurtainCallFreeModeExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FieldCurtainCallFreeModeExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldCurtainCallFreeModeExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldCurtainCallFreeModeExcel) OpenDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldCurtainCallFreeModeExcel) MutateOpenDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FieldCurtainCallFreeModeExcel) SetFieldDateId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldCurtainCallFreeModeExcel) MutateSetFieldDateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *FieldCurtainCallFreeModeExcel) SetFieldQuestOpenDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldCurtainCallFreeModeExcel) MutateSetFieldQuestOpenDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *FieldCurtainCallFreeModeExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldCurtainCallFreeModeExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func FieldCurtainCallFreeModeExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FieldCurtainCallFreeModeExcelAddOpenDate(builder *flatbuffers.Builder, openDate int64) {
	builder.PrependInt64Slot(0, openDate, 0)
}
func FieldCurtainCallFreeModeExcelAddSetFieldDateId(builder *flatbuffers.Builder, setFieldDateId int64) {
	builder.PrependInt64Slot(1, setFieldDateId, 0)
}
func FieldCurtainCallFreeModeExcelAddSetFieldQuestOpenDate(builder *flatbuffers.Builder, setFieldQuestOpenDate int64) {
	builder.PrependInt64Slot(2, setFieldQuestOpenDate, 0)
}
func FieldCurtainCallFreeModeExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(3, uniqueId, 0)
}
func FieldCurtainCallFreeModeExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
