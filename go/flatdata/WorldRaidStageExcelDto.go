// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WorldRaidStageExcelDto represents a FlatBuffers table
type WorldRaidStageExcelDto struct {
	fbsutils.FlatBuffer
	Id                            int64                `json:"id"`
	UseBossIndex                  bool                 `json:"use_boss_index"`
	UseBossAiPhaseSync            bool                 `json:"use_boss_ai_phase_sync"`
	WorldRaidBossGroupId          int64                `json:"world_raid_boss_group_id"`
	PortraitPath                  string               `json:"portrait_path"`
	BgPath                        string               `json:"bg_path"`
	RaidCharacterId               int64                `json:"raid_character_id"`
	BossCharacterId               []int64              `json:"boss_character_id"`
	AssistCharacterLimitCount     int64                `json:"assist_character_limit_count"`
	WorldRaidDifficulty           WorldRaidDifficulty  `json:"world_raid_difficulty"`
	DifficultyOpenCondition       bool                 `json:"difficulty_open_condition"`
	RaidEnterAmount               int64                `json:"raid_enter_amount"`
	ReEnterAmount                 int64                `json:"re_enter_amount"`
	BattleDuration                int64                `json:"battle_duration"`
	GroundId                      int64                `json:"ground_id"`
	RaidBattleEndRewardGroupId    int64                `json:"raid_battle_end_reward_group_id"`
	RaidRewardGroupId             int64                `json:"raid_reward_group_id"`
	BattleReadyTimelinePath       []string             `json:"battle_ready_timeline_path"`
	BattleReadyTimelinePhaseStart []int32              `json:"battle_ready_timeline_phase_start"`
	BattleReadyTimelinePhaseEnd   []int32              `json:"battle_ready_timeline_phase_end"`
	VictoryTimelinePath           string               `json:"victory_timeline_path"`
	PhaseChangeTimelinePath       string               `json:"phase_change_timeline_path"`
	TimeLinePhase                 int64                `json:"time_line_phase"`
	EnterScenarioKey              int64                `json:"enter_scenario_key"`
	ClearScenarioKey              int64                `json:"clear_scenario_key"`
	UseFixedEchelon               bool                 `json:"use_fixed_echelon"`
	FixedEchelonId                int64                `json:"fixed_echelon_id"`
	IsRaidScenarioBattle          bool                 `json:"is_raid_scenario_battle"`
	ShowSkillCard                 bool                 `json:"show_skill_card"`
	BossBgInfoKey                 uint32               `json:"boss_bg_info_key"`
	DamageToWorldBoss             int64                `json:"damage_to_world_boss"`
	AllyPassiveSkill              []string             `json:"ally_passive_skill"`
	AllyPassiveSkillLevel         []int32              `json:"ally_passive_skill_level"`
	SaveCurrentLocalBossHp        bool                 `json:"save_current_local_boss_hp"`
	EchelonExtensionType          EchelonExtensionType `json:"echelon_extension_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WorldRaidStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WorldRaidStage"))
	}
	__offset_portrait_path := b.CreateString(fbsutils.Convert(t.PortraitPath, t.FlatBuffer.TableKey))
	__offset_bg_path := b.CreateString(fbsutils.Convert(t.BgPath, t.FlatBuffer.TableKey))
	var __offset_battle_ready_timeline_path flatbuffers.UOffsetT
	__stringOffsets_battle_ready_timeline_path := make([]flatbuffers.UOffsetT, len(t.BattleReadyTimelinePath))
	for i := range len(t.BattleReadyTimelinePath) {
		__stringOffsets_battle_ready_timeline_path[i] = b.CreateString(fbsutils.Convert(t.BattleReadyTimelinePath[i], t.FlatBuffer.TableKey))
	}
	WorldRaidStageExcelStartBattleReadyTimelinePathVector(b, len(t.BattleReadyTimelinePath))
	for i := range len(t.BattleReadyTimelinePath) {
		b.PrependUOffsetT(__stringOffsets_battle_ready_timeline_path[len(t.BattleReadyTimelinePath)-i-1])
	}
	__offset_battle_ready_timeline_path = b.EndVector(len(t.BattleReadyTimelinePath))
	__offset_victory_timeline_path := b.CreateString(fbsutils.Convert(t.VictoryTimelinePath, t.FlatBuffer.TableKey))
	__offset_phase_change_timeline_path := b.CreateString(fbsutils.Convert(t.PhaseChangeTimelinePath, t.FlatBuffer.TableKey))
	var __offset_ally_passive_skill flatbuffers.UOffsetT
	__stringOffsets_ally_passive_skill := make([]flatbuffers.UOffsetT, len(t.AllyPassiveSkill))
	for i := range len(t.AllyPassiveSkill) {
		__stringOffsets_ally_passive_skill[i] = b.CreateString(fbsutils.Convert(t.AllyPassiveSkill[i], t.FlatBuffer.TableKey))
	}
	WorldRaidStageExcelStartAllyPassiveSkillVector(b, len(t.AllyPassiveSkill))
	for i := range len(t.AllyPassiveSkill) {
		b.PrependUOffsetT(__stringOffsets_ally_passive_skill[len(t.AllyPassiveSkill)-i-1])
	}
	__offset_ally_passive_skill = b.EndVector(len(t.AllyPassiveSkill))
	WorldRaidStageExcelStart(b)
	WorldRaidStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddUseBossIndex(b, t.UseBossIndex)
	WorldRaidStageExcelAddUseBossAiPhaseSync(b, t.UseBossAiPhaseSync)
	WorldRaidStageExcelAddWorldRaidBossGroupId(b, fbsutils.Convert(t.WorldRaidBossGroupId, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddPortraitPath(b, __offset_portrait_path)
	WorldRaidStageExcelAddBgPath(b, __offset_bg_path)
	WorldRaidStageExcelAddRaidCharacterId(b, fbsutils.Convert(t.RaidCharacterId, t.FlatBuffer.TableKey))
	WorldRaidStageExcelStartBossCharacterIdVector(b, len(t.BossCharacterId))
	for i := range len(t.BossCharacterId) {
		b.PrependInt64(fbsutils.Convert(t.BossCharacterId[len(t.BossCharacterId)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidStageExcelAddBossCharacterId(b, b.EndVector(len(t.BossCharacterId)))
	WorldRaidStageExcelAddAssistCharacterLimitCount(b, fbsutils.Convert(t.AssistCharacterLimitCount, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddWorldRaidDifficulty(b, fbsutils.Convert(t.WorldRaidDifficulty, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddDifficultyOpenCondition(b, t.DifficultyOpenCondition)
	WorldRaidStageExcelAddRaidEnterAmount(b, fbsutils.Convert(t.RaidEnterAmount, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddReEnterAmount(b, fbsutils.Convert(t.ReEnterAmount, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddRaidBattleEndRewardGroupId(b, fbsutils.Convert(t.RaidBattleEndRewardGroupId, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddRaidRewardGroupId(b, fbsutils.Convert(t.RaidRewardGroupId, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddBattleReadyTimelinePath(b, __offset_battle_ready_timeline_path)
	WorldRaidStageExcelStartBattleReadyTimelinePhaseStartVector(b, len(t.BattleReadyTimelinePhaseStart))
	for i := range len(t.BattleReadyTimelinePhaseStart) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseStart[len(t.BattleReadyTimelinePhaseStart)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidStageExcelAddBattleReadyTimelinePhaseStart(b, b.EndVector(len(t.BattleReadyTimelinePhaseStart)))
	WorldRaidStageExcelStartBattleReadyTimelinePhaseEndVector(b, len(t.BattleReadyTimelinePhaseEnd))
	for i := range len(t.BattleReadyTimelinePhaseEnd) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseEnd[len(t.BattleReadyTimelinePhaseEnd)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidStageExcelAddBattleReadyTimelinePhaseEnd(b, b.EndVector(len(t.BattleReadyTimelinePhaseEnd)))
	WorldRaidStageExcelAddVictoryTimelinePath(b, __offset_victory_timeline_path)
	WorldRaidStageExcelAddPhaseChangeTimelinePath(b, __offset_phase_change_timeline_path)
	WorldRaidStageExcelAddTimeLinePhase(b, fbsutils.Convert(t.TimeLinePhase, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddEnterScenarioKey(b, fbsutils.Convert(t.EnterScenarioKey, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddClearScenarioKey(b, fbsutils.Convert(t.ClearScenarioKey, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddUseFixedEchelon(b, t.UseFixedEchelon)
	WorldRaidStageExcelAddFixedEchelonId(b, fbsutils.Convert(t.FixedEchelonId, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddIsRaidScenarioBattle(b, t.IsRaidScenarioBattle)
	WorldRaidStageExcelAddShowSkillCard(b, t.ShowSkillCard)
	WorldRaidStageExcelAddBossBgInfoKey(b, fbsutils.Convert(t.BossBgInfoKey, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddDamageToWorldBoss(b, fbsutils.Convert(t.DamageToWorldBoss, t.FlatBuffer.TableKey))
	WorldRaidStageExcelAddAllyPassiveSkill(b, __offset_ally_passive_skill)
	WorldRaidStageExcelStartAllyPassiveSkillLevelVector(b, len(t.AllyPassiveSkillLevel))
	for i := range len(t.AllyPassiveSkillLevel) {
		b.PrependInt32(fbsutils.Convert(t.AllyPassiveSkillLevel[len(t.AllyPassiveSkillLevel)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidStageExcelAddAllyPassiveSkillLevel(b, b.EndVector(len(t.AllyPassiveSkillLevel)))
	WorldRaidStageExcelAddSaveCurrentLocalBossHp(b, t.SaveCurrentLocalBossHp)
	WorldRaidStageExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	return WorldRaidStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WorldRaidStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidStageExcelDto) UnmarshalMessage(e *WorldRaidStageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WorldRaidStage"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.UseBossIndex = e.UseBossIndex()
	t.UseBossAiPhaseSync = e.UseBossAiPhaseSync()
	t.WorldRaidBossGroupId = fbsutils.Convert(e.WorldRaidBossGroupId(), t.FlatBuffer.TableKey)
	t.PortraitPath = fbsutils.Convert(string(e.PortraitPath()), t.FlatBuffer.TableKey)
	t.BgPath = fbsutils.Convert(string(e.BgPath()), t.FlatBuffer.TableKey)
	t.RaidCharacterId = fbsutils.Convert(e.RaidCharacterId(), t.FlatBuffer.TableKey)
	t.BossCharacterId = make([]int64, e.BossCharacterIdLength())
	for i := range e.BossCharacterIdLength() {
		t.BossCharacterId[i] = fbsutils.Convert(e.BossCharacterId(i), t.FlatBuffer.TableKey)
	}
	t.AssistCharacterLimitCount = fbsutils.Convert(e.AssistCharacterLimitCount(), t.FlatBuffer.TableKey)
	t.WorldRaidDifficulty = WorldRaidDifficulty(fbsutils.Convert(int32(e.WorldRaidDifficulty()), t.FlatBuffer.TableKey))
	t.DifficultyOpenCondition = e.DifficultyOpenCondition()
	t.RaidEnterAmount = fbsutils.Convert(e.RaidEnterAmount(), t.FlatBuffer.TableKey)
	t.ReEnterAmount = fbsutils.Convert(e.ReEnterAmount(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.RaidBattleEndRewardGroupId = fbsutils.Convert(e.RaidBattleEndRewardGroupId(), t.FlatBuffer.TableKey)
	t.RaidRewardGroupId = fbsutils.Convert(e.RaidRewardGroupId(), t.FlatBuffer.TableKey)
	t.BattleReadyTimelinePath = make([]string, e.BattleReadyTimelinePathLength())
	for i := range e.BattleReadyTimelinePathLength() {
		t.BattleReadyTimelinePath[i] = fbsutils.Convert(string(e.BattleReadyTimelinePath(i)), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePhaseStart = make([]int32, e.BattleReadyTimelinePhaseStartLength())
	for i := range e.BattleReadyTimelinePhaseStartLength() {
		t.BattleReadyTimelinePhaseStart[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseStart(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePhaseEnd = make([]int32, e.BattleReadyTimelinePhaseEndLength())
	for i := range e.BattleReadyTimelinePhaseEndLength() {
		t.BattleReadyTimelinePhaseEnd[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseEnd(i), t.FlatBuffer.TableKey)
	}
	t.VictoryTimelinePath = fbsutils.Convert(string(e.VictoryTimelinePath()), t.FlatBuffer.TableKey)
	t.PhaseChangeTimelinePath = fbsutils.Convert(string(e.PhaseChangeTimelinePath()), t.FlatBuffer.TableKey)
	t.TimeLinePhase = fbsutils.Convert(e.TimeLinePhase(), t.FlatBuffer.TableKey)
	t.EnterScenarioKey = fbsutils.Convert(e.EnterScenarioKey(), t.FlatBuffer.TableKey)
	t.ClearScenarioKey = fbsutils.Convert(e.ClearScenarioKey(), t.FlatBuffer.TableKey)
	t.UseFixedEchelon = e.UseFixedEchelon()
	t.FixedEchelonId = fbsutils.Convert(e.FixedEchelonId(), t.FlatBuffer.TableKey)
	t.IsRaidScenarioBattle = e.IsRaidScenarioBattle()
	t.ShowSkillCard = e.ShowSkillCard()
	t.BossBgInfoKey = fbsutils.Convert(e.BossBgInfoKey(), t.FlatBuffer.TableKey)
	t.DamageToWorldBoss = fbsutils.Convert(e.DamageToWorldBoss(), t.FlatBuffer.TableKey)
	t.AllyPassiveSkill = make([]string, e.AllyPassiveSkillLength())
	for i := range e.AllyPassiveSkillLength() {
		t.AllyPassiveSkill[i] = fbsutils.Convert(string(e.AllyPassiveSkill(i)), t.FlatBuffer.TableKey)
	}
	t.AllyPassiveSkillLevel = make([]int32, e.AllyPassiveSkillLevelLength())
	for i := range e.AllyPassiveSkillLevelLength() {
		t.AllyPassiveSkillLevel[i] = fbsutils.Convert(e.AllyPassiveSkillLevel(i), t.FlatBuffer.TableKey)
	}
	t.SaveCurrentLocalBossHp = e.SaveCurrentLocalBossHp()
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsWorldRaidStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WorldRaidStageExcelDto) FlatDataName() string {
	return "WorldRaidStageExcel"
}
