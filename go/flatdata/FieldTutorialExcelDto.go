// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldTutorialExcelDto represents a FlatBuffers table
type FieldTutorialExcelDto struct {
	fbsutils.FlatBuffer
	ConditionId   []int64              `json:"condition_id"`
	ConditionType []FieldConditionType `json:"condition_type"`
	TutorialType  []FieldTutorialType  `json:"tutorial_type"`
	SeasonId      int64                `json:"season_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldTutorialExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldTutorial"))
	}
	FieldTutorialExcelStart(b)
	FieldTutorialExcelStartConditionIdVector(b, len(t.ConditionId))
	for i := range len(t.ConditionId) {
		b.PrependInt64(fbsutils.Convert(t.ConditionId[len(t.ConditionId)-i-1], t.FlatBuffer.TableKey))
	}
	FieldTutorialExcelAddConditionId(b, b.EndVector(len(t.ConditionId)))
	FieldTutorialExcelStartConditionTypeVector(b, len(t.ConditionType))
	for i := range len(t.ConditionType) {
		b.PrependInt32(fbsutils.Convert(int32(t.ConditionType[len(t.ConditionType)-i-1]), t.FlatBuffer.TableKey))
	}
	FieldTutorialExcelAddConditionType(b, b.EndVector(len(t.ConditionType)))
	FieldTutorialExcelStartTutorialTypeVector(b, len(t.TutorialType))
	for i := range len(t.TutorialType) {
		b.PrependInt32(fbsutils.Convert(int32(t.TutorialType[len(t.TutorialType)-i-1]), t.FlatBuffer.TableKey))
	}
	FieldTutorialExcelAddTutorialType(b, b.EndVector(len(t.TutorialType)))
	FieldTutorialExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	return FieldTutorialExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldTutorialExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldTutorialExcelDto) UnmarshalMessage(e *FieldTutorialExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldTutorial"))
	}
	t.ConditionId = make([]int64, e.ConditionIdLength())
	for i := range e.ConditionIdLength() {
		t.ConditionId[i] = fbsutils.Convert(e.ConditionId(i), t.FlatBuffer.TableKey)
	}
	t.ConditionType = make([]FieldConditionType, e.ConditionTypeLength())
	for i := range e.ConditionTypeLength() {
		t.ConditionType[i] = FieldConditionType(fbsutils.Convert(int32(e.ConditionType(i)), t.FlatBuffer.TableKey))
	}
	t.TutorialType = make([]FieldTutorialType, e.TutorialTypeLength())
	for i := range e.TutorialTypeLength() {
		t.TutorialType[i] = FieldTutorialType(fbsutils.Convert(int32(e.TutorialType(i)), t.FlatBuffer.TableKey))
	}
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldTutorialExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldTutorialExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldTutorialExcelDto) FlatDataName() string {
	return "FieldTutorialExcel"
}
