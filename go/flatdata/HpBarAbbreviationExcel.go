// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HpBarAbbreviationExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsHpBarAbbreviationExcel(buf []byte, offset flatbuffers.UOffsetT) *HpBarAbbreviationExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HpBarAbbreviationExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishHpBarAbbreviationExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHpBarAbbreviationExcel(buf []byte, offset flatbuffers.UOffsetT) *HpBarAbbreviationExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HpBarAbbreviationExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHpBarAbbreviationExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *HpBarAbbreviationExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HpBarAbbreviationExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HpBarAbbreviationExcel) MonsterLv() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HpBarAbbreviationExcel) MutateMonsterLv(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *HpBarAbbreviationExcel) StandardHpBar() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HpBarAbbreviationExcel) MutateStandardHpBar(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *HpBarAbbreviationExcel) RaidBossHpBar() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HpBarAbbreviationExcel) MutateRaidBossHpBar(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func HpBarAbbreviationExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HpBarAbbreviationExcelAddMonsterLv(builder *flatbuffers.Builder, monsterLv int32) {
	builder.PrependInt32Slot(0, monsterLv, 0)
}
func HpBarAbbreviationExcelAddStandardHpBar(builder *flatbuffers.Builder, standardHpBar int32) {
	builder.PrependInt32Slot(1, standardHpBar, 0)
}
func HpBarAbbreviationExcelAddRaidBossHpBar(builder *flatbuffers.Builder, raidBossHpBar int32) {
	builder.PrependInt32Slot(2, raidBossHpBar, 0)
}
func HpBarAbbreviationExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
