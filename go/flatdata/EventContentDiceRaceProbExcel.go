// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentDiceRaceProbExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentDiceRaceProbExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDiceRaceProbExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentDiceRaceProbExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentDiceRaceProbExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentDiceRaceProbExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDiceRaceProbExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentDiceRaceProbExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentDiceRaceProbExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentDiceRaceProbExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentDiceRaceProbExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentDiceRaceProbExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceProbExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentDiceRaceProbExcel) EventContentDiceRaceResultType() EventContentDiceRaceResultType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EventContentDiceRaceResultType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentDiceRaceProbExcel) MutateEventContentDiceRaceResultType(n EventContentDiceRaceResultType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentDiceRaceProbExcel) CostItemId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceProbExcel) MutateCostItemId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentDiceRaceProbExcel) CostItemAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceProbExcel) MutateCostItemAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *EventContentDiceRaceProbExcel) DiceResult() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceProbExcel) MutateDiceResult(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *EventContentDiceRaceProbExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceProbExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func EventContentDiceRaceProbExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EventContentDiceRaceProbExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentDiceRaceProbExcelAddEventContentDiceRaceResultType(builder *flatbuffers.Builder, eventContentDiceRaceResultType EventContentDiceRaceResultType) {
	builder.PrependInt32Slot(1, int32(eventContentDiceRaceResultType), 0)
}
func EventContentDiceRaceProbExcelAddCostItemId(builder *flatbuffers.Builder, costItemId int64) {
	builder.PrependInt64Slot(2, costItemId, 0)
}
func EventContentDiceRaceProbExcelAddCostItemAmount(builder *flatbuffers.Builder, costItemAmount int32) {
	builder.PrependInt32Slot(3, costItemAmount, 0)
}
func EventContentDiceRaceProbExcelAddDiceResult(builder *flatbuffers.Builder, diceResult int32) {
	builder.PrependInt32Slot(4, diceResult, 0)
}
func EventContentDiceRaceProbExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(5, prob, 0)
}
func EventContentDiceRaceProbExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
