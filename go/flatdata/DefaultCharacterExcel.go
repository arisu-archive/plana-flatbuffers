// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DefaultCharacterExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsDefaultCharacterExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultCharacterExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DefaultCharacterExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishDefaultCharacterExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDefaultCharacterExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultCharacterExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DefaultCharacterExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDefaultCharacterExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DefaultCharacterExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DefaultCharacterExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DefaultCharacterExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *DefaultCharacterExcel) FavoriteCharacter() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DefaultCharacterExcel) MutateFavoriteCharacter(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *DefaultCharacterExcel) Level() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *DefaultCharacterExcel) Exp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateExp(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *DefaultCharacterExcel) FavorExp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateFavorExp(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *DefaultCharacterExcel) FavorRank() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateFavorRank(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *DefaultCharacterExcel) StarGrade() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateStarGrade(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *DefaultCharacterExcel) ExSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateExSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *DefaultCharacterExcel) PassiveSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutatePassiveSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *DefaultCharacterExcel) ExtraPassiveSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateExtraPassiveSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *DefaultCharacterExcel) CommonSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateCommonSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *DefaultCharacterExcel) LeaderSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultCharacterExcel) MutateLeaderSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func DefaultCharacterExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func DefaultCharacterExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(0, characterId, 0)
}
func DefaultCharacterExcelAddFavoriteCharacter(builder *flatbuffers.Builder, favoriteCharacter bool) {
	builder.PrependBoolSlot(1, favoriteCharacter, false)
}
func DefaultCharacterExcelAddLevel(builder *flatbuffers.Builder, level int32) {
	builder.PrependInt32Slot(2, level, 0)
}
func DefaultCharacterExcelAddExp(builder *flatbuffers.Builder, exp int32) {
	builder.PrependInt32Slot(3, exp, 0)
}
func DefaultCharacterExcelAddFavorExp(builder *flatbuffers.Builder, favorExp int32) {
	builder.PrependInt32Slot(4, favorExp, 0)
}
func DefaultCharacterExcelAddFavorRank(builder *flatbuffers.Builder, favorRank int32) {
	builder.PrependInt32Slot(5, favorRank, 0)
}
func DefaultCharacterExcelAddStarGrade(builder *flatbuffers.Builder, starGrade int32) {
	builder.PrependInt32Slot(6, starGrade, 0)
}
func DefaultCharacterExcelAddExSkillLevel(builder *flatbuffers.Builder, exSkillLevel int32) {
	builder.PrependInt32Slot(7, exSkillLevel, 0)
}
func DefaultCharacterExcelAddPassiveSkillLevel(builder *flatbuffers.Builder, passiveSkillLevel int32) {
	builder.PrependInt32Slot(8, passiveSkillLevel, 0)
}
func DefaultCharacterExcelAddExtraPassiveSkillLevel(builder *flatbuffers.Builder, extraPassiveSkillLevel int32) {
	builder.PrependInt32Slot(9, extraPassiveSkillLevel, 0)
}
func DefaultCharacterExcelAddCommonSkillLevel(builder *flatbuffers.Builder, commonSkillLevel int32) {
	builder.PrependInt32Slot(10, commonSkillLevel, 0)
}
func DefaultCharacterExcelAddLeaderSkillLevel(builder *flatbuffers.Builder, leaderSkillLevel int32) {
	builder.PrependInt32Slot(11, leaderSkillLevel, 0)
}
func DefaultCharacterExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
