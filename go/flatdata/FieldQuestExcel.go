// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldQuestExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldQuestExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldQuestExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldQuestExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishFieldQuestExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFieldQuestExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldQuestExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldQuestExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFieldQuestExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FieldQuestExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldQuestExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldQuestExcel) FieldSeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateFieldSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FieldQuestExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *FieldQuestExcel) IsDaily() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FieldQuestExcel) MutateIsDaily(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *FieldQuestExcel) FieldDateId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateFieldDateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *FieldQuestExcel) Opendate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateOpendate(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *FieldQuestExcel) AssetPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldQuestExcel) RewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *FieldQuestExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *FieldQuestExcel) QuestNamKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateQuestNamKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *FieldQuestExcel) QuestDescKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldQuestExcel) MutateQuestDescKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func FieldQuestExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func FieldQuestExcelAddFieldSeasonId(builder *flatbuffers.Builder, fieldSeasonId int64) {
	builder.PrependInt64Slot(0, fieldSeasonId, 0)
}
func FieldQuestExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(1, uniqueId, 0)
}
func FieldQuestExcelAddIsDaily(builder *flatbuffers.Builder, isDaily bool) {
	builder.PrependBoolSlot(2, isDaily, false)
}
func FieldQuestExcelAddFieldDateId(builder *flatbuffers.Builder, fieldDateId int64) {
	builder.PrependInt64Slot(3, fieldDateId, 0)
}
func FieldQuestExcelAddOpendate(builder *flatbuffers.Builder, opendate int64) {
	builder.PrependInt64Slot(4, opendate, 0)
}
func FieldQuestExcelAddAssetPath(builder *flatbuffers.Builder, assetPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(assetPath), 0)
}
func FieldQuestExcelAddRewardId(builder *flatbuffers.Builder, rewardId int64) {
	builder.PrependInt64Slot(6, rewardId, 0)
}
func FieldQuestExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(7, prob, 0)
}
func FieldQuestExcelAddQuestNamKey(builder *flatbuffers.Builder, questNamKey uint32) {
	builder.PrependUint32Slot(8, questNamKey, 0)
}
func FieldQuestExcelAddQuestDescKey(builder *flatbuffers.Builder, questDescKey uint32) {
	builder.PrependUint32Slot(9, questDescKey, 0)
}
func FieldQuestExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
