// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TacticDamageSimulatorSettingExcelDto represents a FlatBuffers table
type TacticDamageSimulatorSettingExcelDto struct {
	fbsutils.FlatBuffer
	ApplyOverrideAdaptation   bool                  `json:"apply_override_adaptation"`
	ApplyOverrideFavorLevel   bool                  `json:"apply_override_favor_level"`
	FixedCharacter            []int64               `json:"fixed_character"`
	GroundId                  int64                 `json:"ground_id"`
	Order                     int32                 `json:"order"`
	OverrideFavorLevel        int32                 `json:"override_favor_level"`
	OverrideIndoorAdaptation  TerrainAdaptationStat `json:"override_indoor_adaptation"`
	OverrideOutdoorAdaptation TerrainAdaptationStat `json:"override_outdoor_adaptation"`
	OverrideStreetAdaptation  TerrainAdaptationStat `json:"override_street_adaptation"`
	Repeat                    int32                 `json:"repeat"`
	ReplaceCharacterCostRegen bool                  `json:"replace_character_cost_regen"`
	ReplaceCostRegenValue     int32                 `json:"replace_cost_regen_value"`
	SpecialSquard             int64                 `json:"special_squard"`
	StrikerSquard             int64                 `json:"striker_squard"`
	TestBattleTime            int64                 `json:"test_battle_time"`
	TestPreset                int64                 `json:"test_preset"`
	UseAutoSkill              bool                  `json:"use_auto_skill"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TacticDamageSimulatorSettingExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TacticDamageSimulatorSetting"))
	}
	TacticDamageSimulatorSettingExcelStart(b)
	TacticDamageSimulatorSettingExcelAddApplyOverrideAdaptation(b, t.ApplyOverrideAdaptation)
	TacticDamageSimulatorSettingExcelAddApplyOverrideFavorLevel(b, t.ApplyOverrideFavorLevel)
	TacticDamageSimulatorSettingExcelStartFixedCharacterVector(b, len(t.FixedCharacter))
	for i := range len(t.FixedCharacter) {
		b.PrependInt64(fbsutils.Convert(t.FixedCharacter[len(t.FixedCharacter)-i-1], t.FlatBuffer.TableKey))
	}
	TacticDamageSimulatorSettingExcelAddFixedCharacter(b, b.EndVector(len(t.FixedCharacter)))
	TacticDamageSimulatorSettingExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddOverrideFavorLevel(b, fbsutils.Convert(t.OverrideFavorLevel, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddOverrideIndoorAdaptation(b, fbsutils.Convert(t.OverrideIndoorAdaptation, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddOverrideOutdoorAdaptation(b, fbsutils.Convert(t.OverrideOutdoorAdaptation, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddOverrideStreetAdaptation(b, fbsutils.Convert(t.OverrideStreetAdaptation, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddRepeat(b, fbsutils.Convert(t.Repeat, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddReplaceCharacterCostRegen(b, t.ReplaceCharacterCostRegen)
	TacticDamageSimulatorSettingExcelAddReplaceCostRegenValue(b, fbsutils.Convert(t.ReplaceCostRegenValue, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddSpecialSquard(b, fbsutils.Convert(t.SpecialSquard, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddStrikerSquard(b, fbsutils.Convert(t.StrikerSquard, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddTestBattleTime(b, fbsutils.Convert(t.TestBattleTime, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddTestPreset(b, fbsutils.Convert(t.TestPreset, t.FlatBuffer.TableKey))
	TacticDamageSimulatorSettingExcelAddUseAutoSkill(b, t.UseAutoSkill)
	return TacticDamageSimulatorSettingExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TacticDamageSimulatorSettingExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TacticDamageSimulatorSettingExcelDto) UnmarshalMessage(e *TacticDamageSimulatorSettingExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TacticDamageSimulatorSetting"))
	}
	t.ApplyOverrideAdaptation = e.ApplyOverrideAdaptation()
	t.ApplyOverrideFavorLevel = e.ApplyOverrideFavorLevel()
	t.FixedCharacter = make([]int64, e.FixedCharacterLength())
	for i := range e.FixedCharacterLength() {
		t.FixedCharacter[i] = fbsutils.Convert(e.FixedCharacter(i), t.FlatBuffer.TableKey)
	}
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.OverrideFavorLevel = fbsutils.Convert(e.OverrideFavorLevel(), t.FlatBuffer.TableKey)
	t.OverrideIndoorAdaptation = TerrainAdaptationStat(fbsutils.Convert(int32(e.OverrideIndoorAdaptation()), t.FlatBuffer.TableKey))
	t.OverrideOutdoorAdaptation = TerrainAdaptationStat(fbsutils.Convert(int32(e.OverrideOutdoorAdaptation()), t.FlatBuffer.TableKey))
	t.OverrideStreetAdaptation = TerrainAdaptationStat(fbsutils.Convert(int32(e.OverrideStreetAdaptation()), t.FlatBuffer.TableKey))
	t.Repeat = fbsutils.Convert(e.Repeat(), t.FlatBuffer.TableKey)
	t.ReplaceCharacterCostRegen = e.ReplaceCharacterCostRegen()
	t.ReplaceCostRegenValue = fbsutils.Convert(e.ReplaceCostRegenValue(), t.FlatBuffer.TableKey)
	t.SpecialSquard = fbsutils.Convert(e.SpecialSquard(), t.FlatBuffer.TableKey)
	t.StrikerSquard = fbsutils.Convert(e.StrikerSquard(), t.FlatBuffer.TableKey)
	t.TestBattleTime = fbsutils.Convert(e.TestBattleTime(), t.FlatBuffer.TableKey)
	t.TestPreset = fbsutils.Convert(e.TestPreset(), t.FlatBuffer.TableKey)
	t.UseAutoSkill = e.UseAutoSkill()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TacticDamageSimulatorSettingExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTacticDamageSimulatorSettingExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TacticDamageSimulatorSettingExcelDto) FlatDataName() string {
	return "TacticDamageSimulatorSettingExcel"
}
