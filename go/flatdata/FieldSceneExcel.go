// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldSceneExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldSceneExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldSceneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldSceneExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFieldSceneExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldSceneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldSceneExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FieldSceneExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldSceneExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldSceneExcel) ConditionalBgmId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FieldSceneExcel) ConditionalBgmIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateConditionalBgmId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FieldSceneExcel) EndConditionalBgmInteractionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FieldSceneExcel) EndConditionalBgmInteractionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateEndConditionalBgmInteractionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FieldSceneExcel) EndConditionalBgmScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FieldSceneExcel) EndConditionalBgmScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateEndConditionalBgmScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FieldSceneExcel) BeginConditionalBgmInteractionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FieldSceneExcel) BeginConditionalBgmInteractionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateBeginConditionalBgmInteractionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FieldSceneExcel) BeginConditionalBgmScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FieldSceneExcel) BeginConditionalBgmScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateBeginConditionalBgmScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FieldSceneExcel) ConditionalBgmQuestId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FieldSceneExcel) ConditionalBgmQuestIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateConditionalBgmQuestId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FieldSceneExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *FieldSceneExcel) DesignLevelPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldSceneExcel) ArtLevelPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldSceneExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *FieldSceneExcel) DateId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateDateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *FieldSceneExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldSceneExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func FieldSceneExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func FieldSceneExcelAddConditionalBgmId(builder *flatbuffers.Builder, conditionalBgmId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(conditionalBgmId), 0)
}
func FieldSceneExcelStartConditionalBgmIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FieldSceneExcelAddEndConditionalBgmInteractionId(builder *flatbuffers.Builder, endConditionalBgmInteractionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(endConditionalBgmInteractionId), 0)
}
func FieldSceneExcelStartEndConditionalBgmInteractionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FieldSceneExcelAddEndConditionalBgmScenarioGroupId(builder *flatbuffers.Builder, endConditionalBgmScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(endConditionalBgmScenarioGroupId), 0)
}
func FieldSceneExcelStartEndConditionalBgmScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FieldSceneExcelAddBeginConditionalBgmInteractionId(builder *flatbuffers.Builder, beginConditionalBgmInteractionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(beginConditionalBgmInteractionId), 0)
}
func FieldSceneExcelStartBeginConditionalBgmInteractionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FieldSceneExcelAddBeginConditionalBgmScenarioGroupId(builder *flatbuffers.Builder, beginConditionalBgmScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(beginConditionalBgmScenarioGroupId), 0)
}
func FieldSceneExcelStartBeginConditionalBgmScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FieldSceneExcelAddConditionalBgmQuestId(builder *flatbuffers.Builder, conditionalBgmQuestId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(conditionalBgmQuestId), 0)
}
func FieldSceneExcelStartConditionalBgmQuestIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FieldSceneExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(6, bgmId, 0)
}
func FieldSceneExcelAddDesignLevelPath(builder *flatbuffers.Builder, designLevelPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(designLevelPath), 0)
}
func FieldSceneExcelAddArtLevelPath(builder *flatbuffers.Builder, artLevelPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(artLevelPath), 0)
}
func FieldSceneExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(9, groupId, 0)
}
func FieldSceneExcelAddDateId(builder *flatbuffers.Builder, dateId int64) {
	builder.PrependInt64Slot(10, dateId, 0)
}
func FieldSceneExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(11, uniqueId, 0)
}
func FieldSceneExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
