// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConstNewbieContentExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConstNewbieContentExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstNewbieContentExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConstNewbieContentExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConstNewbieContentExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstNewbieContentExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConstNewbieContentExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConstNewbieContentExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConstNewbieContentExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConstNewbieContentExcel) NewbieAttendanceEndDay() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstNewbieContentExcel) MutateNewbieAttendanceEndDay(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ConstNewbieContentExcel) NewbieAttendanceReleaseDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstNewbieContentExcel) NewbieAttendanceStartableEndDay() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstNewbieContentExcel) MutateNewbieAttendanceStartableEndDay(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ConstNewbieContentExcel) NewbieGachaCheckDays() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstNewbieContentExcel) MutateNewbieGachaCheckDays(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ConstNewbieContentExcel) NewbieGachaReleaseDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstNewbieContentExcel) NewbieGachaTokenGraceTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstNewbieContentExcel) MutateNewbieGachaTokenGraceTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func ConstNewbieContentExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ConstNewbieContentExcelAddNewbieAttendanceEndDay(builder *flatbuffers.Builder, newbieAttendanceEndDay int32) {
	builder.PrependInt32Slot(0, newbieAttendanceEndDay, 0)
}
func ConstNewbieContentExcelAddNewbieAttendanceReleaseDate(builder *flatbuffers.Builder, newbieAttendanceReleaseDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(newbieAttendanceReleaseDate), 0)
}
func ConstNewbieContentExcelAddNewbieAttendanceStartableEndDay(builder *flatbuffers.Builder, newbieAttendanceStartableEndDay int32) {
	builder.PrependInt32Slot(2, newbieAttendanceStartableEndDay, 0)
}
func ConstNewbieContentExcelAddNewbieGachaCheckDays(builder *flatbuffers.Builder, newbieGachaCheckDays int32) {
	builder.PrependInt32Slot(3, newbieGachaCheckDays, 0)
}
func ConstNewbieContentExcelAddNewbieGachaReleaseDate(builder *flatbuffers.Builder, newbieGachaReleaseDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(newbieGachaReleaseDate), 0)
}
func ConstNewbieContentExcelAddNewbieGachaTokenGraceTime(builder *flatbuffers.Builder, newbieGachaTokenGraceTime int32) {
	builder.PrependInt32Slot(5, newbieGachaTokenGraceTime, 0)
}
func ConstNewbieContentExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
