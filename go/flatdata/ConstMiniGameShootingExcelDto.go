// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstMiniGameShootingExcelDto represents a FlatBuffers table
type ConstMiniGameShootingExcelDto struct {
	fbsutils.FlatBuffer
	NormalStageId           int64   `json:"normal_stage_id"`
	NormalSectionCount      int32   `json:"normal_section_count"`
	HardStageId             int64   `json:"hard_stage_id"`
	HardSectionCount        int32   `json:"hard_section_count"`
	FreeStageId             int64   `json:"free_stage_id"`
	FreeSectionCount        int32   `json:"free_section_count"`
	PlayerCharacterId       []int64 `json:"player_character_id"`
	HiddenPlayerCharacterId int64   `json:"hidden_player_character_id"`
	CameraSmoothTime        float32 `json:"camera_smooth_time"`
	SpawnEffectPath         string  `json:"spawn_effect_path"`
	WaitTimeAfterSpawn      float32 `json:"wait_time_after_spawn"`
	FreeGearInterval        int32   `json:"free_gear_interval"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstMiniGameShootingExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMiniGameShooting"))
	}
	ConstMiniGameShootingExcelStart(b)
	ConstMiniGameShootingExcelAddNormalStageId(b, fbsutils.Convert(t.NormalStageId, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddNormalSectionCount(b, fbsutils.Convert(t.NormalSectionCount, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddHardStageId(b, fbsutils.Convert(t.HardStageId, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddHardSectionCount(b, fbsutils.Convert(t.HardSectionCount, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddFreeStageId(b, fbsutils.Convert(t.FreeStageId, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddFreeSectionCount(b, fbsutils.Convert(t.FreeSectionCount, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelStartPlayerCharacterIdVector(b, len(t.PlayerCharacterId))
	for i := range len(t.PlayerCharacterId) {
		b.PrependInt64(fbsutils.Convert(t.PlayerCharacterId[len(t.PlayerCharacterId)-i-1], t.FlatBuffer.TableKey))
	}
	ConstMiniGameShootingExcelAddPlayerCharacterId(b, b.EndVector(len(t.PlayerCharacterId)))
	ConstMiniGameShootingExcelAddHiddenPlayerCharacterId(b, fbsutils.Convert(t.HiddenPlayerCharacterId, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddCameraSmoothTime(b, fbsutils.Convert(t.CameraSmoothTime, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddSpawnEffectPath(b, b.CreateString(fbsutils.Convert(t.SpawnEffectPath, t.FlatBuffer.TableKey)))
	ConstMiniGameShootingExcelAddWaitTimeAfterSpawn(b, fbsutils.Convert(t.WaitTimeAfterSpawn, t.FlatBuffer.TableKey))
	ConstMiniGameShootingExcelAddFreeGearInterval(b, fbsutils.Convert(t.FreeGearInterval, t.FlatBuffer.TableKey))
	return ConstMiniGameShootingExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstMiniGameShootingExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishConstMiniGameShootingExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstMiniGameShootingExcelDto) UnmarshalMessage(e *ConstMiniGameShootingExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMiniGameShooting"))
	}
	t.NormalStageId = fbsutils.Convert(e.NormalStageId(), t.FlatBuffer.TableKey)
	t.NormalSectionCount = fbsutils.Convert(e.NormalSectionCount(), t.FlatBuffer.TableKey)
	t.HardStageId = fbsutils.Convert(e.HardStageId(), t.FlatBuffer.TableKey)
	t.HardSectionCount = fbsutils.Convert(e.HardSectionCount(), t.FlatBuffer.TableKey)
	t.FreeStageId = fbsutils.Convert(e.FreeStageId(), t.FlatBuffer.TableKey)
	t.FreeSectionCount = fbsutils.Convert(e.FreeSectionCount(), t.FlatBuffer.TableKey)
	t.PlayerCharacterId = make([]int64, e.PlayerCharacterIdLength())
	for i := range e.PlayerCharacterIdLength() {
		t.PlayerCharacterId[i] = fbsutils.Convert(e.PlayerCharacterId(i), t.FlatBuffer.TableKey)
	}
	t.HiddenPlayerCharacterId = fbsutils.Convert(e.HiddenPlayerCharacterId(), t.FlatBuffer.TableKey)
	t.CameraSmoothTime = fbsutils.Convert(e.CameraSmoothTime(), t.FlatBuffer.TableKey)
	t.SpawnEffectPath = fbsutils.Convert(string(e.SpawnEffectPath()), t.FlatBuffer.TableKey)
	t.WaitTimeAfterSpawn = fbsutils.Convert(e.WaitTimeAfterSpawn(), t.FlatBuffer.TableKey)
	t.FreeGearInterval = fbsutils.Convert(e.FreeGearInterval(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstMiniGameShootingExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstMiniGameShootingExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstMiniGameShootingExcelDto) FlatDataName() string {
	return "ConstMiniGameShootingExcel"
}
