// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WeekDungeonFindGiftRewardExcelDto represents a FlatBuffers table
type WeekDungeonFindGiftRewardExcelDto struct {
	fbsutils.FlatBuffer
	StageRewardId           int64        `json:"stage_reward_id"`
	DevName                 string       `json:"dev_name"`
	RewardParcelType        []ParcelType `json:"reward_parcel_type"`
	RewardParcelId          []int64      `json:"reward_parcel_id"`
	RewardParcelAmount      []int64      `json:"reward_parcel_amount"`
	RewardParcelProbability []int64      `json:"reward_parcel_probability"`
	DropItemModelPrefabPath []string     `json:"drop_item_model_prefab_path"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WeekDungeonFindGiftRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WeekDungeonFindGiftReward"))
	}
	__offset_dev_name := b.CreateString(fbsutils.Convert(t.DevName, t.FlatBuffer.TableKey))
	var __offset_drop_item_model_prefab_path flatbuffers.UOffsetT
	__stringOffsets_drop_item_model_prefab_path := make([]flatbuffers.UOffsetT, len(t.DropItemModelPrefabPath))
	for i := range len(t.DropItemModelPrefabPath) {
		__stringOffsets_drop_item_model_prefab_path[i] = b.CreateString(fbsutils.Convert(t.DropItemModelPrefabPath[i], t.FlatBuffer.TableKey))
	}
	WeekDungeonFindGiftRewardExcelStartDropItemModelPrefabPathVector(b, len(t.DropItemModelPrefabPath))
	for i := range len(t.DropItemModelPrefabPath) {
		b.PrependUOffsetT(__stringOffsets_drop_item_model_prefab_path[len(t.DropItemModelPrefabPath)-i-1])
	}
	__offset_drop_item_model_prefab_path = b.EndVector(len(t.DropItemModelPrefabPath))
	WeekDungeonFindGiftRewardExcelStart(b)
	WeekDungeonFindGiftRewardExcelAddStageRewardId(b, fbsutils.Convert(t.StageRewardId, t.FlatBuffer.TableKey))
	WeekDungeonFindGiftRewardExcelAddDevName(b, __offset_dev_name)
	WeekDungeonFindGiftRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	WeekDungeonFindGiftRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	WeekDungeonFindGiftRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	WeekDungeonFindGiftRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	WeekDungeonFindGiftRewardExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	WeekDungeonFindGiftRewardExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	WeekDungeonFindGiftRewardExcelStartRewardParcelProbabilityVector(b, len(t.RewardParcelProbability))
	for i := range len(t.RewardParcelProbability) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelProbability[len(t.RewardParcelProbability)-i-1], t.FlatBuffer.TableKey))
	}
	WeekDungeonFindGiftRewardExcelAddRewardParcelProbability(b, b.EndVector(len(t.RewardParcelProbability)))
	WeekDungeonFindGiftRewardExcelAddDropItemModelPrefabPath(b, __offset_drop_item_model_prefab_path)
	return WeekDungeonFindGiftRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WeekDungeonFindGiftRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WeekDungeonFindGiftRewardExcelDto) UnmarshalMessage(e *WeekDungeonFindGiftRewardExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WeekDungeonFindGiftReward"))
	}
	t.StageRewardId = fbsutils.Convert(e.StageRewardId(), t.FlatBuffer.TableKey)
	t.DevName = fbsutils.Convert(string(e.DevName()), t.FlatBuffer.TableKey)
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelProbability = make([]int64, e.RewardParcelProbabilityLength())
	for i := range e.RewardParcelProbabilityLength() {
		t.RewardParcelProbability[i] = fbsutils.Convert(e.RewardParcelProbability(i), t.FlatBuffer.TableKey)
	}
	t.DropItemModelPrefabPath = make([]string, e.DropItemModelPrefabPathLength())
	for i := range e.DropItemModelPrefabPathLength() {
		t.DropItemModelPrefabPath[i] = fbsutils.Convert(string(e.DropItemModelPrefabPath(i)), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WeekDungeonFindGiftRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsWeekDungeonFindGiftRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WeekDungeonFindGiftRewardExcelDto) FlatDataName() string {
	return "WeekDungeonFindGiftRewardExcel"
}
