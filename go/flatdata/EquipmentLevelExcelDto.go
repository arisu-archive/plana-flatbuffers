// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EquipmentLevelExcelDto represents a FlatBuffers table
type EquipmentLevelExcelDto struct {
	fbsutils.FlatBuffer
	Level        int32   `json:"level"`
	TierLevelExp []int64 `json:"tier_level_exp"`
	TotalExp     []int64 `json:"total_exp"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EquipmentLevelExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EquipmentLevel"))
	}
	EquipmentLevelExcelStart(b)
	EquipmentLevelExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	EquipmentLevelExcelStartTierLevelExpVector(b, len(t.TierLevelExp))
	for i := range len(t.TierLevelExp) {
		b.PrependInt64(fbsutils.Convert(t.TierLevelExp[len(t.TierLevelExp)-i-1], t.FlatBuffer.TableKey))
	}
	EquipmentLevelExcelAddTierLevelExp(b, b.EndVector(len(t.TierLevelExp)))
	EquipmentLevelExcelStartTotalExpVector(b, len(t.TotalExp))
	for i := range len(t.TotalExp) {
		b.PrependInt64(fbsutils.Convert(t.TotalExp[len(t.TotalExp)-i-1], t.FlatBuffer.TableKey))
	}
	EquipmentLevelExcelAddTotalExp(b, b.EndVector(len(t.TotalExp)))
	return EquipmentLevelExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EquipmentLevelExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EquipmentLevelExcelDto) UnmarshalMessage(e *EquipmentLevelExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EquipmentLevel"))
	}
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.TierLevelExp = make([]int64, e.TierLevelExpLength())
	for i := range e.TierLevelExpLength() {
		t.TierLevelExp[i] = fbsutils.Convert(e.TierLevelExp(i), t.FlatBuffer.TableKey)
	}
	t.TotalExp = make([]int64, e.TotalExpLength())
	for i := range e.TotalExpLength() {
		t.TotalExp[i] = fbsutils.Convert(e.TotalExp(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EquipmentLevelExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEquipmentLevelExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EquipmentLevelExcelDto) FlatDataName() string {
	return "EquipmentLevelExcel"
}
