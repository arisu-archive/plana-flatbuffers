// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClearDeckRuleExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsClearDeckRuleExcel(buf []byte, offset flatbuffers.UOffsetT) *ClearDeckRuleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClearDeckRuleExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsClearDeckRuleExcel(buf []byte, offset flatbuffers.UOffsetT) *ClearDeckRuleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ClearDeckRuleExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ClearDeckRuleExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClearDeckRuleExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ClearDeckRuleExcel) SizeLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClearDeckRuleExcel) MutateSizeLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ClearDeckRuleExcel) ContentType() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ClearDeckRuleExcel) MutateContentType(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func ClearDeckRuleExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ClearDeckRuleExcelAddSizeLimit(builder *flatbuffers.Builder, sizeLimit int64) {
	builder.PrependInt64Slot(0, sizeLimit, 0)
}
func ClearDeckRuleExcelAddContentType(builder *flatbuffers.Builder, contentType ContentType) {
	builder.PrependInt32Slot(1, int32(contentType), 0)
}
func ClearDeckRuleExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
