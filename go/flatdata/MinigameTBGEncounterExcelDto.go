// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGEncounterExcelDto represents a FlatBuffers table
type MinigameTBGEncounterExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId             int64         `json:"event_content_id"`
	UniqueId                   int64         `json:"unique_id"`
	AllThema                   bool          `json:"all_thema"`
	ThemaIndex                 int32         `json:"thema_index"`
	ThemaType                  TBGThemaType  `json:"thema_type"`
	ObjectType                 TBGObjectType `json:"object_type"`
	EnemyImagePath             string        `json:"enemy_image_path"`
	EnemyPrefabName            string        `json:"enemy_prefab_name"`
	EnemyNameLocalize          string        `json:"enemy_name_localize"`
	OptionGroupId              int64         `json:"option_group_id"`
	RewardHide                 bool          `json:"reward_hide"`
	EncounterTitleLocalize     string        `json:"encounter_title_localize"`
	StoryImagePath             string        `json:"story_image_path"`
	BeforeStoryLocalize        string        `json:"before_story_localize"`
	BeforeStoryOption1Localize string        `json:"before_story_option1_localize"`
	BeforeStoryOption2Localize string        `json:"before_story_option2_localize"`
	BeforeStoryOption3Localize string        `json:"before_story_option3_localize"`
	AllyAttackLocalize         string        `json:"ally_attack_localize"`
	EnemyAttackLocalize        string        `json:"enemy_attack_localize"`
	AttackDefenceLocalize      string        `json:"attack_defence_localize"`
	ClearStoryLocalize         string        `json:"clear_story_localize"`
	DefeatStoryLocalize        string        `json:"defeat_story_localize"`
	RunawayStoryLocalize       string        `json:"runaway_story_localize"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGEncounterExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MinigameTBGEncounter"))
	}
	__offset_enemy_image_path := b.CreateString(fbsutils.Convert(t.EnemyImagePath, t.FlatBuffer.TableKey))
	__offset_enemy_prefab_name := b.CreateString(fbsutils.Convert(t.EnemyPrefabName, t.FlatBuffer.TableKey))
	__offset_enemy_name_localize := b.CreateString(fbsutils.Convert(t.EnemyNameLocalize, t.FlatBuffer.TableKey))
	__offset_encounter_title_localize := b.CreateString(fbsutils.Convert(t.EncounterTitleLocalize, t.FlatBuffer.TableKey))
	__offset_story_image_path := b.CreateString(fbsutils.Convert(t.StoryImagePath, t.FlatBuffer.TableKey))
	__offset_before_story_localize := b.CreateString(fbsutils.Convert(t.BeforeStoryLocalize, t.FlatBuffer.TableKey))
	__offset_before_story_option1_localize := b.CreateString(fbsutils.Convert(t.BeforeStoryOption1Localize, t.FlatBuffer.TableKey))
	__offset_before_story_option2_localize := b.CreateString(fbsutils.Convert(t.BeforeStoryOption2Localize, t.FlatBuffer.TableKey))
	__offset_before_story_option3_localize := b.CreateString(fbsutils.Convert(t.BeforeStoryOption3Localize, t.FlatBuffer.TableKey))
	__offset_ally_attack_localize := b.CreateString(fbsutils.Convert(t.AllyAttackLocalize, t.FlatBuffer.TableKey))
	__offset_enemy_attack_localize := b.CreateString(fbsutils.Convert(t.EnemyAttackLocalize, t.FlatBuffer.TableKey))
	__offset_attack_defence_localize := b.CreateString(fbsutils.Convert(t.AttackDefenceLocalize, t.FlatBuffer.TableKey))
	__offset_clear_story_localize := b.CreateString(fbsutils.Convert(t.ClearStoryLocalize, t.FlatBuffer.TableKey))
	__offset_defeat_story_localize := b.CreateString(fbsutils.Convert(t.DefeatStoryLocalize, t.FlatBuffer.TableKey))
	__offset_runaway_story_localize := b.CreateString(fbsutils.Convert(t.RunawayStoryLocalize, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelStart(b)
	MinigameTBGEncounterExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelAddAllThema(b, t.AllThema)
	MinigameTBGEncounterExcelAddThemaIndex(b, fbsutils.Convert(t.ThemaIndex, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelAddThemaType(b, fbsutils.Convert(t.ThemaType, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelAddObjectType(b, fbsutils.Convert(t.ObjectType, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelAddEnemyImagePath(b, __offset_enemy_image_path)
	MinigameTBGEncounterExcelAddEnemyPrefabName(b, __offset_enemy_prefab_name)
	MinigameTBGEncounterExcelAddEnemyNameLocalize(b, __offset_enemy_name_localize)
	MinigameTBGEncounterExcelAddOptionGroupId(b, fbsutils.Convert(t.OptionGroupId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterExcelAddRewardHide(b, t.RewardHide)
	MinigameTBGEncounterExcelAddEncounterTitleLocalize(b, __offset_encounter_title_localize)
	MinigameTBGEncounterExcelAddStoryImagePath(b, __offset_story_image_path)
	MinigameTBGEncounterExcelAddBeforeStoryLocalize(b, __offset_before_story_localize)
	MinigameTBGEncounterExcelAddBeforeStoryOption1Localize(b, __offset_before_story_option1_localize)
	MinigameTBGEncounterExcelAddBeforeStoryOption2Localize(b, __offset_before_story_option2_localize)
	MinigameTBGEncounterExcelAddBeforeStoryOption3Localize(b, __offset_before_story_option3_localize)
	MinigameTBGEncounterExcelAddAllyAttackLocalize(b, __offset_ally_attack_localize)
	MinigameTBGEncounterExcelAddEnemyAttackLocalize(b, __offset_enemy_attack_localize)
	MinigameTBGEncounterExcelAddAttackDefenceLocalize(b, __offset_attack_defence_localize)
	MinigameTBGEncounterExcelAddClearStoryLocalize(b, __offset_clear_story_localize)
	MinigameTBGEncounterExcelAddDefeatStoryLocalize(b, __offset_defeat_story_localize)
	MinigameTBGEncounterExcelAddRunawayStoryLocalize(b, __offset_runaway_story_localize)
	return MinigameTBGEncounterExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGEncounterExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGEncounterExcelDto) UnmarshalMessage(e *MinigameTBGEncounterExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MinigameTBGEncounter"))
	}
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.AllThema = e.AllThema()
	t.ThemaIndex = fbsutils.Convert(e.ThemaIndex(), t.FlatBuffer.TableKey)
	t.ThemaType = TBGThemaType(fbsutils.Convert(int32(e.ThemaType()), t.FlatBuffer.TableKey))
	t.ObjectType = TBGObjectType(fbsutils.Convert(int32(e.ObjectType()), t.FlatBuffer.TableKey))
	t.EnemyImagePath = fbsutils.Convert(string(e.EnemyImagePath()), t.FlatBuffer.TableKey)
	t.EnemyPrefabName = fbsutils.Convert(string(e.EnemyPrefabName()), t.FlatBuffer.TableKey)
	t.EnemyNameLocalize = fbsutils.Convert(string(e.EnemyNameLocalize()), t.FlatBuffer.TableKey)
	t.OptionGroupId = fbsutils.Convert(e.OptionGroupId(), t.FlatBuffer.TableKey)
	t.RewardHide = e.RewardHide()
	t.EncounterTitleLocalize = fbsutils.Convert(string(e.EncounterTitleLocalize()), t.FlatBuffer.TableKey)
	t.StoryImagePath = fbsutils.Convert(string(e.StoryImagePath()), t.FlatBuffer.TableKey)
	t.BeforeStoryLocalize = fbsutils.Convert(string(e.BeforeStoryLocalize()), t.FlatBuffer.TableKey)
	t.BeforeStoryOption1Localize = fbsutils.Convert(string(e.BeforeStoryOption1Localize()), t.FlatBuffer.TableKey)
	t.BeforeStoryOption2Localize = fbsutils.Convert(string(e.BeforeStoryOption2Localize()), t.FlatBuffer.TableKey)
	t.BeforeStoryOption3Localize = fbsutils.Convert(string(e.BeforeStoryOption3Localize()), t.FlatBuffer.TableKey)
	t.AllyAttackLocalize = fbsutils.Convert(string(e.AllyAttackLocalize()), t.FlatBuffer.TableKey)
	t.EnemyAttackLocalize = fbsutils.Convert(string(e.EnemyAttackLocalize()), t.FlatBuffer.TableKey)
	t.AttackDefenceLocalize = fbsutils.Convert(string(e.AttackDefenceLocalize()), t.FlatBuffer.TableKey)
	t.ClearStoryLocalize = fbsutils.Convert(string(e.ClearStoryLocalize()), t.FlatBuffer.TableKey)
	t.DefeatStoryLocalize = fbsutils.Convert(string(e.DefeatStoryLocalize()), t.FlatBuffer.TableKey)
	t.RunawayStoryLocalize = fbsutils.Convert(string(e.RunawayStoryLocalize()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGEncounterExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGEncounterExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGEncounterExcelDto) FlatDataName() string {
	return "MinigameTBGEncounterExcel"
}
