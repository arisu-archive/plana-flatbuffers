// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AniEventDataDto represents a FlatBuffers table
type AniEventDataDto struct {
	fbsutils.FlatBuffer
	Name        string  `json:"name"`
	Time        float32 `json:"time"`
	IntParam    int32   `json:"int_param"`
	FloatParam  float32 `json:"float_param"`
	StringParam string  `json:"string_param"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AniEventDataDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("AniEventData"))
	}
	AniEventDataStart(b)
	AniEventDataAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	AniEventDataAddTime(b, fbsutils.Convert(t.Time, t.FlatBuffer.TableKey))
	AniEventDataAddIntParam(b, fbsutils.Convert(t.IntParam, t.FlatBuffer.TableKey))
	AniEventDataAddFloatParam(b, fbsutils.Convert(t.FloatParam, t.FlatBuffer.TableKey))
	AniEventDataAddStringParam(b, b.CreateString(fbsutils.Convert(t.StringParam, t.FlatBuffer.TableKey)))
	return AniEventDataEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AniEventDataDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AniEventDataDto) UnmarshalMessage(e *AniEventData) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("AniEventData"))
	}
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Time = fbsutils.Convert(e.Time(), t.FlatBuffer.TableKey)
	t.IntParam = fbsutils.Convert(e.IntParam(), t.FlatBuffer.TableKey)
	t.FloatParam = fbsutils.Convert(e.FloatParam(), t.FlatBuffer.TableKey)
	t.StringParam = fbsutils.Convert(string(e.StringParam()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AniEventDataDto) Unmarshal(data []byte) error {
	root := GetRootAsAniEventData(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AniEventDataDto) FlatDataName() string {
	return "AniEventData"
}
