// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldQuestExcelDto represents a FlatBuffers table
type FieldQuestExcelDto struct {
	fbsutils.FlatBuffer
	FieldSeasonId int64  `json:"field_season_id"`
	UniqueId      int64  `json:"unique_id"`
	IsDaily       bool   `json:"is_daily"`
	FieldDateId   int64  `json:"field_date_id"`
	Opendate      int64  `json:"opendate"`
	AssetPath     string `json:"asset_path"`
	RewardId      int64  `json:"reward_id"`
	Prob          int32  `json:"prob"`
	QuestNamKey   uint32 `json:"quest_nam_key"`
	QuestDescKey  uint32 `json:"quest_desc_key"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldQuestExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldQuest"))
	}
	FieldQuestExcelStart(b)
	FieldQuestExcelAddFieldSeasonId(b, fbsutils.Convert(t.FieldSeasonId, t.FlatBuffer.TableKey))
	FieldQuestExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	FieldQuestExcelAddIsDaily(b, t.IsDaily)
	FieldQuestExcelAddFieldDateId(b, fbsutils.Convert(t.FieldDateId, t.FlatBuffer.TableKey))
	FieldQuestExcelAddOpendate(b, fbsutils.Convert(t.Opendate, t.FlatBuffer.TableKey))
	FieldQuestExcelAddAssetPath(b, b.CreateString(fbsutils.Convert(t.AssetPath, t.FlatBuffer.TableKey)))
	FieldQuestExcelAddRewardId(b, fbsutils.Convert(t.RewardId, t.FlatBuffer.TableKey))
	FieldQuestExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	FieldQuestExcelAddQuestNamKey(b, fbsutils.Convert(t.QuestNamKey, t.FlatBuffer.TableKey))
	FieldQuestExcelAddQuestDescKey(b, fbsutils.Convert(t.QuestDescKey, t.FlatBuffer.TableKey))
	return FieldQuestExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldQuestExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldQuestExcelDto) UnmarshalMessage(e *FieldQuestExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldQuest"))
	}
	t.FieldSeasonId = fbsutils.Convert(e.FieldSeasonId(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.IsDaily = e.IsDaily()
	t.FieldDateId = fbsutils.Convert(e.FieldDateId(), t.FlatBuffer.TableKey)
	t.Opendate = fbsutils.Convert(e.Opendate(), t.FlatBuffer.TableKey)
	t.AssetPath = fbsutils.Convert(string(e.AssetPath()), t.FlatBuffer.TableKey)
	t.RewardId = fbsutils.Convert(e.RewardId(), t.FlatBuffer.TableKey)
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	t.QuestNamKey = fbsutils.Convert(e.QuestNamKey(), t.FlatBuffer.TableKey)
	t.QuestDescKey = fbsutils.Convert(e.QuestDescKey(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldQuestExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldQuestExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldQuestExcelDto) FlatDataName() string {
	return "FieldQuestExcel"
}
