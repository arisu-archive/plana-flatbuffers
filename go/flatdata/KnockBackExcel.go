// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KnockBackExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsKnockBackExcel(buf []byte, offset flatbuffers.UOffsetT) *KnockBackExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KnockBackExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKnockBackExcel(buf []byte, offset flatbuffers.UOffsetT) *KnockBackExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KnockBackExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KnockBackExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KnockBackExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KnockBackExcel) Speed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *KnockBackExcel) MutateSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *KnockBackExcel) Dist() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *KnockBackExcel) MutateDist(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *KnockBackExcel) Index() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KnockBackExcel) MutateIndex(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func KnockBackExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KnockBackExcelAddSpeed(builder *flatbuffers.Builder, speed float32) {
	builder.PrependFloat32Slot(0, speed, 0.0)
}
func KnockBackExcelAddDist(builder *flatbuffers.Builder, dist float32) {
	builder.PrependFloat32Slot(1, dist, 0.0)
}
func KnockBackExcelAddIndex(builder *flatbuffers.Builder, index int64) {
	builder.PrependInt64Slot(2, index, 0)
}
func KnockBackExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
