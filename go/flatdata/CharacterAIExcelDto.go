// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterAIExcelDto represents a FlatBuffers table
type CharacterAIExcelDto struct {
	fbsutils.FlatBuffer
	Id                               int64           `json:"id"`
	EngageType                       EngageType      `json:"engage_type"`
	Positioning                      PositioningType `json:"positioning"`
	CheckCanUseAutoSkill             bool            `json:"check_can_use_auto_skill"`
	DistanceReduceRatioObstaclePath  int64           `json:"distance_reduce_ratio_obstacle_path"`
	DistanceReduceObstaclePath       int64           `json:"distance_reduce_obstacle_path"`
	DistanceReduceRatioFormationPath int64           `json:"distance_reduce_ratio_formation_path"`
	DistanceReduceFormationPath      int64           `json:"distance_reduce_formation_path"`
	MinimumPositionGap               int64           `json:"minimum_position_gap"`
	CanUseObstacleOfKneelMotion      bool            `json:"can_use_obstacle_of_kneel_motion"`
	CanUseObstacleOfStandMotion      bool            `json:"can_use_obstacle_of_stand_motion"`
	HasTargetSwitchingMotion         bool            `json:"has_target_switching_motion"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterAIExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterAI"))
	}
	CharacterAIExcelStart(b)
	CharacterAIExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterAIExcelAddEngageType(b, fbsutils.Convert(t.EngageType, t.FlatBuffer.TableKey))
	CharacterAIExcelAddPositioning(b, fbsutils.Convert(t.Positioning, t.FlatBuffer.TableKey))
	CharacterAIExcelAddCheckCanUseAutoSkill(b, t.CheckCanUseAutoSkill)
	CharacterAIExcelAddDistanceReduceRatioObstaclePath(b, fbsutils.Convert(t.DistanceReduceRatioObstaclePath, t.FlatBuffer.TableKey))
	CharacterAIExcelAddDistanceReduceObstaclePath(b, fbsutils.Convert(t.DistanceReduceObstaclePath, t.FlatBuffer.TableKey))
	CharacterAIExcelAddDistanceReduceRatioFormationPath(b, fbsutils.Convert(t.DistanceReduceRatioFormationPath, t.FlatBuffer.TableKey))
	CharacterAIExcelAddDistanceReduceFormationPath(b, fbsutils.Convert(t.DistanceReduceFormationPath, t.FlatBuffer.TableKey))
	CharacterAIExcelAddMinimumPositionGap(b, fbsutils.Convert(t.MinimumPositionGap, t.FlatBuffer.TableKey))
	CharacterAIExcelAddCanUseObstacleOfKneelMotion(b, t.CanUseObstacleOfKneelMotion)
	CharacterAIExcelAddCanUseObstacleOfStandMotion(b, t.CanUseObstacleOfStandMotion)
	CharacterAIExcelAddHasTargetSwitchingMotion(b, t.HasTargetSwitchingMotion)
	return CharacterAIExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterAIExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterAIExcelDto) UnmarshalMessage(e *CharacterAIExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterAI"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.EngageType = EngageType(fbsutils.Convert(int32(e.EngageType()), t.FlatBuffer.TableKey))
	t.Positioning = PositioningType(fbsutils.Convert(int32(e.Positioning()), t.FlatBuffer.TableKey))
	t.CheckCanUseAutoSkill = e.CheckCanUseAutoSkill()
	t.DistanceReduceRatioObstaclePath = fbsutils.Convert(e.DistanceReduceRatioObstaclePath(), t.FlatBuffer.TableKey)
	t.DistanceReduceObstaclePath = fbsutils.Convert(e.DistanceReduceObstaclePath(), t.FlatBuffer.TableKey)
	t.DistanceReduceRatioFormationPath = fbsutils.Convert(e.DistanceReduceRatioFormationPath(), t.FlatBuffer.TableKey)
	t.DistanceReduceFormationPath = fbsutils.Convert(e.DistanceReduceFormationPath(), t.FlatBuffer.TableKey)
	t.MinimumPositionGap = fbsutils.Convert(e.MinimumPositionGap(), t.FlatBuffer.TableKey)
	t.CanUseObstacleOfKneelMotion = e.CanUseObstacleOfKneelMotion()
	t.CanUseObstacleOfStandMotion = e.CanUseObstacleOfStandMotion()
	t.HasTargetSwitchingMotion = e.HasTargetSwitchingMotion()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterAIExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterAIExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterAIExcelDto) FlatDataName() string {
	return "CharacterAIExcel"
}
