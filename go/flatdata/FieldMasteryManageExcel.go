// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldMasteryManageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldMasteryManageExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldMasteryManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldMasteryManageExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishFieldMasteryManageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFieldMasteryManageExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldMasteryManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldMasteryManageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFieldMasteryManageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FieldMasteryManageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldMasteryManageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldMasteryManageExcel) FieldSeason() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldMasteryManageExcel) MutateFieldSeason(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FieldMasteryManageExcel) LocalizeEtc() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldMasteryManageExcel) MutateLocalizeEtc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *FieldMasteryManageExcel) ImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldMasteryManageExcel) LevelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldMasteryManageExcel) MutateLevelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func FieldMasteryManageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FieldMasteryManageExcelAddFieldSeason(builder *flatbuffers.Builder, fieldSeason int64) {
	builder.PrependInt64Slot(0, fieldSeason, 0)
}
func FieldMasteryManageExcelAddLocalizeEtc(builder *flatbuffers.Builder, localizeEtc uint32) {
	builder.PrependUint32Slot(1, localizeEtc, 0)
}
func FieldMasteryManageExcelAddImagePath(builder *flatbuffers.Builder, imagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(imagePath), 0)
}
func FieldMasteryManageExcelAddLevelId(builder *flatbuffers.Builder, levelId int64) {
	builder.PrependInt64Slot(3, levelId, 0)
}
func FieldMasteryManageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
