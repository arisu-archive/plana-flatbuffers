// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BossPhaseExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBossPhaseExcel(buf []byte, offset flatbuffers.UOffsetT) *BossPhaseExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BossPhaseExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBossPhaseExcel(buf []byte, offset flatbuffers.UOffsetT) *BossPhaseExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BossPhaseExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BossPhaseExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BossPhaseExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BossPhaseExcel) UseExSkill(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *BossPhaseExcel) UseExSkillLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BossPhaseExcel) MutateUseExSkill(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *BossPhaseExcel) NormalAttackSkillUniqueName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BossPhaseExcel) AiPhase() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossPhaseExcel) MutateAiPhase(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *BossPhaseExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossPhaseExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func BossPhaseExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BossPhaseExcelAddUseExSkill(builder *flatbuffers.Builder, useExSkill flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(useExSkill), 0)
}
func BossPhaseExcelStartUseExSkillVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BossPhaseExcelAddNormalAttackSkillUniqueName(builder *flatbuffers.Builder, normalAttackSkillUniqueName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(normalAttackSkillUniqueName), 0)
}
func BossPhaseExcelAddAiPhase(builder *flatbuffers.Builder, aiPhase int64) {
	builder.PrependInt64Slot(2, aiPhase, 0)
}
func BossPhaseExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(3, id, 0)
}
func BossPhaseExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
