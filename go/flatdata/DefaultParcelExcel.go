// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DefaultParcelExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsDefaultParcelExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultParcelExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DefaultParcelExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishDefaultParcelExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDefaultParcelExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultParcelExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DefaultParcelExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDefaultParcelExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DefaultParcelExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DefaultParcelExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DefaultParcelExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DefaultParcelExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *DefaultParcelExcel) ParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultParcelExcel) MutateParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *DefaultParcelExcel) ParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultParcelExcel) MutateParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func DefaultParcelExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DefaultParcelExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(0, int32(parcelType), 0)
}
func DefaultParcelExcelAddParcelId(builder *flatbuffers.Builder, parcelId int64) {
	builder.PrependInt64Slot(1, parcelId, 0)
}
func DefaultParcelExcelAddParcelAmount(builder *flatbuffers.Builder, parcelAmount int64) {
	builder.PrependInt64Slot(2, parcelAmount, 0)
}
func DefaultParcelExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
