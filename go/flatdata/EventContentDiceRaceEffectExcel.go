// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentDiceRaceEffectExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentDiceRaceEffectExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDiceRaceEffectExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentDiceRaceEffectExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentDiceRaceEffectExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDiceRaceEffectExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentDiceRaceEffectExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentDiceRaceEffectExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentDiceRaceEffectExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentDiceRaceEffectExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceEffectExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentDiceRaceEffectExcel) EventContentDiceRaceResultType() EventContentDiceRaceResultType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EventContentDiceRaceResultType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentDiceRaceEffectExcel) MutateEventContentDiceRaceResultType(n EventContentDiceRaceResultType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentDiceRaceEffectExcel) IsDiceResult() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentDiceRaceEffectExcel) MutateIsDiceResult(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *EventContentDiceRaceEffectExcel) AniClip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentDiceRaceEffectExcel) VoiceId(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentDiceRaceEffectExcel) VoiceIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentDiceRaceEffectExcel) MutateVoiceId(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func EventContentDiceRaceEffectExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EventContentDiceRaceEffectExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentDiceRaceEffectExcelAddEventContentDiceRaceResultType(builder *flatbuffers.Builder, eventContentDiceRaceResultType EventContentDiceRaceResultType) {
	builder.PrependInt32Slot(1, int32(eventContentDiceRaceResultType), 0)
}
func EventContentDiceRaceEffectExcelAddIsDiceResult(builder *flatbuffers.Builder, isDiceResult bool) {
	builder.PrependBoolSlot(2, isDiceResult, false)
}
func EventContentDiceRaceEffectExcelAddAniClip(builder *flatbuffers.Builder, aniClip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(aniClip), 0)
}
func EventContentDiceRaceEffectExcelAddVoiceId(builder *flatbuffers.Builder, voiceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(voiceId), 0)
}
func EventContentDiceRaceEffectExcelStartVoiceIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentDiceRaceEffectExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
