// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecipeSelectionAutoUseExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsRecipeSelectionAutoUseExcel(buf []byte, offset flatbuffers.UOffsetT) *RecipeSelectionAutoUseExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecipeSelectionAutoUseExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishRecipeSelectionAutoUseExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRecipeSelectionAutoUseExcel(buf []byte, offset flatbuffers.UOffsetT) *RecipeSelectionAutoUseExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RecipeSelectionAutoUseExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRecipeSelectionAutoUseExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RecipeSelectionAutoUseExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecipeSelectionAutoUseExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecipeSelectionAutoUseExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionAutoUseExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RecipeSelectionAutoUseExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RecipeSelectionAutoUseExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *RecipeSelectionAutoUseExcel) TargetItemId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionAutoUseExcel) MutateTargetItemId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *RecipeSelectionAutoUseExcel) Priority(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *RecipeSelectionAutoUseExcel) PriorityLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RecipeSelectionAutoUseExcel) MutatePriority(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func RecipeSelectionAutoUseExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RecipeSelectionAutoUseExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func RecipeSelectionAutoUseExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(1, int32(parcelType), 0)
}
func RecipeSelectionAutoUseExcelAddTargetItemId(builder *flatbuffers.Builder, targetItemId int64) {
	builder.PrependInt64Slot(2, targetItemId, 0)
}
func RecipeSelectionAutoUseExcelAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(priority), 0)
}
func RecipeSelectionAutoUseExcelStartPriorityVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func RecipeSelectionAutoUseExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
