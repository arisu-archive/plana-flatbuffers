// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldContentStageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldContentStageExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldContentStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldContentStageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFieldContentStageExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldContentStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldContentStageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FieldContentStageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldContentStageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldContentStageExcel) StarGoalAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FieldContentStageExcel) StarGoalAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStarGoalAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FieldContentStageExcel) StarGoal(j int) StarGoalType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StarGoalType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *FieldContentStageExcel) StarGoalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStarGoal(j int, n StarGoalType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *FieldContentStageExcel) DailyLastPlay() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FieldContentStageExcel) MutateDailyLastPlay(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *FieldContentStageExcel) SkipFormationSettings() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FieldContentStageExcel) MutateSkipFormationSettings(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *FieldContentStageExcel) FixedEchelonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateFixedEchelonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *FieldContentStageExcel) InstantClear() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FieldContentStageExcel) MutateInstantClear(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *FieldContentStageExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *FieldContentStageExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *FieldContentStageExcel) RecommandLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateRecommandLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *FieldContentStageExcel) StageTopography() StageTopography {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return StageTopography(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStageTopography(n StageTopography) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *FieldContentStageExcel) StageEnterCostAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStageEnterCostAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *FieldContentStageExcel) StageEnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStageEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *FieldContentStageExcel) StageEnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStageEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *FieldContentStageExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *FieldContentStageExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldContentStageExcel) PrevStageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutatePrevStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *FieldContentStageExcel) StageDifficulty() StageDifficulty {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return StageDifficulty(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateStageDifficulty(n StageDifficulty) bool {
	return rcv._tab.MutateInt32Slot(36, int32(n))
}

func (rcv *FieldContentStageExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *FieldContentStageExcel) AreaId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateAreaId(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *FieldContentStageExcel) SeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func (rcv *FieldContentStageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldContentStageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

func FieldContentStageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func FieldContentStageExcelAddStarGoalAmount(builder *flatbuffers.Builder, starGoalAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(starGoalAmount), 0)
}
func FieldContentStageExcelStartStarGoalAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FieldContentStageExcelAddStarGoal(builder *flatbuffers.Builder, starGoal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(starGoal), 0)
}
func FieldContentStageExcelStartStarGoalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FieldContentStageExcelAddDailyLastPlay(builder *flatbuffers.Builder, dailyLastPlay bool) {
	builder.PrependBoolSlot(2, dailyLastPlay, false)
}
func FieldContentStageExcelAddSkipFormationSettings(builder *flatbuffers.Builder, skipFormationSettings bool) {
	builder.PrependBoolSlot(3, skipFormationSettings, false)
}
func FieldContentStageExcelAddFixedEchelonId(builder *flatbuffers.Builder, fixedEchelonId int64) {
	builder.PrependInt64Slot(4, fixedEchelonId, 0)
}
func FieldContentStageExcelAddInstantClear(builder *flatbuffers.Builder, instantClear bool) {
	builder.PrependBoolSlot(5, instantClear, false)
}
func FieldContentStageExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(6, bgmId, 0)
}
func FieldContentStageExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(7, groundId, 0)
}
func FieldContentStageExcelAddRecommandLevel(builder *flatbuffers.Builder, recommandLevel int32) {
	builder.PrependInt32Slot(8, recommandLevel, 0)
}
func FieldContentStageExcelAddStageTopography(builder *flatbuffers.Builder, stageTopography StageTopography) {
	builder.PrependInt32Slot(9, int32(stageTopography), 0)
}
func FieldContentStageExcelAddStageEnterCostAmount(builder *flatbuffers.Builder, stageEnterCostAmount int32) {
	builder.PrependInt32Slot(10, stageEnterCostAmount, 0)
}
func FieldContentStageExcelAddStageEnterCostId(builder *flatbuffers.Builder, stageEnterCostId int64) {
	builder.PrependInt64Slot(11, stageEnterCostId, 0)
}
func FieldContentStageExcelAddStageEnterCostType(builder *flatbuffers.Builder, stageEnterCostType ParcelType) {
	builder.PrependInt32Slot(12, int32(stageEnterCostType), 0)
}
func FieldContentStageExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(13, battleDuration, 0)
}
func FieldContentStageExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(name), 0)
}
func FieldContentStageExcelAddPrevStageId(builder *flatbuffers.Builder, prevStageId int64) {
	builder.PrependInt64Slot(15, prevStageId, 0)
}
func FieldContentStageExcelAddStageDifficulty(builder *flatbuffers.Builder, stageDifficulty StageDifficulty) {
	builder.PrependInt32Slot(16, int32(stageDifficulty), 0)
}
func FieldContentStageExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(17, groupId, 0)
}
func FieldContentStageExcelAddAreaId(builder *flatbuffers.Builder, areaId int64) {
	builder.PrependInt64Slot(18, areaId, 0)
}
func FieldContentStageExcelAddSeasonId(builder *flatbuffers.Builder, seasonId int64) {
	builder.PrependInt64Slot(19, seasonId, 0)
}
func FieldContentStageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(20, id, 0)
}
func FieldContentStageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
