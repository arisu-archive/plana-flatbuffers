// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstMinigameRoadPuzzleExcelDto represents a FlatBuffers table
type ConstMinigameRoadPuzzleExcelDto struct {
	fbsutils.FlatBuffer
	LoopStageIndex                    int32   `json:"loop_stage_index"`
	StartStageIndex                   int32   `json:"start_stage_index"`
	TileRotationDegree                int32   `json:"tile_rotation_degree"`
	StageLoadingProgressTime          float32 `json:"stage_loading_progress_time"`
	CameraZoomDefault                 float32 `json:"camera_zoom_default"`
	CameraZoomMin                     float32 `json:"camera_zoom_min"`
	CameraZoomMax                     float32 `json:"camera_zoom_max"`
	CameraAngle                       float32 `json:"camera_angle"`
	RoadPuzzleMapCenterOffsetY        float32 `json:"road_puzzle_map_center_offset_y"`
	RoadPuzzleMapCenterOffsetX        float32 `json:"road_puzzle_map_center_offset_x"`
	RoadPuzzleMapBoundaryOffsetBottom float32 `json:"road_puzzle_map_boundary_offset_bottom"`
	RoadPuzzleMapBoundaryOffsetTop    float32 `json:"road_puzzle_map_boundary_offset_top"`
	RoadPuzzleMapBoundaryOffsetRight  float32 `json:"road_puzzle_map_boundary_offset_right"`
	RoadPuzzleMapBoundaryOffsetLeft   float32 `json:"road_puzzle_map_boundary_offset_left"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstMinigameRoadPuzzleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMinigameRoadPuzzle"))
	}
	ConstMinigameRoadPuzzleExcelStart(b)
	ConstMinigameRoadPuzzleExcelAddLoopStageIndex(b, fbsutils.Convert(t.LoopStageIndex, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddStartStageIndex(b, fbsutils.Convert(t.StartStageIndex, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddTileRotationDegree(b, fbsutils.Convert(t.TileRotationDegree, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddStageLoadingProgressTime(b, fbsutils.Convert(t.StageLoadingProgressTime, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddCameraZoomDefault(b, fbsutils.Convert(t.CameraZoomDefault, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddCameraZoomMin(b, fbsutils.Convert(t.CameraZoomMin, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddCameraZoomMax(b, fbsutils.Convert(t.CameraZoomMax, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddCameraAngle(b, fbsutils.Convert(t.CameraAngle, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetY(b, fbsutils.Convert(t.RoadPuzzleMapCenterOffsetY, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetX(b, fbsutils.Convert(t.RoadPuzzleMapCenterOffsetX, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetBottom(b, fbsutils.Convert(t.RoadPuzzleMapBoundaryOffsetBottom, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetTop(b, fbsutils.Convert(t.RoadPuzzleMapBoundaryOffsetTop, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetRight(b, fbsutils.Convert(t.RoadPuzzleMapBoundaryOffsetRight, t.FlatBuffer.TableKey))
	ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetLeft(b, fbsutils.Convert(t.RoadPuzzleMapBoundaryOffsetLeft, t.FlatBuffer.TableKey))
	return ConstMinigameRoadPuzzleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstMinigameRoadPuzzleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstMinigameRoadPuzzleExcelDto) UnmarshalMessage(e *ConstMinigameRoadPuzzleExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstMinigameRoadPuzzle"))
	}
	t.LoopStageIndex = fbsutils.Convert(e.LoopStageIndex(), t.FlatBuffer.TableKey)
	t.StartStageIndex = fbsutils.Convert(e.StartStageIndex(), t.FlatBuffer.TableKey)
	t.TileRotationDegree = fbsutils.Convert(e.TileRotationDegree(), t.FlatBuffer.TableKey)
	t.StageLoadingProgressTime = fbsutils.Convert(e.StageLoadingProgressTime(), t.FlatBuffer.TableKey)
	t.CameraZoomDefault = fbsutils.Convert(e.CameraZoomDefault(), t.FlatBuffer.TableKey)
	t.CameraZoomMin = fbsutils.Convert(e.CameraZoomMin(), t.FlatBuffer.TableKey)
	t.CameraZoomMax = fbsutils.Convert(e.CameraZoomMax(), t.FlatBuffer.TableKey)
	t.CameraAngle = fbsutils.Convert(e.CameraAngle(), t.FlatBuffer.TableKey)
	t.RoadPuzzleMapCenterOffsetY = fbsutils.Convert(e.RoadPuzzleMapCenterOffsetY(), t.FlatBuffer.TableKey)
	t.RoadPuzzleMapCenterOffsetX = fbsutils.Convert(e.RoadPuzzleMapCenterOffsetX(), t.FlatBuffer.TableKey)
	t.RoadPuzzleMapBoundaryOffsetBottom = fbsutils.Convert(e.RoadPuzzleMapBoundaryOffsetBottom(), t.FlatBuffer.TableKey)
	t.RoadPuzzleMapBoundaryOffsetTop = fbsutils.Convert(e.RoadPuzzleMapBoundaryOffsetTop(), t.FlatBuffer.TableKey)
	t.RoadPuzzleMapBoundaryOffsetRight = fbsutils.Convert(e.RoadPuzzleMapBoundaryOffsetRight(), t.FlatBuffer.TableKey)
	t.RoadPuzzleMapBoundaryOffsetLeft = fbsutils.Convert(e.RoadPuzzleMapBoundaryOffsetLeft(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstMinigameRoadPuzzleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstMinigameRoadPuzzleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstMinigameRoadPuzzleExcelDto) FlatDataName() string {
	return "ConstMinigameRoadPuzzleExcel"
}
