// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BlendDataDto represents a FlatBuffers table
type BlendDataDto struct {
	fbsutils.FlatBuffer
	Type     int32          `json:"type"`
	InfoList []BlendInfoDto `json:"info_list"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BlendDataDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BlendData"))
	}
	BlendDataStart(b)
	BlendDataAddType(b, fbsutils.Convert(t.Type, t.FlatBuffer.TableKey))
	BlendDataStartInfoListVector(b, len(t.InfoList))
	for i := range len(t.InfoList) {
		// The array should be reversed.
		b.PrependUOffsetT(t.InfoList[len(t.InfoList)-i-1].MarshalModel(b))
	}
	BlendDataAddInfoList(b, b.EndVector(len(t.InfoList)))
	return BlendDataEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BlendDataDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BlendDataDto) UnmarshalMessage(e *BlendData) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BlendData"))
	}
	t.Type = fbsutils.Convert(e.Type(), t.FlatBuffer.TableKey)
	t.InfoList = make([]BlendInfoDto, e.InfoListLength())
	for i := range e.InfoListLength() {
		d := new(BlendInfo)
		if !e.InfoList(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.InfoList[i].UnmarshalMessage(d)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BlendDataDto) Unmarshal(data []byte) error {
	root := GetRootAsBlendData(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BlendDataDto) FlatDataName() string {
	return "BlendData"
}
