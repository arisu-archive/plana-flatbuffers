// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GroundGridFlat struct {
	_tab flatbuffers.Table
}

func GetRootAsGroundGridFlat(buf []byte, offset flatbuffers.UOffsetT) *GroundGridFlat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroundGridFlat{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroundGridFlatBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGroundGridFlat(buf []byte, offset flatbuffers.UOffsetT) *GroundGridFlat {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroundGridFlat{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroundGridFlatBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GroundGridFlat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroundGridFlat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroundGridFlat) X() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GroundGridFlat) MutateX(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *GroundGridFlat) Y() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GroundGridFlat) MutateY(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *GroundGridFlat) StartX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GroundGridFlat) MutateStartX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *GroundGridFlat) StartY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GroundGridFlat) MutateStartY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *GroundGridFlat) Gap() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GroundGridFlat) MutateGap(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *GroundGridFlat) Nodes(obj *GroundNodeFlat, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GroundGridFlat) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GroundGridFlat) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GroundGridFlatStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func GroundGridFlatAddX(builder *flatbuffers.Builder, x int32) {
	builder.PrependInt32Slot(0, x, 0)
}
func GroundGridFlatAddY(builder *flatbuffers.Builder, y int32) {
	builder.PrependInt32Slot(1, y, 0)
}
func GroundGridFlatAddStartX(builder *flatbuffers.Builder, startX float32) {
	builder.PrependFloat32Slot(2, startX, 0.0)
}
func GroundGridFlatAddStartY(builder *flatbuffers.Builder, startY float32) {
	builder.PrependFloat32Slot(3, startY, 0.0)
}
func GroundGridFlatAddGap(builder *flatbuffers.Builder, gap float32) {
	builder.PrependFloat32Slot(4, gap, 0.0)
}
func GroundGridFlatAddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(nodes), 0)
}
func GroundGridFlatStartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GroundGridFlatAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(version), 0)
}
func GroundGridFlatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
