// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GuideMissionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGuideMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *GuideMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GuideMissionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGuideMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *GuideMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GuideMissionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GuideMissionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GuideMissionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GuideMissionExcel) SeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GuideMissionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GuideMissionExcel) Category() MissionCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return MissionCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateCategory(n MissionCategory) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *GuideMissionExcel) IsLegacy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GuideMissionExcel) MutateIsLegacy(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *GuideMissionExcel) TabNumber() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateTabNumber(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *GuideMissionExcel) PreMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *GuideMissionExcel) PreMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutatePreMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *GuideMissionExcel) Description() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateDescription(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *GuideMissionExcel) ToastDisplayType() MissionToastDisplayConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return MissionToastDisplayConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateToastDisplayType(n MissionToastDisplayConditionType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *GuideMissionExcel) ToastImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionExcel) ShortcutUi(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GuideMissionExcel) ShortcutUiLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) CompleteConditionType() MissionCompleteConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return MissionCompleteConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateCompleteConditionType(n MissionCompleteConditionType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *GuideMissionExcel) CompleteConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateCompleteConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *GuideMissionExcel) CompleteConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *GuideMissionExcel) CompleteConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateCompleteConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *GuideMissionExcel) CompleteConditionParameterTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *GuideMissionExcel) CompleteConditionParameterTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateCompleteConditionParameterTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *GuideMissionExcel) IsAutoClearForScenario() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GuideMissionExcel) MutateIsAutoClearForScenario(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *GuideMissionExcel) MissionRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *GuideMissionExcel) MissionRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateMissionRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *GuideMissionExcel) MissionRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *GuideMissionExcel) MissionRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateMissionRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *GuideMissionExcel) MissionRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *GuideMissionExcel) MissionRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GuideMissionExcel) MutateMissionRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func GuideMissionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func GuideMissionExcelAddSeasonId(builder *flatbuffers.Builder, seasonId int64) {
	builder.PrependInt64Slot(0, seasonId, 0)
}
func GuideMissionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func GuideMissionExcelAddCategory(builder *flatbuffers.Builder, category MissionCategory) {
	builder.PrependInt32Slot(2, int32(category), 0)
}
func GuideMissionExcelAddIsLegacy(builder *flatbuffers.Builder, isLegacy bool) {
	builder.PrependBoolSlot(3, isLegacy, false)
}
func GuideMissionExcelAddTabNumber(builder *flatbuffers.Builder, tabNumber int64) {
	builder.PrependInt64Slot(4, tabNumber, 0)
}
func GuideMissionExcelAddPreMissionId(builder *flatbuffers.Builder, preMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(preMissionId), 0)
}
func GuideMissionExcelStartPreMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func GuideMissionExcelAddDescription(builder *flatbuffers.Builder, description uint32) {
	builder.PrependUint32Slot(6, description, 0)
}
func GuideMissionExcelAddToastDisplayType(builder *flatbuffers.Builder, toastDisplayType MissionToastDisplayConditionType) {
	builder.PrependInt32Slot(7, int32(toastDisplayType), 0)
}
func GuideMissionExcelAddToastImagePath(builder *flatbuffers.Builder, toastImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(toastImagePath), 0)
}
func GuideMissionExcelAddShortcutUi(builder *flatbuffers.Builder, shortcutUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(shortcutUi), 0)
}
func GuideMissionExcelStartShortcutUiVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GuideMissionExcelAddCompleteConditionType(builder *flatbuffers.Builder, completeConditionType MissionCompleteConditionType) {
	builder.PrependInt32Slot(10, int32(completeConditionType), 0)
}
func GuideMissionExcelAddCompleteConditionCount(builder *flatbuffers.Builder, completeConditionCount int64) {
	builder.PrependInt64Slot(11, completeConditionCount, 0)
}
func GuideMissionExcelAddCompleteConditionParameter(builder *flatbuffers.Builder, completeConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(completeConditionParameter), 0)
}
func GuideMissionExcelStartCompleteConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func GuideMissionExcelAddCompleteConditionParameterTag(builder *flatbuffers.Builder, completeConditionParameterTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(completeConditionParameterTag), 0)
}
func GuideMissionExcelStartCompleteConditionParameterTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GuideMissionExcelAddIsAutoClearForScenario(builder *flatbuffers.Builder, isAutoClearForScenario bool) {
	builder.PrependBoolSlot(14, isAutoClearForScenario, false)
}
func GuideMissionExcelAddMissionRewardParcelType(builder *flatbuffers.Builder, missionRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(missionRewardParcelType), 0)
}
func GuideMissionExcelStartMissionRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GuideMissionExcelAddMissionRewardParcelId(builder *flatbuffers.Builder, missionRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(missionRewardParcelId), 0)
}
func GuideMissionExcelStartMissionRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func GuideMissionExcelAddMissionRewardAmount(builder *flatbuffers.Builder, missionRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(missionRewardAmount), 0)
}
func GuideMissionExcelStartMissionRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GuideMissionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
