// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConstConquestExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConstConquestExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstConquestExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConstConquestExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishConstConquestExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConstConquestExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstConquestExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConstConquestExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConstConquestExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConstConquestExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConstConquestExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConstConquestExcel) ManageUnitChange() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstConquestExcel) MutateManageUnitChange(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ConstConquestExcel) AssistCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstConquestExcel) MutateAssistCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ConstConquestExcel) PlayTimeLimitInSeconds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstConquestExcel) MutatePlayTimeLimitInSeconds(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ConstConquestExcel) AnimationUnitAmountMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstConquestExcel) MutateAnimationUnitAmountMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ConstConquestExcel) AnimationUnitAmountMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstConquestExcel) MutateAnimationUnitAmountMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *ConstConquestExcel) AnimationUnitDelay() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConstConquestExcel) MutateAnimationUnitDelay(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func ConstConquestExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ConstConquestExcelAddManageUnitChange(builder *flatbuffers.Builder, manageUnitChange int32) {
	builder.PrependInt32Slot(0, manageUnitChange, 0)
}
func ConstConquestExcelAddAssistCount(builder *flatbuffers.Builder, assistCount int32) {
	builder.PrependInt32Slot(1, assistCount, 0)
}
func ConstConquestExcelAddPlayTimeLimitInSeconds(builder *flatbuffers.Builder, playTimeLimitInSeconds int32) {
	builder.PrependInt32Slot(2, playTimeLimitInSeconds, 0)
}
func ConstConquestExcelAddAnimationUnitAmountMin(builder *flatbuffers.Builder, animationUnitAmountMin int32) {
	builder.PrependInt32Slot(3, animationUnitAmountMin, 0)
}
func ConstConquestExcelAddAnimationUnitAmountMax(builder *flatbuffers.Builder, animationUnitAmountMax int32) {
	builder.PrependInt32Slot(4, animationUnitAmountMax, 0)
}
func ConstConquestExcelAddAnimationUnitDelay(builder *flatbuffers.Builder, animationUnitDelay float32) {
	builder.PrependFloat32Slot(5, animationUnitDelay, 0.0)
}
func ConstConquestExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
