// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterIllustCoordinateExcelDto represents a FlatBuffers table
type CharacterIllustCoordinateExcelDto struct {
	fbsutils.FlatBuffer
	Id                   int64   `json:"id"`
	CharacterBodyCenterX float32 `json:"character_body_center_x"`
	CharacterBodyCenterY float32 `json:"character_body_center_y"`
	DefaultScale         float32 `json:"default_scale"`
	MinScale             float32 `json:"min_scale"`
	MaxScale             float32 `json:"max_scale"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterIllustCoordinateExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterIllustCoordinate"))
	}
	CharacterIllustCoordinateExcelStart(b)
	CharacterIllustCoordinateExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterIllustCoordinateExcelAddCharacterBodyCenterX(b, fbsutils.Convert(t.CharacterBodyCenterX, t.FlatBuffer.TableKey))
	CharacterIllustCoordinateExcelAddCharacterBodyCenterY(b, fbsutils.Convert(t.CharacterBodyCenterY, t.FlatBuffer.TableKey))
	CharacterIllustCoordinateExcelAddDefaultScale(b, fbsutils.Convert(t.DefaultScale, t.FlatBuffer.TableKey))
	CharacterIllustCoordinateExcelAddMinScale(b, fbsutils.Convert(t.MinScale, t.FlatBuffer.TableKey))
	CharacterIllustCoordinateExcelAddMaxScale(b, fbsutils.Convert(t.MaxScale, t.FlatBuffer.TableKey))
	return CharacterIllustCoordinateExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterIllustCoordinateExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishCharacterIllustCoordinateExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterIllustCoordinateExcelDto) UnmarshalMessage(e *CharacterIllustCoordinateExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterIllustCoordinate"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.CharacterBodyCenterX = fbsutils.Convert(e.CharacterBodyCenterX(), t.FlatBuffer.TableKey)
	t.CharacterBodyCenterY = fbsutils.Convert(e.CharacterBodyCenterY(), t.FlatBuffer.TableKey)
	t.DefaultScale = fbsutils.Convert(e.DefaultScale(), t.FlatBuffer.TableKey)
	t.MinScale = fbsutils.Convert(e.MinScale(), t.FlatBuffer.TableKey)
	t.MaxScale = fbsutils.Convert(e.MaxScale(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterIllustCoordinateExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterIllustCoordinateExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterIllustCoordinateExcelDto) FlatDataName() string {
	return "CharacterIllustCoordinateExcel"
}
