// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentArchiveBannerOffsetExcelDto represents a FlatBuffers table
type EventContentArchiveBannerOffsetExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId int64   `json:"event_content_id"`
	OffsetX        float32 `json:"offset_x"`
	OffsetY        float32 `json:"offset_y"`
	ScaleX         float32 `json:"scale_x"`
	ScaleY         float32 `json:"scale_y"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentArchiveBannerOffsetExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentArchiveBannerOffset"))
	}
	EventContentArchiveBannerOffsetExcelStart(b)
	EventContentArchiveBannerOffsetExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentArchiveBannerOffsetExcelAddOffsetX(b, fbsutils.Convert(t.OffsetX, t.FlatBuffer.TableKey))
	EventContentArchiveBannerOffsetExcelAddOffsetY(b, fbsutils.Convert(t.OffsetY, t.FlatBuffer.TableKey))
	EventContentArchiveBannerOffsetExcelAddScaleX(b, fbsutils.Convert(t.ScaleX, t.FlatBuffer.TableKey))
	EventContentArchiveBannerOffsetExcelAddScaleY(b, fbsutils.Convert(t.ScaleY, t.FlatBuffer.TableKey))
	return EventContentArchiveBannerOffsetExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentArchiveBannerOffsetExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentArchiveBannerOffsetExcelDto) UnmarshalMessage(e *EventContentArchiveBannerOffsetExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentArchiveBannerOffset"))
	}
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.OffsetX = fbsutils.Convert(e.OffsetX(), t.FlatBuffer.TableKey)
	t.OffsetY = fbsutils.Convert(e.OffsetY(), t.FlatBuffer.TableKey)
	t.ScaleX = fbsutils.Convert(e.ScaleX(), t.FlatBuffer.TableKey)
	t.ScaleY = fbsutils.Convert(e.ScaleY(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentArchiveBannerOffsetExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentArchiveBannerOffsetExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentArchiveBannerOffsetExcelDto) FlatDataName() string {
	return "EventContentArchiveBannerOffsetExcel"
}
