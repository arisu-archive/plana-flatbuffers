// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestCalculateExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestCalculateExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestCalculateExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestCalculateExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConquestCalculateExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestCalculateExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestCalculateExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConquestCalculateExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestCalculateExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestCalculateExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestCalculateExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestCalculateExcel) CalculateConditionParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestCalculateExcel) MutateCalculateConditionParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ConquestCalculateExcel) CalculateConditionParcelUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestCalculateExcel) MutateCalculateConditionParcelUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ConquestCalculateExcel) CalculateConditionParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestCalculateExcel) MutateCalculateConditionParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func ConquestCalculateExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ConquestCalculateExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func ConquestCalculateExcelAddCalculateConditionParcelType(builder *flatbuffers.Builder, calculateConditionParcelType ParcelType) {
	builder.PrependInt32Slot(1, int32(calculateConditionParcelType), 0)
}
func ConquestCalculateExcelAddCalculateConditionParcelUniqueId(builder *flatbuffers.Builder, calculateConditionParcelUniqueId int64) {
	builder.PrependInt64Slot(2, calculateConditionParcelUniqueId, 0)
}
func ConquestCalculateExcelAddCalculateConditionParcelAmount(builder *flatbuffers.Builder, calculateConditionParcelAmount int64) {
	builder.PrependInt64Slot(3, calculateConditionParcelAmount, 0)
}
func ConquestCalculateExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
