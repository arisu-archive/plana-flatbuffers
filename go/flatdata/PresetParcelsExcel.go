// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PresetParcelsExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsPresetParcelsExcel(buf []byte, offset flatbuffers.UOffsetT) *PresetParcelsExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PresetParcelsExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPresetParcelsExcel(buf []byte, offset flatbuffers.UOffsetT) *PresetParcelsExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PresetParcelsExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PresetParcelsExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PresetParcelsExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PresetParcelsExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PresetParcelsExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *PresetParcelsExcel) ParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetParcelsExcel) MutateParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *PresetParcelsExcel) PresetGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetParcelsExcel) MutatePresetGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *PresetParcelsExcel) ParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetParcelsExcel) MutateParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func PresetParcelsExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PresetParcelsExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(0, int32(parcelType), 0)
}
func PresetParcelsExcelAddParcelId(builder *flatbuffers.Builder, parcelId int64) {
	builder.PrependInt64Slot(1, parcelId, 0)
}
func PresetParcelsExcelAddPresetGroupId(builder *flatbuffers.Builder, presetGroupId int64) {
	builder.PrependInt64Slot(2, presetGroupId, 0)
}
func PresetParcelsExcelAddParcelAmount(builder *flatbuffers.Builder, parcelAmount int64) {
	builder.PrependInt64Slot(3, parcelAmount, 0)
}
func PresetParcelsExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
