// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentCurrencyItemExcelDto represents a FlatBuffers table
type EventContentCurrencyItemExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId         int64                `json:"event_content_id"`
	EventContentItemType   EventContentItemType `json:"event_content_item_type"`
	ItemUniqueId           int64                `json:"item_unique_id"`
	UseShortCutContentType string               `json:"use_short_cut_content_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentCurrencyItemExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentCurrencyItem"))
	}
	__offset_use_short_cut_content_type := b.CreateString(fbsutils.Convert(t.UseShortCutContentType, t.FlatBuffer.TableKey))
	EventContentCurrencyItemExcelStart(b)
	EventContentCurrencyItemExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentCurrencyItemExcelAddEventContentItemType(b, fbsutils.Convert(t.EventContentItemType, t.FlatBuffer.TableKey))
	EventContentCurrencyItemExcelAddItemUniqueId(b, fbsutils.Convert(t.ItemUniqueId, t.FlatBuffer.TableKey))
	EventContentCurrencyItemExcelAddUseShortCutContentType(b, __offset_use_short_cut_content_type)
	return EventContentCurrencyItemExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentCurrencyItemExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCurrencyItemExcelDto) UnmarshalMessage(e *EventContentCurrencyItemExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentCurrencyItem"))
	}
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.EventContentItemType = EventContentItemType(fbsutils.Convert(int32(e.EventContentItemType()), t.FlatBuffer.TableKey))
	t.ItemUniqueId = fbsutils.Convert(e.ItemUniqueId(), t.FlatBuffer.TableKey)
	t.UseShortCutContentType = fbsutils.Convert(string(e.UseShortCutContentType()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCurrencyItemExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentCurrencyItemExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentCurrencyItemExcelDto) FlatDataName() string {
	return "EventContentCurrencyItemExcel"
}
