// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TagExcelDto represents a FlatBuffers table
type TagExcelDto struct {
	fbsutils.FlatBuffer
	None      Club `json:"none"`
	Furniture Tag  `json:"furniture"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TagExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Tag"))
	}
	TagExcelStart(b)
	TagExcelAddNone(b, fbsutils.Convert(t.None, t.FlatBuffer.TableKey))
	TagExcelAddFurniture(b, fbsutils.Convert(t.Furniture, t.FlatBuffer.TableKey))
	return TagExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TagExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TagExcelDto) UnmarshalMessage(e *TagExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Tag"))
	}
	t.None = Club(fbsutils.Convert(int32(e.None()), t.FlatBuffer.TableKey))
	t.Furniture = Tag(fbsutils.Convert(int32(e.Furniture()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TagExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTagExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TagExcelDto) FlatDataName() string {
	return "TagExcel"
}
