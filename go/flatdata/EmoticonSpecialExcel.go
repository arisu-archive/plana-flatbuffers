// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EmoticonSpecialExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEmoticonSpecialExcel(buf []byte, offset flatbuffers.UOffsetT) *EmoticonSpecialExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EmoticonSpecialExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEmoticonSpecialExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEmoticonSpecialExcel(buf []byte, offset flatbuffers.UOffsetT) *EmoticonSpecialExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EmoticonSpecialExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEmoticonSpecialExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EmoticonSpecialExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EmoticonSpecialExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EmoticonSpecialExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EmoticonSpecialExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EmoticonSpecialExcel) CharacterUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EmoticonSpecialExcel) MutateCharacterUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EmoticonSpecialExcel) Random() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EmoticonSpecialExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EmoticonSpecialExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(0, uniqueId, 0)
}
func EmoticonSpecialExcelAddCharacterUniqueId(builder *flatbuffers.Builder, characterUniqueId int64) {
	builder.PrependInt64Slot(1, characterUniqueId, 0)
}
func EmoticonSpecialExcelAddRandom(builder *flatbuffers.Builder, random flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(random), 0)
}
func EmoticonSpecialExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
