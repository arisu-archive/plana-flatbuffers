// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// SystemMailExcelDto represents a FlatBuffers table
type SystemMailExcelDto struct {
	fbsutils.FlatBuffer
	MailType   MailType `json:"mail_type"`
	ExpiredDay int64    `json:"expired_day"`
	Sender     string   `json:"sender"`
	Comment    string   `json:"comment"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *SystemMailExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("SystemMail"))
	}
	SystemMailExcelStart(b)
	SystemMailExcelAddMailType(b, fbsutils.Convert(t.MailType, t.FlatBuffer.TableKey))
	SystemMailExcelAddExpiredDay(b, fbsutils.Convert(t.ExpiredDay, t.FlatBuffer.TableKey))
	SystemMailExcelAddSender(b, b.CreateString(fbsutils.Convert(t.Sender, t.FlatBuffer.TableKey)))
	SystemMailExcelAddComment(b, b.CreateString(fbsutils.Convert(t.Comment, t.FlatBuffer.TableKey)))
	return SystemMailExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *SystemMailExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *SystemMailExcelDto) UnmarshalMessage(e *SystemMailExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("SystemMail"))
	}
	t.MailType = MailType(fbsutils.Convert(int32(e.MailType()), t.FlatBuffer.TableKey))
	t.ExpiredDay = fbsutils.Convert(e.ExpiredDay(), t.FlatBuffer.TableKey)
	t.Sender = fbsutils.Convert(string(e.Sender()), t.FlatBuffer.TableKey)
	t.Comment = fbsutils.Convert(string(e.Comment()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *SystemMailExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsSystemMailExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (SystemMailExcelDto) FlatDataName() string {
	return "SystemMailExcel"
}
