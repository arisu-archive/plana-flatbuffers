// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CafeProductionExcelDto represents a FlatBuffers table
type CafeProductionExcelDto struct {
	fbsutils.FlatBuffer
	CafeId                          int64      `json:"cafe_id"`
	Rank                            int64      `json:"rank"`
	CafeProductionParcelType        ParcelType `json:"cafe_production_parcel_type"`
	CafeProductionParcelId          int64      `json:"cafe_production_parcel_id"`
	ParcelProductionCoefficient     int64      `json:"parcel_production_coefficient"`
	ParcelProductionCorrectionValue int64      `json:"parcel_production_correction_value"`
	ParcelStorageMax                int64      `json:"parcel_storage_max"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CafeProductionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CafeProduction"))
	}
	CafeProductionExcelStart(b)
	CafeProductionExcelAddCafeId(b, fbsutils.Convert(t.CafeId, t.FlatBuffer.TableKey))
	CafeProductionExcelAddRank(b, fbsutils.Convert(t.Rank, t.FlatBuffer.TableKey))
	CafeProductionExcelAddCafeProductionParcelType(b, fbsutils.Convert(t.CafeProductionParcelType, t.FlatBuffer.TableKey))
	CafeProductionExcelAddCafeProductionParcelId(b, fbsutils.Convert(t.CafeProductionParcelId, t.FlatBuffer.TableKey))
	CafeProductionExcelAddParcelProductionCoefficient(b, fbsutils.Convert(t.ParcelProductionCoefficient, t.FlatBuffer.TableKey))
	CafeProductionExcelAddParcelProductionCorrectionValue(b, fbsutils.Convert(t.ParcelProductionCorrectionValue, t.FlatBuffer.TableKey))
	CafeProductionExcelAddParcelStorageMax(b, fbsutils.Convert(t.ParcelStorageMax, t.FlatBuffer.TableKey))
	return CafeProductionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CafeProductionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CafeProductionExcelDto) UnmarshalMessage(e *CafeProductionExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CafeProduction"))
	}
	t.CafeId = fbsutils.Convert(e.CafeId(), t.FlatBuffer.TableKey)
	t.Rank = fbsutils.Convert(e.Rank(), t.FlatBuffer.TableKey)
	t.CafeProductionParcelType = ParcelType(fbsutils.Convert(int32(e.CafeProductionParcelType()), t.FlatBuffer.TableKey))
	t.CafeProductionParcelId = fbsutils.Convert(e.CafeProductionParcelId(), t.FlatBuffer.TableKey)
	t.ParcelProductionCoefficient = fbsutils.Convert(e.ParcelProductionCoefficient(), t.FlatBuffer.TableKey)
	t.ParcelProductionCorrectionValue = fbsutils.Convert(e.ParcelProductionCorrectionValue(), t.FlatBuffer.TableKey)
	t.ParcelStorageMax = fbsutils.Convert(e.ParcelStorageMax(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CafeProductionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCafeProductionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CafeProductionExcelDto) FlatDataName() string {
	return "CafeProductionExcel"
}
