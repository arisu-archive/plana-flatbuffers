// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TerrainAdaptationFactorExcelDto represents a FlatBuffers table
type TerrainAdaptationFactorExcelDto struct {
	fbsutils.FlatBuffer
	TerrainAdaptation     StageTopography       `json:"terrain_adaptation"`
	TerrainAdaptationStat TerrainAdaptationStat `json:"terrain_adaptation_stat"`
	ShotFactor            int64                 `json:"shot_factor"`
	BlockFactor           int64                 `json:"block_factor"`
	AccuracyFactor        int64                 `json:"accuracy_factor"`
	DodgeFactor           int64                 `json:"dodge_factor"`
	AttackPowerFactor     int64                 `json:"attack_power_factor"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TerrainAdaptationFactorExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TerrainAdaptationFactor"))
	}
	TerrainAdaptationFactorExcelStart(b)
	TerrainAdaptationFactorExcelAddTerrainAdaptation(b, fbsutils.Convert(t.TerrainAdaptation, t.FlatBuffer.TableKey))
	TerrainAdaptationFactorExcelAddTerrainAdaptationStat(b, fbsutils.Convert(t.TerrainAdaptationStat, t.FlatBuffer.TableKey))
	TerrainAdaptationFactorExcelAddShotFactor(b, fbsutils.Convert(t.ShotFactor, t.FlatBuffer.TableKey))
	TerrainAdaptationFactorExcelAddBlockFactor(b, fbsutils.Convert(t.BlockFactor, t.FlatBuffer.TableKey))
	TerrainAdaptationFactorExcelAddAccuracyFactor(b, fbsutils.Convert(t.AccuracyFactor, t.FlatBuffer.TableKey))
	TerrainAdaptationFactorExcelAddDodgeFactor(b, fbsutils.Convert(t.DodgeFactor, t.FlatBuffer.TableKey))
	TerrainAdaptationFactorExcelAddAttackPowerFactor(b, fbsutils.Convert(t.AttackPowerFactor, t.FlatBuffer.TableKey))
	return TerrainAdaptationFactorExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TerrainAdaptationFactorExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TerrainAdaptationFactorExcelDto) UnmarshalMessage(e *TerrainAdaptationFactorExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TerrainAdaptationFactor"))
	}
	t.TerrainAdaptation = StageTopography(fbsutils.Convert(int32(e.TerrainAdaptation()), t.FlatBuffer.TableKey))
	t.TerrainAdaptationStat = TerrainAdaptationStat(fbsutils.Convert(int32(e.TerrainAdaptationStat()), t.FlatBuffer.TableKey))
	t.ShotFactor = fbsutils.Convert(e.ShotFactor(), t.FlatBuffer.TableKey)
	t.BlockFactor = fbsutils.Convert(e.BlockFactor(), t.FlatBuffer.TableKey)
	t.AccuracyFactor = fbsutils.Convert(e.AccuracyFactor(), t.FlatBuffer.TableKey)
	t.DodgeFactor = fbsutils.Convert(e.DodgeFactor(), t.FlatBuffer.TableKey)
	t.AttackPowerFactor = fbsutils.Convert(e.AttackPowerFactor(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TerrainAdaptationFactorExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTerrainAdaptationFactorExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TerrainAdaptationFactorExcelDto) FlatDataName() string {
	return "TerrainAdaptationFactorExcel"
}
