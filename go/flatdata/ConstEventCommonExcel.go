// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConstEventCommonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConstEventCommonExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstEventCommonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConstEventCommonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConstEventCommonExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstEventCommonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConstEventCommonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConstEventCommonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConstEventCommonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConstEventCommonExcel) EventStoryReplayHideEventContentId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateEventStoryReplayHideEventContentId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ConstEventCommonExcel) TreasureLimitVariationClearLoopCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateTreasureLimitVariationClearLoopCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ConstEventCommonExcel) TreasureLimitVariationLoopCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateTreasureLimitVariationLoopCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ConstEventCommonExcel) TreasureLoopVariationAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateTreasureLoopVariationAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ConstEventCommonExcel) TreasureNormalVariationAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateTreasureNormalVariationAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *ConstEventCommonExcel) SpecialOperactionCollectionGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateSpecialOperactionCollectionGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ConstEventCommonExcel) MeetupScenarioReplayTitleLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstEventCommonExcel) MeetupScenarioReplayResource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstEventCommonExcel) CardShopProbWeightRarity() Rarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return Rarity(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateCardShopProbWeightRarity(n Rarity) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *ConstEventCommonExcel) CardShopProbWeightCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateCardShopProbWeightCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *ConstEventCommonExcel) SubEventInstantClear() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConstEventCommonExcel) MutateSubEventInstantClear(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func (rcv *ConstEventCommonExcel) SubEventChangeLimitSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateSubEventChangeLimitSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *ConstEventCommonExcel) EventStrategyPlayTimeLimitInSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateEventStrategyPlayTimeLimitInSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *ConstEventCommonExcel) EventContentHardStageCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstEventCommonExcel) MutateEventContentHardStageCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func ConstEventCommonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func ConstEventCommonExcelAddEventStoryReplayHideEventContentId(builder *flatbuffers.Builder, eventStoryReplayHideEventContentId int32) {
	builder.PrependInt32Slot(0, eventStoryReplayHideEventContentId, 0)
}
func ConstEventCommonExcelAddTreasureLimitVariationClearLoopCount(builder *flatbuffers.Builder, treasureLimitVariationClearLoopCount int32) {
	builder.PrependInt32Slot(1, treasureLimitVariationClearLoopCount, 0)
}
func ConstEventCommonExcelAddTreasureLimitVariationLoopCount(builder *flatbuffers.Builder, treasureLimitVariationLoopCount int32) {
	builder.PrependInt32Slot(2, treasureLimitVariationLoopCount, 0)
}
func ConstEventCommonExcelAddTreasureLoopVariationAmount(builder *flatbuffers.Builder, treasureLoopVariationAmount int32) {
	builder.PrependInt32Slot(3, treasureLoopVariationAmount, 0)
}
func ConstEventCommonExcelAddTreasureNormalVariationAmount(builder *flatbuffers.Builder, treasureNormalVariationAmount int32) {
	builder.PrependInt32Slot(4, treasureNormalVariationAmount, 0)
}
func ConstEventCommonExcelAddSpecialOperactionCollectionGroupId(builder *flatbuffers.Builder, specialOperactionCollectionGroupId int64) {
	builder.PrependInt64Slot(5, specialOperactionCollectionGroupId, 0)
}
func ConstEventCommonExcelAddMeetupScenarioReplayTitleLocalize(builder *flatbuffers.Builder, meetupScenarioReplayTitleLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(meetupScenarioReplayTitleLocalize), 0)
}
func ConstEventCommonExcelAddMeetupScenarioReplayResource(builder *flatbuffers.Builder, meetupScenarioReplayResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(meetupScenarioReplayResource), 0)
}
func ConstEventCommonExcelAddCardShopProbWeightRarity(builder *flatbuffers.Builder, cardShopProbWeightRarity Rarity) {
	builder.PrependInt32Slot(8, int32(cardShopProbWeightRarity), 0)
}
func ConstEventCommonExcelAddCardShopProbWeightCount(builder *flatbuffers.Builder, cardShopProbWeightCount int64) {
	builder.PrependInt64Slot(9, cardShopProbWeightCount, 0)
}
func ConstEventCommonExcelAddSubEventInstantClear(builder *flatbuffers.Builder, subEventInstantClear bool) {
	builder.PrependBoolSlot(10, subEventInstantClear, false)
}
func ConstEventCommonExcelAddSubEventChangeLimitSeconds(builder *flatbuffers.Builder, subEventChangeLimitSeconds int64) {
	builder.PrependInt64Slot(11, subEventChangeLimitSeconds, 0)
}
func ConstEventCommonExcelAddEventStrategyPlayTimeLimitInSeconds(builder *flatbuffers.Builder, eventStrategyPlayTimeLimitInSeconds int64) {
	builder.PrependInt64Slot(12, eventStrategyPlayTimeLimitInSeconds, 0)
}
func ConstEventCommonExcelAddEventContentHardStageCount(builder *flatbuffers.Builder, eventContentHardStageCount int32) {
	builder.PrependInt32Slot(13, eventContentHardStageCount, 0)
}
func ConstEventCommonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
