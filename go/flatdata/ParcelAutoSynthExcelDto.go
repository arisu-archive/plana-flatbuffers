// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ParcelAutoSynthExcelDto represents a FlatBuffers table
type ParcelAutoSynthExcelDto struct {
	fbsutils.FlatBuffer
	RequireParcelType   ParcelType `json:"require_parcel_type"`
	RequireParcelId     int64      `json:"require_parcel_id"`
	RequireParcelAmount int64      `json:"require_parcel_amount"`
	SynthStartAmount    int64      `json:"synth_start_amount"`
	SynthEndAmount      int64      `json:"synth_end_amount"`
	SynthMaxItem        bool       `json:"synth_max_item"`
	ResultParcelType    ParcelType `json:"result_parcel_type"`
	ResultParcelId      int64      `json:"result_parcel_id"`
	ResultParcelAmount  int64      `json:"result_parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ParcelAutoSynthExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ParcelAutoSynth"))
	}
	ParcelAutoSynthExcelStart(b)
	ParcelAutoSynthExcelAddRequireParcelType(b, fbsutils.Convert(t.RequireParcelType, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddRequireParcelId(b, fbsutils.Convert(t.RequireParcelId, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddRequireParcelAmount(b, fbsutils.Convert(t.RequireParcelAmount, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddSynthStartAmount(b, fbsutils.Convert(t.SynthStartAmount, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddSynthEndAmount(b, fbsutils.Convert(t.SynthEndAmount, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddSynthMaxItem(b, t.SynthMaxItem)
	ParcelAutoSynthExcelAddResultParcelType(b, fbsutils.Convert(t.ResultParcelType, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddResultParcelId(b, fbsutils.Convert(t.ResultParcelId, t.FlatBuffer.TableKey))
	ParcelAutoSynthExcelAddResultParcelAmount(b, fbsutils.Convert(t.ResultParcelAmount, t.FlatBuffer.TableKey))
	return ParcelAutoSynthExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ParcelAutoSynthExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishParcelAutoSynthExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ParcelAutoSynthExcelDto) UnmarshalMessage(e *ParcelAutoSynthExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ParcelAutoSynth"))
	}
	t.RequireParcelType = ParcelType(fbsutils.Convert(int32(e.RequireParcelType()), t.FlatBuffer.TableKey))
	t.RequireParcelId = fbsutils.Convert(e.RequireParcelId(), t.FlatBuffer.TableKey)
	t.RequireParcelAmount = fbsutils.Convert(e.RequireParcelAmount(), t.FlatBuffer.TableKey)
	t.SynthStartAmount = fbsutils.Convert(e.SynthStartAmount(), t.FlatBuffer.TableKey)
	t.SynthEndAmount = fbsutils.Convert(e.SynthEndAmount(), t.FlatBuffer.TableKey)
	t.SynthMaxItem = e.SynthMaxItem()
	t.ResultParcelType = ParcelType(fbsutils.Convert(int32(e.ResultParcelType()), t.FlatBuffer.TableKey))
	t.ResultParcelId = fbsutils.Convert(e.ResultParcelId(), t.FlatBuffer.TableKey)
	t.ResultParcelAmount = fbsutils.Convert(e.ResultParcelAmount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ParcelAutoSynthExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsParcelAutoSynthExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ParcelAutoSynthExcelDto) FlatDataName() string {
	return "ParcelAutoSynthExcel"
}
