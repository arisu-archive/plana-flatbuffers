// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// NormalSkillTemplateExcelDto represents a FlatBuffers table
type NormalSkillTemplateExcelDto struct {
	fbsutils.FlatBuffer
	CoolTime      float32 `json:"cool_time"`
	FirstCoolTime float32 `json:"first_cool_time"`
	Index         int64   `json:"index"`
	MultiAni      bool    `json:"multi_ani"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *NormalSkillTemplateExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("NormalSkillTemplate"))
	}
	NormalSkillTemplateExcelStart(b)
	NormalSkillTemplateExcelAddCoolTime(b, fbsutils.Convert(t.CoolTime, t.FlatBuffer.TableKey))
	NormalSkillTemplateExcelAddFirstCoolTime(b, fbsutils.Convert(t.FirstCoolTime, t.FlatBuffer.TableKey))
	NormalSkillTemplateExcelAddIndex(b, fbsutils.Convert(t.Index, t.FlatBuffer.TableKey))
	NormalSkillTemplateExcelAddMultiAni(b, t.MultiAni)
	return NormalSkillTemplateExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *NormalSkillTemplateExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *NormalSkillTemplateExcelDto) UnmarshalMessage(e *NormalSkillTemplateExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("NormalSkillTemplate"))
	}
	t.CoolTime = fbsutils.Convert(e.CoolTime(), t.FlatBuffer.TableKey)
	t.FirstCoolTime = fbsutils.Convert(e.FirstCoolTime(), t.FlatBuffer.TableKey)
	t.Index = fbsutils.Convert(e.Index(), t.FlatBuffer.TableKey)
	t.MultiAni = e.MultiAni()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *NormalSkillTemplateExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsNormalSkillTemplateExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (NormalSkillTemplateExcelDto) FlatDataName() string {
	return "NormalSkillTemplateExcel"
}
