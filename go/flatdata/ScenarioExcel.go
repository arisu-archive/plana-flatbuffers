// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScenarioExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScenarioExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScenarioExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScenarioExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScenarioExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScenarioExcel) Prologue() ScenarioContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ScenarioContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutatePrologue(n ScenarioContentType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *ScenarioExcel) Instant() ScenarioZoomType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ScenarioZoomType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutateInstant(n ScenarioZoomType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ScenarioExcel) Center() ScenarioZoomAnchors {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ScenarioZoomAnchors(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutateCenter(n ScenarioZoomAnchors) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ScenarioExcel) EnterConver() EmojiEvent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EmojiEvent(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutateEnterConver(n EmojiEvent) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *ScenarioExcel) Open() StoryCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return StoryCondition(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutateOpen(n StoryCondition) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *ScenarioExcel) Talk() DialogType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return DialogType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutateTalk(n DialogType) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *ScenarioExcel) Cafe() DialogCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return DialogCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioExcel) MutateCafe(n DialogCategory) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *ScenarioExcel) Idle(j int) ScenarioCharacterAction {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ScenarioCharacterAction(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ScenarioExcel) IdleLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ScenarioExcel) MutateIdle(j int, n ScenarioCharacterAction) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ScenarioExcel) None(j int) ScenarioBGType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ScenarioBGType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ScenarioExcel) NoneLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ScenarioExcel) MutateNone(j int, n ScenarioBGType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func ScenarioExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ScenarioExcelAddPrologue(builder *flatbuffers.Builder, prologue ScenarioContentType) {
	builder.PrependInt32Slot(0, int32(prologue), 0)
}
func ScenarioExcelAddInstant(builder *flatbuffers.Builder, instant ScenarioZoomType) {
	builder.PrependInt32Slot(1, int32(instant), 0)
}
func ScenarioExcelAddCenter(builder *flatbuffers.Builder, center ScenarioZoomAnchors) {
	builder.PrependInt32Slot(2, int32(center), 0)
}
func ScenarioExcelAddEnterConver(builder *flatbuffers.Builder, enterConver EmojiEvent) {
	builder.PrependInt32Slot(3, int32(enterConver), 0)
}
func ScenarioExcelAddOpen(builder *flatbuffers.Builder, open StoryCondition) {
	builder.PrependInt32Slot(4, int32(open), 0)
}
func ScenarioExcelAddTalk(builder *flatbuffers.Builder, talk DialogType) {
	builder.PrependInt32Slot(5, int32(talk), 0)
}
func ScenarioExcelAddCafe(builder *flatbuffers.Builder, cafe DialogCategory) {
	builder.PrependInt32Slot(6, int32(cafe), 0)
}
func ScenarioExcelAddIdle(builder *flatbuffers.Builder, idle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idle), 0)
}
func ScenarioExcelStartIdleVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ScenarioExcelAddNone(builder *flatbuffers.Builder, none flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(none), 0)
}
func ScenarioExcelStartNoneVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ScenarioExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
