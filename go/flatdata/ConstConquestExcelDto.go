// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConstConquestExcelDto represents a FlatBuffers table
type ConstConquestExcelDto struct {
	fbsutils.FlatBuffer
	AnimationUnitDelay     float32 `json:"animation_unit_delay"`
	AnimationUnitAmountMax int32   `json:"animation_unit_amount_max"`
	AnimationUnitAmountMin int32   `json:"animation_unit_amount_min"`
	PlayTimeLimitInSeconds int32   `json:"play_time_limit_in_seconds"`
	AssistCount            int32   `json:"assist_count"`
	ManageUnitChange       int32   `json:"manage_unit_change"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConstConquestExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstConquest"))
	}
	ConstConquestExcelStart(b)
	ConstConquestExcelAddAnimationUnitDelay(b, fbsutils.Convert(t.AnimationUnitDelay, t.FlatBuffer.TableKey))
	ConstConquestExcelAddAnimationUnitAmountMax(b, fbsutils.Convert(t.AnimationUnitAmountMax, t.FlatBuffer.TableKey))
	ConstConquestExcelAddAnimationUnitAmountMin(b, fbsutils.Convert(t.AnimationUnitAmountMin, t.FlatBuffer.TableKey))
	ConstConquestExcelAddPlayTimeLimitInSeconds(b, fbsutils.Convert(t.PlayTimeLimitInSeconds, t.FlatBuffer.TableKey))
	ConstConquestExcelAddAssistCount(b, fbsutils.Convert(t.AssistCount, t.FlatBuffer.TableKey))
	ConstConquestExcelAddManageUnitChange(b, fbsutils.Convert(t.ManageUnitChange, t.FlatBuffer.TableKey))
	return ConstConquestExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConstConquestExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConstConquestExcelDto) UnmarshalMessage(e *ConstConquestExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConstConquest"))
	}
	t.AnimationUnitDelay = fbsutils.Convert(e.AnimationUnitDelay(), t.FlatBuffer.TableKey)
	t.AnimationUnitAmountMax = fbsutils.Convert(e.AnimationUnitAmountMax(), t.FlatBuffer.TableKey)
	t.AnimationUnitAmountMin = fbsutils.Convert(e.AnimationUnitAmountMin(), t.FlatBuffer.TableKey)
	t.PlayTimeLimitInSeconds = fbsutils.Convert(e.PlayTimeLimitInSeconds(), t.FlatBuffer.TableKey)
	t.AssistCount = fbsutils.Convert(e.AssistCount(), t.FlatBuffer.TableKey)
	t.ManageUnitChange = fbsutils.Convert(e.ManageUnitChange(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConstConquestExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConstConquestExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConstConquestExcelDto) FlatDataName() string {
	return "ConstConquestExcel"
}
