// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DefaultEchelonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsDefaultEchelonExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultEchelonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DefaultEchelonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDefaultEchelonExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultEchelonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DefaultEchelonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DefaultEchelonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DefaultEchelonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DefaultEchelonExcel) TssId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultEchelonExcel) MutateTssId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *DefaultEchelonExcel) SupportId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *DefaultEchelonExcel) SupportIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DefaultEchelonExcel) MutateSupportId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *DefaultEchelonExcel) MainId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *DefaultEchelonExcel) MainIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DefaultEchelonExcel) MutateMainId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *DefaultEchelonExcel) LeaderId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultEchelonExcel) MutateLeaderId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *DefaultEchelonExcel) EchlonId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultEchelonExcel) MutateEchlonId(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func DefaultEchelonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DefaultEchelonExcelAddTssId(builder *flatbuffers.Builder, tssId int64) {
	builder.PrependInt64Slot(0, tssId, 0)
}
func DefaultEchelonExcelAddSupportId(builder *flatbuffers.Builder, supportId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(supportId), 0)
}
func DefaultEchelonExcelStartSupportIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func DefaultEchelonExcelAddMainId(builder *flatbuffers.Builder, mainId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mainId), 0)
}
func DefaultEchelonExcelStartMainIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func DefaultEchelonExcelAddLeaderId(builder *flatbuffers.Builder, leaderId int64) {
	builder.PrependInt64Slot(3, leaderId, 0)
}
func DefaultEchelonExcelAddEchlonId(builder *flatbuffers.Builder, echlonId int32) {
	builder.PrependInt32Slot(4, echlonId, 0)
}
func DefaultEchelonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
