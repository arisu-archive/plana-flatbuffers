// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConstArenaExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConstArenaExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstArenaExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConstArenaExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConstArenaExcel(buf []byte, offset flatbuffers.UOffsetT) *ConstArenaExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConstArenaExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConstArenaExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConstArenaExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConstArenaExcel) ArenaHistoryQueryLimitDays() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateArenaHistoryQueryLimitDays(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ConstArenaExcel) ShowSeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateShowSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ConstArenaExcel) ShowSeasonChangeInfoEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstArenaExcel) ShowSeasonChangeInfoStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstArenaExcel) SkipAllowedTimeMilliSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateSkipAllowedTimeMilliSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ConstArenaExcel) EchelonSettingIntervalMilliSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateEchelonSettingIntervalMilliSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ConstArenaExcel) AutoRefreshIntervalMilliSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateAutoRefreshIntervalMilliSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ConstArenaExcel) TopRankerCountLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateTopRankerCountLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ConstArenaExcel) DefenseVictoryRewardMaxCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateDefenseVictoryRewardMaxCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *ConstArenaExcel) HiddenCharacterImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstArenaExcel) TimeSpanInDaysForBattleHistory() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateTimeSpanInDaysForBattleHistory(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *ConstArenaExcel) NpcCharacterSkillLevel() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateNpcCharacterSkillLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *ConstArenaExcel) NpcSupportCharacterCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateNpcSupportCharacterCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *ConstArenaExcel) NpcMainCharacterCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateNpcMainCharacterCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *ConstArenaExcel) NpcName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ConstArenaExcel) NpcNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) StatSumFactor(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConstArenaExcel) StatSumFactorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateStatSumFactor(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConstArenaExcel) StatMulFactor(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConstArenaExcel) StatMulFactorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateStatMulFactor(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConstArenaExcel) ModifiedStatType(j int) StatType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StatType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConstArenaExcel) ModifiedStatTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateModifiedStatType(j int, n StatType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConstArenaExcel) RelativeOpponentRankEnd(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConstArenaExcel) RelativeOpponentRankEndLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateRelativeOpponentRankEnd(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConstArenaExcel) RelativeOpponentRankStart(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConstArenaExcel) RelativeOpponentRankStartLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateRelativeOpponentRankStart(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConstArenaExcel) MapSlotHideRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateMapSlotHideRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

func (rcv *ConstArenaExcel) CharacterSlotHideRank(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ConstArenaExcel) CharacterSlotHideRankLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateCharacterSlotHideRank(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ConstArenaExcel) OpenScenarioId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstArenaExcel) DailyRewardResetTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConstArenaExcel) TicketCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateTicketCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

func (rcv *ConstArenaExcel) EnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(54, n)
}

func (rcv *ConstArenaExcel) EnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(56, int32(n))
}

func (rcv *ConstArenaExcel) TimeRewardMaxAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateTimeRewardMaxAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(58, n)
}

func (rcv *ConstArenaExcel) EndAlarm() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateEndAlarm(n int64) bool {
	return rcv._tab.MutateInt64Slot(60, n)
}

func (rcv *ConstArenaExcel) TssStartCoolTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateTssStartCoolTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(62, n)
}

func (rcv *ConstArenaExcel) DefenseCoolTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateDefenseCoolTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(64, n)
}

func (rcv *ConstArenaExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(66, n)
}

func (rcv *ConstArenaExcel) AttackCoolTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConstArenaExcel) MutateAttackCoolTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(68, n)
}

func ConstArenaExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(33)
}
func ConstArenaExcelAddArenaHistoryQueryLimitDays(builder *flatbuffers.Builder, arenaHistoryQueryLimitDays int32) {
	builder.PrependInt32Slot(0, arenaHistoryQueryLimitDays, 0)
}
func ConstArenaExcelAddShowSeasonId(builder *flatbuffers.Builder, showSeasonId int64) {
	builder.PrependInt64Slot(1, showSeasonId, 0)
}
func ConstArenaExcelAddShowSeasonChangeInfoEndTime(builder *flatbuffers.Builder, showSeasonChangeInfoEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(showSeasonChangeInfoEndTime), 0)
}
func ConstArenaExcelAddShowSeasonChangeInfoStartTime(builder *flatbuffers.Builder, showSeasonChangeInfoStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(showSeasonChangeInfoStartTime), 0)
}
func ConstArenaExcelAddSkipAllowedTimeMilliSeconds(builder *flatbuffers.Builder, skipAllowedTimeMilliSeconds int64) {
	builder.PrependInt64Slot(4, skipAllowedTimeMilliSeconds, 0)
}
func ConstArenaExcelAddEchelonSettingIntervalMilliSeconds(builder *flatbuffers.Builder, echelonSettingIntervalMilliSeconds int64) {
	builder.PrependInt64Slot(5, echelonSettingIntervalMilliSeconds, 0)
}
func ConstArenaExcelAddAutoRefreshIntervalMilliSeconds(builder *flatbuffers.Builder, autoRefreshIntervalMilliSeconds int64) {
	builder.PrependInt64Slot(6, autoRefreshIntervalMilliSeconds, 0)
}
func ConstArenaExcelAddTopRankerCountLimit(builder *flatbuffers.Builder, topRankerCountLimit int64) {
	builder.PrependInt64Slot(7, topRankerCountLimit, 0)
}
func ConstArenaExcelAddDefenseVictoryRewardMaxCount(builder *flatbuffers.Builder, defenseVictoryRewardMaxCount int64) {
	builder.PrependInt64Slot(8, defenseVictoryRewardMaxCount, 0)
}
func ConstArenaExcelAddHiddenCharacterImagePath(builder *flatbuffers.Builder, hiddenCharacterImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(hiddenCharacterImagePath), 0)
}
func ConstArenaExcelAddTimeSpanInDaysForBattleHistory(builder *flatbuffers.Builder, timeSpanInDaysForBattleHistory int64) {
	builder.PrependInt64Slot(10, timeSpanInDaysForBattleHistory, 0)
}
func ConstArenaExcelAddNpcCharacterSkillLevel(builder *flatbuffers.Builder, npcCharacterSkillLevel int64) {
	builder.PrependInt64Slot(11, npcCharacterSkillLevel, 0)
}
func ConstArenaExcelAddNpcSupportCharacterCount(builder *flatbuffers.Builder, npcSupportCharacterCount int64) {
	builder.PrependInt64Slot(12, npcSupportCharacterCount, 0)
}
func ConstArenaExcelAddNpcMainCharacterCount(builder *flatbuffers.Builder, npcMainCharacterCount int64) {
	builder.PrependInt64Slot(13, npcMainCharacterCount, 0)
}
func ConstArenaExcelAddNpcName(builder *flatbuffers.Builder, npcName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(npcName), 0)
}
func ConstArenaExcelStartNpcNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConstArenaExcelAddStatSumFactor(builder *flatbuffers.Builder, statSumFactor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(statSumFactor), 0)
}
func ConstArenaExcelStartStatSumFactorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConstArenaExcelAddStatMulFactor(builder *flatbuffers.Builder, statMulFactor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(statMulFactor), 0)
}
func ConstArenaExcelStartStatMulFactorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConstArenaExcelAddModifiedStatType(builder *flatbuffers.Builder, modifiedStatType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(modifiedStatType), 0)
}
func ConstArenaExcelStartModifiedStatTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConstArenaExcelAddRelativeOpponentRankEnd(builder *flatbuffers.Builder, relativeOpponentRankEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(relativeOpponentRankEnd), 0)
}
func ConstArenaExcelStartRelativeOpponentRankEndVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConstArenaExcelAddRelativeOpponentRankStart(builder *flatbuffers.Builder, relativeOpponentRankStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(relativeOpponentRankStart), 0)
}
func ConstArenaExcelStartRelativeOpponentRankStartVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConstArenaExcelAddMapSlotHideRank(builder *flatbuffers.Builder, mapSlotHideRank int64) {
	builder.PrependInt64Slot(20, mapSlotHideRank, 0)
}
func ConstArenaExcelAddCharacterSlotHideRank(builder *flatbuffers.Builder, characterSlotHideRank flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(characterSlotHideRank), 0)
}
func ConstArenaExcelStartCharacterSlotHideRankVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ConstArenaExcelAddOpenScenarioId(builder *flatbuffers.Builder, openScenarioId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(openScenarioId), 0)
}
func ConstArenaExcelAddDailyRewardResetTime(builder *flatbuffers.Builder, dailyRewardResetTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(dailyRewardResetTime), 0)
}
func ConstArenaExcelAddTicketCost(builder *flatbuffers.Builder, ticketCost int64) {
	builder.PrependInt64Slot(24, ticketCost, 0)
}
func ConstArenaExcelAddEnterCostId(builder *flatbuffers.Builder, enterCostId int64) {
	builder.PrependInt64Slot(25, enterCostId, 0)
}
func ConstArenaExcelAddEnterCostType(builder *flatbuffers.Builder, enterCostType ParcelType) {
	builder.PrependInt32Slot(26, int32(enterCostType), 0)
}
func ConstArenaExcelAddTimeRewardMaxAmount(builder *flatbuffers.Builder, timeRewardMaxAmount int64) {
	builder.PrependInt64Slot(27, timeRewardMaxAmount, 0)
}
func ConstArenaExcelAddEndAlarm(builder *flatbuffers.Builder, endAlarm int64) {
	builder.PrependInt64Slot(28, endAlarm, 0)
}
func ConstArenaExcelAddTssStartCoolTime(builder *flatbuffers.Builder, tssStartCoolTime int64) {
	builder.PrependInt64Slot(29, tssStartCoolTime, 0)
}
func ConstArenaExcelAddDefenseCoolTime(builder *flatbuffers.Builder, defenseCoolTime int64) {
	builder.PrependInt64Slot(30, defenseCoolTime, 0)
}
func ConstArenaExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(31, battleDuration, 0)
}
func ConstArenaExcelAddAttackCoolTime(builder *flatbuffers.Builder, attackCoolTime int64) {
	builder.PrependInt64Slot(32, attackCoolTime, 0)
}
func ConstArenaExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
