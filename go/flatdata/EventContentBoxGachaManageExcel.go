// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentBoxGachaManageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentBoxGachaManageExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBoxGachaManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentBoxGachaManageExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentBoxGachaManageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentBoxGachaManageExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBoxGachaManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentBoxGachaManageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentBoxGachaManageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentBoxGachaManageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentBoxGachaManageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentBoxGachaManageExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaManageExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentBoxGachaManageExcel) Round() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaManageExcel) MutateRound(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentBoxGachaManageExcel) GoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaManageExcel) MutateGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentBoxGachaManageExcel) IsLoop() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentBoxGachaManageExcel) MutateIsLoop(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func EventContentBoxGachaManageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventContentBoxGachaManageExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentBoxGachaManageExcelAddRound(builder *flatbuffers.Builder, round int64) {
	builder.PrependInt64Slot(1, round, 0)
}
func EventContentBoxGachaManageExcelAddGoodsId(builder *flatbuffers.Builder, goodsId int64) {
	builder.PrependInt64Slot(2, goodsId, 0)
}
func EventContentBoxGachaManageExcelAddIsLoop(builder *flatbuffers.Builder, isLoop bool) {
	builder.PrependBoolSlot(3, isLoop, false)
}
func EventContentBoxGachaManageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
