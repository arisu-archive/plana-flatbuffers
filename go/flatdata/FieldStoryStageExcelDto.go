// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldStoryStageExcelDto represents a FlatBuffers table
type FieldStoryStageExcelDto struct {
	fbsutils.FlatBuffer
	BattleDuration        int64           `json:"battle_duration"`
	BgmId                 int64           `json:"bgm_id"`
	FixedEchelonId        int64           `json:"fixed_echelon_id"`
	GroundId              int64           `json:"ground_id"`
	Id                    int64           `json:"id"`
	Name                  string          `json:"name"`
	RecommandLevel        int32           `json:"recommand_level"`
	SeasonId              int64           `json:"season_id"`
	SkipFormationSettings bool            `json:"skip_formation_settings"`
	StageTopography       StageTopography `json:"stage_topography"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldStoryStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldStoryStage"))
	}
	FieldStoryStageExcelStart(b)
	FieldStoryStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddFixedEchelonId(b, fbsutils.Convert(t.FixedEchelonId, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	FieldStoryStageExcelAddRecommandLevel(b, fbsutils.Convert(t.RecommandLevel, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	FieldStoryStageExcelAddSkipFormationSettings(b, t.SkipFormationSettings)
	FieldStoryStageExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	return FieldStoryStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldStoryStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldStoryStageExcelDto) UnmarshalMessage(e *FieldStoryStageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldStoryStage"))
	}
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.FixedEchelonId = fbsutils.Convert(e.FixedEchelonId(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.RecommandLevel = fbsutils.Convert(e.RecommandLevel(), t.FlatBuffer.TableKey)
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	t.SkipFormationSettings = e.SkipFormationSettings()
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldStoryStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldStoryStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldStoryStageExcelDto) FlatDataName() string {
	return "FieldStoryStageExcel"
}
