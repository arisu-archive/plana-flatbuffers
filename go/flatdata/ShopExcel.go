// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShopExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsShopExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShopExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShopExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShopExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShopExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShopExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShopExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ShopExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ShopExcel) CategoryType() ShopCategoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ShopCategoryType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopExcel) MutateCategoryType(n ShopCategoryType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ShopExcel) IsLegacy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopExcel) MutateIsLegacy(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ShopExcel) GoodsId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ShopExcel) GoodsIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ShopExcel) MutateGoodsId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ShopExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ShopExcel) SalePeriodFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopExcel) SalePeriodTo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopExcel) PurchaseCooltimeMin() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopExcel) MutatePurchaseCooltimeMin(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *ShopExcel) PurchaseCountLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopExcel) MutatePurchaseCountLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *ShopExcel) PurchaseCountResetType() PurchaseCountResetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return PurchaseCountResetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopExcel) MutatePurchaseCountResetType(n PurchaseCountResetType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *ShopExcel) BuyReportEventName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopExcel) RestrictBuyWhenInventoryFull() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopExcel) MutateRestrictBuyWhenInventoryFull(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func (rcv *ShopExcel) DisplayTag() ProductDisplayTag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return ProductDisplayTag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopExcel) MutateDisplayTag(n ProductDisplayTag) bool {
	return rcv._tab.MutateInt32Slot(30, int32(n))
}

func (rcv *ShopExcel) ShopUpdateGroupId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopExcel) MutateShopUpdateGroupId(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func ShopExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func ShopExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ShopExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(1, localizeEtcId, 0)
}
func ShopExcelAddCategoryType(builder *flatbuffers.Builder, categoryType ShopCategoryType) {
	builder.PrependInt32Slot(2, int32(categoryType), 0)
}
func ShopExcelAddIsLegacy(builder *flatbuffers.Builder, isLegacy bool) {
	builder.PrependBoolSlot(3, isLegacy, false)
}
func ShopExcelAddGoodsId(builder *flatbuffers.Builder, goodsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(goodsId), 0)
}
func ShopExcelStartGoodsIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ShopExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(5, displayOrder, 0)
}
func ShopExcelAddSalePeriodFrom(builder *flatbuffers.Builder, salePeriodFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(salePeriodFrom), 0)
}
func ShopExcelAddSalePeriodTo(builder *flatbuffers.Builder, salePeriodTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(salePeriodTo), 0)
}
func ShopExcelAddPurchaseCooltimeMin(builder *flatbuffers.Builder, purchaseCooltimeMin int64) {
	builder.PrependInt64Slot(8, purchaseCooltimeMin, 0)
}
func ShopExcelAddPurchaseCountLimit(builder *flatbuffers.Builder, purchaseCountLimit int64) {
	builder.PrependInt64Slot(9, purchaseCountLimit, 0)
}
func ShopExcelAddPurchaseCountResetType(builder *flatbuffers.Builder, purchaseCountResetType PurchaseCountResetType) {
	builder.PrependInt32Slot(10, int32(purchaseCountResetType), 0)
}
func ShopExcelAddBuyReportEventName(builder *flatbuffers.Builder, buyReportEventName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(buyReportEventName), 0)
}
func ShopExcelAddRestrictBuyWhenInventoryFull(builder *flatbuffers.Builder, restrictBuyWhenInventoryFull bool) {
	builder.PrependBoolSlot(12, restrictBuyWhenInventoryFull, false)
}
func ShopExcelAddDisplayTag(builder *flatbuffers.Builder, displayTag ProductDisplayTag) {
	builder.PrependInt32Slot(13, int32(displayTag), 0)
}
func ShopExcelAddShopUpdateGroupId(builder *flatbuffers.Builder, shopUpdateGroupId int32) {
	builder.PrependInt32Slot(14, shopUpdateGroupId, 0)
}
func ShopExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
