// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConquestCalculateExcelDto represents a FlatBuffers table
type ConquestCalculateExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId                   int64      `json:"event_content_id"`
	CalculateConditionParcelType     ParcelType `json:"calculate_condition_parcel_type"`
	CalculateConditionParcelUniqueId int64      `json:"calculate_condition_parcel_unique_id"`
	CalculateConditionParcelAmount   int64      `json:"calculate_condition_parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConquestCalculateExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConquestCalculate"))
	}
	ConquestCalculateExcelStart(b)
	ConquestCalculateExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	ConquestCalculateExcelAddCalculateConditionParcelType(b, fbsutils.Convert(t.CalculateConditionParcelType, t.FlatBuffer.TableKey))
	ConquestCalculateExcelAddCalculateConditionParcelUniqueId(b, fbsutils.Convert(t.CalculateConditionParcelUniqueId, t.FlatBuffer.TableKey))
	ConquestCalculateExcelAddCalculateConditionParcelAmount(b, fbsutils.Convert(t.CalculateConditionParcelAmount, t.FlatBuffer.TableKey))
	return ConquestCalculateExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConquestCalculateExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishConquestCalculateExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConquestCalculateExcelDto) UnmarshalMessage(e *ConquestCalculateExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConquestCalculate"))
	}
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.CalculateConditionParcelType = ParcelType(fbsutils.Convert(int32(e.CalculateConditionParcelType()), t.FlatBuffer.TableKey))
	t.CalculateConditionParcelUniqueId = fbsutils.Convert(e.CalculateConditionParcelUniqueId(), t.FlatBuffer.TableKey)
	t.CalculateConditionParcelAmount = fbsutils.Convert(e.CalculateConditionParcelAmount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConquestCalculateExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConquestCalculateExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConquestCalculateExcelDto) FlatDataName() string {
	return "ConquestCalculateExcel"
}
