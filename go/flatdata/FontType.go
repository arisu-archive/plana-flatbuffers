// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import "strconv"

type FontType int32

const (
	FontTypeNone              FontType = 0
	FontTypeDamage            FontType = 1
	FontTypeBlock             FontType = 2
	FontTypeHeal              FontType = 3
	FontTypeMiss              FontType = 4
	FontTypeCritical          FontType = 5
	FontTypeSkill             FontType = 6
	FontTypeImmune            FontType = 7
	FontTypeDamageResist      FontType = 8
	FontTypeDamageWeak        FontType = 9
	FontTypeCriticalResist    FontType = 10
	FontTypeCriticalWeak      FontType = 11
	FontTypeEffective         FontType = 12
	FontTypeCriticalEffective FontType = 13
)

var EnumNamesFontType = map[FontType]string{
	FontTypeNone:              "None",
	FontTypeDamage:            "Damage",
	FontTypeBlock:             "Block",
	FontTypeHeal:              "Heal",
	FontTypeMiss:              "Miss",
	FontTypeCritical:          "Critical",
	FontTypeSkill:             "Skill",
	FontTypeImmune:            "Immune",
	FontTypeDamageResist:      "DamageResist",
	FontTypeDamageWeak:        "DamageWeak",
	FontTypeCriticalResist:    "CriticalResist",
	FontTypeCriticalWeak:      "CriticalWeak",
	FontTypeEffective:         "Effective",
	FontTypeCriticalEffective: "CriticalEffective",
}

var EnumValuesFontType = map[string]FontType{
	"None":              FontTypeNone,
	"Damage":            FontTypeDamage,
	"Block":             FontTypeBlock,
	"Heal":              FontTypeHeal,
	"Miss":              FontTypeMiss,
	"Critical":          FontTypeCritical,
	"Skill":             FontTypeSkill,
	"Immune":            FontTypeImmune,
	"DamageResist":      FontTypeDamageResist,
	"DamageWeak":        FontTypeDamageWeak,
	"CriticalResist":    FontTypeCriticalResist,
	"CriticalWeak":      FontTypeCriticalWeak,
	"Effective":         FontTypeEffective,
	"CriticalEffective": FontTypeCriticalEffective,
}

func (v FontType) String() string {
	if s, ok := EnumNamesFontType[v]; ok {
		return s
	}
	return "FontType(" + strconv.FormatInt(int64(v), 10) + ")"
}
