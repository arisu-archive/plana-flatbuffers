// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentBoxGachaElementExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentBoxGachaElementExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBoxGachaElementExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentBoxGachaElementExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentBoxGachaElementExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentBoxGachaElementExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBoxGachaElementExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentBoxGachaElementExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentBoxGachaElementExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentBoxGachaElementExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentBoxGachaElementExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentBoxGachaElementExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaElementExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentBoxGachaElementExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaElementExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentBoxGachaElementExcel) Round() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaElementExcel) MutateRound(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentBoxGachaElementExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBoxGachaElementExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func EventContentBoxGachaElementExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventContentBoxGachaElementExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentBoxGachaElementExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func EventContentBoxGachaElementExcelAddRound(builder *flatbuffers.Builder, round int64) {
	builder.PrependInt64Slot(2, round, 0)
}
func EventContentBoxGachaElementExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(3, groupId, 0)
}
func EventContentBoxGachaElementExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
