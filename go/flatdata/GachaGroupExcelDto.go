// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GachaGroupExcelDto represents a FlatBuffers table
type GachaGroupExcelDto struct {
	fbsutils.FlatBuffer
	Id          int64          `json:"id"`
	NameKr      string         `json:"name_kr"`
	IsRecursive bool           `json:"is_recursive"`
	GroupType   GachaGroupType `json:"group_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GachaGroupExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GachaGroup"))
	}
	GachaGroupExcelStart(b)
	GachaGroupExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	GachaGroupExcelAddNameKr(b, b.CreateString(fbsutils.Convert(t.NameKr, t.FlatBuffer.TableKey)))
	GachaGroupExcelAddIsRecursive(b, t.IsRecursive)
	GachaGroupExcelAddGroupType(b, fbsutils.Convert(t.GroupType, t.FlatBuffer.TableKey))
	return GachaGroupExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GachaGroupExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishGachaGroupExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GachaGroupExcelDto) UnmarshalMessage(e *GachaGroupExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GachaGroup"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.NameKr = fbsutils.Convert(string(e.NameKr()), t.FlatBuffer.TableKey)
	t.IsRecursive = e.IsRecursive()
	t.GroupType = GachaGroupType(fbsutils.Convert(int32(e.GroupType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GachaGroupExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGachaGroupExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GachaGroupExcelDto) FlatDataName() string {
	return "GachaGroupExcel"
}
