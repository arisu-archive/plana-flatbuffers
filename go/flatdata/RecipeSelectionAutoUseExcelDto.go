// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// RecipeSelectionAutoUseExcelDto represents a FlatBuffers table
type RecipeSelectionAutoUseExcelDto struct {
	fbsutils.FlatBuffer
	Id           int64      `json:"id"`
	ParcelType   ParcelType `json:"parcel_type"`
	TargetItemId int64      `json:"target_item_id"`
	Priority     []int64    `json:"priority"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *RecipeSelectionAutoUseExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("RecipeSelectionAutoUse"))
	}
	RecipeSelectionAutoUseExcelStart(b)
	RecipeSelectionAutoUseExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	RecipeSelectionAutoUseExcelAddParcelType(b, fbsutils.Convert(t.ParcelType, t.FlatBuffer.TableKey))
	RecipeSelectionAutoUseExcelAddTargetItemId(b, fbsutils.Convert(t.TargetItemId, t.FlatBuffer.TableKey))
	RecipeSelectionAutoUseExcelStartPriorityVector(b, len(t.Priority))
	for i := range len(t.Priority) {
		b.PrependInt64(fbsutils.Convert(t.Priority[len(t.Priority)-i-1], t.FlatBuffer.TableKey))
	}
	RecipeSelectionAutoUseExcelAddPriority(b, b.EndVector(len(t.Priority)))
	return RecipeSelectionAutoUseExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *RecipeSelectionAutoUseExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *RecipeSelectionAutoUseExcelDto) UnmarshalMessage(e *RecipeSelectionAutoUseExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("RecipeSelectionAutoUse"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.ParcelType = ParcelType(fbsutils.Convert(int32(e.ParcelType()), t.FlatBuffer.TableKey))
	t.TargetItemId = fbsutils.Convert(e.TargetItemId(), t.FlatBuffer.TableKey)
	t.Priority = make([]int64, e.PriorityLength())
	for i := range e.PriorityLength() {
		t.Priority[i] = fbsutils.Convert(e.Priority(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *RecipeSelectionAutoUseExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsRecipeSelectionAutoUseExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (RecipeSelectionAutoUseExcelDto) FlatDataName() string {
	return "RecipeSelectionAutoUseExcel"
}
