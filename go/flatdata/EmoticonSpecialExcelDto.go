// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EmoticonSpecialExcelDto represents a FlatBuffers table
type EmoticonSpecialExcelDto struct {
	fbsutils.FlatBuffer
	CharacterUniqueId int64  `json:"character_unique_id"`
	Random            string `json:"random"`
	UniqueId          int64  `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EmoticonSpecialExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EmoticonSpecial"))
	}
	EmoticonSpecialExcelStart(b)
	EmoticonSpecialExcelAddCharacterUniqueId(b, fbsutils.Convert(t.CharacterUniqueId, t.FlatBuffer.TableKey))
	EmoticonSpecialExcelAddRandom(b, b.CreateString(fbsutils.Convert(t.Random, t.FlatBuffer.TableKey)))
	EmoticonSpecialExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return EmoticonSpecialExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EmoticonSpecialExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EmoticonSpecialExcelDto) UnmarshalMessage(e *EmoticonSpecialExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EmoticonSpecial"))
	}
	t.CharacterUniqueId = fbsutils.Convert(e.CharacterUniqueId(), t.FlatBuffer.TableKey)
	t.Random = fbsutils.Convert(string(e.Random()), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EmoticonSpecialExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEmoticonSpecialExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EmoticonSpecialExcelDto) FlatDataName() string {
	return "EmoticonSpecialExcel"
}
