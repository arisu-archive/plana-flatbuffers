// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GroundNodeFlatDto represents a FlatBuffers table
type GroundNodeFlatDto struct {
	fbsutils.FlatBuffer
	X                int32            `json:"x"`
	Y                int32            `json:"y"`
	IsCanNotUseSkill bool             `json:"is_can_not_use_skill"`
	Position         GroundVector3Dto `json:"position"`
	NodeType         GroundNodeType   `json:"node_type"`
	OriginalNodeType GroundNodeType   `json:"original_node_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GroundNodeFlatDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundNodeFlat"))
	}
	t.Position.InitKey(t.FlatBuffer.TableKey)
	__offset_position := t.Position.MarshalModel(b)
	GroundNodeFlatStart(b)
	GroundNodeFlatAddX(b, fbsutils.Convert(t.X, t.FlatBuffer.TableKey))
	GroundNodeFlatAddY(b, fbsutils.Convert(t.Y, t.FlatBuffer.TableKey))
	GroundNodeFlatAddIsCanNotUseSkill(b, t.IsCanNotUseSkill)
	GroundNodeFlatAddPosition(b, __offset_position)
	GroundNodeFlatAddNodeType(b, fbsutils.Convert(t.NodeType, t.FlatBuffer.TableKey))
	GroundNodeFlatAddOriginalNodeType(b, fbsutils.Convert(t.OriginalNodeType, t.FlatBuffer.TableKey))
	return GroundNodeFlatEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GroundNodeFlatDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GroundNodeFlatDto) UnmarshalMessage(e *GroundNodeFlat) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("GroundNodeFlat"))
	}
	t.X = fbsutils.Convert(e.X(), t.FlatBuffer.TableKey)
	t.Y = fbsutils.Convert(e.Y(), t.FlatBuffer.TableKey)
	t.IsCanNotUseSkill = e.IsCanNotUseSkill()
	t.Position.UnmarshalMessage(e.Position(nil))
	t.NodeType = GroundNodeType(fbsutils.Convert(int32(e.NodeType()), t.FlatBuffer.TableKey))
	t.OriginalNodeType = GroundNodeType(fbsutils.Convert(int32(e.OriginalNodeType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GroundNodeFlatDto) Unmarshal(data []byte) error {
	root := GetRootAsGroundNodeFlat(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GroundNodeFlatDto) FlatDataName() string {
	return "GroundNodeFlat"
}
