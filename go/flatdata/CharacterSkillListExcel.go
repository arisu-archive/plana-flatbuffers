// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterSkillListExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterSkillListExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterSkillListExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterSkillListExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCharacterSkillListExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCharacterSkillListExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterSkillListExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterSkillListExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCharacterSkillListExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CharacterSkillListExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterSkillListExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterSkillListExcel) CharacterSkillListGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutateCharacterSkillListGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterSkillListExcel) MinimumGradeCharacterWeapon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutateMinimumGradeCharacterWeapon(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *CharacterSkillListExcel) MinimumTierCharacterGear() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutateMinimumTierCharacterGear(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *CharacterSkillListExcel) FormIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutateFormIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *CharacterSkillListExcel) IsRootMotion() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterSkillListExcel) MutateIsRootMotion(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *CharacterSkillListExcel) IsMoveLeftRight() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterSkillListExcel) MutateIsMoveLeftRight(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *CharacterSkillListExcel) UseRandomExSkillTimeline() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterSkillListExcel) MutateUseRandomExSkillTimeline(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *CharacterSkillListExcel) TsaInteractionId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutateTsaInteractionId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *CharacterSkillListExcel) NormalSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) NormalSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) NormalSkillTimeLineIndex(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CharacterSkillListExcel) NormalSkillTimeLineIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutateNormalSkillTimeLineIndex(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CharacterSkillListExcel) ExSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) ExSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) ExSkillCutInTimeLineIndex(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) ExSkillCutInTimeLineIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) ExSkillLevelTimeLineIndex(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) ExSkillLevelTimeLineIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) PublicSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) PublicSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) PublicSkillTimeLineIndex(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CharacterSkillListExcel) PublicSkillTimeLineIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) MutatePublicSkillTimeLineIndex(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CharacterSkillListExcel) PassiveSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) PassiveSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) LeaderSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) LeaderSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) ExtraPassiveSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) ExtraPassiveSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterSkillListExcel) HiddenPassiveSkillGroupId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterSkillListExcel) HiddenPassiveSkillGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func CharacterSkillListExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func CharacterSkillListExcelAddCharacterSkillListGroupId(builder *flatbuffers.Builder, characterSkillListGroupId int64) {
	builder.PrependInt64Slot(0, characterSkillListGroupId, 0)
}
func CharacterSkillListExcelAddMinimumGradeCharacterWeapon(builder *flatbuffers.Builder, minimumGradeCharacterWeapon int32) {
	builder.PrependInt32Slot(1, minimumGradeCharacterWeapon, 0)
}
func CharacterSkillListExcelAddMinimumTierCharacterGear(builder *flatbuffers.Builder, minimumTierCharacterGear int32) {
	builder.PrependInt32Slot(2, minimumTierCharacterGear, 0)
}
func CharacterSkillListExcelAddFormIndex(builder *flatbuffers.Builder, formIndex int32) {
	builder.PrependInt32Slot(3, formIndex, 0)
}
func CharacterSkillListExcelAddIsRootMotion(builder *flatbuffers.Builder, isRootMotion bool) {
	builder.PrependBoolSlot(4, isRootMotion, false)
}
func CharacterSkillListExcelAddIsMoveLeftRight(builder *flatbuffers.Builder, isMoveLeftRight bool) {
	builder.PrependBoolSlot(5, isMoveLeftRight, false)
}
func CharacterSkillListExcelAddUseRandomExSkillTimeline(builder *flatbuffers.Builder, useRandomExSkillTimeline bool) {
	builder.PrependBoolSlot(6, useRandomExSkillTimeline, false)
}
func CharacterSkillListExcelAddTsaInteractionId(builder *flatbuffers.Builder, tsaInteractionId int64) {
	builder.PrependInt64Slot(7, tsaInteractionId, 0)
}
func CharacterSkillListExcelAddNormalSkillGroupId(builder *flatbuffers.Builder, normalSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(normalSkillGroupId), 0)
}
func CharacterSkillListExcelStartNormalSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddNormalSkillTimeLineIndex(builder *flatbuffers.Builder, normalSkillTimeLineIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(normalSkillTimeLineIndex), 0)
}
func CharacterSkillListExcelStartNormalSkillTimeLineIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddExSkillGroupId(builder *flatbuffers.Builder, exSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(exSkillGroupId), 0)
}
func CharacterSkillListExcelStartExSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddExSkillCutInTimeLineIndex(builder *flatbuffers.Builder, exSkillCutInTimeLineIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(exSkillCutInTimeLineIndex), 0)
}
func CharacterSkillListExcelStartExSkillCutInTimeLineIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddExSkillLevelTimeLineIndex(builder *flatbuffers.Builder, exSkillLevelTimeLineIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(exSkillLevelTimeLineIndex), 0)
}
func CharacterSkillListExcelStartExSkillLevelTimeLineIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddPublicSkillGroupId(builder *flatbuffers.Builder, publicSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(publicSkillGroupId), 0)
}
func CharacterSkillListExcelStartPublicSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddPublicSkillTimeLineIndex(builder *flatbuffers.Builder, publicSkillTimeLineIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(publicSkillTimeLineIndex), 0)
}
func CharacterSkillListExcelStartPublicSkillTimeLineIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddPassiveSkillGroupId(builder *flatbuffers.Builder, passiveSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(passiveSkillGroupId), 0)
}
func CharacterSkillListExcelStartPassiveSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddLeaderSkillGroupId(builder *flatbuffers.Builder, leaderSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(leaderSkillGroupId), 0)
}
func CharacterSkillListExcelStartLeaderSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddExtraPassiveSkillGroupId(builder *flatbuffers.Builder, extraPassiveSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(extraPassiveSkillGroupId), 0)
}
func CharacterSkillListExcelStartExtraPassiveSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelAddHiddenPassiveSkillGroupId(builder *flatbuffers.Builder, hiddenPassiveSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(hiddenPassiveSkillGroupId), 0)
}
func CharacterSkillListExcelStartHiddenPassiveSkillGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterSkillListExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
