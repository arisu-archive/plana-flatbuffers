// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TrophyCollectionExcelDto represents a FlatBuffers table
type TrophyCollectionExcelDto struct {
	fbsutils.FlatBuffer
	GroupId        int64   `json:"group_id"`
	LocalizeCodeId uint32  `json:"localize_code_id"`
	FurnitureId    []int64 `json:"furniture_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TrophyCollectionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TrophyCollection"))
	}
	TrophyCollectionExcelStart(b)
	TrophyCollectionExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	TrophyCollectionExcelAddLocalizeCodeId(b, fbsutils.Convert(t.LocalizeCodeId, t.FlatBuffer.TableKey))
	TrophyCollectionExcelStartFurnitureIdVector(b, len(t.FurnitureId))
	for i := range len(t.FurnitureId) {
		b.PrependInt64(fbsutils.Convert(t.FurnitureId[len(t.FurnitureId)-i-1], t.FlatBuffer.TableKey))
	}
	TrophyCollectionExcelAddFurnitureId(b, b.EndVector(len(t.FurnitureId)))
	return TrophyCollectionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TrophyCollectionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TrophyCollectionExcelDto) UnmarshalMessage(e *TrophyCollectionExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("TrophyCollection"))
	}
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.LocalizeCodeId = fbsutils.Convert(e.LocalizeCodeId(), t.FlatBuffer.TableKey)
	t.FurnitureId = make([]int64, e.FurnitureIdLength())
	for i := range e.FurnitureIdLength() {
		t.FurnitureId[i] = fbsutils.Convert(e.FurnitureId(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TrophyCollectionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTrophyCollectionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TrophyCollectionExcelDto) FlatDataName() string {
	return "TrophyCollectionExcel"
}
