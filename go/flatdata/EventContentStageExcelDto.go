// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentStageExcelDto represents a FlatBuffers table
type EventContentStageExcelDto struct {
	fbsutils.FlatBuffer
	Id                                       int64                `json:"id"`
	Name                                     string               `json:"name"`
	EventContentId                           int64                `json:"event_content_id"`
	StageDifficulty                          StageDifficulty      `json:"stage_difficulty"`
	StageNumber                              string               `json:"stage_number"`
	StageDisplay                             int32                `json:"stage_display"`
	PrevStageId                              int64                `json:"prev_stage_id"`
	OpenDate                                 int64                `json:"open_date"`
	OpenEventPoint                           int64                `json:"open_event_point"`
	OpenConditionScenarioPermanentSubEventId int64                `json:"open_condition_scenario_permanent_sub_event_id"`
	PrevStageSubEventId                      int64                `json:"prev_stage_sub_event_id"`
	OpenConditionScenarioId                  int64                `json:"open_condition_scenario_id"`
	OpenConditionContentType                 EventContentType     `json:"open_condition_content_type"`
	OpenConditionContentId                   int64                `json:"open_condition_content_id"`
	BattleDuration                           int64                `json:"battle_duration"`
	StageEnterCostType                       ParcelType           `json:"stage_enter_cost_type"`
	StageEnterCostId                         int64                `json:"stage_enter_cost_id"`
	StageEnterCostAmount                     int32                `json:"stage_enter_cost_amount"`
	StageEnterEchelonCount                   int32                `json:"stage_enter_echelon_count"`
	StarConditionTacticRankSCount            int64                `json:"star_condition_tactic_rank_s_count"`
	StarConditionTurnCount                   int64                `json:"star_condition_turn_count"`
	EnterScenarioGroupId                     []int64              `json:"enter_scenario_group_id"`
	ClearScenarioGroupId                     []int64              `json:"clear_scenario_group_id"`
	StrategyMap                              string               `json:"strategy_map"`
	StrategyMapBg                            string               `json:"strategy_map_bg"`
	EventContentStageRewardId                int64                `json:"event_content_stage_reward_id"`
	MaxTurn                                  int32                `json:"max_turn"`
	StageTopography                          StageTopography      `json:"stage_topography"`
	RecommandLevel                           int32                `json:"recommand_level"`
	BgmId                                    string               `json:"bgm_id"`
	StrategyEnvironment                      StrategyEnvironment  `json:"strategy_environment"`
	GroundId                                 int64                `json:"ground_id"`
	ContentType                              ContentType          `json:"content_type"`
	BgmIdC9738509                            int64                `json:"bgm_id_c9738509"`
	InstantClear                             bool                 `json:"instant_clear"`
	BuffContentId                            int64                `json:"buff_content_id"`
	FixedEchelonId                           int64                `json:"fixed_echelon_id"`
	ChallengeDisplay                         bool                 `json:"challenge_display"`
	StarGoal                                 []StarGoalType       `json:"star_goal"`
	StarGoalAmount                           []int32              `json:"star_goal_amount"`
	IsDefeatBattle                           bool                 `json:"is_defeat_battle"`
	StageHint                                uint32               `json:"stage_hint"`
	EchelonExtensionType                     EchelonExtensionType `json:"echelon_extension_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentStage"))
	}
	EventContentStageExcelStart(b)
	EventContentStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EventContentStageExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	EventContentStageExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageDifficulty(b, fbsutils.Convert(t.StageDifficulty, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageNumber(b, b.CreateString(fbsutils.Convert(t.StageNumber, t.FlatBuffer.TableKey)))
	EventContentStageExcelAddStageDisplay(b, fbsutils.Convert(t.StageDisplay, t.FlatBuffer.TableKey))
	EventContentStageExcelAddPrevStageId(b, fbsutils.Convert(t.PrevStageId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddOpenDate(b, fbsutils.Convert(t.OpenDate, t.FlatBuffer.TableKey))
	EventContentStageExcelAddOpenEventPoint(b, fbsutils.Convert(t.OpenEventPoint, t.FlatBuffer.TableKey))
	EventContentStageExcelAddOpenConditionScenarioPermanentSubEventId(b, fbsutils.Convert(t.OpenConditionScenarioPermanentSubEventId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddPrevStageSubEventId(b, fbsutils.Convert(t.PrevStageSubEventId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddOpenConditionScenarioId(b, fbsutils.Convert(t.OpenConditionScenarioId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddOpenConditionContentType(b, fbsutils.Convert(t.OpenConditionContentType, t.FlatBuffer.TableKey))
	EventContentStageExcelAddOpenConditionContentId(b, fbsutils.Convert(t.OpenConditionContentId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageEnterCostType(b, fbsutils.Convert(t.StageEnterCostType, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageEnterCostId(b, fbsutils.Convert(t.StageEnterCostId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageEnterCostAmount(b, fbsutils.Convert(t.StageEnterCostAmount, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageEnterEchelonCount(b, fbsutils.Convert(t.StageEnterEchelonCount, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStarConditionTacticRankSCount(b, fbsutils.Convert(t.StarConditionTacticRankSCount, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStarConditionTurnCount(b, fbsutils.Convert(t.StarConditionTurnCount, t.FlatBuffer.TableKey))
	EventContentStageExcelStartEnterScenarioGroupIdVector(b, len(t.EnterScenarioGroupId))
	for i := range len(t.EnterScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.EnterScenarioGroupId[len(t.EnterScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentStageExcelAddEnterScenarioGroupId(b, b.EndVector(len(t.EnterScenarioGroupId)))
	EventContentStageExcelStartClearScenarioGroupIdVector(b, len(t.ClearScenarioGroupId))
	for i := range len(t.ClearScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.ClearScenarioGroupId[len(t.ClearScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentStageExcelAddClearScenarioGroupId(b, b.EndVector(len(t.ClearScenarioGroupId)))
	EventContentStageExcelAddStrategyMap(b, b.CreateString(fbsutils.Convert(t.StrategyMap, t.FlatBuffer.TableKey)))
	EventContentStageExcelAddStrategyMapBg(b, b.CreateString(fbsutils.Convert(t.StrategyMapBg, t.FlatBuffer.TableKey)))
	EventContentStageExcelAddEventContentStageRewardId(b, fbsutils.Convert(t.EventContentStageRewardId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddMaxTurn(b, fbsutils.Convert(t.MaxTurn, t.FlatBuffer.TableKey))
	EventContentStageExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	EventContentStageExcelAddRecommandLevel(b, fbsutils.Convert(t.RecommandLevel, t.FlatBuffer.TableKey))
	EventContentStageExcelAddBgmId(b, b.CreateString(fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey)))
	EventContentStageExcelAddStrategyEnvironment(b, fbsutils.Convert(t.StrategyEnvironment, t.FlatBuffer.TableKey))
	EventContentStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddContentType(b, fbsutils.Convert(t.ContentType, t.FlatBuffer.TableKey))
	EventContentStageExcelAddBgmIdC9738509(b, fbsutils.Convert(t.BgmIdC9738509, t.FlatBuffer.TableKey))
	EventContentStageExcelAddInstantClear(b, t.InstantClear)
	EventContentStageExcelAddBuffContentId(b, fbsutils.Convert(t.BuffContentId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddFixedEchelonId(b, fbsutils.Convert(t.FixedEchelonId, t.FlatBuffer.TableKey))
	EventContentStageExcelAddChallengeDisplay(b, t.ChallengeDisplay)
	EventContentStageExcelStartStarGoalVector(b, len(t.StarGoal))
	for i := range len(t.StarGoal) {
		b.PrependInt32(fbsutils.Convert(int32(t.StarGoal[len(t.StarGoal)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentStageExcelAddStarGoal(b, b.EndVector(len(t.StarGoal)))
	EventContentStageExcelStartStarGoalAmountVector(b, len(t.StarGoalAmount))
	for i := range len(t.StarGoalAmount) {
		b.PrependInt32(fbsutils.Convert(t.StarGoalAmount[len(t.StarGoalAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentStageExcelAddStarGoalAmount(b, b.EndVector(len(t.StarGoalAmount)))
	EventContentStageExcelAddIsDefeatBattle(b, t.IsDefeatBattle)
	EventContentStageExcelAddStageHint(b, fbsutils.Convert(t.StageHint, t.FlatBuffer.TableKey))
	EventContentStageExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	return EventContentStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishEventContentStageExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentStageExcelDto) UnmarshalMessage(e *EventContentStageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentStage"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.StageDifficulty = StageDifficulty(fbsutils.Convert(int32(e.StageDifficulty()), t.FlatBuffer.TableKey))
	t.StageNumber = fbsutils.Convert(string(e.StageNumber()), t.FlatBuffer.TableKey)
	t.StageDisplay = fbsutils.Convert(e.StageDisplay(), t.FlatBuffer.TableKey)
	t.PrevStageId = fbsutils.Convert(e.PrevStageId(), t.FlatBuffer.TableKey)
	t.OpenDate = fbsutils.Convert(e.OpenDate(), t.FlatBuffer.TableKey)
	t.OpenEventPoint = fbsutils.Convert(e.OpenEventPoint(), t.FlatBuffer.TableKey)
	t.OpenConditionScenarioPermanentSubEventId = fbsutils.Convert(e.OpenConditionScenarioPermanentSubEventId(), t.FlatBuffer.TableKey)
	t.PrevStageSubEventId = fbsutils.Convert(e.PrevStageSubEventId(), t.FlatBuffer.TableKey)
	t.OpenConditionScenarioId = fbsutils.Convert(e.OpenConditionScenarioId(), t.FlatBuffer.TableKey)
	t.OpenConditionContentType = EventContentType(fbsutils.Convert(int32(e.OpenConditionContentType()), t.FlatBuffer.TableKey))
	t.OpenConditionContentId = fbsutils.Convert(e.OpenConditionContentId(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.StageEnterCostType = ParcelType(fbsutils.Convert(int32(e.StageEnterCostType()), t.FlatBuffer.TableKey))
	t.StageEnterCostId = fbsutils.Convert(e.StageEnterCostId(), t.FlatBuffer.TableKey)
	t.StageEnterCostAmount = fbsutils.Convert(e.StageEnterCostAmount(), t.FlatBuffer.TableKey)
	t.StageEnterEchelonCount = fbsutils.Convert(e.StageEnterEchelonCount(), t.FlatBuffer.TableKey)
	t.StarConditionTacticRankSCount = fbsutils.Convert(e.StarConditionTacticRankSCount(), t.FlatBuffer.TableKey)
	t.StarConditionTurnCount = fbsutils.Convert(e.StarConditionTurnCount(), t.FlatBuffer.TableKey)
	t.EnterScenarioGroupId = make([]int64, e.EnterScenarioGroupIdLength())
	for i := range e.EnterScenarioGroupIdLength() {
		t.EnterScenarioGroupId[i] = fbsutils.Convert(e.EnterScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.ClearScenarioGroupId = make([]int64, e.ClearScenarioGroupIdLength())
	for i := range e.ClearScenarioGroupIdLength() {
		t.ClearScenarioGroupId[i] = fbsutils.Convert(e.ClearScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.StrategyMap = fbsutils.Convert(string(e.StrategyMap()), t.FlatBuffer.TableKey)
	t.StrategyMapBg = fbsutils.Convert(string(e.StrategyMapBg()), t.FlatBuffer.TableKey)
	t.EventContentStageRewardId = fbsutils.Convert(e.EventContentStageRewardId(), t.FlatBuffer.TableKey)
	t.MaxTurn = fbsutils.Convert(e.MaxTurn(), t.FlatBuffer.TableKey)
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	t.RecommandLevel = fbsutils.Convert(e.RecommandLevel(), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(string(e.BgmId()), t.FlatBuffer.TableKey)
	t.StrategyEnvironment = StrategyEnvironment(fbsutils.Convert(int32(e.StrategyEnvironment()), t.FlatBuffer.TableKey))
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.ContentType = ContentType(fbsutils.Convert(int32(e.ContentType()), t.FlatBuffer.TableKey))
	t.BgmIdC9738509 = fbsutils.Convert(e.BgmIdC9738509(), t.FlatBuffer.TableKey)
	t.InstantClear = e.InstantClear()
	t.BuffContentId = fbsutils.Convert(e.BuffContentId(), t.FlatBuffer.TableKey)
	t.FixedEchelonId = fbsutils.Convert(e.FixedEchelonId(), t.FlatBuffer.TableKey)
	t.ChallengeDisplay = e.ChallengeDisplay()
	t.StarGoal = make([]StarGoalType, e.StarGoalLength())
	for i := range e.StarGoalLength() {
		t.StarGoal[i] = StarGoalType(fbsutils.Convert(int32(e.StarGoal(i)), t.FlatBuffer.TableKey))
	}
	t.StarGoalAmount = make([]int32, e.StarGoalAmountLength())
	for i := range e.StarGoalAmountLength() {
		t.StarGoalAmount[i] = fbsutils.Convert(e.StarGoalAmount(i), t.FlatBuffer.TableKey)
	}
	t.IsDefeatBattle = e.IsDefeatBattle()
	t.StageHint = fbsutils.Convert(e.StageHint(), t.FlatBuffer.TableKey)
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentStageExcelDto) FlatDataName() string {
	return "EventContentStageExcel"
}
