// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ClearDeckRuleExcelDto represents a FlatBuffers table
type ClearDeckRuleExcelDto struct {
	fbsutils.FlatBuffer
	ContentType ContentType `json:"content_type"`
	SizeLimit   int64       `json:"size_limit"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ClearDeckRuleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ClearDeckRule"))
	}
	ClearDeckRuleExcelStart(b)
	ClearDeckRuleExcelAddContentType(b, fbsutils.Convert(t.ContentType, t.FlatBuffer.TableKey))
	ClearDeckRuleExcelAddSizeLimit(b, fbsutils.Convert(t.SizeLimit, t.FlatBuffer.TableKey))
	return ClearDeckRuleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ClearDeckRuleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishClearDeckRuleExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ClearDeckRuleExcelDto) UnmarshalMessage(e *ClearDeckRuleExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ClearDeckRule"))
	}
	t.ContentType = ContentType(fbsutils.Convert(int32(e.ContentType()), t.FlatBuffer.TableKey))
	t.SizeLimit = fbsutils.Convert(e.SizeLimit(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ClearDeckRuleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsClearDeckRuleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ClearDeckRuleExcelDto) FlatDataName() string {
	return "ClearDeckRuleExcel"
}
