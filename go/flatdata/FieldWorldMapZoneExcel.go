// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldWorldMapZoneExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldWorldMapZoneExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldWorldMapZoneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldWorldMapZoneExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFieldWorldMapZoneExcel(buf []byte, offset flatbuffers.UOffsetT) *FieldWorldMapZoneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldWorldMapZoneExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FieldWorldMapZoneExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldWorldMapZoneExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldWorldMapZoneExcel) NewTagDisplay() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FieldWorldMapZoneExcel) MutateNewTagDisplay(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *FieldWorldMapZoneExcel) LocalizeCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateLocalizeCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *FieldWorldMapZoneExcel) WorldMapButtonType() FieldWorldMapButtonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return FieldWorldMapButtonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateWorldMapButtonType(n FieldWorldMapButtonType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *FieldWorldMapZoneExcel) FieldStageInteractionId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateFieldStageInteractionId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *FieldWorldMapZoneExcel) ResultFieldScene() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateResultFieldScene(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *FieldWorldMapZoneExcel) CloseConditionId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateCloseConditionId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *FieldWorldMapZoneExcel) CloseConditionType() FieldConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return FieldConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateCloseConditionType(n FieldConditionType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *FieldWorldMapZoneExcel) OpenConditionId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateOpenConditionId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *FieldWorldMapZoneExcel) OpenConditionType() FieldConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return FieldConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateOpenConditionType(n FieldConditionType) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *FieldWorldMapZoneExcel) Date() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateDate(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *FieldWorldMapZoneExcel) GroupId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateGroupId(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *FieldWorldMapZoneExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FieldWorldMapZoneExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func FieldWorldMapZoneExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func FieldWorldMapZoneExcelAddNewTagDisplay(builder *flatbuffers.Builder, newTagDisplay bool) {
	builder.PrependBoolSlot(0, newTagDisplay, false)
}
func FieldWorldMapZoneExcelAddLocalizeCode(builder *flatbuffers.Builder, localizeCode uint32) {
	builder.PrependUint32Slot(1, localizeCode, 0)
}
func FieldWorldMapZoneExcelAddWorldMapButtonType(builder *flatbuffers.Builder, worldMapButtonType FieldWorldMapButtonType) {
	builder.PrependInt32Slot(2, int32(worldMapButtonType), 0)
}
func FieldWorldMapZoneExcelAddFieldStageInteractionId(builder *flatbuffers.Builder, fieldStageInteractionId int64) {
	builder.PrependInt64Slot(3, fieldStageInteractionId, 0)
}
func FieldWorldMapZoneExcelAddResultFieldScene(builder *flatbuffers.Builder, resultFieldScene int64) {
	builder.PrependInt64Slot(4, resultFieldScene, 0)
}
func FieldWorldMapZoneExcelAddCloseConditionId(builder *flatbuffers.Builder, closeConditionId int64) {
	builder.PrependInt64Slot(5, closeConditionId, 0)
}
func FieldWorldMapZoneExcelAddCloseConditionType(builder *flatbuffers.Builder, closeConditionType FieldConditionType) {
	builder.PrependInt32Slot(6, int32(closeConditionType), 0)
}
func FieldWorldMapZoneExcelAddOpenConditionId(builder *flatbuffers.Builder, openConditionId int64) {
	builder.PrependInt64Slot(7, openConditionId, 0)
}
func FieldWorldMapZoneExcelAddOpenConditionType(builder *flatbuffers.Builder, openConditionType FieldConditionType) {
	builder.PrependInt32Slot(8, int32(openConditionType), 0)
}
func FieldWorldMapZoneExcelAddDate(builder *flatbuffers.Builder, date int32) {
	builder.PrependInt32Slot(9, date, 0)
}
func FieldWorldMapZoneExcelAddGroupId(builder *flatbuffers.Builder, groupId int32) {
	builder.PrependInt32Slot(10, groupId, 0)
}
func FieldWorldMapZoneExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(11, id, 0)
}
func FieldWorldMapZoneExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
