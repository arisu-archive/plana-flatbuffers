// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TranscendenceRecipeExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTranscendenceRecipeExcel(buf []byte, offset flatbuffers.UOffsetT) *TranscendenceRecipeExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TranscendenceRecipeExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTranscendenceRecipeExcel(buf []byte, offset flatbuffers.UOffsetT) *TranscendenceRecipeExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TranscendenceRecipeExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TranscendenceRecipeExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TranscendenceRecipeExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TranscendenceRecipeExcel) ParcelAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) ParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) MutateParcelAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *TranscendenceRecipeExcel) ParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) ParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) MutateParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *TranscendenceRecipeExcel) ParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) ParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) MutateParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *TranscendenceRecipeExcel) CostCurrencyAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) MutateCostCurrencyAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *TranscendenceRecipeExcel) CostCurrencyType() CurrencyTypes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return CurrencyTypes(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) MutateCostCurrencyType(n CurrencyTypes) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *TranscendenceRecipeExcel) DevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TranscendenceRecipeExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TranscendenceRecipeExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func TranscendenceRecipeExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TranscendenceRecipeExcelAddParcelAmount(builder *flatbuffers.Builder, parcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(parcelAmount), 0)
}
func TranscendenceRecipeExcelStartParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TranscendenceRecipeExcelAddParcelId(builder *flatbuffers.Builder, parcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(parcelId), 0)
}
func TranscendenceRecipeExcelStartParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TranscendenceRecipeExcelAddParcelType(builder *flatbuffers.Builder, parcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(parcelType), 0)
}
func TranscendenceRecipeExcelStartParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TranscendenceRecipeExcelAddCostCurrencyAmount(builder *flatbuffers.Builder, costCurrencyAmount int64) {
	builder.PrependInt64Slot(3, costCurrencyAmount, 0)
}
func TranscendenceRecipeExcelAddCostCurrencyType(builder *flatbuffers.Builder, costCurrencyType CurrencyTypes) {
	builder.PrependInt32Slot(4, int32(costCurrencyType), 0)
}
func TranscendenceRecipeExcelAddDevName(builder *flatbuffers.Builder, devName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(devName), 0)
}
func TranscendenceRecipeExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(6, id, 0)
}
func TranscendenceRecipeExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
