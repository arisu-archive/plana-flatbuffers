// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WeekDungeonOpenScheduleExcelDto represents a FlatBuffers table
type WeekDungeonOpenScheduleExcelDto struct {
	fbsutils.FlatBuffer
	WeekDay WeekDay           `json:"week_day"`
	Open    []WeekDungeonType `json:"open"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WeekDungeonOpenScheduleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WeekDungeonOpenSchedule"))
	}
	WeekDungeonOpenScheduleExcelStart(b)
	WeekDungeonOpenScheduleExcelAddWeekDay(b, fbsutils.Convert(t.WeekDay, t.FlatBuffer.TableKey))
	WeekDungeonOpenScheduleExcelStartOpenVector(b, len(t.Open))
	for i := range len(t.Open) {
		b.PrependInt32(fbsutils.Convert(int32(t.Open[len(t.Open)-i-1]), t.FlatBuffer.TableKey))
	}
	WeekDungeonOpenScheduleExcelAddOpen(b, b.EndVector(len(t.Open)))
	return WeekDungeonOpenScheduleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WeekDungeonOpenScheduleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WeekDungeonOpenScheduleExcelDto) UnmarshalMessage(e *WeekDungeonOpenScheduleExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("WeekDungeonOpenSchedule"))
	}
	t.WeekDay = WeekDay(fbsutils.Convert(int32(e.WeekDay()), t.FlatBuffer.TableKey))
	t.Open = make([]WeekDungeonType, e.OpenLength())
	for i := range e.OpenLength() {
		t.Open[i] = WeekDungeonType(fbsutils.Convert(int32(e.Open(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WeekDungeonOpenScheduleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsWeekDungeonOpenScheduleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WeekDungeonOpenScheduleExcelDto) FlatDataName() string {
	return "WeekDungeonOpenScheduleExcel"
}
