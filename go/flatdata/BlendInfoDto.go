// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BlendInfoDto represents a FlatBuffers table
type BlendInfoDto struct {
	fbsutils.FlatBuffer
	From  int32   `json:"from"`
	To    int32   `json:"to"`
	Blend float32 `json:"blend"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BlendInfoDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BlendInfo"))
	}
	BlendInfoStart(b)
	BlendInfoAddFrom(b, fbsutils.Convert(t.From, t.FlatBuffer.TableKey))
	BlendInfoAddTo(b, fbsutils.Convert(t.To, t.FlatBuffer.TableKey))
	BlendInfoAddBlend(b, fbsutils.Convert(t.Blend, t.FlatBuffer.TableKey))
	return BlendInfoEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BlendInfoDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BlendInfoDto) UnmarshalMessage(e *BlendInfo) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("BlendInfo"))
	}
	t.From = fbsutils.Convert(e.From(), t.FlatBuffer.TableKey)
	t.To = fbsutils.Convert(e.To(), t.FlatBuffer.TableKey)
	t.Blend = fbsutils.Convert(e.Blend(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BlendInfoDto) Unmarshal(data []byte) error {
	root := GetRootAsBlendInfo(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BlendInfoDto) FlatDataName() string {
	return "BlendInfo"
}
