// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EliminateRaidStageExcelDto represents a FlatBuffers table
type EliminateRaidStageExcelDto struct {
	fbsutils.FlatBuffer
	Id                            int64                `json:"id"`
	UseBossIndex                  bool                 `json:"use_boss_index"`
	UseBossAiPhaseSync            bool                 `json:"use_boss_ai_phase_sync"`
	RaidBossGroup                 string               `json:"raid_boss_group"`
	RaidEnterCostType             ParcelType           `json:"raid_enter_cost_type"`
	RaidEnterCostId               int64                `json:"raid_enter_cost_id"`
	RaidEnterCostAmount           int32                `json:"raid_enter_cost_amount"`
	BossSpinePath                 string               `json:"boss_spine_path"`
	PortraitPath                  string               `json:"portrait_path"`
	BgPath                        string               `json:"bg_path"`
	RaidCharacterId               int64                `json:"raid_character_id"`
	BossCharacterId               []int64              `json:"boss_character_id"`
	Difficulty                    Difficulty           `json:"difficulty"`
	IsOpen                        bool                 `json:"is_open"`
	MaxPlayerCount                int64                `json:"max_player_count"`
	RaidRoomLifeTime              int32                `json:"raid_room_life_time"`
	BattleDuration                int64                `json:"battle_duration"`
	GroundId                      int64                `json:"ground_id"`
	GroundDevName                 string               `json:"ground_dev_name"`
	EnterTimeLine                 string               `json:"enter_time_line"`
	TacticEnvironment             TacticEnvironment    `json:"tactic_environment"`
	DefaultClearScore             int64                `json:"default_clear_score"`
	MaximumScore                  int64                `json:"maximum_score"`
	PerSecondMinusScore           int64                `json:"per_second_minus_score"`
	HpPercentScore                int64                `json:"hp_percent_score"`
	MinimumAcquisitionScore       int64                `json:"minimum_acquisition_score"`
	MaximumAcquisitionScore       int64                `json:"maximum_acquisition_score"`
	RaidRewardGroupId             int64                `json:"raid_reward_group_id"`
	BattleReadyTimelinePath       []string             `json:"battle_ready_timeline_path"`
	BattleReadyTimelinePhaseStart []int32              `json:"battle_ready_timeline_phase_start"`
	BattleReadyTimelinePhaseEnd   []int32              `json:"battle_ready_timeline_phase_end"`
	VictoryTimelinePath           string               `json:"victory_timeline_path"`
	PhaseChangeTimelinePath       string               `json:"phase_change_timeline_path"`
	TimeLinePhase                 int64                `json:"time_line_phase"`
	EnterScenarioKey              uint32               `json:"enter_scenario_key"`
	ClearScenarioKey              uint32               `json:"clear_scenario_key"`
	ShowSkillCard                 bool                 `json:"show_skill_card"`
	BossBgInfoKey                 uint32               `json:"boss_bg_info_key"`
	EchelonExtensionType          EchelonExtensionType `json:"echelon_extension_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EliminateRaidStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EliminateRaidStage"))
	}
	__offset_raid_boss_group := b.CreateString(fbsutils.Convert(t.RaidBossGroup, t.FlatBuffer.TableKey))
	__offset_boss_spine_path := b.CreateString(fbsutils.Convert(t.BossSpinePath, t.FlatBuffer.TableKey))
	__offset_portrait_path := b.CreateString(fbsutils.Convert(t.PortraitPath, t.FlatBuffer.TableKey))
	__offset_bg_path := b.CreateString(fbsutils.Convert(t.BgPath, t.FlatBuffer.TableKey))
	__offset_ground_dev_name := b.CreateString(fbsutils.Convert(t.GroundDevName, t.FlatBuffer.TableKey))
	__offset_enter_time_line := b.CreateString(fbsutils.Convert(t.EnterTimeLine, t.FlatBuffer.TableKey))
	var __offset_battle_ready_timeline_path flatbuffers.UOffsetT
	__stringOffsets_battle_ready_timeline_path := make([]flatbuffers.UOffsetT, len(t.BattleReadyTimelinePath))
	for i := range len(t.BattleReadyTimelinePath) {
		__stringOffsets_battle_ready_timeline_path[i] = b.CreateString(fbsutils.Convert(t.BattleReadyTimelinePath[i], t.FlatBuffer.TableKey))
	}
	EliminateRaidStageExcelStartBattleReadyTimelinePathVector(b, len(t.BattleReadyTimelinePath))
	for i := range len(t.BattleReadyTimelinePath) {
		b.PrependUOffsetT(__stringOffsets_battle_ready_timeline_path[len(t.BattleReadyTimelinePath)-i-1])
	}
	__offset_battle_ready_timeline_path = b.EndVector(len(t.BattleReadyTimelinePath))
	__offset_victory_timeline_path := b.CreateString(fbsutils.Convert(t.VictoryTimelinePath, t.FlatBuffer.TableKey))
	__offset_phase_change_timeline_path := b.CreateString(fbsutils.Convert(t.PhaseChangeTimelinePath, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelStart(b)
	EliminateRaidStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddUseBossIndex(b, t.UseBossIndex)
	EliminateRaidStageExcelAddUseBossAiPhaseSync(b, t.UseBossAiPhaseSync)
	EliminateRaidStageExcelAddRaidBossGroup(b, __offset_raid_boss_group)
	EliminateRaidStageExcelAddRaidEnterCostType(b, fbsutils.Convert(t.RaidEnterCostType, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddRaidEnterCostId(b, fbsutils.Convert(t.RaidEnterCostId, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddRaidEnterCostAmount(b, fbsutils.Convert(t.RaidEnterCostAmount, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddBossSpinePath(b, __offset_boss_spine_path)
	EliminateRaidStageExcelAddPortraitPath(b, __offset_portrait_path)
	EliminateRaidStageExcelAddBgPath(b, __offset_bg_path)
	EliminateRaidStageExcelAddRaidCharacterId(b, fbsutils.Convert(t.RaidCharacterId, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelStartBossCharacterIdVector(b, len(t.BossCharacterId))
	for i := range len(t.BossCharacterId) {
		b.PrependInt64(fbsutils.Convert(t.BossCharacterId[len(t.BossCharacterId)-i-1], t.FlatBuffer.TableKey))
	}
	EliminateRaidStageExcelAddBossCharacterId(b, b.EndVector(len(t.BossCharacterId)))
	EliminateRaidStageExcelAddDifficulty(b, fbsutils.Convert(t.Difficulty, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddIsOpen(b, t.IsOpen)
	EliminateRaidStageExcelAddMaxPlayerCount(b, fbsutils.Convert(t.MaxPlayerCount, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddRaidRoomLifeTime(b, fbsutils.Convert(t.RaidRoomLifeTime, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddGroundDevName(b, __offset_ground_dev_name)
	EliminateRaidStageExcelAddEnterTimeLine(b, __offset_enter_time_line)
	EliminateRaidStageExcelAddTacticEnvironment(b, fbsutils.Convert(t.TacticEnvironment, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddDefaultClearScore(b, fbsutils.Convert(t.DefaultClearScore, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddMaximumScore(b, fbsutils.Convert(t.MaximumScore, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddPerSecondMinusScore(b, fbsutils.Convert(t.PerSecondMinusScore, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddHpPercentScore(b, fbsutils.Convert(t.HpPercentScore, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddMinimumAcquisitionScore(b, fbsutils.Convert(t.MinimumAcquisitionScore, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddMaximumAcquisitionScore(b, fbsutils.Convert(t.MaximumAcquisitionScore, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddRaidRewardGroupId(b, fbsutils.Convert(t.RaidRewardGroupId, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddBattleReadyTimelinePath(b, __offset_battle_ready_timeline_path)
	EliminateRaidStageExcelStartBattleReadyTimelinePhaseStartVector(b, len(t.BattleReadyTimelinePhaseStart))
	for i := range len(t.BattleReadyTimelinePhaseStart) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseStart[len(t.BattleReadyTimelinePhaseStart)-i-1], t.FlatBuffer.TableKey))
	}
	EliminateRaidStageExcelAddBattleReadyTimelinePhaseStart(b, b.EndVector(len(t.BattleReadyTimelinePhaseStart)))
	EliminateRaidStageExcelStartBattleReadyTimelinePhaseEndVector(b, len(t.BattleReadyTimelinePhaseEnd))
	for i := range len(t.BattleReadyTimelinePhaseEnd) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseEnd[len(t.BattleReadyTimelinePhaseEnd)-i-1], t.FlatBuffer.TableKey))
	}
	EliminateRaidStageExcelAddBattleReadyTimelinePhaseEnd(b, b.EndVector(len(t.BattleReadyTimelinePhaseEnd)))
	EliminateRaidStageExcelAddVictoryTimelinePath(b, __offset_victory_timeline_path)
	EliminateRaidStageExcelAddPhaseChangeTimelinePath(b, __offset_phase_change_timeline_path)
	EliminateRaidStageExcelAddTimeLinePhase(b, fbsutils.Convert(t.TimeLinePhase, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddEnterScenarioKey(b, fbsutils.Convert(t.EnterScenarioKey, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddClearScenarioKey(b, fbsutils.Convert(t.ClearScenarioKey, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddShowSkillCard(b, t.ShowSkillCard)
	EliminateRaidStageExcelAddBossBgInfoKey(b, fbsutils.Convert(t.BossBgInfoKey, t.FlatBuffer.TableKey))
	EliminateRaidStageExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	return EliminateRaidStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EliminateRaidStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EliminateRaidStageExcelDto) UnmarshalMessage(e *EliminateRaidStageExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EliminateRaidStage"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.UseBossIndex = e.UseBossIndex()
	t.UseBossAiPhaseSync = e.UseBossAiPhaseSync()
	t.RaidBossGroup = fbsutils.Convert(string(e.RaidBossGroup()), t.FlatBuffer.TableKey)
	t.RaidEnterCostType = ParcelType(fbsutils.Convert(int32(e.RaidEnterCostType()), t.FlatBuffer.TableKey))
	t.RaidEnterCostId = fbsutils.Convert(e.RaidEnterCostId(), t.FlatBuffer.TableKey)
	t.RaidEnterCostAmount = fbsutils.Convert(e.RaidEnterCostAmount(), t.FlatBuffer.TableKey)
	t.BossSpinePath = fbsutils.Convert(string(e.BossSpinePath()), t.FlatBuffer.TableKey)
	t.PortraitPath = fbsutils.Convert(string(e.PortraitPath()), t.FlatBuffer.TableKey)
	t.BgPath = fbsutils.Convert(string(e.BgPath()), t.FlatBuffer.TableKey)
	t.RaidCharacterId = fbsutils.Convert(e.RaidCharacterId(), t.FlatBuffer.TableKey)
	t.BossCharacterId = make([]int64, e.BossCharacterIdLength())
	for i := range e.BossCharacterIdLength() {
		t.BossCharacterId[i] = fbsutils.Convert(e.BossCharacterId(i), t.FlatBuffer.TableKey)
	}
	t.Difficulty = Difficulty(fbsutils.Convert(int32(e.Difficulty()), t.FlatBuffer.TableKey))
	t.IsOpen = e.IsOpen()
	t.MaxPlayerCount = fbsutils.Convert(e.MaxPlayerCount(), t.FlatBuffer.TableKey)
	t.RaidRoomLifeTime = fbsutils.Convert(e.RaidRoomLifeTime(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.GroundDevName = fbsutils.Convert(string(e.GroundDevName()), t.FlatBuffer.TableKey)
	t.EnterTimeLine = fbsutils.Convert(string(e.EnterTimeLine()), t.FlatBuffer.TableKey)
	t.TacticEnvironment = TacticEnvironment(fbsutils.Convert(int32(e.TacticEnvironment()), t.FlatBuffer.TableKey))
	t.DefaultClearScore = fbsutils.Convert(e.DefaultClearScore(), t.FlatBuffer.TableKey)
	t.MaximumScore = fbsutils.Convert(e.MaximumScore(), t.FlatBuffer.TableKey)
	t.PerSecondMinusScore = fbsutils.Convert(e.PerSecondMinusScore(), t.FlatBuffer.TableKey)
	t.HpPercentScore = fbsutils.Convert(e.HpPercentScore(), t.FlatBuffer.TableKey)
	t.MinimumAcquisitionScore = fbsutils.Convert(e.MinimumAcquisitionScore(), t.FlatBuffer.TableKey)
	t.MaximumAcquisitionScore = fbsutils.Convert(e.MaximumAcquisitionScore(), t.FlatBuffer.TableKey)
	t.RaidRewardGroupId = fbsutils.Convert(e.RaidRewardGroupId(), t.FlatBuffer.TableKey)
	t.BattleReadyTimelinePath = make([]string, e.BattleReadyTimelinePathLength())
	for i := range e.BattleReadyTimelinePathLength() {
		t.BattleReadyTimelinePath[i] = fbsutils.Convert(string(e.BattleReadyTimelinePath(i)), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePhaseStart = make([]int32, e.BattleReadyTimelinePhaseStartLength())
	for i := range e.BattleReadyTimelinePhaseStartLength() {
		t.BattleReadyTimelinePhaseStart[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseStart(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePhaseEnd = make([]int32, e.BattleReadyTimelinePhaseEndLength())
	for i := range e.BattleReadyTimelinePhaseEndLength() {
		t.BattleReadyTimelinePhaseEnd[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseEnd(i), t.FlatBuffer.TableKey)
	}
	t.VictoryTimelinePath = fbsutils.Convert(string(e.VictoryTimelinePath()), t.FlatBuffer.TableKey)
	t.PhaseChangeTimelinePath = fbsutils.Convert(string(e.PhaseChangeTimelinePath()), t.FlatBuffer.TableKey)
	t.TimeLinePhase = fbsutils.Convert(e.TimeLinePhase(), t.FlatBuffer.TableKey)
	t.EnterScenarioKey = fbsutils.Convert(e.EnterScenarioKey(), t.FlatBuffer.TableKey)
	t.ClearScenarioKey = fbsutils.Convert(e.ClearScenarioKey(), t.FlatBuffer.TableKey)
	t.ShowSkillCard = e.ShowSkillCard()
	t.BossBgInfoKey = fbsutils.Convert(e.BossBgInfoKey(), t.FlatBuffer.TableKey)
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EliminateRaidStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEliminateRaidStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EliminateRaidStageExcelDto) FlatDataName() string {
	return "EliminateRaidStageExcel"
}
