// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentBuffExcelTableDto represents a FlatBuffers table
type EventContentBuffExcelTableDto struct {
	fbsutils.FlatBuffer
	DataList []EventContentBuffExcelDto `json:"data_list"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentBuffExcelTableDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentBuff"))
	}
	EventContentBuffExcelTableStart(b)
	EventContentBuffExcelTableStartDataListVector(b, len(t.DataList))
	for i := range len(t.DataList) {
		// The array should be reversed.
		b.PrependUOffsetT(t.DataList[len(t.DataList)-i-1].MarshalModel(b))
	}
	EventContentBuffExcelTableAddDataList(b, b.EndVector(len(t.DataList)))
	return EventContentBuffExcelTableEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentBuffExcelTableDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishEventContentBuffExcelTableBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentBuffExcelTableDto) UnmarshalMessage(e *EventContentBuffExcelTable) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EventContentBuff"))
	}
	t.DataList = make([]EventContentBuffExcelDto, e.DataListLength())
	for i := range e.DataListLength() {
		d := new(EventContentBuffExcel)
		if !e.DataList(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.DataList[i].UnmarshalMessage(d)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentBuffExcelTableDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentBuffExcelTable(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentBuffExcelTableDto) FlatDataName() string {
	return "EventContentBuffExcelTable"
}
