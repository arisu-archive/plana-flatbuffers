// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AcademyMessanger2Excel struct {
	_tab flatbuffers.Table
}

func GetRootAsAcademyMessanger2Excel(buf []byte, offset flatbuffers.UOffsetT) *AcademyMessanger2Excel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AcademyMessanger2Excel{}
	x.Init(buf, n+offset)
	return x
}

func FinishAcademyMessanger2ExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAcademyMessanger2Excel(buf []byte, offset flatbuffers.UOffsetT) *AcademyMessanger2Excel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AcademyMessanger2Excel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAcademyMessanger2ExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AcademyMessanger2Excel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AcademyMessanger2Excel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AcademyMessanger2Excel) MessageGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateMessageGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AcademyMessanger2Excel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *AcademyMessanger2Excel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *AcademyMessanger2Excel) MessageCondition() AcademyMessageConditions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return AcademyMessageConditions(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateMessageCondition(n AcademyMessageConditions) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *AcademyMessanger2Excel) ConditionValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateConditionValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *AcademyMessanger2Excel) PreConditionGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutatePreConditionGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *AcademyMessanger2Excel) PreConditionFavorScheduleId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutatePreConditionFavorScheduleId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *AcademyMessanger2Excel) FavorScheduleId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateFavorScheduleId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *AcademyMessanger2Excel) NextGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateNextGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *AcademyMessanger2Excel) FeedbackTimeMillisec() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateFeedbackTimeMillisec(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *AcademyMessanger2Excel) MessageType() AcademyMessageTypes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return AcademyMessageTypes(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AcademyMessanger2Excel) MutateMessageType(n AcademyMessageTypes) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *AcademyMessanger2Excel) ImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcademyMessanger2Excel) MessageKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcademyMessanger2Excel) MessageJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AcademyMessanger2ExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func AcademyMessanger2ExcelAddMessageGroupId(builder *flatbuffers.Builder, messageGroupId int64) {
	builder.PrependInt64Slot(0, messageGroupId, 0)
}
func AcademyMessanger2ExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func AcademyMessanger2ExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(2, characterId, 0)
}
func AcademyMessanger2ExcelAddMessageCondition(builder *flatbuffers.Builder, messageCondition AcademyMessageConditions) {
	builder.PrependInt32Slot(3, int32(messageCondition), 0)
}
func AcademyMessanger2ExcelAddConditionValue(builder *flatbuffers.Builder, conditionValue int64) {
	builder.PrependInt64Slot(4, conditionValue, 0)
}
func AcademyMessanger2ExcelAddPreConditionGroupId(builder *flatbuffers.Builder, preConditionGroupId int64) {
	builder.PrependInt64Slot(5, preConditionGroupId, 0)
}
func AcademyMessanger2ExcelAddPreConditionFavorScheduleId(builder *flatbuffers.Builder, preConditionFavorScheduleId int64) {
	builder.PrependInt64Slot(6, preConditionFavorScheduleId, 0)
}
func AcademyMessanger2ExcelAddFavorScheduleId(builder *flatbuffers.Builder, favorScheduleId int64) {
	builder.PrependInt64Slot(7, favorScheduleId, 0)
}
func AcademyMessanger2ExcelAddNextGroupId(builder *flatbuffers.Builder, nextGroupId int64) {
	builder.PrependInt64Slot(8, nextGroupId, 0)
}
func AcademyMessanger2ExcelAddFeedbackTimeMillisec(builder *flatbuffers.Builder, feedbackTimeMillisec int64) {
	builder.PrependInt64Slot(9, feedbackTimeMillisec, 0)
}
func AcademyMessanger2ExcelAddMessageType(builder *flatbuffers.Builder, messageType AcademyMessageTypes) {
	builder.PrependInt32Slot(10, int32(messageType), 0)
}
func AcademyMessanger2ExcelAddImagePath(builder *flatbuffers.Builder, imagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(imagePath), 0)
}
func AcademyMessanger2ExcelAddMessageKr(builder *flatbuffers.Builder, messageKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(messageKr), 0)
}
func AcademyMessanger2ExcelAddMessageJp(builder *flatbuffers.Builder, messageJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(messageJp), 0)
}
func AcademyMessanger2ExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
