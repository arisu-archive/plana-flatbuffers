// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CouponStuffExcelDto represents a FlatBuffers table
type CouponStuffExcelDto struct {
	fbsutils.FlatBuffer
	StuffId                    int64      `json:"stuff_id"`
	ParcelType                 ParcelType `json:"parcel_type"`
	ParcelId                   int64      `json:"parcel_id"`
	LimitAmount                int32      `json:"limit_amount"`
	CouponStuffNameLocalizeKey string     `json:"coupon_stuff_name_localize_key"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CouponStuffExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CouponStuff"))
	}
	__offset_coupon_stuff_name_localize_key := b.CreateString(fbsutils.Convert(t.CouponStuffNameLocalizeKey, t.FlatBuffer.TableKey))
	CouponStuffExcelStart(b)
	CouponStuffExcelAddStuffId(b, fbsutils.Convert(t.StuffId, t.FlatBuffer.TableKey))
	CouponStuffExcelAddParcelType(b, fbsutils.Convert(t.ParcelType, t.FlatBuffer.TableKey))
	CouponStuffExcelAddParcelId(b, fbsutils.Convert(t.ParcelId, t.FlatBuffer.TableKey))
	CouponStuffExcelAddLimitAmount(b, fbsutils.Convert(t.LimitAmount, t.FlatBuffer.TableKey))
	CouponStuffExcelAddCouponStuffNameLocalizeKey(b, __offset_coupon_stuff_name_localize_key)
	return CouponStuffExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CouponStuffExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CouponStuffExcelDto) UnmarshalMessage(e *CouponStuffExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CouponStuff"))
	}
	t.StuffId = fbsutils.Convert(e.StuffId(), t.FlatBuffer.TableKey)
	t.ParcelType = ParcelType(fbsutils.Convert(int32(e.ParcelType()), t.FlatBuffer.TableKey))
	t.ParcelId = fbsutils.Convert(e.ParcelId(), t.FlatBuffer.TableKey)
	t.LimitAmount = fbsutils.Convert(e.LimitAmount(), t.FlatBuffer.TableKey)
	t.CouponStuffNameLocalizeKey = fbsutils.Convert(string(e.CouponStuffNameLocalizeKey()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CouponStuffExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCouponStuffExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CouponStuffExcelDto) FlatDataName() string {
	return "CouponStuffExcel"
}
