// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameShootingGeasExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameShootingGeasExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameShootingGeasExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameShootingGeasExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameShootingGeasExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameShootingGeasExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameShootingGeasExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameShootingGeasExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameShootingGeasExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameShootingGeasExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameShootingGeasExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameShootingGeasExcel) GeasType() Geas {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Geas(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameShootingGeasExcel) MutateGeasType(n Geas) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *MiniGameShootingGeasExcel) Icon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameShootingGeasExcel) Probability() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameShootingGeasExcel) MutateProbability(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameShootingGeasExcel) MaxOverlapCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameShootingGeasExcel) MutateMaxOverlapCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *MiniGameShootingGeasExcel) GeasData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameShootingGeasExcel) NeedGeasId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameShootingGeasExcel) MutateNeedGeasId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MiniGameShootingGeasExcel) HideInPausePopup() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameShootingGeasExcel) MutateHideInPausePopup(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func MiniGameShootingGeasExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MiniGameShootingGeasExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(0, uniqueId, 0)
}
func MiniGameShootingGeasExcelAddGeasType(builder *flatbuffers.Builder, geasType Geas) {
	builder.PrependInt32Slot(1, int32(geasType), 0)
}
func MiniGameShootingGeasExcelAddIcon(builder *flatbuffers.Builder, icon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(icon), 0)
}
func MiniGameShootingGeasExcelAddProbability(builder *flatbuffers.Builder, probability int64) {
	builder.PrependInt64Slot(3, probability, 0)
}
func MiniGameShootingGeasExcelAddMaxOverlapCount(builder *flatbuffers.Builder, maxOverlapCount int32) {
	builder.PrependInt32Slot(4, maxOverlapCount, 0)
}
func MiniGameShootingGeasExcelAddGeasData(builder *flatbuffers.Builder, geasData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(geasData), 0)
}
func MiniGameShootingGeasExcelAddNeedGeasId(builder *flatbuffers.Builder, needGeasId int64) {
	builder.PrependInt64Slot(6, needGeasId, 0)
}
func MiniGameShootingGeasExcelAddHideInPausePopup(builder *flatbuffers.Builder, hideInPausePopup bool) {
	builder.PrependBoolSlot(7, hideInPausePopup, false)
}
func MiniGameShootingGeasExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
