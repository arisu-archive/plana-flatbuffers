// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TacticTimeAttackSimulatorConfigExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTacticTimeAttackSimulatorConfigExcel(buf []byte, offset flatbuffers.UOffsetT) *TacticTimeAttackSimulatorConfigExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TacticTimeAttackSimulatorConfigExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTacticTimeAttackSimulatorConfigExcel(buf []byte, offset flatbuffers.UOffsetT) *TacticTimeAttackSimulatorConfigExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TacticTimeAttackSimulatorConfigExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) AttackSpecialNum() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) MutateAttackSpecialNum(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) AttackStrikerNum() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) MutateAttackStrikerNum(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) GeasId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) MutateGeasId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) Order() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) MutateOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) PresetGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) MutatePresetGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) Repeat() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticTimeAttackSimulatorConfigExcel) MutateRepeat(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func TacticTimeAttackSimulatorConfigExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TacticTimeAttackSimulatorConfigExcelAddAttackSpecialNum(builder *flatbuffers.Builder, attackSpecialNum int64) {
	builder.PrependInt64Slot(0, attackSpecialNum, 0)
}
func TacticTimeAttackSimulatorConfigExcelAddAttackStrikerNum(builder *flatbuffers.Builder, attackStrikerNum int64) {
	builder.PrependInt64Slot(1, attackStrikerNum, 0)
}
func TacticTimeAttackSimulatorConfigExcelAddGeasId(builder *flatbuffers.Builder, geasId int64) {
	builder.PrependInt64Slot(2, geasId, 0)
}
func TacticTimeAttackSimulatorConfigExcelAddOrder(builder *flatbuffers.Builder, order int64) {
	builder.PrependInt64Slot(3, order, 0)
}
func TacticTimeAttackSimulatorConfigExcelAddPresetGroupId(builder *flatbuffers.Builder, presetGroupId int64) {
	builder.PrependInt64Slot(4, presetGroupId, 0)
}
func TacticTimeAttackSimulatorConfigExcelAddRepeat(builder *flatbuffers.Builder, repeat int64) {
	builder.PrependInt64Slot(5, repeat, 0)
}
func TacticTimeAttackSimulatorConfigExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
