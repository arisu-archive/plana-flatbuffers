// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterAcademyTagsExcelDto represents a FlatBuffers table
type CharacterAcademyTagsExcelDto struct {
	fbsutils.FlatBuffer
	Id                  int64 `json:"id"`
	FavorTags           []Tag `json:"favor_tags"`
	FavorItemTags       []Tag `json:"favor_item_tags"`
	FavorItemUniqueTags []Tag `json:"favor_item_unique_tags"`
	ForbiddenTags       []Tag `json:"forbidden_tags"`
	ZoneWhiteListTags   []Tag `json:"zone_white_list_tags"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterAcademyTagsExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterAcademyTags"))
	}
	CharacterAcademyTagsExcelStart(b)
	CharacterAcademyTagsExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterAcademyTagsExcelStartFavorTagsVector(b, len(t.FavorTags))
	for i := range len(t.FavorTags) {
		b.PrependInt32(fbsutils.Convert(int32(t.FavorTags[len(t.FavorTags)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterAcademyTagsExcelAddFavorTags(b, b.EndVector(len(t.FavorTags)))
	CharacterAcademyTagsExcelStartFavorItemTagsVector(b, len(t.FavorItemTags))
	for i := range len(t.FavorItemTags) {
		b.PrependInt32(fbsutils.Convert(int32(t.FavorItemTags[len(t.FavorItemTags)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterAcademyTagsExcelAddFavorItemTags(b, b.EndVector(len(t.FavorItemTags)))
	CharacterAcademyTagsExcelStartFavorItemUniqueTagsVector(b, len(t.FavorItemUniqueTags))
	for i := range len(t.FavorItemUniqueTags) {
		b.PrependInt32(fbsutils.Convert(int32(t.FavorItemUniqueTags[len(t.FavorItemUniqueTags)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterAcademyTagsExcelAddFavorItemUniqueTags(b, b.EndVector(len(t.FavorItemUniqueTags)))
	CharacterAcademyTagsExcelStartForbiddenTagsVector(b, len(t.ForbiddenTags))
	for i := range len(t.ForbiddenTags) {
		b.PrependInt32(fbsutils.Convert(int32(t.ForbiddenTags[len(t.ForbiddenTags)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterAcademyTagsExcelAddForbiddenTags(b, b.EndVector(len(t.ForbiddenTags)))
	CharacterAcademyTagsExcelStartZoneWhiteListTagsVector(b, len(t.ZoneWhiteListTags))
	for i := range len(t.ZoneWhiteListTags) {
		b.PrependInt32(fbsutils.Convert(int32(t.ZoneWhiteListTags[len(t.ZoneWhiteListTags)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterAcademyTagsExcelAddZoneWhiteListTags(b, b.EndVector(len(t.ZoneWhiteListTags)))
	return CharacterAcademyTagsExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterAcademyTagsExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishCharacterAcademyTagsExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterAcademyTagsExcelDto) UnmarshalMessage(e *CharacterAcademyTagsExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterAcademyTags"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.FavorTags = make([]Tag, e.FavorTagsLength())
	for i := range e.FavorTagsLength() {
		t.FavorTags[i] = Tag(fbsutils.Convert(int32(e.FavorTags(i)), t.FlatBuffer.TableKey))
	}
	t.FavorItemTags = make([]Tag, e.FavorItemTagsLength())
	for i := range e.FavorItemTagsLength() {
		t.FavorItemTags[i] = Tag(fbsutils.Convert(int32(e.FavorItemTags(i)), t.FlatBuffer.TableKey))
	}
	t.FavorItemUniqueTags = make([]Tag, e.FavorItemUniqueTagsLength())
	for i := range e.FavorItemUniqueTagsLength() {
		t.FavorItemUniqueTags[i] = Tag(fbsutils.Convert(int32(e.FavorItemUniqueTags(i)), t.FlatBuffer.TableKey))
	}
	t.ForbiddenTags = make([]Tag, e.ForbiddenTagsLength())
	for i := range e.ForbiddenTagsLength() {
		t.ForbiddenTags[i] = Tag(fbsutils.Convert(int32(e.ForbiddenTags(i)), t.FlatBuffer.TableKey))
	}
	t.ZoneWhiteListTags = make([]Tag, e.ZoneWhiteListTagsLength())
	for i := range e.ZoneWhiteListTagsLength() {
		t.ZoneWhiteListTags[i] = Tag(fbsutils.Convert(int32(e.ZoneWhiteListTags(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterAcademyTagsExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterAcademyTagsExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterAcademyTagsExcelDto) FlatDataName() string {
	return "CharacterAcademyTagsExcel"
}
