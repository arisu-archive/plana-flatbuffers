// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldWorldMapZoneExcelDto represents a FlatBuffers table
type FieldWorldMapZoneExcelDto struct {
	fbsutils.FlatBuffer
	Id                      int64                   `json:"id"`
	GroupId                 int32                   `json:"group_id"`
	Date                    int32                   `json:"date"`
	OpenConditionType       FieldConditionType      `json:"open_condition_type"`
	OpenConditionId         int64                   `json:"open_condition_id"`
	CloseConditionType      FieldConditionType      `json:"close_condition_type"`
	CloseConditionId        int64                   `json:"close_condition_id"`
	ResultFieldScene        int64                   `json:"result_field_scene"`
	FieldStageInteractionId int64                   `json:"field_stage_interaction_id"`
	WorldMapButtonType      FieldWorldMapButtonType `json:"world_map_button_type"`
	LocalizeCode            uint32                  `json:"localize_code"`
	NewTagDisplay           bool                    `json:"new_tag_display"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldWorldMapZoneExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldWorldMapZone"))
	}
	FieldWorldMapZoneExcelStart(b)
	FieldWorldMapZoneExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddDate(b, fbsutils.Convert(t.Date, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddOpenConditionType(b, fbsutils.Convert(t.OpenConditionType, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddOpenConditionId(b, fbsutils.Convert(t.OpenConditionId, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddCloseConditionType(b, fbsutils.Convert(t.CloseConditionType, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddCloseConditionId(b, fbsutils.Convert(t.CloseConditionId, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddResultFieldScene(b, fbsutils.Convert(t.ResultFieldScene, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddFieldStageInteractionId(b, fbsutils.Convert(t.FieldStageInteractionId, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddWorldMapButtonType(b, fbsutils.Convert(t.WorldMapButtonType, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddLocalizeCode(b, fbsutils.Convert(t.LocalizeCode, t.FlatBuffer.TableKey))
	FieldWorldMapZoneExcelAddNewTagDisplay(b, t.NewTagDisplay)
	return FieldWorldMapZoneExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldWorldMapZoneExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishFieldWorldMapZoneExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldWorldMapZoneExcelDto) UnmarshalMessage(e *FieldWorldMapZoneExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldWorldMapZone"))
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Date = fbsutils.Convert(e.Date(), t.FlatBuffer.TableKey)
	t.OpenConditionType = FieldConditionType(fbsutils.Convert(int32(e.OpenConditionType()), t.FlatBuffer.TableKey))
	t.OpenConditionId = fbsutils.Convert(e.OpenConditionId(), t.FlatBuffer.TableKey)
	t.CloseConditionType = FieldConditionType(fbsutils.Convert(int32(e.CloseConditionType()), t.FlatBuffer.TableKey))
	t.CloseConditionId = fbsutils.Convert(e.CloseConditionId(), t.FlatBuffer.TableKey)
	t.ResultFieldScene = fbsutils.Convert(e.ResultFieldScene(), t.FlatBuffer.TableKey)
	t.FieldStageInteractionId = fbsutils.Convert(e.FieldStageInteractionId(), t.FlatBuffer.TableKey)
	t.WorldMapButtonType = FieldWorldMapButtonType(fbsutils.Convert(int32(e.WorldMapButtonType()), t.FlatBuffer.TableKey))
	t.LocalizeCode = fbsutils.Convert(e.LocalizeCode(), t.FlatBuffer.TableKey)
	t.NewTagDisplay = e.NewTagDisplay()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldWorldMapZoneExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldWorldMapZoneExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldWorldMapZoneExcelDto) FlatDataName() string {
	return "FieldWorldMapZoneExcel"
}
