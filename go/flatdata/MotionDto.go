// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MotionDto represents a FlatBuffers table
type MotionDto struct {
	fbsutils.FlatBuffer
	Name      string        `json:"name"`
	Positions []PositionDto `json:"positions"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MotionDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Motion"))
	}
	__offset_name := b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey))
	var __offset_positions flatbuffers.UOffsetT
	__nestedOffsets_positions := make([]flatbuffers.UOffsetT, len(t.Positions))
	for i := range len(t.Positions) {
		t.Positions[i].InitKey(t.FlatBuffer.TableKey)
		__nestedOffsets_positions[i] = t.Positions[i].MarshalModel(b)
	}
	MotionStartPositionsVector(b, len(t.Positions))
	for i := range len(t.Positions) {
		b.PrependUOffsetT(__nestedOffsets_positions[len(t.Positions)-i-1])
	}
	__offset_positions = b.EndVector(len(t.Positions))
	MotionStart(b)
	MotionAddName(b, __offset_name)
	MotionAddPositions(b, __offset_positions)
	return MotionEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MotionDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MotionDto) UnmarshalMessage(e *Motion) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("Motion"))
	}
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Positions = make([]PositionDto, e.PositionsLength())
	for i := range e.PositionsLength() {
		d := new(Position)
		if !e.Positions(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.Positions[i].UnmarshalMessage(d)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MotionDto) Unmarshal(data []byte) error {
	root := GetRootAsMotion(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MotionDto) FlatDataName() string {
	return "Motion"
}
