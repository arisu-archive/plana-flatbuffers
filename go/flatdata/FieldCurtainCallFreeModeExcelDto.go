// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldCurtainCallFreeModeExcelDto represents a FlatBuffers table
type FieldCurtainCallFreeModeExcelDto struct {
	fbsutils.FlatBuffer
	SetFieldQuestOpenDate int64 `json:"set_field_quest_open_date"`
	SetFieldDateId        int64 `json:"set_field_date_id"`
	OpenDate              int64 `json:"open_date"`
	UniqueId              int64 `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldCurtainCallFreeModeExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldCurtainCallFreeMode"))
	}
	FieldCurtainCallFreeModeExcelStart(b)
	FieldCurtainCallFreeModeExcelAddSetFieldQuestOpenDate(b, fbsutils.Convert(t.SetFieldQuestOpenDate, t.FlatBuffer.TableKey))
	FieldCurtainCallFreeModeExcelAddSetFieldDateId(b, fbsutils.Convert(t.SetFieldDateId, t.FlatBuffer.TableKey))
	FieldCurtainCallFreeModeExcelAddOpenDate(b, fbsutils.Convert(t.OpenDate, t.FlatBuffer.TableKey))
	FieldCurtainCallFreeModeExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return FieldCurtainCallFreeModeExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldCurtainCallFreeModeExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldCurtainCallFreeModeExcelDto) UnmarshalMessage(e *FieldCurtainCallFreeModeExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldCurtainCallFreeMode"))
	}
	t.SetFieldQuestOpenDate = fbsutils.Convert(e.SetFieldQuestOpenDate(), t.FlatBuffer.TableKey)
	t.SetFieldDateId = fbsutils.Convert(e.SetFieldDateId(), t.FlatBuffer.TableKey)
	t.OpenDate = fbsutils.Convert(e.OpenDate(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldCurtainCallFreeModeExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldCurtainCallFreeModeExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldCurtainCallFreeModeExcelDto) FlatDataName() string {
	return "FieldCurtainCallFreeModeExcel"
}
