// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConquestGroupBuffExcelDto represents a FlatBuffers table
type ConquestGroupBuffExcelDto struct {
	fbsutils.FlatBuffer
	ConquestBuffId         int64    `json:"conquest_buff_id"`
	School                 []School `json:"school"`
	RecommandLocalizeEtcId uint32   `json:"recommand_localize_etc_id"`
	SkillGroupId           string   `json:"skill_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConquestGroupBuffExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConquestGroupBuff"))
	}
	ConquestGroupBuffExcelStart(b)
	ConquestGroupBuffExcelAddConquestBuffId(b, fbsutils.Convert(t.ConquestBuffId, t.FlatBuffer.TableKey))
	ConquestGroupBuffExcelStartSchoolVector(b, len(t.School))
	for i := range len(t.School) {
		b.PrependInt32(fbsutils.Convert(int32(t.School[len(t.School)-i-1]), t.FlatBuffer.TableKey))
	}
	ConquestGroupBuffExcelAddSchool(b, b.EndVector(len(t.School)))
	ConquestGroupBuffExcelAddRecommandLocalizeEtcId(b, fbsutils.Convert(t.RecommandLocalizeEtcId, t.FlatBuffer.TableKey))
	ConquestGroupBuffExcelAddSkillGroupId(b, b.CreateString(fbsutils.Convert(t.SkillGroupId, t.FlatBuffer.TableKey)))
	return ConquestGroupBuffExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConquestGroupBuffExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConquestGroupBuffExcelDto) UnmarshalMessage(e *ConquestGroupBuffExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("ConquestGroupBuff"))
	}
	t.ConquestBuffId = fbsutils.Convert(e.ConquestBuffId(), t.FlatBuffer.TableKey)
	t.School = make([]School, e.SchoolLength())
	for i := range e.SchoolLength() {
		t.School[i] = School(fbsutils.Convert(int32(e.School(i)), t.FlatBuffer.TableKey))
	}
	t.RecommandLocalizeEtcId = fbsutils.Convert(e.RecommandLocalizeEtcId(), t.FlatBuffer.TableKey)
	t.SkillGroupId = fbsutils.Convert(string(e.SkillGroupId()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConquestGroupBuffExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConquestGroupBuffExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConquestGroupBuffExcelDto) FlatDataName() string {
	return "ConquestGroupBuffExcel"
}
