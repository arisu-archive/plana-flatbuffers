// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AcademyMessanger1ExcelDto represents a FlatBuffers table
type AcademyMessanger1ExcelDto struct {
	fbsutils.FlatBuffer
	MessageGroupId              int64                    `json:"message_group_id"`
	Id                          int64                    `json:"id"`
	CharacterId                 int64                    `json:"character_id"`
	MessageCondition            AcademyMessageConditions `json:"message_condition"`
	ConditionValue              int64                    `json:"condition_value"`
	PreConditionGroupId         int64                    `json:"pre_condition_group_id"`
	PreConditionFavorScheduleId int64                    `json:"pre_condition_favor_schedule_id"`
	FavorScheduleId             int64                    `json:"favor_schedule_id"`
	NextGroupId                 int64                    `json:"next_group_id"`
	FeedbackTimeMillisec        int64                    `json:"feedback_time_millisec"`
	MessageType                 AcademyMessageTypes      `json:"message_type"`
	ImagePath                   string                   `json:"image_path"`
	MessageKr                   string                   `json:"message_kr"`
	MessageJp                   string                   `json:"message_jp"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AcademyMessanger1ExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("AcademyMessanger1"))
	}
	__offset_image_path := b.CreateString(fbsutils.Convert(t.ImagePath, t.FlatBuffer.TableKey))
	__offset_message_kr := b.CreateString(fbsutils.Convert(t.MessageKr, t.FlatBuffer.TableKey))
	__offset_message_jp := b.CreateString(fbsutils.Convert(t.MessageJp, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelStart(b)
	AcademyMessanger1ExcelAddMessageGroupId(b, fbsutils.Convert(t.MessageGroupId, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddMessageCondition(b, fbsutils.Convert(t.MessageCondition, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddConditionValue(b, fbsutils.Convert(t.ConditionValue, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddPreConditionGroupId(b, fbsutils.Convert(t.PreConditionGroupId, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddPreConditionFavorScheduleId(b, fbsutils.Convert(t.PreConditionFavorScheduleId, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddFavorScheduleId(b, fbsutils.Convert(t.FavorScheduleId, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddNextGroupId(b, fbsutils.Convert(t.NextGroupId, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddFeedbackTimeMillisec(b, fbsutils.Convert(t.FeedbackTimeMillisec, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddMessageType(b, fbsutils.Convert(t.MessageType, t.FlatBuffer.TableKey))
	AcademyMessanger1ExcelAddImagePath(b, __offset_image_path)
	AcademyMessanger1ExcelAddMessageKr(b, __offset_message_kr)
	AcademyMessanger1ExcelAddMessageJp(b, __offset_message_jp)
	return AcademyMessanger1ExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AcademyMessanger1ExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AcademyMessanger1ExcelDto) UnmarshalMessage(e *AcademyMessanger1Excel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("AcademyMessanger1"))
	}
	t.MessageGroupId = fbsutils.Convert(e.MessageGroupId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.MessageCondition = AcademyMessageConditions(fbsutils.Convert(int32(e.MessageCondition()), t.FlatBuffer.TableKey))
	t.ConditionValue = fbsutils.Convert(e.ConditionValue(), t.FlatBuffer.TableKey)
	t.PreConditionGroupId = fbsutils.Convert(e.PreConditionGroupId(), t.FlatBuffer.TableKey)
	t.PreConditionFavorScheduleId = fbsutils.Convert(e.PreConditionFavorScheduleId(), t.FlatBuffer.TableKey)
	t.FavorScheduleId = fbsutils.Convert(e.FavorScheduleId(), t.FlatBuffer.TableKey)
	t.NextGroupId = fbsutils.Convert(e.NextGroupId(), t.FlatBuffer.TableKey)
	t.FeedbackTimeMillisec = fbsutils.Convert(e.FeedbackTimeMillisec(), t.FlatBuffer.TableKey)
	t.MessageType = AcademyMessageTypes(fbsutils.Convert(int32(e.MessageType()), t.FlatBuffer.TableKey))
	t.ImagePath = fbsutils.Convert(string(e.ImagePath()), t.FlatBuffer.TableKey)
	t.MessageKr = fbsutils.Convert(string(e.MessageKr()), t.FlatBuffer.TableKey)
	t.MessageJp = fbsutils.Convert(string(e.MessageJp()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AcademyMessanger1ExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAcademyMessanger1Excel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AcademyMessanger1ExcelDto) FlatDataName() string {
	return "AcademyMessanger1Excel"
}
