// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DefaultFurnitureExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsDefaultFurnitureExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultFurnitureExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DefaultFurnitureExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDefaultFurnitureExcel(buf []byte, offset flatbuffers.UOffsetT) *DefaultFurnitureExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DefaultFurnitureExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DefaultFurnitureExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DefaultFurnitureExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DefaultFurnitureExcel) Rotation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DefaultFurnitureExcel) MutateRotation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *DefaultFurnitureExcel) PositionY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DefaultFurnitureExcel) MutatePositionY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *DefaultFurnitureExcel) PositionX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DefaultFurnitureExcel) MutatePositionX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *DefaultFurnitureExcel) Location() FurnitureLocation {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return FurnitureLocation(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DefaultFurnitureExcel) MutateLocation(n FurnitureLocation) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *DefaultFurnitureExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DefaultFurnitureExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func DefaultFurnitureExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DefaultFurnitureExcelAddRotation(builder *flatbuffers.Builder, rotation float32) {
	builder.PrependFloat32Slot(0, rotation, 0.0)
}
func DefaultFurnitureExcelAddPositionY(builder *flatbuffers.Builder, positionY float32) {
	builder.PrependFloat32Slot(1, positionY, 0.0)
}
func DefaultFurnitureExcelAddPositionX(builder *flatbuffers.Builder, positionX float32) {
	builder.PrependFloat32Slot(2, positionX, 0.0)
}
func DefaultFurnitureExcelAddLocation(builder *flatbuffers.Builder, location FurnitureLocation) {
	builder.PrependInt32Slot(3, int32(location), 0)
}
func DefaultFurnitureExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(4, id, 0)
}
func DefaultFurnitureExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
