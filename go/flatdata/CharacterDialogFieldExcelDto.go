// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterDialogFieldExcelDto represents a FlatBuffers table
type CharacterDialogFieldExcelDto struct {
	fbsutils.FlatBuffer
	GroupId             int64           `json:"group_id"`
	Phase               int32           `json:"phase"`
	TargetIndex         int32           `json:"target_index"`
	DialogType          FieldDialogType `json:"dialog_type"`
	Duration            int64           `json:"duration"`
	MotionName          string          `json:"motion_name"`
	IsInteractionDialog bool            `json:"is_interaction_dialog"`
	HideUi              bool            `json:"hide_ui"`
	LocalizeKr          string          `json:"localize_kr"`
	LocalizeJp          string          `json:"localize_jp"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterDialogFieldExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterDialogField"))
	}
	CharacterDialogFieldExcelStart(b)
	CharacterDialogFieldExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	CharacterDialogFieldExcelAddPhase(b, fbsutils.Convert(t.Phase, t.FlatBuffer.TableKey))
	CharacterDialogFieldExcelAddTargetIndex(b, fbsutils.Convert(t.TargetIndex, t.FlatBuffer.TableKey))
	CharacterDialogFieldExcelAddDialogType(b, fbsutils.Convert(t.DialogType, t.FlatBuffer.TableKey))
	CharacterDialogFieldExcelAddDuration(b, fbsutils.Convert(t.Duration, t.FlatBuffer.TableKey))
	CharacterDialogFieldExcelAddMotionName(b, b.CreateString(fbsutils.Convert(t.MotionName, t.FlatBuffer.TableKey)))
	CharacterDialogFieldExcelAddIsInteractionDialog(b, t.IsInteractionDialog)
	CharacterDialogFieldExcelAddHideUi(b, t.HideUi)
	CharacterDialogFieldExcelAddLocalizeKr(b, b.CreateString(fbsutils.Convert(t.LocalizeKr, t.FlatBuffer.TableKey)))
	CharacterDialogFieldExcelAddLocalizeJp(b, b.CreateString(fbsutils.Convert(t.LocalizeJp, t.FlatBuffer.TableKey)))
	return CharacterDialogFieldExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterDialogFieldExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterDialogFieldExcelDto) UnmarshalMessage(e *CharacterDialogFieldExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("CharacterDialogField"))
	}
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Phase = fbsutils.Convert(e.Phase(), t.FlatBuffer.TableKey)
	t.TargetIndex = fbsutils.Convert(e.TargetIndex(), t.FlatBuffer.TableKey)
	t.DialogType = FieldDialogType(fbsutils.Convert(int32(e.DialogType()), t.FlatBuffer.TableKey))
	t.Duration = fbsutils.Convert(e.Duration(), t.FlatBuffer.TableKey)
	t.MotionName = fbsutils.Convert(string(e.MotionName()), t.FlatBuffer.TableKey)
	t.IsInteractionDialog = e.IsInteractionDialog()
	t.HideUi = e.HideUi()
	t.LocalizeKr = fbsutils.Convert(string(e.LocalizeKr()), t.FlatBuffer.TableKey)
	t.LocalizeJp = fbsutils.Convert(string(e.LocalizeJp()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterDialogFieldExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterDialogFieldExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterDialogFieldExcelDto) FlatDataName() string {
	return "CharacterDialogFieldExcel"
}
