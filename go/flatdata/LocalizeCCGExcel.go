// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LocalizeCCGExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsLocalizeCCGExcel(buf []byte, offset flatbuffers.UOffsetT) *LocalizeCCGExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LocalizeCCGExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLocalizeCCGExcel(buf []byte, offset flatbuffers.UOffsetT) *LocalizeCCGExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LocalizeCCGExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LocalizeCCGExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LocalizeCCGExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LocalizeCCGExcel) Jp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalizeCCGExcel) Kr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalizeCCGExcel) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LocalizeCCGExcel) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func LocalizeCCGExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LocalizeCCGExcelAddJp(builder *flatbuffers.Builder, jp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(jp), 0)
}
func LocalizeCCGExcelAddKr(builder *flatbuffers.Builder, kr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(kr), 0)
}
func LocalizeCCGExcelAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(2, key, 0)
}
func LocalizeCCGExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
