// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	"errors"
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// PropMotionDto represents a FlatBuffers table
type PropMotionDto struct {
	fbsutils.FlatBuffer
	Name      string           `json:"name"`
	Positions []PropVector3Dto `json:"positions"`
	Rotations []PropVector3Dto `json:"rotations"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *PropMotionDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("PropMotion"))
	}
	PropMotionStart(b)
	PropMotionAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	PropMotionStartPositionsVector(b, len(t.Positions))
	for i := range len(t.Positions) {
		// The array should be reversed.
		b.PrependUOffsetT(t.Positions[len(t.Positions)-i-1].MarshalModel(b))
	}
	PropMotionAddPositions(b, b.EndVector(len(t.Positions)))
	PropMotionStartRotationsVector(b, len(t.Rotations))
	for i := range len(t.Rotations) {
		// The array should be reversed.
		b.PrependUOffsetT(t.Rotations[len(t.Rotations)-i-1].MarshalModel(b))
	}
	PropMotionAddRotations(b, b.EndVector(len(t.Rotations)))
	return PropMotionEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *PropMotionDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *PropMotionDto) UnmarshalMessage(e *PropMotion) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("PropMotion"))
	}
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Positions = make([]PropVector3Dto, e.PositionsLength())
	for i := range e.PositionsLength() {
		d := new(PropVector3)
		if !e.Positions(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.Positions[i].UnmarshalMessage(d)
	}
	t.Rotations = make([]PropVector3Dto, e.RotationsLength())
	for i := range e.RotationsLength() {
		d := new(PropVector3)
		if !e.Rotations(d, i) {
			return errors.New("failed to unmarshal data")
		}
		t.Rotations[i].UnmarshalMessage(d)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *PropMotionDto) Unmarshal(data []byte) error {
	root := GetRootAsPropMotion(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (PropMotionDto) FlatDataName() string {
	return "PropMotion"
}
