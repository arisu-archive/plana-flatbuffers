// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterDialogEmojiExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterDialogEmojiExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogEmojiExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterDialogEmojiExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterDialogEmojiExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogEmojiExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterDialogEmojiExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterDialogEmojiExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterDialogEmojiExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterDialogEmojiExcel) LocalizeJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogEmojiExcel) LocalizeKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogEmojiExcel) HideUi() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogEmojiExcel) MutateHideUi(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *CharacterDialogEmojiExcel) Duration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogEmojiExcel) MutateDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CharacterDialogEmojiExcel) DialogType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogEmojiExcel) TargetIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogEmojiExcel) MutateTargetIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *CharacterDialogEmojiExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogEmojiExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func CharacterDialogEmojiExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CharacterDialogEmojiExcelAddLocalizeJp(builder *flatbuffers.Builder, localizeJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(localizeJp), 0)
}
func CharacterDialogEmojiExcelAddLocalizeKr(builder *flatbuffers.Builder, localizeKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(localizeKr), 0)
}
func CharacterDialogEmojiExcelAddHideUi(builder *flatbuffers.Builder, hideUi bool) {
	builder.PrependBoolSlot(2, hideUi, false)
}
func CharacterDialogEmojiExcelAddDuration(builder *flatbuffers.Builder, duration int64) {
	builder.PrependInt64Slot(3, duration, 0)
}
func CharacterDialogEmojiExcelAddDialogType(builder *flatbuffers.Builder, dialogType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dialogType), 0)
}
func CharacterDialogEmojiExcelAddTargetIndex(builder *flatbuffers.Builder, targetIndex int32) {
	builder.PrependInt32Slot(5, targetIndex, 0)
}
func CharacterDialogEmojiExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(6, groupId, 0)
}
func CharacterDialogEmojiExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
