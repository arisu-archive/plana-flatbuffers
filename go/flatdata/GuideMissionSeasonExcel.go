// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GuideMissionSeasonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGuideMissionSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *GuideMissionSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GuideMissionSeasonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGuideMissionSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *GuideMissionSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GuideMissionSeasonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GuideMissionSeasonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GuideMissionSeasonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GuideMissionSeasonExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GuideMissionSeasonExcel) TitleLocalizeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) PermanentInfomationLocalizeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) InfomationLocalizeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) AccountType() AccountState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return AccountState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateAccountType(n AccountState) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *GuideMissionSeasonExcel) Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GuideMissionSeasonExcel) MutateEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *GuideMissionSeasonExcel) BannerOpenDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) StartableEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) CloseBannerAfterCompletion() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GuideMissionSeasonExcel) MutateCloseBannerAfterCompletion(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func (rcv *GuideMissionSeasonExcel) MaximumLoginCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateMaximumLoginCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *GuideMissionSeasonExcel) ExpiryDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateExpiryDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *GuideMissionSeasonExcel) SpineCharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateSpineCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *GuideMissionSeasonExcel) RequirementParcelImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) RewardImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) LobbyBannerImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) BackgroundImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) TitleImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GuideMissionSeasonExcel) RequirementParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateRequirementParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(42, int32(n))
}

func (rcv *GuideMissionSeasonExcel) RequirementParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateRequirementParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

func (rcv *GuideMissionSeasonExcel) RequirementParcelAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateRequirementParcelAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

func (rcv *GuideMissionSeasonExcel) TabType() GuideMissionTabType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return GuideMissionTabType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutateTabType(n GuideMissionTabType) bool {
	return rcv._tab.MutateInt32Slot(48, int32(n))
}

func (rcv *GuideMissionSeasonExcel) IsPermanent() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GuideMissionSeasonExcel) MutateIsPermanent(n bool) bool {
	return rcv._tab.MutateBoolSlot(50, n)
}

func (rcv *GuideMissionSeasonExcel) PreSeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GuideMissionSeasonExcel) MutatePreSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

func GuideMissionSeasonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(25)
}
func GuideMissionSeasonExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func GuideMissionSeasonExcelAddTitleLocalizeCode(builder *flatbuffers.Builder, titleLocalizeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(titleLocalizeCode), 0)
}
func GuideMissionSeasonExcelAddPermanentInfomationLocalizeCode(builder *flatbuffers.Builder, permanentInfomationLocalizeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(permanentInfomationLocalizeCode), 0)
}
func GuideMissionSeasonExcelAddInfomationLocalizeCode(builder *flatbuffers.Builder, infomationLocalizeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(infomationLocalizeCode), 0)
}
func GuideMissionSeasonExcelAddAccountType(builder *flatbuffers.Builder, accountType AccountState) {
	builder.PrependInt32Slot(4, int32(accountType), 0)
}
func GuideMissionSeasonExcelAddEnabled(builder *flatbuffers.Builder, enabled bool) {
	builder.PrependBoolSlot(5, enabled, false)
}
func GuideMissionSeasonExcelAddBannerOpenDate(builder *flatbuffers.Builder, bannerOpenDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(bannerOpenDate), 0)
}
func GuideMissionSeasonExcelAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(startDate), 0)
}
func GuideMissionSeasonExcelAddStartableEndDate(builder *flatbuffers.Builder, startableEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(startableEndDate), 0)
}
func GuideMissionSeasonExcelAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(endDate), 0)
}
func GuideMissionSeasonExcelAddCloseBannerAfterCompletion(builder *flatbuffers.Builder, closeBannerAfterCompletion bool) {
	builder.PrependBoolSlot(10, closeBannerAfterCompletion, false)
}
func GuideMissionSeasonExcelAddMaximumLoginCount(builder *flatbuffers.Builder, maximumLoginCount int64) {
	builder.PrependInt64Slot(11, maximumLoginCount, 0)
}
func GuideMissionSeasonExcelAddExpiryDate(builder *flatbuffers.Builder, expiryDate int64) {
	builder.PrependInt64Slot(12, expiryDate, 0)
}
func GuideMissionSeasonExcelAddSpineCharacterId(builder *flatbuffers.Builder, spineCharacterId int64) {
	builder.PrependInt64Slot(13, spineCharacterId, 0)
}
func GuideMissionSeasonExcelAddRequirementParcelImage(builder *flatbuffers.Builder, requirementParcelImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(requirementParcelImage), 0)
}
func GuideMissionSeasonExcelAddRewardImage(builder *flatbuffers.Builder, rewardImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(rewardImage), 0)
}
func GuideMissionSeasonExcelAddLobbyBannerImage(builder *flatbuffers.Builder, lobbyBannerImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(lobbyBannerImage), 0)
}
func GuideMissionSeasonExcelAddBackgroundImage(builder *flatbuffers.Builder, backgroundImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(backgroundImage), 0)
}
func GuideMissionSeasonExcelAddTitleImage(builder *flatbuffers.Builder, titleImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(titleImage), 0)
}
func GuideMissionSeasonExcelAddRequirementParcelType(builder *flatbuffers.Builder, requirementParcelType ParcelType) {
	builder.PrependInt32Slot(19, int32(requirementParcelType), 0)
}
func GuideMissionSeasonExcelAddRequirementParcelId(builder *flatbuffers.Builder, requirementParcelId int64) {
	builder.PrependInt64Slot(20, requirementParcelId, 0)
}
func GuideMissionSeasonExcelAddRequirementParcelAmount(builder *flatbuffers.Builder, requirementParcelAmount int32) {
	builder.PrependInt32Slot(21, requirementParcelAmount, 0)
}
func GuideMissionSeasonExcelAddTabType(builder *flatbuffers.Builder, tabType GuideMissionTabType) {
	builder.PrependInt32Slot(22, int32(tabType), 0)
}
func GuideMissionSeasonExcelAddIsPermanent(builder *flatbuffers.Builder, isPermanent bool) {
	builder.PrependBoolSlot(23, isPermanent, false)
}
func GuideMissionSeasonExcelAddPreSeasonId(builder *flatbuffers.Builder, preSeasonId int64) {
	builder.PrependInt64Slot(24, preSeasonId, 0)
}
func GuideMissionSeasonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
