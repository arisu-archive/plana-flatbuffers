// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestErosionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestErosionExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestErosionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestErosionExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishConquestErosionExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConquestErosionExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestErosionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestErosionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConquestErosionExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConquestErosionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestErosionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestErosionExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestErosionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ConquestErosionExcel) ErosionType() ConquestErosionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ConquestErosionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateErosionType(n ConquestErosionType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ConquestErosionExcel) Phase() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutatePhase(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ConquestErosionExcel) PhaseAlarm() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConquestErosionExcel) MutatePhaseAlarm(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *ConquestErosionExcel) StepIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateStepIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *ConquestErosionExcel) PhaseStartConditionType(j int) ConquestConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ConquestConditionType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestErosionExcel) PhaseStartConditionTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutatePhaseStartConditionType(j int, n ConquestConditionType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConquestErosionExcel) PhaseStartConditionParameter(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ConquestErosionExcel) PhaseStartConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestErosionExcel) PhaseBeforeExposeConditionType(j int) ConquestConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ConquestConditionType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestErosionExcel) PhaseBeforeExposeConditionTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutatePhaseBeforeExposeConditionType(j int, n ConquestConditionType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConquestErosionExcel) PhaseBeforeExposeConditionParameter(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ConquestErosionExcel) PhaseBeforeExposeConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestErosionExcel) ErosionBattleConditionParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateErosionBattleConditionParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *ConquestErosionExcel) ErosionBattleConditionParcelUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateErosionBattleConditionParcelUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *ConquestErosionExcel) ErosionBattleConditionParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateErosionBattleConditionParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *ConquestErosionExcel) ConquestRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestErosionExcel) MutateConquestRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func ConquestErosionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func ConquestErosionExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func ConquestErosionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func ConquestErosionExcelAddErosionType(builder *flatbuffers.Builder, erosionType ConquestErosionType) {
	builder.PrependInt32Slot(2, int32(erosionType), 0)
}
func ConquestErosionExcelAddPhase(builder *flatbuffers.Builder, phase int32) {
	builder.PrependInt32Slot(3, phase, 0)
}
func ConquestErosionExcelAddPhaseAlarm(builder *flatbuffers.Builder, phaseAlarm bool) {
	builder.PrependBoolSlot(4, phaseAlarm, false)
}
func ConquestErosionExcelAddStepIndex(builder *flatbuffers.Builder, stepIndex int32) {
	builder.PrependInt32Slot(5, stepIndex, 0)
}
func ConquestErosionExcelAddPhaseStartConditionType(builder *flatbuffers.Builder, phaseStartConditionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(phaseStartConditionType), 0)
}
func ConquestErosionExcelStartPhaseStartConditionTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestErosionExcelAddPhaseStartConditionParameter(builder *flatbuffers.Builder, phaseStartConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(phaseStartConditionParameter), 0)
}
func ConquestErosionExcelStartPhaseStartConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestErosionExcelAddPhaseBeforeExposeConditionType(builder *flatbuffers.Builder, phaseBeforeExposeConditionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(phaseBeforeExposeConditionType), 0)
}
func ConquestErosionExcelStartPhaseBeforeExposeConditionTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestErosionExcelAddPhaseBeforeExposeConditionParameter(builder *flatbuffers.Builder, phaseBeforeExposeConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(phaseBeforeExposeConditionParameter), 0)
}
func ConquestErosionExcelStartPhaseBeforeExposeConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestErosionExcelAddErosionBattleConditionParcelType(builder *flatbuffers.Builder, erosionBattleConditionParcelType ParcelType) {
	builder.PrependInt32Slot(10, int32(erosionBattleConditionParcelType), 0)
}
func ConquestErosionExcelAddErosionBattleConditionParcelUniqueId(builder *flatbuffers.Builder, erosionBattleConditionParcelUniqueId int64) {
	builder.PrependInt64Slot(11, erosionBattleConditionParcelUniqueId, 0)
}
func ConquestErosionExcelAddErosionBattleConditionParcelAmount(builder *flatbuffers.Builder, erosionBattleConditionParcelAmount int64) {
	builder.PrependInt64Slot(12, erosionBattleConditionParcelAmount, 0)
}
func ConquestErosionExcelAddConquestRewardId(builder *flatbuffers.Builder, conquestRewardId int64) {
	builder.PrependInt64Slot(13, conquestRewardId, 0)
}
func ConquestErosionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
