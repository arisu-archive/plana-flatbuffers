// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PresetCharacterGroupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsPresetCharacterGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *PresetCharacterGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PresetCharacterGroupExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishPresetCharacterGroupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPresetCharacterGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *PresetCharacterGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PresetCharacterGroupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPresetCharacterGroupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PresetCharacterGroupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PresetCharacterGroupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PresetCharacterGroupExcel) PresetCharacterGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePresetCharacterGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PresetCharacterGroupExcel) GetPresetType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PresetCharacterGroupExcel) Level() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *PresetCharacterGroupExcel) Exp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateExp(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *PresetCharacterGroupExcel) FavorExp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateFavorExp(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *PresetCharacterGroupExcel) FavorRank() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateFavorRank(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *PresetCharacterGroupExcel) StarGrade() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateStarGrade(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *PresetCharacterGroupExcel) ExSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateExSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *PresetCharacterGroupExcel) PassiveSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePassiveSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *PresetCharacterGroupExcel) ExtraPassiveSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateExtraPassiveSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *PresetCharacterGroupExcel) CommonSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateCommonSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *PresetCharacterGroupExcel) LeaderSkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateLeaderSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlot01() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlot01(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlotTier01() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlotTier01(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlotLevel01() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlotLevel01(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlot02() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlot02(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlotTier02() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlotTier02(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlotLevel02() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlotLevel02(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlot03() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlot03(n bool) bool {
	return rcv._tab.MutateBoolSlot(40, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlotTier03() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlotTier03(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

func (rcv *PresetCharacterGroupExcel) EquipSlotLevel03() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipSlotLevel03(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

func (rcv *PresetCharacterGroupExcel) EquipCharacterWeapon() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PresetCharacterGroupExcel) MutateEquipCharacterWeapon(n bool) bool {
	return rcv._tab.MutateBoolSlot(46, n)
}

func (rcv *PresetCharacterGroupExcel) EquipCharacterWeaponTier() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipCharacterWeaponTier(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

func (rcv *PresetCharacterGroupExcel) EquipCharacterWeaponLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipCharacterWeaponLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

func (rcv *PresetCharacterGroupExcel) EquipCharacterGear() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PresetCharacterGroupExcel) MutateEquipCharacterGear(n bool) bool {
	return rcv._tab.MutateBoolSlot(52, n)
}

func (rcv *PresetCharacterGroupExcel) EquipCharacterGearTier() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipCharacterGearTier(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

func (rcv *PresetCharacterGroupExcel) EquipCharacterGearLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutateEquipCharacterGearLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

func (rcv *PresetCharacterGroupExcel) PotentialType01() PotentialStatBonusRateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return PotentialStatBonusRateType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePotentialType01(n PotentialStatBonusRateType) bool {
	return rcv._tab.MutateInt32Slot(58, int32(n))
}

func (rcv *PresetCharacterGroupExcel) PotentialLevel01() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePotentialLevel01(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

func (rcv *PresetCharacterGroupExcel) PotentialType02() PotentialStatBonusRateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return PotentialStatBonusRateType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePotentialType02(n PotentialStatBonusRateType) bool {
	return rcv._tab.MutateInt32Slot(62, int32(n))
}

func (rcv *PresetCharacterGroupExcel) PotentialLevel02() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePotentialLevel02(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

func (rcv *PresetCharacterGroupExcel) PotentialType03() PotentialStatBonusRateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return PotentialStatBonusRateType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePotentialType03(n PotentialStatBonusRateType) bool {
	return rcv._tab.MutateInt32Slot(66, int32(n))
}

func (rcv *PresetCharacterGroupExcel) PotentialLevel03() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PresetCharacterGroupExcel) MutatePotentialLevel03(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

func PresetCharacterGroupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(33)
}
func PresetCharacterGroupExcelAddPresetCharacterGroupId(builder *flatbuffers.Builder, presetCharacterGroupId int64) {
	builder.PrependInt64Slot(0, presetCharacterGroupId, 0)
}
func PresetCharacterGroupExcelAddGetPresetType(builder *flatbuffers.Builder, getPresetType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(getPresetType), 0)
}
func PresetCharacterGroupExcelAddLevel(builder *flatbuffers.Builder, level int32) {
	builder.PrependInt32Slot(2, level, 0)
}
func PresetCharacterGroupExcelAddExp(builder *flatbuffers.Builder, exp int32) {
	builder.PrependInt32Slot(3, exp, 0)
}
func PresetCharacterGroupExcelAddFavorExp(builder *flatbuffers.Builder, favorExp int32) {
	builder.PrependInt32Slot(4, favorExp, 0)
}
func PresetCharacterGroupExcelAddFavorRank(builder *flatbuffers.Builder, favorRank int32) {
	builder.PrependInt32Slot(5, favorRank, 0)
}
func PresetCharacterGroupExcelAddStarGrade(builder *flatbuffers.Builder, starGrade int32) {
	builder.PrependInt32Slot(6, starGrade, 0)
}
func PresetCharacterGroupExcelAddExSkillLevel(builder *flatbuffers.Builder, exSkillLevel int32) {
	builder.PrependInt32Slot(7, exSkillLevel, 0)
}
func PresetCharacterGroupExcelAddPassiveSkillLevel(builder *flatbuffers.Builder, passiveSkillLevel int32) {
	builder.PrependInt32Slot(8, passiveSkillLevel, 0)
}
func PresetCharacterGroupExcelAddExtraPassiveSkillLevel(builder *flatbuffers.Builder, extraPassiveSkillLevel int32) {
	builder.PrependInt32Slot(9, extraPassiveSkillLevel, 0)
}
func PresetCharacterGroupExcelAddCommonSkillLevel(builder *flatbuffers.Builder, commonSkillLevel int32) {
	builder.PrependInt32Slot(10, commonSkillLevel, 0)
}
func PresetCharacterGroupExcelAddLeaderSkillLevel(builder *flatbuffers.Builder, leaderSkillLevel int32) {
	builder.PrependInt32Slot(11, leaderSkillLevel, 0)
}
func PresetCharacterGroupExcelAddEquipSlot01(builder *flatbuffers.Builder, equipSlot01 bool) {
	builder.PrependBoolSlot(12, equipSlot01, false)
}
func PresetCharacterGroupExcelAddEquipSlotTier01(builder *flatbuffers.Builder, equipSlotTier01 int32) {
	builder.PrependInt32Slot(13, equipSlotTier01, 0)
}
func PresetCharacterGroupExcelAddEquipSlotLevel01(builder *flatbuffers.Builder, equipSlotLevel01 int32) {
	builder.PrependInt32Slot(14, equipSlotLevel01, 0)
}
func PresetCharacterGroupExcelAddEquipSlot02(builder *flatbuffers.Builder, equipSlot02 bool) {
	builder.PrependBoolSlot(15, equipSlot02, false)
}
func PresetCharacterGroupExcelAddEquipSlotTier02(builder *flatbuffers.Builder, equipSlotTier02 int32) {
	builder.PrependInt32Slot(16, equipSlotTier02, 0)
}
func PresetCharacterGroupExcelAddEquipSlotLevel02(builder *flatbuffers.Builder, equipSlotLevel02 int32) {
	builder.PrependInt32Slot(17, equipSlotLevel02, 0)
}
func PresetCharacterGroupExcelAddEquipSlot03(builder *flatbuffers.Builder, equipSlot03 bool) {
	builder.PrependBoolSlot(18, equipSlot03, false)
}
func PresetCharacterGroupExcelAddEquipSlotTier03(builder *flatbuffers.Builder, equipSlotTier03 int32) {
	builder.PrependInt32Slot(19, equipSlotTier03, 0)
}
func PresetCharacterGroupExcelAddEquipSlotLevel03(builder *flatbuffers.Builder, equipSlotLevel03 int32) {
	builder.PrependInt32Slot(20, equipSlotLevel03, 0)
}
func PresetCharacterGroupExcelAddEquipCharacterWeapon(builder *flatbuffers.Builder, equipCharacterWeapon bool) {
	builder.PrependBoolSlot(21, equipCharacterWeapon, false)
}
func PresetCharacterGroupExcelAddEquipCharacterWeaponTier(builder *flatbuffers.Builder, equipCharacterWeaponTier int32) {
	builder.PrependInt32Slot(22, equipCharacterWeaponTier, 0)
}
func PresetCharacterGroupExcelAddEquipCharacterWeaponLevel(builder *flatbuffers.Builder, equipCharacterWeaponLevel int32) {
	builder.PrependInt32Slot(23, equipCharacterWeaponLevel, 0)
}
func PresetCharacterGroupExcelAddEquipCharacterGear(builder *flatbuffers.Builder, equipCharacterGear bool) {
	builder.PrependBoolSlot(24, equipCharacterGear, false)
}
func PresetCharacterGroupExcelAddEquipCharacterGearTier(builder *flatbuffers.Builder, equipCharacterGearTier int32) {
	builder.PrependInt32Slot(25, equipCharacterGearTier, 0)
}
func PresetCharacterGroupExcelAddEquipCharacterGearLevel(builder *flatbuffers.Builder, equipCharacterGearLevel int32) {
	builder.PrependInt32Slot(26, equipCharacterGearLevel, 0)
}
func PresetCharacterGroupExcelAddPotentialType01(builder *flatbuffers.Builder, potentialType01 PotentialStatBonusRateType) {
	builder.PrependInt32Slot(27, int32(potentialType01), 0)
}
func PresetCharacterGroupExcelAddPotentialLevel01(builder *flatbuffers.Builder, potentialLevel01 int32) {
	builder.PrependInt32Slot(28, potentialLevel01, 0)
}
func PresetCharacterGroupExcelAddPotentialType02(builder *flatbuffers.Builder, potentialType02 PotentialStatBonusRateType) {
	builder.PrependInt32Slot(29, int32(potentialType02), 0)
}
func PresetCharacterGroupExcelAddPotentialLevel02(builder *flatbuffers.Builder, potentialLevel02 int32) {
	builder.PrependInt32Slot(30, potentialLevel02, 0)
}
func PresetCharacterGroupExcelAddPotentialType03(builder *flatbuffers.Builder, potentialType03 PotentialStatBonusRateType) {
	builder.PrependInt32Slot(31, int32(potentialType03), 0)
}
func PresetCharacterGroupExcelAddPotentialLevel03(builder *flatbuffers.Builder, potentialLevel03 int32) {
	builder.PrependInt32Slot(32, potentialLevel03, 0)
}
func PresetCharacterGroupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
