// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameRoadExcelDto represents a FlatBuffers table
type MinigameRoadExcelDto struct {
	fbsutils.FlatBuffer
	None []RoadPuzzleMapTileType `json:"none"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameRoadExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MinigameRoad"))
	}
	MinigameRoadExcelStart(b)
	MinigameRoadExcelStartNoneVector(b, len(t.None))
	for i := range len(t.None) {
		b.PrependInt32(fbsutils.Convert(int32(t.None[len(t.None)-i-1]), t.FlatBuffer.TableKey))
	}
	MinigameRoadExcelAddNone(b, b.EndVector(len(t.None)))
	return MinigameRoadExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameRoadExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameRoadExcelDto) UnmarshalMessage(e *MinigameRoadExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("MinigameRoad"))
	}
	t.None = make([]RoadPuzzleMapTileType, e.NoneLength())
	for i := range e.NoneLength() {
		t.None[i] = RoadPuzzleMapTileType(fbsutils.Convert(int32(e.None(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameRoadExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameRoadExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameRoadExcelDto) FlatDataName() string {
	return "MinigameRoadExcel"
}
