// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentLocationExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentLocationExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentLocationExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentLocationExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentLocationExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentLocationExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentLocationExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentLocationExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentLocationExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentLocationExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentLocationExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentLocationExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentLocationExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentLocationExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *EventContentLocationExcel) PrefabPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentLocationExcel) LocationResetScheduleCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateLocationResetScheduleCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *EventContentLocationExcel) ScheduleEventPointCostParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateScheduleEventPointCostParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *EventContentLocationExcel) ScheduleEventPointCostParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateScheduleEventPointCostParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *EventContentLocationExcel) ScheduleEventPointCostParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateScheduleEventPointCostParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *EventContentLocationExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *EventContentLocationExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *EventContentLocationExcel) InformationGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentLocationExcel) MutateInformationGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func EventContentLocationExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func EventContentLocationExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentLocationExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func EventContentLocationExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(2, localizeEtcId, 0)
}
func EventContentLocationExcelAddPrefabPath(builder *flatbuffers.Builder, prefabPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(prefabPath), 0)
}
func EventContentLocationExcelAddLocationResetScheduleCount(builder *flatbuffers.Builder, locationResetScheduleCount int32) {
	builder.PrependInt32Slot(4, locationResetScheduleCount, 0)
}
func EventContentLocationExcelAddScheduleEventPointCostParcelType(builder *flatbuffers.Builder, scheduleEventPointCostParcelType ParcelType) {
	builder.PrependInt32Slot(5, int32(scheduleEventPointCostParcelType), 0)
}
func EventContentLocationExcelAddScheduleEventPointCostParcelId(builder *flatbuffers.Builder, scheduleEventPointCostParcelId int64) {
	builder.PrependInt64Slot(6, scheduleEventPointCostParcelId, 0)
}
func EventContentLocationExcelAddScheduleEventPointCostParcelAmount(builder *flatbuffers.Builder, scheduleEventPointCostParcelAmount int64) {
	builder.PrependInt64Slot(7, scheduleEventPointCostParcelAmount, 0)
}
func EventContentLocationExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(8, int32(rewardParcelType), 0)
}
func EventContentLocationExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(9, rewardParcelId, 0)
}
func EventContentLocationExcelAddInformationGroupId(builder *flatbuffers.Builder, informationGroupId int64) {
	builder.PrependInt64Slot(10, informationGroupId, 0)
}
func EventContentLocationExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
