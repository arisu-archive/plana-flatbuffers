// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GachaElementRecursiveExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGachaElementRecursiveExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaElementRecursiveExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GachaElementRecursiveExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGachaElementRecursiveExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaElementRecursiveExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GachaElementRecursiveExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GachaElementRecursiveExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GachaElementRecursiveExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GachaElementRecursiveExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GachaElementRecursiveExcel) GachaGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateGachaGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GachaElementRecursiveExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *GachaElementRecursiveExcel) ParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *GachaElementRecursiveExcel) ParcelAmountMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateParcelAmountMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *GachaElementRecursiveExcel) ParcelAmountMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateParcelAmountMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *GachaElementRecursiveExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *GachaElementRecursiveExcel) State() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementRecursiveExcel) MutateState(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func GachaElementRecursiveExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func GachaElementRecursiveExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func GachaElementRecursiveExcelAddGachaGroupId(builder *flatbuffers.Builder, gachaGroupId int64) {
	builder.PrependInt64Slot(1, gachaGroupId, 0)
}
func GachaElementRecursiveExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(parcelType), 0)
}
func GachaElementRecursiveExcelAddParcelId(builder *flatbuffers.Builder, parcelId int64) {
	builder.PrependInt64Slot(3, parcelId, 0)
}
func GachaElementRecursiveExcelAddParcelAmountMin(builder *flatbuffers.Builder, parcelAmountMin int32) {
	builder.PrependInt32Slot(4, parcelAmountMin, 0)
}
func GachaElementRecursiveExcelAddParcelAmountMax(builder *flatbuffers.Builder, parcelAmountMax int32) {
	builder.PrependInt32Slot(5, parcelAmountMax, 0)
}
func GachaElementRecursiveExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(6, prob, 0)
}
func GachaElementRecursiveExcelAddState(builder *flatbuffers.Builder, state int32) {
	builder.PrependInt32Slot(7, state, 0)
}
func GachaElementRecursiveExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
