// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TacticArenaSimulatorSettingExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTacticArenaSimulatorSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *TacticArenaSimulatorSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TacticArenaSimulatorSettingExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTacticArenaSimulatorSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *TacticArenaSimulatorSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TacticArenaSimulatorSettingExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TacticArenaSimulatorSettingExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TacticArenaSimulatorSettingExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TacticArenaSimulatorSettingExcel) AttackerFrom() ArenaSimulatorServer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ArenaSimulatorServer(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateAttackerFrom(n ArenaSimulatorServer) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *TacticArenaSimulatorSettingExcel) AttackerPresetGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateAttackerPresetGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) AttackerSpecialNum() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateAttackerSpecialNum(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) AttackerStrikerNum() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateAttackerStrikerNum(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) AttackerUserArenaGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateAttackerUserArenaGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) AttackerUserArenaRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateAttackerUserArenaRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) DefenderFrom() ArenaSimulatorServer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return ArenaSimulatorServer(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateDefenderFrom(n ArenaSimulatorServer) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *TacticArenaSimulatorSettingExcel) DefenderPresetGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateDefenderPresetGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) DefenderSpecialNum() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateDefenderSpecialNum(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) DefenderStrikerNum() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateDefenderStrikerNum(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) DefenderUserArenaGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateDefenderUserArenaGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) DefenderUserArenaRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateDefenderUserArenaRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) Order() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *TacticArenaSimulatorSettingExcel) Repeat() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TacticArenaSimulatorSettingExcel) MutateRepeat(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func TacticArenaSimulatorSettingExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func TacticArenaSimulatorSettingExcelAddAttackerFrom(builder *flatbuffers.Builder, attackerFrom ArenaSimulatorServer) {
	builder.PrependInt32Slot(0, int32(attackerFrom), 0)
}
func TacticArenaSimulatorSettingExcelAddAttackerPresetGroupId(builder *flatbuffers.Builder, attackerPresetGroupId int64) {
	builder.PrependInt64Slot(1, attackerPresetGroupId, 0)
}
func TacticArenaSimulatorSettingExcelAddAttackerSpecialNum(builder *flatbuffers.Builder, attackerSpecialNum int64) {
	builder.PrependInt64Slot(2, attackerSpecialNum, 0)
}
func TacticArenaSimulatorSettingExcelAddAttackerStrikerNum(builder *flatbuffers.Builder, attackerStrikerNum int64) {
	builder.PrependInt64Slot(3, attackerStrikerNum, 0)
}
func TacticArenaSimulatorSettingExcelAddAttackerUserArenaGroup(builder *flatbuffers.Builder, attackerUserArenaGroup int64) {
	builder.PrependInt64Slot(4, attackerUserArenaGroup, 0)
}
func TacticArenaSimulatorSettingExcelAddAttackerUserArenaRank(builder *flatbuffers.Builder, attackerUserArenaRank int64) {
	builder.PrependInt64Slot(5, attackerUserArenaRank, 0)
}
func TacticArenaSimulatorSettingExcelAddDefenderFrom(builder *flatbuffers.Builder, defenderFrom ArenaSimulatorServer) {
	builder.PrependInt32Slot(6, int32(defenderFrom), 0)
}
func TacticArenaSimulatorSettingExcelAddDefenderPresetGroupId(builder *flatbuffers.Builder, defenderPresetGroupId int64) {
	builder.PrependInt64Slot(7, defenderPresetGroupId, 0)
}
func TacticArenaSimulatorSettingExcelAddDefenderSpecialNum(builder *flatbuffers.Builder, defenderSpecialNum int64) {
	builder.PrependInt64Slot(8, defenderSpecialNum, 0)
}
func TacticArenaSimulatorSettingExcelAddDefenderStrikerNum(builder *flatbuffers.Builder, defenderStrikerNum int64) {
	builder.PrependInt64Slot(9, defenderStrikerNum, 0)
}
func TacticArenaSimulatorSettingExcelAddDefenderUserArenaGroup(builder *flatbuffers.Builder, defenderUserArenaGroup int64) {
	builder.PrependInt64Slot(10, defenderUserArenaGroup, 0)
}
func TacticArenaSimulatorSettingExcelAddDefenderUserArenaRank(builder *flatbuffers.Builder, defenderUserArenaRank int64) {
	builder.PrependInt64Slot(11, defenderUserArenaRank, 0)
}
func TacticArenaSimulatorSettingExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(12, groundId, 0)
}
func TacticArenaSimulatorSettingExcelAddOrder(builder *flatbuffers.Builder, order int64) {
	builder.PrependInt64Slot(13, order, 0)
}
func TacticArenaSimulatorSettingExcelAddRepeat(builder *flatbuffers.Builder, repeat int64) {
	builder.PrependInt64Slot(14, repeat, 0)
}
func TacticArenaSimulatorSettingExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
