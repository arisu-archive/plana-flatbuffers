// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScenarioReplayExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsScenarioReplayExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioReplayExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScenarioReplayExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScenarioReplayExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioReplayExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScenarioReplayExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScenarioReplayExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScenarioReplayExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScenarioReplayExcel) ModeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateModeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ScenarioReplayExcel) VolumeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateVolumeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ScenarioReplayExcel) ReplayType() ScenarioModeReplayTypes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ScenarioModeReplayTypes(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateReplayType(n ScenarioModeReplayTypes) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ScenarioReplayExcel) ChapterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateChapterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ScenarioReplayExcel) EpisodeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateEpisodeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ScenarioReplayExcel) FrontScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ScenarioReplayExcel) FrontScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateFrontScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ScenarioReplayExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ScenarioReplayExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ScenarioReplayExcel) BackScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ScenarioReplayExcel) BackScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ScenarioReplayExcel) MutateBackScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ScenarioReplayExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ScenarioReplayExcelAddModeId(builder *flatbuffers.Builder, modeId int64) {
	builder.PrependInt64Slot(0, modeId, 0)
}
func ScenarioReplayExcelAddVolumeId(builder *flatbuffers.Builder, volumeId int64) {
	builder.PrependInt64Slot(1, volumeId, 0)
}
func ScenarioReplayExcelAddReplayType(builder *flatbuffers.Builder, replayType ScenarioModeReplayTypes) {
	builder.PrependInt32Slot(2, int32(replayType), 0)
}
func ScenarioReplayExcelAddChapterId(builder *flatbuffers.Builder, chapterId int64) {
	builder.PrependInt64Slot(3, chapterId, 0)
}
func ScenarioReplayExcelAddEpisodeId(builder *flatbuffers.Builder, episodeId int64) {
	builder.PrependInt64Slot(4, episodeId, 0)
}
func ScenarioReplayExcelAddFrontScenarioGroupId(builder *flatbuffers.Builder, frontScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(frontScenarioGroupId), 0)
}
func ScenarioReplayExcelStartFrontScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ScenarioReplayExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(6, groundId, 0)
}
func ScenarioReplayExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(7, battleDuration, 0)
}
func ScenarioReplayExcelAddBackScenarioGroupId(builder *flatbuffers.Builder, backScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(backScenarioGroupId), 0)
}
func ScenarioReplayExcelStartBackScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ScenarioReplayExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
