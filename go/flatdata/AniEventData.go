// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatdata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AniEventData struct {
	_tab flatbuffers.Table
}

func GetRootAsAniEventData(buf []byte, offset flatbuffers.UOffsetT) *AniEventData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AniEventData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAniEventData(buf []byte, offset flatbuffers.UOffsetT) *AniEventData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AniEventData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AniEventData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AniEventData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AniEventData) StringParam() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AniEventData) FloatParam() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AniEventData) MutateFloatParam(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *AniEventData) IntParam() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AniEventData) MutateIntParam(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *AniEventData) Time() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AniEventData) MutateTime(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *AniEventData) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AniEventDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AniEventDataAddStringParam(builder *flatbuffers.Builder, stringParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(stringParam), 0)
}
func AniEventDataAddFloatParam(builder *flatbuffers.Builder, floatParam float32) {
	builder.PrependFloat32Slot(1, floatParam, 0.0)
}
func AniEventDataAddIntParam(builder *flatbuffers.Builder, intParam int32) {
	builder.PrependInt32Slot(2, intParam, 0)
}
func AniEventDataAddTime(builder *flatbuffers.Builder, time float32) {
	builder.PrependFloat32Slot(3, time, 0.0)
}
func AniEventDataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func AniEventDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
