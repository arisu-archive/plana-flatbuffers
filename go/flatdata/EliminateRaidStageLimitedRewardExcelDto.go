// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EliminateRaidStageLimitedRewardExcelDto represents a FlatBuffers table
type EliminateRaidStageLimitedRewardExcelDto struct {
	fbsutils.FlatBuffer
	LimitedRewardId             int64        `json:"limited_reward_id"`
	LimitedRewardParcelType     []ParcelType `json:"limited_reward_parcel_type"`
	LimitedRewardParcelUniqueId []int64      `json:"limited_reward_parcel_unique_id"`
	LimitedRewardAmount         []int64      `json:"limited_reward_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EliminateRaidStageLimitedRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EliminateRaidStageLimitedReward"))
	}
	EliminateRaidStageLimitedRewardExcelStart(b)
	EliminateRaidStageLimitedRewardExcelAddLimitedRewardId(b, fbsutils.Convert(t.LimitedRewardId, t.FlatBuffer.TableKey))
	EliminateRaidStageLimitedRewardExcelStartLimitedRewardParcelTypeVector(b, len(t.LimitedRewardParcelType))
	for i := range len(t.LimitedRewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.LimitedRewardParcelType[len(t.LimitedRewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EliminateRaidStageLimitedRewardExcelAddLimitedRewardParcelType(b, b.EndVector(len(t.LimitedRewardParcelType)))
	EliminateRaidStageLimitedRewardExcelStartLimitedRewardParcelUniqueIdVector(b, len(t.LimitedRewardParcelUniqueId))
	for i := range len(t.LimitedRewardParcelUniqueId) {
		b.PrependInt64(fbsutils.Convert(t.LimitedRewardParcelUniqueId[len(t.LimitedRewardParcelUniqueId)-i-1], t.FlatBuffer.TableKey))
	}
	EliminateRaidStageLimitedRewardExcelAddLimitedRewardParcelUniqueId(b, b.EndVector(len(t.LimitedRewardParcelUniqueId)))
	EliminateRaidStageLimitedRewardExcelStartLimitedRewardAmountVector(b, len(t.LimitedRewardAmount))
	for i := range len(t.LimitedRewardAmount) {
		b.PrependInt64(fbsutils.Convert(t.LimitedRewardAmount[len(t.LimitedRewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EliminateRaidStageLimitedRewardExcelAddLimitedRewardAmount(b, b.EndVector(len(t.LimitedRewardAmount)))
	return EliminateRaidStageLimitedRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EliminateRaidStageLimitedRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishEliminateRaidStageLimitedRewardExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EliminateRaidStageLimitedRewardExcelDto) UnmarshalMessage(e *EliminateRaidStageLimitedRewardExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("EliminateRaidStageLimitedReward"))
	}
	t.LimitedRewardId = fbsutils.Convert(e.LimitedRewardId(), t.FlatBuffer.TableKey)
	t.LimitedRewardParcelType = make([]ParcelType, e.LimitedRewardParcelTypeLength())
	for i := range e.LimitedRewardParcelTypeLength() {
		t.LimitedRewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.LimitedRewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.LimitedRewardParcelUniqueId = make([]int64, e.LimitedRewardParcelUniqueIdLength())
	for i := range e.LimitedRewardParcelUniqueIdLength() {
		t.LimitedRewardParcelUniqueId[i] = fbsutils.Convert(e.LimitedRewardParcelUniqueId(i), t.FlatBuffer.TableKey)
	}
	t.LimitedRewardAmount = make([]int64, e.LimitedRewardAmountLength())
	for i := range e.LimitedRewardAmountLength() {
		t.LimitedRewardAmount[i] = fbsutils.Convert(e.LimitedRewardAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EliminateRaidStageLimitedRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEliminateRaidStageLimitedRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EliminateRaidStageLimitedRewardExcelDto) FlatDataName() string {
	return "EliminateRaidStageLimitedRewardExcel"
}
