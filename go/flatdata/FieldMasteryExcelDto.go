// Code generated by fbsgen. DO NOT EDIT.
// Package flatdata contains generated code for FlatBuffers schema
package flatdata

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FieldMasteryExcelDto represents a FlatBuffers table
type FieldMasteryExcelDto struct {
	fbsutils.FlatBuffer
	AccomplishmentConditionId   int64              `json:"accomplishment_condition_id"`
	AccomplishmentConditionType FieldConditionType `json:"accomplishment_condition_type"`
	ExpAmount                   int64              `json:"exp_amount"`
	Order                       int32              `json:"order"`
	SeasonId                    int64              `json:"season_id"`
	TokenId                     int64              `json:"token_id"`
	TokenRequirement            int64              `json:"token_requirement"`
	TokenType                   ParcelType         `json:"token_type"`
	UniqueId                    int64              `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FieldMasteryExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldMastery"))
	}
	FieldMasteryExcelStart(b)
	FieldMasteryExcelAddAccomplishmentConditionId(b, fbsutils.Convert(t.AccomplishmentConditionId, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddAccomplishmentConditionType(b, fbsutils.Convert(t.AccomplishmentConditionType, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddExpAmount(b, fbsutils.Convert(t.ExpAmount, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddTokenId(b, fbsutils.Convert(t.TokenId, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddTokenRequirement(b, fbsutils.Convert(t.TokenRequirement, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddTokenType(b, fbsutils.Convert(t.TokenType, t.FlatBuffer.TableKey))
	FieldMasteryExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return FieldMasteryExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FieldMasteryExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FieldMasteryExcelDto) UnmarshalMessage(e *FieldMasteryExcel) error {
	if t.FlatBuffer.TableKey == nil {
		t.FlatBuffer.InitKey(fbsutils.CreateTableKey("FieldMastery"))
	}
	t.AccomplishmentConditionId = fbsutils.Convert(e.AccomplishmentConditionId(), t.FlatBuffer.TableKey)
	t.AccomplishmentConditionType = FieldConditionType(fbsutils.Convert(int32(e.AccomplishmentConditionType()), t.FlatBuffer.TableKey))
	t.ExpAmount = fbsutils.Convert(e.ExpAmount(), t.FlatBuffer.TableKey)
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	t.TokenId = fbsutils.Convert(e.TokenId(), t.FlatBuffer.TableKey)
	t.TokenRequirement = fbsutils.Convert(e.TokenRequirement(), t.FlatBuffer.TableKey)
	t.TokenType = ParcelType(fbsutils.Convert(int32(e.TokenType()), t.FlatBuffer.TableKey))
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FieldMasteryExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFieldMasteryExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FieldMasteryExcelDto) FlatDataName() string {
	return "FieldMasteryExcel"
}
