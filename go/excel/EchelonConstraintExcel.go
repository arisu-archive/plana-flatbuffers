// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EchelonConstraintExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEchelonConstraintExcel(buf []byte, offset flatbuffers.UOffsetT) *EchelonConstraintExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EchelonConstraintExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEchelonConstraintExcel(buf []byte, offset flatbuffers.UOffsetT) *EchelonConstraintExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EchelonConstraintExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EchelonConstraintExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EchelonConstraintExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EchelonConstraintExcel) Role() TacticRole {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TacticRole(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutateRole(n TacticRole) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *EchelonConstraintExcel) Club() Club {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Club(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutateClub(n Club) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EchelonConstraintExcel) School() School {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return School(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutateSchool(n School) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EchelonConstraintExcel) WeaponType() WeaponType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return WeaponType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutateWeaponType(n WeaponType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *EchelonConstraintExcel) PersonalityId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EchelonConstraintExcel) PersonalityIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutatePersonalityId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EchelonConstraintExcel) CharacterId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EchelonConstraintExcel) CharacterIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutateCharacterId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EchelonConstraintExcel) IsWhiteList() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EchelonConstraintExcel) MutateIsWhiteList(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *EchelonConstraintExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EchelonConstraintExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func EchelonConstraintExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func EchelonConstraintExcelAddRole(builder *flatbuffers.Builder, role TacticRole) {
	builder.PrependInt32Slot(0, int32(role), 0)
}
func EchelonConstraintExcelAddClub(builder *flatbuffers.Builder, club Club) {
	builder.PrependInt32Slot(1, int32(club), 0)
}
func EchelonConstraintExcelAddSchool(builder *flatbuffers.Builder, school School) {
	builder.PrependInt32Slot(2, int32(school), 0)
}
func EchelonConstraintExcelAddWeaponType(builder *flatbuffers.Builder, weaponType WeaponType) {
	builder.PrependInt32Slot(3, int32(weaponType), 0)
}
func EchelonConstraintExcelAddPersonalityId(builder *flatbuffers.Builder, personalityId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(personalityId), 0)
}
func EchelonConstraintExcelStartPersonalityIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EchelonConstraintExcelAddCharacterId(builder *flatbuffers.Builder, characterId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(characterId), 0)
}
func EchelonConstraintExcelStartCharacterIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EchelonConstraintExcelAddIsWhiteList(builder *flatbuffers.Builder, isWhiteList bool) {
	builder.PrependBoolSlot(6, isWhiteList, false)
}
func EchelonConstraintExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(7, groupId, 0)
}
func EchelonConstraintExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
