// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BattlePassRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBattlePassRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BattlePassRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBattlePassRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BattlePassRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BattlePassRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BattlePassRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BattlePassRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BattlePassRewardExcel) Level() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassRewardExcel) MutateLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *BattlePassRewardExcel) RewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassRewardExcel) MutateRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *BattlePassRewardExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassRewardExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *BattlePassRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BattlePassRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *BattlePassRewardExcel) RewardParcelUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassRewardExcel) MutateRewardParcelUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func BattlePassRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func BattlePassRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func BattlePassRewardExcelAddLevel(builder *flatbuffers.Builder, level int64) {
	builder.PrependInt64Slot(1, level, 0)
}
func BattlePassRewardExcelAddRewardGroupId(builder *flatbuffers.Builder, rewardGroupId int64) {
	builder.PrependInt64Slot(2, rewardGroupId, 0)
}
func BattlePassRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(3, rewardParcelAmount, 0)
}
func BattlePassRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(4, int32(rewardParcelType), 0)
}
func BattlePassRewardExcelAddRewardParcelUniqueId(builder *flatbuffers.Builder, rewardParcelUniqueId int64) {
	builder.PrependInt64Slot(5, rewardParcelUniqueId, 0)
}
func BattlePassRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
