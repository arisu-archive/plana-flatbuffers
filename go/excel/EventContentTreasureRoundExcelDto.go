// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentTreasureRoundExcelDto represents a FlatBuffers table
type EventContentTreasureRoundExcelDto struct {
	fbsutils.FlatBuffer
	TreasureCellImagePath    string  `json:"treasure_cell_image_path"`
	RewardAmount             []int32 `json:"reward_amount"`
	RewardId                 []int64 `json:"reward_id"`
	CellRewardId             int64   `json:"cell_reward_id"`
	CellCheckGoodsId         int64   `json:"cell_check_goods_id"`
	CellVisualSortUnstructed bool    `json:"cell_visual_sort_unstructed"`
	TreasureRoundSize        []int32 `json:"treasure_round_size"`
	TreasureRound            int32   `json:"treasure_round"`
	EventContentId           int64   `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentTreasureRoundExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentTreasureRoundExcelStart(b)
	EventContentTreasureRoundExcelAddTreasureCellImagePath(b, b.CreateString(fbsutils.Convert(t.TreasureCellImagePath, t.FlatBuffer.TableKey)))
	EventContentTreasureRoundExcelStartRewardAmountVector(b, len(t.RewardAmount))
	for i := range len(t.RewardAmount) {
		b.PrependInt32(fbsutils.Convert(t.RewardAmount[len(t.RewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentTreasureRoundExcelAddRewardAmount(b, b.EndVector(len(t.RewardAmount)))
	EventContentTreasureRoundExcelStartRewardIdVector(b, len(t.RewardId))
	for i := range len(t.RewardId) {
		b.PrependInt64(fbsutils.Convert(t.RewardId[len(t.RewardId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentTreasureRoundExcelAddRewardId(b, b.EndVector(len(t.RewardId)))
	EventContentTreasureRoundExcelAddCellRewardId(b, fbsutils.Convert(t.CellRewardId, t.FlatBuffer.TableKey))
	EventContentTreasureRoundExcelAddCellCheckGoodsId(b, fbsutils.Convert(t.CellCheckGoodsId, t.FlatBuffer.TableKey))
	EventContentTreasureRoundExcelAddCellVisualSortUnstructed(b, t.CellVisualSortUnstructed)
	EventContentTreasureRoundExcelStartTreasureRoundSizeVector(b, len(t.TreasureRoundSize))
	for i := range len(t.TreasureRoundSize) {
		b.PrependInt32(fbsutils.Convert(t.TreasureRoundSize[len(t.TreasureRoundSize)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentTreasureRoundExcelAddTreasureRoundSize(b, b.EndVector(len(t.TreasureRoundSize)))
	EventContentTreasureRoundExcelAddTreasureRound(b, fbsutils.Convert(t.TreasureRound, t.FlatBuffer.TableKey))
	EventContentTreasureRoundExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return EventContentTreasureRoundExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentTreasureRoundExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentTreasureRoundExcelDto) UnmarshalMessage(e *EventContentTreasureRoundExcel) error {
	t.TreasureCellImagePath = fbsutils.Convert(string(e.TreasureCellImagePath()), t.FlatBuffer.TableKey)
	t.RewardAmount = make([]int32, e.RewardAmountLength())
	for i := range e.RewardAmountLength() {
		t.RewardAmount[i] = fbsutils.Convert(e.RewardAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardId = make([]int64, e.RewardIdLength())
	for i := range e.RewardIdLength() {
		t.RewardId[i] = fbsutils.Convert(e.RewardId(i), t.FlatBuffer.TableKey)
	}
	t.CellRewardId = fbsutils.Convert(e.CellRewardId(), t.FlatBuffer.TableKey)
	t.CellCheckGoodsId = fbsutils.Convert(e.CellCheckGoodsId(), t.FlatBuffer.TableKey)
	t.CellVisualSortUnstructed = e.CellVisualSortUnstructed()
	t.TreasureRoundSize = make([]int32, e.TreasureRoundSizeLength())
	for i := range e.TreasureRoundSizeLength() {
		t.TreasureRoundSize[i] = fbsutils.Convert(e.TreasureRoundSize(i), t.FlatBuffer.TableKey)
	}
	t.TreasureRound = fbsutils.Convert(e.TreasureRound(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentTreasureRoundExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentTreasureRoundExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentTreasureRoundExcelDto) FlatDataName() string {
	return "EventContentTreasureRoundExcel"
}
