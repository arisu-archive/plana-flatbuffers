// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StickerPageContentExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsStickerPageContentExcel(buf []byte, offset flatbuffers.UOffsetT) *StickerPageContentExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StickerPageContentExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStickerPageContentExcel(buf []byte, offset flatbuffers.UOffsetT) *StickerPageContentExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StickerPageContentExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StickerPageContentExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StickerPageContentExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StickerPageContentExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *StickerPageContentExcel) StickerGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *StickerPageContentExcel) StickerPageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerPageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *StickerPageContentExcel) StickerSlot() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerSlot(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *StickerPageContentExcel) StickerGetConditionType() StickerGetConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return StickerGetConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerGetConditionType(n StickerGetConditionType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *StickerPageContentExcel) StickerCheckPassType() StickerCheckPassType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return StickerCheckPassType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerCheckPassType(n StickerCheckPassType) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *StickerPageContentExcel) GetStickerConditionType() GetStickerConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return GetStickerConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateGetStickerConditionType(n GetStickerConditionType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *StickerPageContentExcel) StickerGetConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerGetConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *StickerPageContentExcel) StickerGetConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StickerPageContentExcel) StickerGetConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerGetConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StickerPageContentExcel) StickerGetConditionParameterTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *StickerPageContentExcel) StickerGetConditionParameterTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutateStickerGetConditionParameterTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *StickerPageContentExcel) PackedStickerIconLocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StickerPageContentExcel) MutatePackedStickerIconLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

func (rcv *StickerPageContentExcel) PackedStickerIconPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StickerPageContentExcel) IconPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StickerPageContentExcel) StickerDetailPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StickerPageContentExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func StickerPageContentExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func StickerPageContentExcelAddStickerGroupId(builder *flatbuffers.Builder, stickerGroupId int64) {
	builder.PrependInt64Slot(1, stickerGroupId, 0)
}
func StickerPageContentExcelAddStickerPageId(builder *flatbuffers.Builder, stickerPageId int64) {
	builder.PrependInt64Slot(2, stickerPageId, 0)
}
func StickerPageContentExcelAddStickerSlot(builder *flatbuffers.Builder, stickerSlot int64) {
	builder.PrependInt64Slot(3, stickerSlot, 0)
}
func StickerPageContentExcelAddStickerGetConditionType(builder *flatbuffers.Builder, stickerGetConditionType StickerGetConditionType) {
	builder.PrependInt32Slot(4, int32(stickerGetConditionType), 0)
}
func StickerPageContentExcelAddStickerCheckPassType(builder *flatbuffers.Builder, stickerCheckPassType StickerCheckPassType) {
	builder.PrependInt32Slot(5, int32(stickerCheckPassType), 0)
}
func StickerPageContentExcelAddGetStickerConditionType(builder *flatbuffers.Builder, getStickerConditionType GetStickerConditionType) {
	builder.PrependInt32Slot(6, int32(getStickerConditionType), 0)
}
func StickerPageContentExcelAddStickerGetConditionCount(builder *flatbuffers.Builder, stickerGetConditionCount int64) {
	builder.PrependInt64Slot(7, stickerGetConditionCount, 0)
}
func StickerPageContentExcelAddStickerGetConditionParameter(builder *flatbuffers.Builder, stickerGetConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(stickerGetConditionParameter), 0)
}
func StickerPageContentExcelStartStickerGetConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StickerPageContentExcelAddStickerGetConditionParameterTag(builder *flatbuffers.Builder, stickerGetConditionParameterTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(stickerGetConditionParameterTag), 0)
}
func StickerPageContentExcelStartStickerGetConditionParameterTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StickerPageContentExcelAddPackedStickerIconLocalizeEtcId(builder *flatbuffers.Builder, packedStickerIconLocalizeEtcId uint32) {
	builder.PrependUint32Slot(10, packedStickerIconLocalizeEtcId, 0)
}
func StickerPageContentExcelAddPackedStickerIconPath(builder *flatbuffers.Builder, packedStickerIconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(packedStickerIconPath), 0)
}
func StickerPageContentExcelAddIconPath(builder *flatbuffers.Builder, iconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(iconPath), 0)
}
func StickerPageContentExcelAddStickerDetailPath(builder *flatbuffers.Builder, stickerDetailPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(stickerDetailPath), 0)
}
func StickerPageContentExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
