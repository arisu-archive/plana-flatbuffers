// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioBGNameExcelDto represents a FlatBuffers table
type ScenarioBGNameExcelDto struct {
	fbsutils.FlatBuffer
	SpineLocalPosY int32          `json:"spine_local_pos_y"`
	SpineLocalPosX int32          `json:"spine_local_pos_x"`
	SpineScale     float32        `json:"spine_scale"`
	AnimationName  string         `json:"animation_name"`
	AnimationRoot  string         `json:"animation_root"`
	BgType         ScenarioBGType `json:"bg_type"`
	BgFileName     string         `json:"bg_file_name"`
	ProductionStep ProductionStep `json:"production_step"`
	Name           uint32         `json:"name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioBGNameExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ScenarioBGNameExcelStart(b)
	ScenarioBGNameExcelAddSpineLocalPosY(b, fbsutils.Convert(t.SpineLocalPosY, t.FlatBuffer.TableKey))
	ScenarioBGNameExcelAddSpineLocalPosX(b, fbsutils.Convert(t.SpineLocalPosX, t.FlatBuffer.TableKey))
	ScenarioBGNameExcelAddSpineScale(b, fbsutils.Convert(t.SpineScale, t.FlatBuffer.TableKey))
	ScenarioBGNameExcelAddAnimationName(b, b.CreateString(fbsutils.Convert(t.AnimationName, t.FlatBuffer.TableKey)))
	ScenarioBGNameExcelAddAnimationRoot(b, b.CreateString(fbsutils.Convert(t.AnimationRoot, t.FlatBuffer.TableKey)))
	ScenarioBGNameExcelAddBgType(b, fbsutils.Convert(t.BgType, t.FlatBuffer.TableKey))
	ScenarioBGNameExcelAddBgFileName(b, b.CreateString(fbsutils.Convert(t.BgFileName, t.FlatBuffer.TableKey)))
	ScenarioBGNameExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	ScenarioBGNameExcelAddName(b, fbsutils.Convert(t.Name, t.FlatBuffer.TableKey))
	return ScenarioBGNameExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioBGNameExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioBGNameExcelDto) UnmarshalMessage(e *ScenarioBGNameExcel) error {
	t.SpineLocalPosY = fbsutils.Convert(e.SpineLocalPosY(), t.FlatBuffer.TableKey)
	t.SpineLocalPosX = fbsutils.Convert(e.SpineLocalPosX(), t.FlatBuffer.TableKey)
	t.SpineScale = fbsutils.Convert(e.SpineScale(), t.FlatBuffer.TableKey)
	t.AnimationName = fbsutils.Convert(string(e.AnimationName()), t.FlatBuffer.TableKey)
	t.AnimationRoot = fbsutils.Convert(string(e.AnimationRoot()), t.FlatBuffer.TableKey)
	t.BgType = ScenarioBGType(fbsutils.Convert(int32(e.BgType()), t.FlatBuffer.TableKey))
	t.BgFileName = fbsutils.Convert(string(e.BgFileName()), t.FlatBuffer.TableKey)
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.Name = fbsutils.Convert(e.Name(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioBGNameExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioBGNameExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioBGNameExcelDto) FlatDataName() string {
	return "ScenarioBGNameExcel"
}
