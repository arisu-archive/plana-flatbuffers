// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDefenseStageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDefenseStageExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDefenseStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDefenseStageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDefenseStageExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDefenseStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDefenseStageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDefenseStageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDefenseStageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDefenseStageExcel) StageHint() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageHint(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MiniGameDefenseStageExcel) MininageDefenseFixedStatId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateMininageDefenseFixedStatId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDefenseStageExcel) FixedEchelon() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateFixedEchelon(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDefenseStageExcel) DefenseFormationBgPrefabScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MiniGameDefenseStageExcel) MutateDefenseFormationBgPrefabScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *MiniGameDefenseStageExcel) DefenseFormationBgPrefab() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDefenseStageExcel) StarGoalAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) StarGoalAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStarGoalAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *MiniGameDefenseStageExcel) StarGoal(j int) StarGoalType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StarGoalType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) StarGoalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStarGoal(j int, n StarGoalType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameDefenseStageExcel) ContentType() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateContentType(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *MiniGameDefenseStageExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *MiniGameDefenseStageExcel) RecommandLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateRecommandLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *MiniGameDefenseStageExcel) StageTopography() StageTopography {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return StageTopography(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageTopography(n StageTopography) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *MiniGameDefenseStageExcel) ClearScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) ClearScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateClearScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDefenseStageExcel) EnterScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) EnterScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateEnterScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDefenseStageExcel) EventContentStageRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateEventContentStageRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *MiniGameDefenseStageExcel) StageEnterCostAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageEnterCostAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *MiniGameDefenseStageExcel) StageEnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *MiniGameDefenseStageExcel) StageEnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(36, int32(n))
}

func (rcv *MiniGameDefenseStageExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *MiniGameDefenseStageExcel) EchelonExtensionType() EchelonExtensionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return EchelonExtensionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateEchelonExtensionType(n EchelonExtensionType) bool {
	return rcv._tab.MutateInt32Slot(40, int32(n))
}

func (rcv *MiniGameDefenseStageExcel) PrevStageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutatePrevStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func (rcv *MiniGameDefenseStageExcel) StageDisplay() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageDisplay(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

func (rcv *MiniGameDefenseStageExcel) StageNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

func (rcv *MiniGameDefenseStageExcel) StageDifficultyLocalize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageDifficultyLocalize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(48, n)
}

func (rcv *MiniGameDefenseStageExcel) StageDifficulty() StageDifficulty {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return StageDifficulty(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateStageDifficulty(n StageDifficulty) bool {
	return rcv._tab.MutateInt32Slot(50, int32(n))
}

func (rcv *MiniGameDefenseStageExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

func (rcv *MiniGameDefenseStageExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDefenseStageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseStageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(56, n)
}

func MiniGameDefenseStageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func MiniGameDefenseStageExcelAddStageHint(builder *flatbuffers.Builder, stageHint uint32) {
	builder.PrependUint32Slot(0, stageHint, 0)
}
func MiniGameDefenseStageExcelAddMininageDefenseFixedStatId(builder *flatbuffers.Builder, mininageDefenseFixedStatId int64) {
	builder.PrependInt64Slot(1, mininageDefenseFixedStatId, 0)
}
func MiniGameDefenseStageExcelAddFixedEchelon(builder *flatbuffers.Builder, fixedEchelon int64) {
	builder.PrependInt64Slot(2, fixedEchelon, 0)
}
func MiniGameDefenseStageExcelAddDefenseFormationBgPrefabScale(builder *flatbuffers.Builder, defenseFormationBgPrefabScale float32) {
	builder.PrependFloat32Slot(3, defenseFormationBgPrefabScale, 0.0)
}
func MiniGameDefenseStageExcelAddDefenseFormationBgPrefab(builder *flatbuffers.Builder, defenseFormationBgPrefab flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(defenseFormationBgPrefab), 0)
}
func MiniGameDefenseStageExcelAddStarGoalAmount(builder *flatbuffers.Builder, starGoalAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(starGoalAmount), 0)
}
func MiniGameDefenseStageExcelStartStarGoalAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDefenseStageExcelAddStarGoal(builder *flatbuffers.Builder, starGoal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(starGoal), 0)
}
func MiniGameDefenseStageExcelStartStarGoalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDefenseStageExcelAddContentType(builder *flatbuffers.Builder, contentType ContentType) {
	builder.PrependInt32Slot(7, int32(contentType), 0)
}
func MiniGameDefenseStageExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(8, groundId, 0)
}
func MiniGameDefenseStageExcelAddRecommandLevel(builder *flatbuffers.Builder, recommandLevel int32) {
	builder.PrependInt32Slot(9, recommandLevel, 0)
}
func MiniGameDefenseStageExcelAddStageTopography(builder *flatbuffers.Builder, stageTopography StageTopography) {
	builder.PrependInt32Slot(10, int32(stageTopography), 0)
}
func MiniGameDefenseStageExcelAddClearScenarioGroupId(builder *flatbuffers.Builder, clearScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(clearScenarioGroupId), 0)
}
func MiniGameDefenseStageExcelStartClearScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDefenseStageExcelAddEnterScenarioGroupId(builder *flatbuffers.Builder, enterScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(enterScenarioGroupId), 0)
}
func MiniGameDefenseStageExcelStartEnterScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDefenseStageExcelAddEventContentStageRewardId(builder *flatbuffers.Builder, eventContentStageRewardId int64) {
	builder.PrependInt64Slot(13, eventContentStageRewardId, 0)
}
func MiniGameDefenseStageExcelAddStageEnterCostAmount(builder *flatbuffers.Builder, stageEnterCostAmount int32) {
	builder.PrependInt32Slot(14, stageEnterCostAmount, 0)
}
func MiniGameDefenseStageExcelAddStageEnterCostId(builder *flatbuffers.Builder, stageEnterCostId int64) {
	builder.PrependInt64Slot(15, stageEnterCostId, 0)
}
func MiniGameDefenseStageExcelAddStageEnterCostType(builder *flatbuffers.Builder, stageEnterCostType ParcelType) {
	builder.PrependInt32Slot(16, int32(stageEnterCostType), 0)
}
func MiniGameDefenseStageExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(17, battleDuration, 0)
}
func MiniGameDefenseStageExcelAddEchelonExtensionType(builder *flatbuffers.Builder, echelonExtensionType EchelonExtensionType) {
	builder.PrependInt32Slot(18, int32(echelonExtensionType), 0)
}
func MiniGameDefenseStageExcelAddPrevStageId(builder *flatbuffers.Builder, prevStageId int64) {
	builder.PrependInt64Slot(19, prevStageId, 0)
}
func MiniGameDefenseStageExcelAddStageDisplay(builder *flatbuffers.Builder, stageDisplay int32) {
	builder.PrependInt32Slot(20, stageDisplay, 0)
}
func MiniGameDefenseStageExcelAddStageNumber(builder *flatbuffers.Builder, stageNumber int32) {
	builder.PrependInt32Slot(21, stageNumber, 0)
}
func MiniGameDefenseStageExcelAddStageDifficultyLocalize(builder *flatbuffers.Builder, stageDifficultyLocalize uint32) {
	builder.PrependUint32Slot(22, stageDifficultyLocalize, 0)
}
func MiniGameDefenseStageExcelAddStageDifficulty(builder *flatbuffers.Builder, stageDifficulty StageDifficulty) {
	builder.PrependInt32Slot(23, int32(stageDifficulty), 0)
}
func MiniGameDefenseStageExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(24, eventContentId, 0)
}
func MiniGameDefenseStageExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(name), 0)
}
func MiniGameDefenseStageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(26, id, 0)
}
func MiniGameDefenseStageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
