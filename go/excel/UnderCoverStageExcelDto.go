// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// UnderCoverStageExcelDto represents a FlatBuffers table
type UnderCoverStageExcelDto struct {
	fbsutils.FlatBuffer
	GroupId        int64  `json:"group_id"`
	StageNameFile  string `json:"stage_name_file"`
	StageTryCount  int32  `json:"stage_try_count"`
	ApplySkip      bool   `json:"apply_skip"`
	SkipCount      int32  `json:"skip_count"`
	ShowClearScene bool   `json:"show_clear_scene"`
	StageTips      uint32 `json:"stage_tips"`
	StageName      uint32 `json:"stage_name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *UnderCoverStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	UnderCoverStageExcelStart(b)
	UnderCoverStageExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	UnderCoverStageExcelAddStageNameFile(b, b.CreateString(fbsutils.Convert(t.StageNameFile, t.FlatBuffer.TableKey)))
	UnderCoverStageExcelAddStageTryCount(b, fbsutils.Convert(t.StageTryCount, t.FlatBuffer.TableKey))
	UnderCoverStageExcelAddApplySkip(b, t.ApplySkip)
	UnderCoverStageExcelAddSkipCount(b, fbsutils.Convert(t.SkipCount, t.FlatBuffer.TableKey))
	UnderCoverStageExcelAddShowClearScene(b, t.ShowClearScene)
	UnderCoverStageExcelAddStageTips(b, fbsutils.Convert(t.StageTips, t.FlatBuffer.TableKey))
	UnderCoverStageExcelAddStageName(b, fbsutils.Convert(t.StageName, t.FlatBuffer.TableKey))
	return UnderCoverStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *UnderCoverStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *UnderCoverStageExcelDto) UnmarshalMessage(e *UnderCoverStageExcel) error {
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.StageNameFile = fbsutils.Convert(string(e.StageNameFile()), t.FlatBuffer.TableKey)
	t.StageTryCount = fbsutils.Convert(e.StageTryCount(), t.FlatBuffer.TableKey)
	t.ApplySkip = e.ApplySkip()
	t.SkipCount = fbsutils.Convert(e.SkipCount(), t.FlatBuffer.TableKey)
	t.ShowClearScene = e.ShowClearScene()
	t.StageTips = fbsutils.Convert(e.StageTips(), t.FlatBuffer.TableKey)
	t.StageName = fbsutils.Convert(e.StageName(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *UnderCoverStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsUnderCoverStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (UnderCoverStageExcelDto) FlatDataName() string {
	return "UnderCoverStageExcel"
}
