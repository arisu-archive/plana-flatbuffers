// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestPlayGuideExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestPlayGuideExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestPlayGuideExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestPlayGuideExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishConquestPlayGuideExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConquestPlayGuideExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestPlayGuideExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestPlayGuideExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConquestPlayGuideExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConquestPlayGuideExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestPlayGuideExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestPlayGuideExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestPlayGuideExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestPlayGuideExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestPlayGuideExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ConquestPlayGuideExcel) DisplayOrder() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestPlayGuideExcel) MutateDisplayOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ConquestPlayGuideExcel) GuideTitle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestPlayGuideExcel) GuideImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestPlayGuideExcel) GuideText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ConquestPlayGuideExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ConquestPlayGuideExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ConquestPlayGuideExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(1, eventContentId, 0)
}
func ConquestPlayGuideExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int32) {
	builder.PrependInt32Slot(2, displayOrder, 0)
}
func ConquestPlayGuideExcelAddGuideTitle(builder *flatbuffers.Builder, guideTitle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(guideTitle), 0)
}
func ConquestPlayGuideExcelAddGuideImagePath(builder *flatbuffers.Builder, guideImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(guideImagePath), 0)
}
func ConquestPlayGuideExcelAddGuideText(builder *flatbuffers.Builder, guideText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(guideText), 0)
}
func ConquestPlayGuideExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
