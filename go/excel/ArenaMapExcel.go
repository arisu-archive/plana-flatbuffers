// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArenaMapExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsArenaMapExcel(buf []byte, offset flatbuffers.UOffsetT) *ArenaMapExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArenaMapExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishArenaMapExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsArenaMapExcel(buf []byte, offset flatbuffers.UOffsetT) *ArenaMapExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ArenaMapExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedArenaMapExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ArenaMapExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArenaMapExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArenaMapExcel) ArenaSeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateArenaSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ArenaMapExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ArenaMapExcel) TerrainType() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateTerrainType(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ArenaMapExcel) TerrainTypeLocalizeKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArenaMapExcel) ImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArenaMapExcel) GroundGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateGroundGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ArenaMapExcel) GroundGroupNameLocalizeKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArenaMapExcel) StartRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateStartRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ArenaMapExcel) EndRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateEndRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *ArenaMapExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaMapExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func ArenaMapExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func ArenaMapExcelAddArenaSeasonId(builder *flatbuffers.Builder, arenaSeasonId int64) {
	builder.PrependInt64Slot(0, arenaSeasonId, 0)
}
func ArenaMapExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(1, uniqueId, 0)
}
func ArenaMapExcelAddTerrainType(builder *flatbuffers.Builder, terrainType int64) {
	builder.PrependInt64Slot(2, terrainType, 0)
}
func ArenaMapExcelAddTerrainTypeLocalizeKey(builder *flatbuffers.Builder, terrainTypeLocalizeKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(terrainTypeLocalizeKey), 0)
}
func ArenaMapExcelAddImagePath(builder *flatbuffers.Builder, imagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(imagePath), 0)
}
func ArenaMapExcelAddGroundGroupId(builder *flatbuffers.Builder, groundGroupId int64) {
	builder.PrependInt64Slot(5, groundGroupId, 0)
}
func ArenaMapExcelAddGroundGroupNameLocalizeKey(builder *flatbuffers.Builder, groundGroupNameLocalizeKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(groundGroupNameLocalizeKey), 0)
}
func ArenaMapExcelAddStartRank(builder *flatbuffers.Builder, startRank int64) {
	builder.PrependInt64Slot(7, startRank, 0)
}
func ArenaMapExcelAddEndRank(builder *flatbuffers.Builder, endRank int64) {
	builder.PrependInt64Slot(8, endRank, 0)
}
func ArenaMapExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(9, groundId, 0)
}
func ArenaMapExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
