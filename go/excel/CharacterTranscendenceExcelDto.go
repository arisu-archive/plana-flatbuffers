// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterTranscendenceExcelDto represents a FlatBuffers table
type CharacterTranscendenceExcelDto struct {
	fbsutils.FlatBuffer
	MaxlevelStar        []int32  `json:"maxlevel_star"`
	SkillSlotC          []string `json:"skill_slot_c"`
	SkillSlotB          []string `json:"skill_slot_b"`
	SkillSlotA          []string `json:"skill_slot_a"`
	RecipeId            []int64  `json:"recipe_id"`
	StatBonusRateHeal   []int64  `json:"stat_bonus_rate_heal"`
	StatBonusRateHp     []int64  `json:"stat_bonus_rate_hp"`
	StatBonusRateAttack []int64  `json:"stat_bonus_rate_attack"`
	MaxFavorLevel       []int32  `json:"max_favor_level"`
	CharacterId         int64    `json:"character_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterTranscendenceExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterTranscendenceExcelStart(b)
	CharacterTranscendenceExcelStartMaxlevelStarVector(b, len(t.MaxlevelStar))
	for i := range len(t.MaxlevelStar) {
		b.PrependInt32(fbsutils.Convert(t.MaxlevelStar[len(t.MaxlevelStar)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterTranscendenceExcelAddMaxlevelStar(b, b.EndVector(len(t.MaxlevelStar)))
	CharacterTranscendenceExcelStartSkillSlotCVector(b, len(t.SkillSlotC))
	for i := range len(t.SkillSlotC) {
		b.PrependUOffsetT(b.CreateString(t.SkillSlotC[len(t.SkillSlotC)-i-1]))
	}
	CharacterTranscendenceExcelAddSkillSlotC(b, b.EndVector(len(t.SkillSlotC)))
	CharacterTranscendenceExcelStartSkillSlotBVector(b, len(t.SkillSlotB))
	for i := range len(t.SkillSlotB) {
		b.PrependUOffsetT(b.CreateString(t.SkillSlotB[len(t.SkillSlotB)-i-1]))
	}
	CharacterTranscendenceExcelAddSkillSlotB(b, b.EndVector(len(t.SkillSlotB)))
	CharacterTranscendenceExcelStartSkillSlotAVector(b, len(t.SkillSlotA))
	for i := range len(t.SkillSlotA) {
		b.PrependUOffsetT(b.CreateString(t.SkillSlotA[len(t.SkillSlotA)-i-1]))
	}
	CharacterTranscendenceExcelAddSkillSlotA(b, b.EndVector(len(t.SkillSlotA)))
	CharacterTranscendenceExcelStartRecipeIdVector(b, len(t.RecipeId))
	for i := range len(t.RecipeId) {
		b.PrependInt64(fbsutils.Convert(t.RecipeId[len(t.RecipeId)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterTranscendenceExcelAddRecipeId(b, b.EndVector(len(t.RecipeId)))
	CharacterTranscendenceExcelStartStatBonusRateHealVector(b, len(t.StatBonusRateHeal))
	for i := range len(t.StatBonusRateHeal) {
		b.PrependInt64(fbsutils.Convert(t.StatBonusRateHeal[len(t.StatBonusRateHeal)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterTranscendenceExcelAddStatBonusRateHeal(b, b.EndVector(len(t.StatBonusRateHeal)))
	CharacterTranscendenceExcelStartStatBonusRateHpVector(b, len(t.StatBonusRateHp))
	for i := range len(t.StatBonusRateHp) {
		b.PrependInt64(fbsutils.Convert(t.StatBonusRateHp[len(t.StatBonusRateHp)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterTranscendenceExcelAddStatBonusRateHp(b, b.EndVector(len(t.StatBonusRateHp)))
	CharacterTranscendenceExcelStartStatBonusRateAttackVector(b, len(t.StatBonusRateAttack))
	for i := range len(t.StatBonusRateAttack) {
		b.PrependInt64(fbsutils.Convert(t.StatBonusRateAttack[len(t.StatBonusRateAttack)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterTranscendenceExcelAddStatBonusRateAttack(b, b.EndVector(len(t.StatBonusRateAttack)))
	CharacterTranscendenceExcelStartMaxFavorLevelVector(b, len(t.MaxFavorLevel))
	for i := range len(t.MaxFavorLevel) {
		b.PrependInt32(fbsutils.Convert(t.MaxFavorLevel[len(t.MaxFavorLevel)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterTranscendenceExcelAddMaxFavorLevel(b, b.EndVector(len(t.MaxFavorLevel)))
	CharacterTranscendenceExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	return CharacterTranscendenceExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterTranscendenceExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterTranscendenceExcelDto) UnmarshalMessage(e *CharacterTranscendenceExcel) error {
	t.MaxlevelStar = make([]int32, e.MaxlevelStarLength())
	for i := range e.MaxlevelStarLength() {
		t.MaxlevelStar[i] = fbsutils.Convert(e.MaxlevelStar(i), t.FlatBuffer.TableKey)
	}
	t.SkillSlotC = make([]string, e.SkillSlotCLength())
	for i := range e.SkillSlotCLength() {
		t.SkillSlotC[i] = fbsutils.Convert(string(e.SkillSlotC(i)), t.FlatBuffer.TableKey)
	}
	t.SkillSlotB = make([]string, e.SkillSlotBLength())
	for i := range e.SkillSlotBLength() {
		t.SkillSlotB[i] = fbsutils.Convert(string(e.SkillSlotB(i)), t.FlatBuffer.TableKey)
	}
	t.SkillSlotA = make([]string, e.SkillSlotALength())
	for i := range e.SkillSlotALength() {
		t.SkillSlotA[i] = fbsutils.Convert(string(e.SkillSlotA(i)), t.FlatBuffer.TableKey)
	}
	t.RecipeId = make([]int64, e.RecipeIdLength())
	for i := range e.RecipeIdLength() {
		t.RecipeId[i] = fbsutils.Convert(e.RecipeId(i), t.FlatBuffer.TableKey)
	}
	t.StatBonusRateHeal = make([]int64, e.StatBonusRateHealLength())
	for i := range e.StatBonusRateHealLength() {
		t.StatBonusRateHeal[i] = fbsutils.Convert(e.StatBonusRateHeal(i), t.FlatBuffer.TableKey)
	}
	t.StatBonusRateHp = make([]int64, e.StatBonusRateHpLength())
	for i := range e.StatBonusRateHpLength() {
		t.StatBonusRateHp[i] = fbsutils.Convert(e.StatBonusRateHp(i), t.FlatBuffer.TableKey)
	}
	t.StatBonusRateAttack = make([]int64, e.StatBonusRateAttackLength())
	for i := range e.StatBonusRateAttackLength() {
		t.StatBonusRateAttack[i] = fbsutils.Convert(e.StatBonusRateAttack(i), t.FlatBuffer.TableKey)
	}
	t.MaxFavorLevel = make([]int32, e.MaxFavorLevelLength())
	for i := range e.MaxFavorLevelLength() {
		t.MaxFavorLevel[i] = fbsutils.Convert(e.MaxFavorLevel(i), t.FlatBuffer.TableKey)
	}
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterTranscendenceExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterTranscendenceExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterTranscendenceExcelDto) FlatDataName() string {
	return "CharacterTranscendenceExcel"
}
