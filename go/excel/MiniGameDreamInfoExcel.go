// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamInfoExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamInfoExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamInfoExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamInfoExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamInfoExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerActionPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerActionPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerDailyPointId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerDailyPointId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerDailyPointParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerDailyPointParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerDays() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerDays(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerMultiplierCondition() DreamMakerMultiplierCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return DreamMakerMultiplierCondition(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerMultiplierCondition(n DreamMakerMultiplierCondition) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerMultiplierConditionValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerMultiplierConditionValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerMultiplierMax() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerMultiplierMax(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerParameterTransfer() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerParameterTransfer(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *MiniGameDreamInfoExcel) DreamMakerParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateDreamMakerParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *MiniGameDreamInfoExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *MiniGameDreamInfoExcel) LobbyBgmChangeScenarioId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateLobbyBgmChangeScenarioId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *MiniGameDreamInfoExcel) ScheduleCostGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamInfoExcel) MutateScheduleCostGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func MiniGameDreamInfoExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func MiniGameDreamInfoExcelAddDreamMakerActionPoint(builder *flatbuffers.Builder, dreamMakerActionPoint int64) {
	builder.PrependInt64Slot(0, dreamMakerActionPoint, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerDailyPointId(builder *flatbuffers.Builder, dreamMakerDailyPointId int64) {
	builder.PrependInt64Slot(1, dreamMakerDailyPointId, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerDailyPointParcelType(builder *flatbuffers.Builder, dreamMakerDailyPointParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(dreamMakerDailyPointParcelType), 0)
}
func MiniGameDreamInfoExcelAddDreamMakerDays(builder *flatbuffers.Builder, dreamMakerDays int64) {
	builder.PrependInt64Slot(3, dreamMakerDays, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerMultiplierCondition(builder *flatbuffers.Builder, dreamMakerMultiplierCondition DreamMakerMultiplierCondition) {
	builder.PrependInt32Slot(4, int32(dreamMakerMultiplierCondition), 0)
}
func MiniGameDreamInfoExcelAddDreamMakerMultiplierConditionValue(builder *flatbuffers.Builder, dreamMakerMultiplierConditionValue int64) {
	builder.PrependInt64Slot(5, dreamMakerMultiplierConditionValue, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerMultiplierMax(builder *flatbuffers.Builder, dreamMakerMultiplierMax int64) {
	builder.PrependInt64Slot(6, dreamMakerMultiplierMax, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerParameterTransfer(builder *flatbuffers.Builder, dreamMakerParameterTransfer int64) {
	builder.PrependInt64Slot(7, dreamMakerParameterTransfer, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerParcelId(builder *flatbuffers.Builder, dreamMakerParcelId int64) {
	builder.PrependInt64Slot(8, dreamMakerParcelId, 0)
}
func MiniGameDreamInfoExcelAddDreamMakerParcelType(builder *flatbuffers.Builder, dreamMakerParcelType ParcelType) {
	builder.PrependInt32Slot(9, int32(dreamMakerParcelType), 0)
}
func MiniGameDreamInfoExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(10, eventContentId, 0)
}
func MiniGameDreamInfoExcelAddLobbyBgmChangeScenarioId(builder *flatbuffers.Builder, lobbyBgmChangeScenarioId int64) {
	builder.PrependInt64Slot(11, lobbyBgmChangeScenarioId, 0)
}
func MiniGameDreamInfoExcelAddScheduleCostGoodsId(builder *flatbuffers.Builder, scheduleCostGoodsId int64) {
	builder.PrependInt64Slot(12, scheduleCostGoodsId, 0)
}
func MiniGameDreamInfoExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
