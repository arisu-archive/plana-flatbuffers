package excel

import (
	"reflect"

	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
)

var fbs = map[string]reflect.Type{
	"accountlevelexcel": reflect.TypeOf((*AccountLevelExcelDto)(nil)).Elem(),
	"assistechelontypeconvertexcel": reflect.TypeOf((*AssistEchelonTypeConvertExcelDto)(nil)).Elem(),
	"attendanceexcel": reflect.TypeOf((*AttendanceExcelDto)(nil)).Elem(),
	"attendancerewardexcel": reflect.TypeOf((*AttendanceRewardExcelDto)(nil)).Elem(),
	"audioanimatorexcel": reflect.TypeOf((*AudioAnimatorExcelDto)(nil)).Elem(),
	"bgmexcel": reflect.TypeOf((*BGMExcelDto)(nil)).Elem(),
	"bgmraidexcel": reflect.TypeOf((*BGMRaidExcelDto)(nil)).Elem(),
	"bgmuiexcel": reflect.TypeOf((*BGMUIExcelDto)(nil)).Elem(),
	"cameraexcel": reflect.TypeOf((*CameraExcelDto)(nil)).Elem(),
	"characterdialogemojiexcel": reflect.TypeOf((*CharacterDialogEmojiExcelDto)(nil)).Elem(),
	"characterdialogeventexcel": reflect.TypeOf((*CharacterDialogEventExcelDto)(nil)).Elem(),
	"characterdialogexcel": reflect.TypeOf((*CharacterDialogExcelDto)(nil)).Elem(),
	"characterdialogsubtitleexcel": reflect.TypeOf((*CharacterDialogSubtitleExcelDto)(nil)).Elem(),
	"charactergearexcel": reflect.TypeOf((*CharacterGearExcelDto)(nil)).Elem(),
	"charactergearlevelexcel": reflect.TypeOf((*CharacterGearLevelExcelDto)(nil)).Elem(),
	"characterpotentialexcel": reflect.TypeOf((*CharacterPotentialExcelDto)(nil)).Elem(),
	"characterpotentialrewardexcel": reflect.TypeOf((*CharacterPotentialRewardExcelDto)(nil)).Elem(),
	"characterpotentialstatexcel": reflect.TypeOf((*CharacterPotentialStatExcelDto)(nil)).Elem(),
	"charactervoiceexcel": reflect.TypeOf((*CharacterVoiceExcelDto)(nil)).Elem(),
	"charactervoicesubtitleexcel": reflect.TypeOf((*CharacterVoiceSubtitleExcelDto)(nil)).Elem(),
	"cheatcodelistexcel": reflect.TypeOf((*CheatCodeListExcelDto)(nil)).Elem(),
	"clanassistslotexcel": reflect.TypeOf((*ClanAssistSlotExcelDto)(nil)).Elem(),
	"clanchattingemojiexcel": reflect.TypeOf((*ClanChattingEmojiExcelDto)(nil)).Elem(),
	"clanrewardexcel": reflect.TypeOf((*ClanRewardExcelDto)(nil)).Elem(),
	"combatemojiexcel": reflect.TypeOf((*CombatEmojiExcelDto)(nil)).Elem(),
	"contententercostreduceexcel": reflect.TypeOf((*ContentEnterCostReduceExcelDto)(nil)).Elem(),
	"contentspoilerpopupexcel": reflect.TypeOf((*ContentSpoilerPopupExcelDto)(nil)).Elem(),
	"contentsscenarioexcel": reflect.TypeOf((*ContentsScenarioExcelDto)(nil)).Elem(),
	"contentsshortcutexcel": reflect.TypeOf((*ContentsShortcutExcelDto)(nil)).Elem(),
	"currencyexcel": reflect.TypeOf((*CurrencyExcelDto)(nil)).Elem(),
	"emblemexcel": reflect.TypeOf((*EmblemExcelDto)(nil)).Elem(),
	"eventcontentnotifyexcel": reflect.TypeOf((*EventContentNotifyExcelDto)(nil)).Elem(),
	"eventcontentspoilerpopupexcel": reflect.TypeOf((*EventContentSpoilerPopupExcelDto)(nil)).Elem(),
	"eventcontenttreasurecellrewardexcel": reflect.TypeOf((*EventContentTreasureCellRewardExcelDto)(nil)).Elem(),
	"eventcontenttreasureexcel": reflect.TypeOf((*EventContentTreasureExcelDto)(nil)).Elem(),
	"eventcontenttreasurerewardexcel": reflect.TypeOf((*EventContentTreasureRewardExcelDto)(nil)).Elem(),
	"eventcontenttreasureroundexcel": reflect.TypeOf((*EventContentTreasureRoundExcelDto)(nil)).Elem(),
	"farmingdungeonlocationmanageexcel": reflect.TypeOf((*FarmingDungeonLocationManageExcelDto)(nil)).Elem(),
	"favorlevelexcel": reflect.TypeOf((*FavorLevelExcelDto)(nil)).Elem(),
	"favorlevelrewardexcel": reflect.TypeOf((*FavorLevelRewardExcelDto)(nil)).Elem(),
	"fixedechelonsettingexcel": reflect.TypeOf((*FixedEchelonSettingExcelDto)(nil)).Elem(),
	"formationlocationexcel": reflect.TypeOf((*FormationLocationExcelDto)(nil)).Elem(),
	"groundexcel": reflect.TypeOf((*GroundExcelDto)(nil)).Elem(),
	"groundmodulerewardexcel": reflect.TypeOf((*GroundModuleRewardExcelDto)(nil)).Elem(),
	"idcardbackgroundexcel": reflect.TypeOf((*IdCardBackgroundExcelDto)(nil)).Elem(),
	"informationexcel": reflect.TypeOf((*InformationExcelDto)(nil)).Elem(),
	"loadingimageexcel": reflect.TypeOf((*LoadingImageExcelDto)(nil)).Elem(),
	"localizecharprofilechangeexcel": reflect.TypeOf((*LocalizeCharProfileChangeExcelDto)(nil)).Elem(),
	"localizecodeinbuildexcel": reflect.TypeOf((*LocalizeCodeInBuildExcelDto)(nil)).Elem(),
	"localizeerrorexcel": reflect.TypeOf((*LocalizeErrorExcelDto)(nil)).Elem(),
	"localizeetcexcel": reflect.TypeOf((*LocalizeEtcExcelDto)(nil)).Elem(),
	"localizeexcel": reflect.TypeOf((*LocalizeExcelDto)(nil)).Elem(),
	"localizeskillexcel": reflect.TypeOf((*LocalizeSkillExcelDto)(nil)).Elem(),
	"memorylobbyexcel": reflect.TypeOf((*MemoryLobbyExcelDto)(nil)).Elem(),
	"messagepopupexcel": reflect.TypeOf((*MessagePopupExcelDto)(nil)).Elem(),
	"minigamedefensecharacterbanexcel": reflect.TypeOf((*MiniGameDefenseCharacterBanExcelDto)(nil)).Elem(),
	"minigamedefensefixedstatexcel": reflect.TypeOf((*MiniGameDefenseFixedStatExcelDto)(nil)).Elem(),
	"minigamedefenseinfoexcel": reflect.TypeOf((*MiniGameDefenseInfoExcelDto)(nil)).Elem(),
	"minigamedefensestageexcel": reflect.TypeOf((*MiniGameDefenseStageExcelDto)(nil)).Elem(),
	"minigamedreamcollectionscenarioexcel": reflect.TypeOf((*MiniGameDreamCollectionScenarioExcelDto)(nil)).Elem(),
	"minigamedreamdailypointexcel": reflect.TypeOf((*MiniGameDreamDailyPointExcelDto)(nil)).Elem(),
	"minigamedreamendingexcel": reflect.TypeOf((*MiniGameDreamEndingExcelDto)(nil)).Elem(),
	"minigamedreamendingrewardexcel": reflect.TypeOf((*MiniGameDreamEndingRewardExcelDto)(nil)).Elem(),
	"minigamedreaminfoexcel": reflect.TypeOf((*MiniGameDreamInfoExcelDto)(nil)).Elem(),
	"minigamedreamparameterexcel": reflect.TypeOf((*MiniGameDreamParameterExcelDto)(nil)).Elem(),
	"minigamedreamreplayscenarioexcel": reflect.TypeOf((*MiniGameDreamReplayScenarioExcelDto)(nil)).Elem(),
	"minigamedreamscheduleexcel": reflect.TypeOf((*MiniGameDreamScheduleExcelDto)(nil)).Elem(),
	"minigamedreamscheduleresultexcel": reflect.TypeOf((*MiniGameDreamScheduleResultExcelDto)(nil)).Elem(),
	"minigamedreamtimelineexcel": reflect.TypeOf((*MiniGameDreamTimelineExcelDto)(nil)).Elem(),
	"minigamedreamvoiceexcel": reflect.TypeOf((*MinigameDreamVoiceExcelDto)(nil)).Elem(),
	"minigameroadpuzzleadditionalrewardexcel": reflect.TypeOf((*MiniGameRoadPuzzleAdditionalRewardExcelDto)(nil)).Elem(),
	"minigameroadpuzzleinfoexcel": reflect.TypeOf((*MiniGameRoadPuzzleInfoExcelDto)(nil)).Elem(),
	"minigameroadpuzzlemapexcel": reflect.TypeOf((*MinigameRoadPuzzleMapExcelDto)(nil)).Elem(),
	"minigameroadpuzzlemaptileexcel": reflect.TypeOf((*MinigameRoadPuzzleMapTileExcelDto)(nil)).Elem(),
	"minigameroadpuzzlerailsetrewardexcel": reflect.TypeOf((*MiniGameRoadPuzzleRailSetRewardExcelDto)(nil)).Elem(),
	"minigameroadpuzzlerailtileexcel": reflect.TypeOf((*MinigameRoadPuzzleRailTileExcelDto)(nil)).Elem(),
	"minigameroadpuzzlerewardexcel": reflect.TypeOf((*MiniGameRoadPuzzleRewardExcelDto)(nil)).Elem(),
	"minigameroadpuzzleroadroundexcel": reflect.TypeOf((*MinigameRoadPuzzleRoadRoundExcelDto)(nil)).Elem(),
	"minigameroadpuzzlevoiceexcel": reflect.TypeOf((*MiniGameRoadPuzzleVoiceExcelDto)(nil)).Elem(),
	"missionemergencycompleteexcel": reflect.TypeOf((*MissionEmergencyCompleteExcelDto)(nil)).Elem(),
	"multifloorraidrewardexcel": reflect.TypeOf((*MultiFloorRaidRewardExcelDto)(nil)).Elem(),
	"multifloorraidseasonmanageexcel": reflect.TypeOf((*MultiFloorRaidSeasonManageExcelDto)(nil)).Elem(),
	"multifloorraidstageexcel": reflect.TypeOf((*MultiFloorRaidStageExcelDto)(nil)).Elem(),
	"multifloorraidstatchangeexcel": reflect.TypeOf((*MultiFloorRaidStatChangeExcelDto)(nil)).Elem(),
	"obstaclestatexcel": reflect.TypeOf((*ObstacleStatExcelDto)(nil)).Elem(),
	"openconditionexcel": reflect.TypeOf((*OpenConditionExcelDto)(nil)).Elem(),
	"operatorexcel": reflect.TypeOf((*OperatorExcelDto)(nil)).Elem(),
	"scenariobgeffectexcel": reflect.TypeOf((*ScenarioBGEffectExcelDto)(nil)).Elem(),
	"scenariobgnameexcel": reflect.TypeOf((*ScenarioBGNameExcelDto)(nil)).Elem(),
	"scenariocharacteremotionexcel": reflect.TypeOf((*ScenarioCharacterEmotionExcelDto)(nil)).Elem(),
	"scenariocharacternameexcel": reflect.TypeOf((*ScenarioCharacterNameExcelDto)(nil)).Elem(),
	"scenariocharactersituationsetexcel": reflect.TypeOf((*ScenarioCharacterSituationSetExcelDto)(nil)).Elem(),
	"scenariocontentcollectionexcel": reflect.TypeOf((*ScenarioContentCollectionExcelDto)(nil)).Elem(),
	"scenarioeffectexcel": reflect.TypeOf((*ScenarioEffectExcelDto)(nil)).Elem(),
	"scenariomodeexcel": reflect.TypeOf((*ScenarioModeExcelDto)(nil)).Elem(),
	"scenariomoderewardexcel": reflect.TypeOf((*ScenarioModeRewardExcelDto)(nil)).Elem(),
	"scenarioresourceinfoexcel": reflect.TypeOf((*ScenarioResourceInfoExcelDto)(nil)).Elem(),
	"scenarioscriptexcel": reflect.TypeOf((*ScenarioScriptExcelDto)(nil)).Elem(),
	"scenariotransitionexcel": reflect.TypeOf((*ScenarioTransitionExcelDto)(nil)).Elem(),
	"schooldungeonrewardexcel": reflect.TypeOf((*SchoolDungeonRewardExcelDto)(nil)).Elem(),
	"schooldungeonstageexcel": reflect.TypeOf((*SchoolDungeonStageExcelDto)(nil)).Elem(),
	"serviceactionexcel": reflect.TypeOf((*ServiceActionExcelDto)(nil)).Elem(),
	"shortcuttypeexcel": reflect.TypeOf((*ShortcutTypeExcelDto)(nil)).Elem(),
	"skilladditionaltooltipexcel": reflect.TypeOf((*SkillAdditionalTooltipExcelDto)(nil)).Elem(),
	"sounduiexcel": reflect.TypeOf((*SoundUIExcelDto)(nil)).Elem(),
	"spinelipsyncexcel": reflect.TypeOf((*SpineLipsyncExcelDto)(nil)).Elem(),
	"statlevelinterpolationexcel": reflect.TypeOf((*StatLevelInterpolationExcelDto)(nil)).Elem(),
	"stickergroupexcel": reflect.TypeOf((*StickerGroupExcelDto)(nil)).Elem(),
	"stickerpagecontentexcel": reflect.TypeOf((*StickerPageContentExcelDto)(nil)).Elem(),
	"storystrategyexcel": reflect.TypeOf((*StoryStrategyExcelDto)(nil)).Elem(),
	"toastexcel": reflect.TypeOf((*ToastExcelDto)(nil)).Elem(),
	"tutorialcharacterdialogexcel": reflect.TypeOf((*TutorialCharacterDialogExcelDto)(nil)).Elem(),
	"tutorialexcel": reflect.TypeOf((*TutorialExcelDto)(nil)).Elem(),
	"tutorialfailureimageexcel": reflect.TypeOf((*TutorialFailureImageExcelDto)(nil)).Elem(),
	"undercoverstageexcel": reflect.TypeOf((*UnderCoverStageExcelDto)(nil)).Elem(),
	"videoexcel": reflect.TypeOf((*VideoExcelDto)(nil)).Elem(),
	"voicecommonexcel": reflect.TypeOf((*VoiceCommonExcelDto)(nil)).Elem(),
	"voiceexcel": reflect.TypeOf((*VoiceExcelDto)(nil)).Elem(),
	"voicelogiceffectexcel": reflect.TypeOf((*VoiceLogicEffectExcelDto)(nil)).Elem(),
	"voiceroomexceptionexcel": reflect.TypeOf((*VoiceRoomExceptionExcelDto)(nil)).Elem(),
	"voicespineexcel": reflect.TypeOf((*VoiceSpineExcelDto)(nil)).Elem(),
	"voicetimelineexcel": reflect.TypeOf((*VoiceTimelineExcelDto)(nil)).Elem(),
	"worldraidconditionexcel": reflect.TypeOf((*WorldRaidConditionExcelDto)(nil)).Elem(),
}

func GetFlatDataByName(name string) fbsutils.FlatData {
	if data, ok := fbs[name]; ok {
		return reflect.New(data).Interface().(fbsutils.FlatData)
	}
	return nil
}
