// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterCalculationLimitExcelDto represents a FlatBuffers table
type CharacterCalculationLimitExcelDto struct {
	fbsutils.FlatBuffer
	DecreaseRate     []int64               `json:"decrease_rate"`
	LimitStartValue  []int64               `json:"limit_start_value"`
	MaxValue         int64                 `json:"max_value"`
	MinValue         int64                 `json:"min_value"`
	CalculationValue BattleCalculationStat `json:"calculation_value"`
	TacticEntityType TacticEntityType      `json:"tactic_entity_type"`
	Id               int64                 `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterCalculationLimitExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterCalculationLimitExcelStart(b)
	CharacterCalculationLimitExcelStartDecreaseRateVector(b, len(t.DecreaseRate))
	for i := range len(t.DecreaseRate) {
		b.PrependInt64(fbsutils.Convert(t.DecreaseRate[len(t.DecreaseRate)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterCalculationLimitExcelAddDecreaseRate(b, b.EndVector(len(t.DecreaseRate)))
	CharacterCalculationLimitExcelStartLimitStartValueVector(b, len(t.LimitStartValue))
	for i := range len(t.LimitStartValue) {
		b.PrependInt64(fbsutils.Convert(t.LimitStartValue[len(t.LimitStartValue)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterCalculationLimitExcelAddLimitStartValue(b, b.EndVector(len(t.LimitStartValue)))
	CharacterCalculationLimitExcelAddMaxValue(b, fbsutils.Convert(t.MaxValue, t.FlatBuffer.TableKey))
	CharacterCalculationLimitExcelAddMinValue(b, fbsutils.Convert(t.MinValue, t.FlatBuffer.TableKey))
	CharacterCalculationLimitExcelAddCalculationValue(b, fbsutils.Convert(t.CalculationValue, t.FlatBuffer.TableKey))
	CharacterCalculationLimitExcelAddTacticEntityType(b, fbsutils.Convert(t.TacticEntityType, t.FlatBuffer.TableKey))
	CharacterCalculationLimitExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return CharacterCalculationLimitExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterCalculationLimitExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterCalculationLimitExcelDto) UnmarshalMessage(e *CharacterCalculationLimitExcel) error {
	t.DecreaseRate = make([]int64, e.DecreaseRateLength())
	for i := range e.DecreaseRateLength() {
		t.DecreaseRate[i] = fbsutils.Convert(e.DecreaseRate(i), t.FlatBuffer.TableKey)
	}
	t.LimitStartValue = make([]int64, e.LimitStartValueLength())
	for i := range e.LimitStartValueLength() {
		t.LimitStartValue[i] = fbsutils.Convert(e.LimitStartValue(i), t.FlatBuffer.TableKey)
	}
	t.MaxValue = fbsutils.Convert(e.MaxValue(), t.FlatBuffer.TableKey)
	t.MinValue = fbsutils.Convert(e.MinValue(), t.FlatBuffer.TableKey)
	t.CalculationValue = BattleCalculationStat(fbsutils.Convert(int32(e.CalculationValue()), t.FlatBuffer.TableKey))
	t.TacticEntityType = TacticEntityType(fbsutils.Convert(int32(e.TacticEntityType()), t.FlatBuffer.TableKey))
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterCalculationLimitExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterCalculationLimitExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterCalculationLimitExcelDto) FlatDataName() string {
	return "CharacterCalculationLimitExcel"
}
