// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGPerkExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGPerkExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGPerkExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGPerkExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGPerkExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGPerkExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGPerkExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGPerkExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGPerkExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGPerkExcel) ShopLocalizeDesc() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateShopLocalizeDesc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MinigameCCGPerkExcel) ShopLocalizeTitle() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateShopLocalizeTitle(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *MinigameCCGPerkExcel) ShopIcon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGPerkExcel) ShopOrder() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateShopOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *MinigameCCGPerkExcel) RequiredPerkId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) RequiredPerkIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateRequiredPerkId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameCCGPerkExcel) EnvironmentLogicEffectId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) EnvironmentLogicEffectIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateEnvironmentLogicEffectId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameCCGPerkExcel) DiscardPoint() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateDiscardPoint(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *MinigameCCGPerkExcel) RerollPoint() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateRerollPoint(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *MinigameCCGPerkExcel) CostParcelAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateCostParcelAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *MinigameCCGPerkExcel) CcgId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateCcgId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *MinigameCCGPerkExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGPerkExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func MinigameCCGPerkExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func MinigameCCGPerkExcelAddShopLocalizeDesc(builder *flatbuffers.Builder, shopLocalizeDesc uint32) {
	builder.PrependUint32Slot(0, shopLocalizeDesc, 0)
}
func MinigameCCGPerkExcelAddShopLocalizeTitle(builder *flatbuffers.Builder, shopLocalizeTitle uint32) {
	builder.PrependUint32Slot(1, shopLocalizeTitle, 0)
}
func MinigameCCGPerkExcelAddShopIcon(builder *flatbuffers.Builder, shopIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(shopIcon), 0)
}
func MinigameCCGPerkExcelAddShopOrder(builder *flatbuffers.Builder, shopOrder int32) {
	builder.PrependInt32Slot(3, shopOrder, 0)
}
func MinigameCCGPerkExcelAddRequiredPerkId(builder *flatbuffers.Builder, requiredPerkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(requiredPerkId), 0)
}
func MinigameCCGPerkExcelStartRequiredPerkIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameCCGPerkExcelAddEnvironmentLogicEffectId(builder *flatbuffers.Builder, environmentLogicEffectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(environmentLogicEffectId), 0)
}
func MinigameCCGPerkExcelStartEnvironmentLogicEffectIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameCCGPerkExcelAddDiscardPoint(builder *flatbuffers.Builder, discardPoint int32) {
	builder.PrependInt32Slot(6, discardPoint, 0)
}
func MinigameCCGPerkExcelAddRerollPoint(builder *flatbuffers.Builder, rerollPoint int32) {
	builder.PrependInt32Slot(7, rerollPoint, 0)
}
func MinigameCCGPerkExcelAddCostParcelAmount(builder *flatbuffers.Builder, costParcelAmount int32) {
	builder.PrependInt32Slot(8, costParcelAmount, 0)
}
func MinigameCCGPerkExcelAddCcgId(builder *flatbuffers.Builder, ccgId int64) {
	builder.PrependInt64Slot(9, ccgId, 0)
}
func MinigameCCGPerkExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(10, id, 0)
}
func MinigameCCGPerkExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
