// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShopCashExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsShopCashExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopCashExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShopCashExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShopCashExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopCashExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShopCashExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShopCashExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShopCashExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShopCashExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ShopCashExcel) CashProductId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateCashProductId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ShopCashExcel) PackageType() PurchaseSourceType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return PurchaseSourceType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopCashExcel) MutatePackageType(n PurchaseSourceType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ShopCashExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ShopCashExcel) IconPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopCashExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ShopCashExcel) RenewalDisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateRenewalDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ShopCashExcel) CategoryType() ProductCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return ProductCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopCashExcel) MutateCategoryType(n ProductCategory) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *ShopCashExcel) DisplayTag() ProductDisplayTag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return ProductDisplayTag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopCashExcel) MutateDisplayTag(n ProductDisplayTag) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *ShopCashExcel) SalePeriodFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopCashExcel) SalePeriodTo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopCashExcel) PeriodTag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopCashExcel) MutatePeriodTag(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func (rcv *ShopCashExcel) AccountLevelLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateAccountLevelLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *ShopCashExcel) AccountLevelHide() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopCashExcel) MutateAccountLevelHide(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

func (rcv *ShopCashExcel) ClearMissionLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopCashExcel) MutateClearMissionLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *ShopCashExcel) ClearMissionHide() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopCashExcel) MutateClearMissionHide(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *ShopCashExcel) PurchaseReportEventName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ShopCashExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func ShopCashExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ShopCashExcelAddCashProductId(builder *flatbuffers.Builder, cashProductId int64) {
	builder.PrependInt64Slot(1, cashProductId, 0)
}
func ShopCashExcelAddPackageType(builder *flatbuffers.Builder, packageType PurchaseSourceType) {
	builder.PrependInt32Slot(2, int32(packageType), 0)
}
func ShopCashExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(3, localizeEtcId, 0)
}
func ShopCashExcelAddIconPath(builder *flatbuffers.Builder, iconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(iconPath), 0)
}
func ShopCashExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(5, displayOrder, 0)
}
func ShopCashExcelAddRenewalDisplayOrder(builder *flatbuffers.Builder, renewalDisplayOrder int64) {
	builder.PrependInt64Slot(6, renewalDisplayOrder, 0)
}
func ShopCashExcelAddCategoryType(builder *flatbuffers.Builder, categoryType ProductCategory) {
	builder.PrependInt32Slot(7, int32(categoryType), 0)
}
func ShopCashExcelAddDisplayTag(builder *flatbuffers.Builder, displayTag ProductDisplayTag) {
	builder.PrependInt32Slot(8, int32(displayTag), 0)
}
func ShopCashExcelAddSalePeriodFrom(builder *flatbuffers.Builder, salePeriodFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(salePeriodFrom), 0)
}
func ShopCashExcelAddSalePeriodTo(builder *flatbuffers.Builder, salePeriodTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(salePeriodTo), 0)
}
func ShopCashExcelAddPeriodTag(builder *flatbuffers.Builder, periodTag bool) {
	builder.PrependBoolSlot(11, periodTag, false)
}
func ShopCashExcelAddAccountLevelLimit(builder *flatbuffers.Builder, accountLevelLimit int64) {
	builder.PrependInt64Slot(12, accountLevelLimit, 0)
}
func ShopCashExcelAddAccountLevelHide(builder *flatbuffers.Builder, accountLevelHide bool) {
	builder.PrependBoolSlot(13, accountLevelHide, false)
}
func ShopCashExcelAddClearMissionLimit(builder *flatbuffers.Builder, clearMissionLimit int64) {
	builder.PrependInt64Slot(14, clearMissionLimit, 0)
}
func ShopCashExcelAddClearMissionHide(builder *flatbuffers.Builder, clearMissionHide bool) {
	builder.PrependBoolSlot(15, clearMissionHide, false)
}
func ShopCashExcelAddPurchaseReportEventName(builder *flatbuffers.Builder, purchaseReportEventName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(purchaseReportEventName), 0)
}
func ShopCashExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
