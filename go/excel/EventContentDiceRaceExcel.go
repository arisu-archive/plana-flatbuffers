// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentDiceRaceExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentDiceRaceExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDiceRaceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentDiceRaceExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentDiceRaceExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDiceRaceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentDiceRaceExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentDiceRaceExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentDiceRaceExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentDiceRaceExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentDiceRaceExcel) DiceCostGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceExcel) MutateDiceCostGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentDiceRaceExcel) SkipableLap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDiceRaceExcel) MutateSkipableLap(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *EventContentDiceRaceExcel) DiceRacePawnPrefab() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentDiceRaceExcel) IsUsingFixedDice() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentDiceRaceExcel) MutateIsUsingFixedDice(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *EventContentDiceRaceExcel) FixedDiceIcon(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventContentDiceRaceExcel) FixedDiceIconLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentDiceRaceExcel) DiceRaceEventType(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventContentDiceRaceExcel) DiceRaceEventTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func EventContentDiceRaceExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func EventContentDiceRaceExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentDiceRaceExcelAddDiceCostGoodsId(builder *flatbuffers.Builder, diceCostGoodsId int64) {
	builder.PrependInt64Slot(1, diceCostGoodsId, 0)
}
func EventContentDiceRaceExcelAddSkipableLap(builder *flatbuffers.Builder, skipableLap int32) {
	builder.PrependInt32Slot(2, skipableLap, 0)
}
func EventContentDiceRaceExcelAddDiceRacePawnPrefab(builder *flatbuffers.Builder, diceRacePawnPrefab flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(diceRacePawnPrefab), 0)
}
func EventContentDiceRaceExcelAddIsUsingFixedDice(builder *flatbuffers.Builder, isUsingFixedDice bool) {
	builder.PrependBoolSlot(4, isUsingFixedDice, false)
}
func EventContentDiceRaceExcelAddFixedDiceIcon(builder *flatbuffers.Builder, fixedDiceIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(fixedDiceIcon), 0)
}
func EventContentDiceRaceExcelStartFixedDiceIconVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentDiceRaceExcelAddDiceRaceEventType(builder *flatbuffers.Builder, diceRaceEventType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(diceRaceEventType), 0)
}
func EventContentDiceRaceExcelStartDiceRaceEventTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentDiceRaceExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
