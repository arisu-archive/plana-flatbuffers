// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OperatorExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsOperatorExcel(buf []byte, offset flatbuffers.UOffsetT) *OperatorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OperatorExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOperatorExcel(buf []byte, offset flatbuffers.UOffsetT) *OperatorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OperatorExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OperatorExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OperatorExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OperatorExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OperatorExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *OperatorExcel) GroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *OperatorExcel) OperatorCondition() OperatorCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return OperatorCondition(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *OperatorExcel) MutateOperatorCondition(n OperatorCondition) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *OperatorExcel) OutputSequence() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OperatorExcel) MutateOutputSequence(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *OperatorExcel) RandomWeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OperatorExcel) MutateRandomWeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *OperatorExcel) OutputDelay() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OperatorExcel) MutateOutputDelay(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *OperatorExcel) Duration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OperatorExcel) MutateDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *OperatorExcel) OperatorOutputPriority() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OperatorExcel) MutateOperatorOutputPriority(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *OperatorExcel) PortraitPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *OperatorExcel) TextLocalizeKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *OperatorExcel) VoiceId(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *OperatorExcel) VoiceIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *OperatorExcel) MutateVoiceId(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *OperatorExcel) OperatorWaitQueue() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *OperatorExcel) MutateOperatorWaitQueue(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func OperatorExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func OperatorExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(0, uniqueId, 0)
}
func OperatorExcelAddGroupId(builder *flatbuffers.Builder, groupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groupId), 0)
}
func OperatorExcelAddOperatorCondition(builder *flatbuffers.Builder, operatorCondition OperatorCondition) {
	builder.PrependInt32Slot(2, int32(operatorCondition), 0)
}
func OperatorExcelAddOutputSequence(builder *flatbuffers.Builder, outputSequence int32) {
	builder.PrependInt32Slot(3, outputSequence, 0)
}
func OperatorExcelAddRandomWeight(builder *flatbuffers.Builder, randomWeight int32) {
	builder.PrependInt32Slot(4, randomWeight, 0)
}
func OperatorExcelAddOutputDelay(builder *flatbuffers.Builder, outputDelay int32) {
	builder.PrependInt32Slot(5, outputDelay, 0)
}
func OperatorExcelAddDuration(builder *flatbuffers.Builder, duration int32) {
	builder.PrependInt32Slot(6, duration, 0)
}
func OperatorExcelAddOperatorOutputPriority(builder *flatbuffers.Builder, operatorOutputPriority int32) {
	builder.PrependInt32Slot(7, operatorOutputPriority, 0)
}
func OperatorExcelAddPortraitPath(builder *flatbuffers.Builder, portraitPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(portraitPath), 0)
}
func OperatorExcelAddTextLocalizeKey(builder *flatbuffers.Builder, textLocalizeKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(textLocalizeKey), 0)
}
func OperatorExcelAddVoiceId(builder *flatbuffers.Builder, voiceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(voiceId), 0)
}
func OperatorExcelStartVoiceIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OperatorExcelAddOperatorWaitQueue(builder *flatbuffers.Builder, operatorWaitQueue bool) {
	builder.PrependBoolSlot(11, operatorWaitQueue, false)
}
func OperatorExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
