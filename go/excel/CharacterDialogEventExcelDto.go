// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterDialogEventExcelDto represents a FlatBuffers table
type CharacterDialogEventExcelDto struct {
	fbsutils.FlatBuffer
	CostumeUniqueId            int64                 `json:"costume_unique_id"`
	OriginalCharacterId        int64                 `json:"original_character_id"`
	DisplayOrder               int64                 `json:"display_order"`
	EventId                    int64                 `json:"event_id"`
	ProductionStep             ProductionStep        `json:"production_step"`
	DialogCategory             DialogCategory        `json:"dialog_category"`
	DialogCondition            DialogCondition       `json:"dialog_condition"`
	DialogConditionDetail      DialogConditionDetail `json:"dialog_condition_detail"`
	DialogConditionDetailValue int64                 `json:"dialog_condition_detail_value"`
	GroupId                    int64                 `json:"group_id"`
	DialogType                 DialogType            `json:"dialog_type"`
	ActionName                 string                `json:"action_name"`
	Duration                   int64                 `json:"duration"`
	AnimationName              string                `json:"animation_name"`
	LocalizeKr                 string                `json:"localize_kr"`
	LocalizeJp                 string                `json:"localize_jp"`
	VoiceId                    []uint32              `json:"voice_id"`
	CollectionVisible          bool                  `json:"collection_visible"`
	CvCollectionType           CVCollectionType      `json:"cv_collection_type"`
	CvUnlockScenarioType       CVUnlockScenarioType  `json:"cv_unlock_scenario_type"`
	UnlockEventSeason          int64                 `json:"unlock_event_season"`
	ScenarioGroupId            int64                 `json:"scenario_group_id"`
	LocalizeCvGroup            string                `json:"localize_cv_group"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterDialogEventExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_action_name := b.CreateString(fbsutils.Convert(t.ActionName, t.FlatBuffer.TableKey))
	__offset_animation_name := b.CreateString(fbsutils.Convert(t.AnimationName, t.FlatBuffer.TableKey))
	__offset_localize_kr := b.CreateString(fbsutils.Convert(t.LocalizeKr, t.FlatBuffer.TableKey))
	__offset_localize_jp := b.CreateString(fbsutils.Convert(t.LocalizeJp, t.FlatBuffer.TableKey))
	__offset_localize_cv_group := b.CreateString(fbsutils.Convert(t.LocalizeCvGroup, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelStart(b)
	CharacterDialogEventExcelAddCostumeUniqueId(b, fbsutils.Convert(t.CostumeUniqueId, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddOriginalCharacterId(b, fbsutils.Convert(t.OriginalCharacterId, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddEventId(b, fbsutils.Convert(t.EventId, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddDialogCategory(b, fbsutils.Convert(t.DialogCategory, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddDialogCondition(b, fbsutils.Convert(t.DialogCondition, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddDialogConditionDetail(b, fbsutils.Convert(t.DialogConditionDetail, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddDialogConditionDetailValue(b, fbsutils.Convert(t.DialogConditionDetailValue, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddDialogType(b, fbsutils.Convert(t.DialogType, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddActionName(b, __offset_action_name)
	CharacterDialogEventExcelAddDuration(b, fbsutils.Convert(t.Duration, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddAnimationName(b, __offset_animation_name)
	CharacterDialogEventExcelAddLocalizeKr(b, __offset_localize_kr)
	CharacterDialogEventExcelAddLocalizeJp(b, __offset_localize_jp)
	CharacterDialogEventExcelStartVoiceIdVector(b, len(t.VoiceId))
	for i := range len(t.VoiceId) {
		b.PrependUint32(fbsutils.Convert(t.VoiceId[len(t.VoiceId)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterDialogEventExcelAddVoiceId(b, b.EndVector(len(t.VoiceId)))
	CharacterDialogEventExcelAddCollectionVisible(b, t.CollectionVisible)
	CharacterDialogEventExcelAddCvCollectionType(b, fbsutils.Convert(t.CvCollectionType, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddCvUnlockScenarioType(b, fbsutils.Convert(t.CvUnlockScenarioType, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddUnlockEventSeason(b, fbsutils.Convert(t.UnlockEventSeason, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddScenarioGroupId(b, fbsutils.Convert(t.ScenarioGroupId, t.FlatBuffer.TableKey))
	CharacterDialogEventExcelAddLocalizeCvGroup(b, __offset_localize_cv_group)
	return CharacterDialogEventExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterDialogEventExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterDialogEventExcelDto) UnmarshalMessage(e *CharacterDialogEventExcel) error {
	t.CostumeUniqueId = fbsutils.Convert(e.CostumeUniqueId(), t.FlatBuffer.TableKey)
	t.OriginalCharacterId = fbsutils.Convert(e.OriginalCharacterId(), t.FlatBuffer.TableKey)
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.EventId = fbsutils.Convert(e.EventId(), t.FlatBuffer.TableKey)
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.DialogCategory = DialogCategory(fbsutils.Convert(int32(e.DialogCategory()), t.FlatBuffer.TableKey))
	t.DialogCondition = DialogCondition(fbsutils.Convert(int32(e.DialogCondition()), t.FlatBuffer.TableKey))
	t.DialogConditionDetail = DialogConditionDetail(fbsutils.Convert(int32(e.DialogConditionDetail()), t.FlatBuffer.TableKey))
	t.DialogConditionDetailValue = fbsutils.Convert(e.DialogConditionDetailValue(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.DialogType = DialogType(fbsutils.Convert(int32(e.DialogType()), t.FlatBuffer.TableKey))
	t.ActionName = fbsutils.Convert(string(e.ActionName()), t.FlatBuffer.TableKey)
	t.Duration = fbsutils.Convert(e.Duration(), t.FlatBuffer.TableKey)
	t.AnimationName = fbsutils.Convert(string(e.AnimationName()), t.FlatBuffer.TableKey)
	t.LocalizeKr = fbsutils.Convert(string(e.LocalizeKr()), t.FlatBuffer.TableKey)
	t.LocalizeJp = fbsutils.Convert(string(e.LocalizeJp()), t.FlatBuffer.TableKey)
	t.VoiceId = make([]uint32, e.VoiceIdLength())
	for i := range e.VoiceIdLength() {
		t.VoiceId[i] = fbsutils.Convert(e.VoiceId(i), t.FlatBuffer.TableKey)
	}
	t.CollectionVisible = e.CollectionVisible()
	t.CvCollectionType = CVCollectionType(fbsutils.Convert(int32(e.CvCollectionType()), t.FlatBuffer.TableKey))
	t.CvUnlockScenarioType = CVUnlockScenarioType(fbsutils.Convert(int32(e.CvUnlockScenarioType()), t.FlatBuffer.TableKey))
	t.UnlockEventSeason = fbsutils.Convert(e.UnlockEventSeason(), t.FlatBuffer.TableKey)
	t.ScenarioGroupId = fbsutils.Convert(e.ScenarioGroupId(), t.FlatBuffer.TableKey)
	t.LocalizeCvGroup = fbsutils.Convert(string(e.LocalizeCvGroup()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterDialogEventExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterDialogEventExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterDialogEventExcelDto) FlatDataName() string {
	return "CharacterDialogEventExcel"
}
