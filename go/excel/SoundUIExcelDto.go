// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// SoundUIExcelDto represents a FlatBuffers table
type SoundUIExcelDto struct {
	fbsutils.FlatBuffer
	Id            int64  `json:"id"`
	SoundUniqueId string `json:"sound_unique_id"`
	Path          string `json:"path"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *SoundUIExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	SoundUIExcelStart(b)
	SoundUIExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	SoundUIExcelAddSoundUniqueId(b, b.CreateString(fbsutils.Convert(t.SoundUniqueId, t.FlatBuffer.TableKey)))
	SoundUIExcelAddPath(b, b.CreateString(fbsutils.Convert(t.Path, t.FlatBuffer.TableKey)))
	return SoundUIExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *SoundUIExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *SoundUIExcelDto) UnmarshalMessage(e *SoundUIExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.SoundUniqueId = fbsutils.Convert(string(e.SoundUniqueId()), t.FlatBuffer.TableKey)
	t.Path = fbsutils.Convert(string(e.Path()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *SoundUIExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsSoundUIExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (SoundUIExcelDto) FlatDataName() string {
	return "SoundUIExcel"
}
