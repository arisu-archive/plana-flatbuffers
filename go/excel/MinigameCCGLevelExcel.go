// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGLevelExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGLevelExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGLevelExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGLevelExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGLevelExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGLevelExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGLevelExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGLevelExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGLevelExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGLevelExcel) BackgroundPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGLevelExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MinigameCCGLevelExcel) CcgId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelExcel) MutateCcgId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MinigameCCGLevelExcel) FloorIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelExcel) MutateFloorIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *MinigameCCGLevelExcel) LevelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelExcel) MutateLevelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func MinigameCCGLevelExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MinigameCCGLevelExcelAddBackgroundPath(builder *flatbuffers.Builder, backgroundPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(backgroundPath), 0)
}
func MinigameCCGLevelExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(1, bgmId, 0)
}
func MinigameCCGLevelExcelAddCcgId(builder *flatbuffers.Builder, ccgId int64) {
	builder.PrependInt64Slot(2, ccgId, 0)
}
func MinigameCCGLevelExcelAddFloorIndex(builder *flatbuffers.Builder, floorIndex int32) {
	builder.PrependInt32Slot(3, floorIndex, 0)
}
func MinigameCCGLevelExcelAddLevelId(builder *flatbuffers.Builder, levelId int64) {
	builder.PrependInt64Slot(4, levelId, 0)
}
func MinigameCCGLevelExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
