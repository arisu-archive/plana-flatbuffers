// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamCollectionScenarioExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamCollectionScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamCollectionScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamCollectionScenarioExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamCollectionScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamCollectionScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamCollectionScenarioExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamCollectionScenarioExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamCollectionScenarioExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamCollectionScenarioExcel) ScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) MutateScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameDreamCollectionScenarioExcel) ParameterAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) ParameterAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) MutateParameterAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDreamCollectionScenarioExcel) Parameter(j int) DreamMakerParameterType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return DreamMakerParameterType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) ParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) MutateParameter(j int, n DreamMakerParameterType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameDreamCollectionScenarioExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDreamCollectionScenarioExcel) IsSkip() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameDreamCollectionScenarioExcel) MutateIsSkip(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *MiniGameDreamCollectionScenarioExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamCollectionScenarioExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func MiniGameDreamCollectionScenarioExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MiniGameDreamCollectionScenarioExcelAddScenarioGroupId(builder *flatbuffers.Builder, scenarioGroupId int64) {
	builder.PrependInt64Slot(0, scenarioGroupId, 0)
}
func MiniGameDreamCollectionScenarioExcelAddParameterAmount(builder *flatbuffers.Builder, parameterAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(parameterAmount), 0)
}
func MiniGameDreamCollectionScenarioExcelStartParameterAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDreamCollectionScenarioExcelAddParameter(builder *flatbuffers.Builder, parameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(parameter), 0)
}
func MiniGameDreamCollectionScenarioExcelStartParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDreamCollectionScenarioExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func MiniGameDreamCollectionScenarioExcelAddIsSkip(builder *flatbuffers.Builder, isSkip bool) {
	builder.PrependBoolSlot(4, isSkip, false)
}
func MiniGameDreamCollectionScenarioExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(5, id, 0)
}
func MiniGameDreamCollectionScenarioExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
