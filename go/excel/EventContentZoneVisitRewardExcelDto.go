// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentZoneVisitRewardExcelDto represents a FlatBuffers table
type EventContentZoneVisitRewardExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId         int64        `json:"event_content_id"`
	EventContentLocationId int64        `json:"event_content_location_id"`
	DevName                string       `json:"dev_name"`
	CharacterId            int64        `json:"character_id"`
	CharacterDevName       string       `json:"character_dev_name"`
	VisitRewardParcelType  []ParcelType `json:"visit_reward_parcel_type"`
	VisitRewardParcelId    []int64      `json:"visit_reward_parcel_id"`
	VisitRewardAmount      []int64      `json:"visit_reward_amount"`
	VisitRewardProb        []int64      `json:"visit_reward_prob"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentZoneVisitRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentZoneVisitRewardExcelStart(b)
	EventContentZoneVisitRewardExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentZoneVisitRewardExcelAddEventContentLocationId(b, fbsutils.Convert(t.EventContentLocationId, t.FlatBuffer.TableKey))
	EventContentZoneVisitRewardExcelAddDevName(b, b.CreateString(fbsutils.Convert(t.DevName, t.FlatBuffer.TableKey)))
	EventContentZoneVisitRewardExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	EventContentZoneVisitRewardExcelAddCharacterDevName(b, b.CreateString(fbsutils.Convert(t.CharacterDevName, t.FlatBuffer.TableKey)))
	EventContentZoneVisitRewardExcelStartVisitRewardParcelTypeVector(b, len(t.VisitRewardParcelType))
	for i := range len(t.VisitRewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.VisitRewardParcelType[len(t.VisitRewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentZoneVisitRewardExcelAddVisitRewardParcelType(b, b.EndVector(len(t.VisitRewardParcelType)))
	EventContentZoneVisitRewardExcelStartVisitRewardParcelIdVector(b, len(t.VisitRewardParcelId))
	for i := range len(t.VisitRewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.VisitRewardParcelId[len(t.VisitRewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentZoneVisitRewardExcelAddVisitRewardParcelId(b, b.EndVector(len(t.VisitRewardParcelId)))
	EventContentZoneVisitRewardExcelStartVisitRewardAmountVector(b, len(t.VisitRewardAmount))
	for i := range len(t.VisitRewardAmount) {
		b.PrependInt64(fbsutils.Convert(t.VisitRewardAmount[len(t.VisitRewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentZoneVisitRewardExcelAddVisitRewardAmount(b, b.EndVector(len(t.VisitRewardAmount)))
	EventContentZoneVisitRewardExcelStartVisitRewardProbVector(b, len(t.VisitRewardProb))
	for i := range len(t.VisitRewardProb) {
		b.PrependInt64(fbsutils.Convert(t.VisitRewardProb[len(t.VisitRewardProb)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentZoneVisitRewardExcelAddVisitRewardProb(b, b.EndVector(len(t.VisitRewardProb)))
	return EventContentZoneVisitRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentZoneVisitRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentZoneVisitRewardExcelDto) UnmarshalMessage(e *EventContentZoneVisitRewardExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.EventContentLocationId = fbsutils.Convert(e.EventContentLocationId(), t.FlatBuffer.TableKey)
	t.DevName = fbsutils.Convert(string(e.DevName()), t.FlatBuffer.TableKey)
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.CharacterDevName = fbsutils.Convert(string(e.CharacterDevName()), t.FlatBuffer.TableKey)
	t.VisitRewardParcelType = make([]ParcelType, e.VisitRewardParcelTypeLength())
	for i := range e.VisitRewardParcelTypeLength() {
		t.VisitRewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.VisitRewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.VisitRewardParcelId = make([]int64, e.VisitRewardParcelIdLength())
	for i := range e.VisitRewardParcelIdLength() {
		t.VisitRewardParcelId[i] = fbsutils.Convert(e.VisitRewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.VisitRewardAmount = make([]int64, e.VisitRewardAmountLength())
	for i := range e.VisitRewardAmountLength() {
		t.VisitRewardAmount[i] = fbsutils.Convert(e.VisitRewardAmount(i), t.FlatBuffer.TableKey)
	}
	t.VisitRewardProb = make([]int64, e.VisitRewardProbLength())
	for i := range e.VisitRewardProbLength() {
		t.VisitRewardProb[i] = fbsutils.Convert(e.VisitRewardProb(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentZoneVisitRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentZoneVisitRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentZoneVisitRewardExcelDto) FlatDataName() string {
	return "EventContentZoneVisitRewardExcel"
}
