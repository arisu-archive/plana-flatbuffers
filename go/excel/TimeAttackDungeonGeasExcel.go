// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeAttackDungeonGeasExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeAttackDungeonGeasExcel(buf []byte, offset flatbuffers.UOffsetT) *TimeAttackDungeonGeasExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeAttackDungeonGeasExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeAttackDungeonGeasExcel(buf []byte, offset flatbuffers.UOffsetT) *TimeAttackDungeonGeasExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeAttackDungeonGeasExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeAttackDungeonGeasExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeAttackDungeonGeasExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeAttackDungeonGeasExcel) GeasLocalizeEtcKey(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) GeasLocalizeEtcKeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateGeasLocalizeEtcKey(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *TimeAttackDungeonGeasExcel) GeasIconPath(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TimeAttackDungeonGeasExcel) GeasIconPathLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) EnemyPassiveSkillLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) EnemyPassiveSkillLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateEnemyPassiveSkillLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *TimeAttackDungeonGeasExcel) EnemyPassiveSkillId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TimeAttackDungeonGeasExcel) EnemyPassiveSkillIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) AllyPassiveSkillLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) AllyPassiveSkillLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateAllyPassiveSkillLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *TimeAttackDungeonGeasExcel) AllyPassiveSkillId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TimeAttackDungeonGeasExcel) AllyPassiveSkillIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *TimeAttackDungeonGeasExcel) RecommandLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateRecommandLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *TimeAttackDungeonGeasExcel) Difficulty() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateDifficulty(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *TimeAttackDungeonGeasExcel) TimeWeightConst() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateTimeWeightConst(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *TimeAttackDungeonGeasExcel) ClearTimeWeightPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateClearTimeWeightPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *TimeAttackDungeonGeasExcel) ClearDefaultPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateClearDefaultPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *TimeAttackDungeonGeasExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *TimeAttackDungeonGeasExcel) LocalizeEtcKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateLocalizeEtcKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

func (rcv *TimeAttackDungeonGeasExcel) TimeAttackDungeonType() TimeAttackDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return TimeAttackDungeonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateTimeAttackDungeonType(n TimeAttackDungeonType) bool {
	return rcv._tab.MutateInt32Slot(32, int32(n))
}

func (rcv *TimeAttackDungeonGeasExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonGeasExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func TimeAttackDungeonGeasExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func TimeAttackDungeonGeasExcelAddGeasLocalizeEtcKey(builder *flatbuffers.Builder, geasLocalizeEtcKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(geasLocalizeEtcKey), 0)
}
func TimeAttackDungeonGeasExcelStartGeasLocalizeEtcKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonGeasExcelAddGeasIconPath(builder *flatbuffers.Builder, geasIconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(geasIconPath), 0)
}
func TimeAttackDungeonGeasExcelStartGeasIconPathVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonGeasExcelAddEnemyPassiveSkillLevel(builder *flatbuffers.Builder, enemyPassiveSkillLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(enemyPassiveSkillLevel), 0)
}
func TimeAttackDungeonGeasExcelStartEnemyPassiveSkillLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonGeasExcelAddEnemyPassiveSkillId(builder *flatbuffers.Builder, enemyPassiveSkillId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(enemyPassiveSkillId), 0)
}
func TimeAttackDungeonGeasExcelStartEnemyPassiveSkillIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonGeasExcelAddAllyPassiveSkillLevel(builder *flatbuffers.Builder, allyPassiveSkillLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(allyPassiveSkillLevel), 0)
}
func TimeAttackDungeonGeasExcelStartAllyPassiveSkillLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonGeasExcelAddAllyPassiveSkillId(builder *flatbuffers.Builder, allyPassiveSkillId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(allyPassiveSkillId), 0)
}
func TimeAttackDungeonGeasExcelStartAllyPassiveSkillIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonGeasExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(6, groundId, 0)
}
func TimeAttackDungeonGeasExcelAddRecommandLevel(builder *flatbuffers.Builder, recommandLevel int32) {
	builder.PrependInt32Slot(7, recommandLevel, 0)
}
func TimeAttackDungeonGeasExcelAddDifficulty(builder *flatbuffers.Builder, difficulty int32) {
	builder.PrependInt32Slot(8, difficulty, 0)
}
func TimeAttackDungeonGeasExcelAddTimeWeightConst(builder *flatbuffers.Builder, timeWeightConst int64) {
	builder.PrependInt64Slot(9, timeWeightConst, 0)
}
func TimeAttackDungeonGeasExcelAddClearTimeWeightPoint(builder *flatbuffers.Builder, clearTimeWeightPoint int64) {
	builder.PrependInt64Slot(10, clearTimeWeightPoint, 0)
}
func TimeAttackDungeonGeasExcelAddClearDefaultPoint(builder *flatbuffers.Builder, clearDefaultPoint int64) {
	builder.PrependInt64Slot(11, clearDefaultPoint, 0)
}
func TimeAttackDungeonGeasExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(12, battleDuration, 0)
}
func TimeAttackDungeonGeasExcelAddLocalizeEtcKey(builder *flatbuffers.Builder, localizeEtcKey uint32) {
	builder.PrependUint32Slot(13, localizeEtcKey, 0)
}
func TimeAttackDungeonGeasExcelAddTimeAttackDungeonType(builder *flatbuffers.Builder, timeAttackDungeonType TimeAttackDungeonType) {
	builder.PrependInt32Slot(14, int32(timeAttackDungeonType), 0)
}
func TimeAttackDungeonGeasExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(15, id, 0)
}
func TimeAttackDungeonGeasExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
