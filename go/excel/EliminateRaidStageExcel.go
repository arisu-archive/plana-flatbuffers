// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EliminateRaidStageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEliminateRaidStageExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EliminateRaidStageExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEliminateRaidStageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEliminateRaidStageExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EliminateRaidStageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEliminateRaidStageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EliminateRaidStageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EliminateRaidStageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EliminateRaidStageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EliminateRaidStageExcel) UseBossIndex() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) MutateUseBossIndex(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *EliminateRaidStageExcel) UseBossAiPhaseSync() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) MutateUseBossAiPhaseSync(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *EliminateRaidStageExcel) RaidBossGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) RaidEnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateRaidEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *EliminateRaidStageExcel) RaidEnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateRaidEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EliminateRaidStageExcel) RaidEnterCostAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateRaidEnterCostAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *EliminateRaidStageExcel) BossSpinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) PortraitPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) BgPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) RaidCharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateRaidCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *EliminateRaidStageExcel) BossCharacterId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) BossCharacterIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateBossCharacterId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) Difficulty() Difficulty {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return Difficulty(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateDifficulty(n Difficulty) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *EliminateRaidStageExcel) IsOpen() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) MutateIsOpen(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

func (rcv *EliminateRaidStageExcel) MaxPlayerCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateMaxPlayerCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *EliminateRaidStageExcel) RaidRoomLifeTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateRaidRoomLifeTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *EliminateRaidStageExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func (rcv *EliminateRaidStageExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *EliminateRaidStageExcel) GroundDevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) EnterTimeLine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) TacticEnvironment() TacticEnvironment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return TacticEnvironment(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateTacticEnvironment(n TacticEnvironment) bool {
	return rcv._tab.MutateInt32Slot(44, int32(n))
}

func (rcv *EliminateRaidStageExcel) DefaultClearScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateDefaultClearScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(46, n)
}

func (rcv *EliminateRaidStageExcel) MaximumScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateMaximumScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(48, n)
}

func (rcv *EliminateRaidStageExcel) PerSecondMinusScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutatePerSecondMinusScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *EliminateRaidStageExcel) HpPercentScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateHpPercentScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

func (rcv *EliminateRaidStageExcel) MinimumAcquisitionScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateMinimumAcquisitionScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(54, n)
}

func (rcv *EliminateRaidStageExcel) MaximumAcquisitionScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateMaximumAcquisitionScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(56, n)
}

func (rcv *EliminateRaidStageExcel) RaidRewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateRaidRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(58, n)
}

func (rcv *EliminateRaidStageExcel) BattleReadyTimelinePath(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) BattleReadyTimelinePathLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) BattleReadyTimelinePhaseStart(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) BattleReadyTimelinePhaseStartLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateBattleReadyTimelinePhaseStart(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) BattleReadyTimelinePhaseEnd(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) BattleReadyTimelinePhaseEndLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateBattleReadyTimelinePhaseEnd(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) VictoryTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) PhaseChangeTimelinePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EliminateRaidStageExcel) TimeLinePhase() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateTimeLinePhase(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

func (rcv *EliminateRaidStageExcel) EnterScenarioKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateEnterScenarioKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(72, n)
}

func (rcv *EliminateRaidStageExcel) ClearScenarioKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateClearScenarioKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(74, n)
}

func (rcv *EliminateRaidStageExcel) ShowSkillCard() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EliminateRaidStageExcel) MutateShowSkillCard(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

func (rcv *EliminateRaidStageExcel) BossBgInfoKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateBossBgInfoKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(78, n)
}

func (rcv *EliminateRaidStageExcel) EchelonExtensionType() EchelonExtensionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return EchelonExtensionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EliminateRaidStageExcel) MutateEchelonExtensionType(n EchelonExtensionType) bool {
	return rcv._tab.MutateInt32Slot(80, int32(n))
}

func EliminateRaidStageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func EliminateRaidStageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func EliminateRaidStageExcelAddUseBossIndex(builder *flatbuffers.Builder, useBossIndex bool) {
	builder.PrependBoolSlot(1, useBossIndex, false)
}
func EliminateRaidStageExcelAddUseBossAiPhaseSync(builder *flatbuffers.Builder, useBossAiPhaseSync bool) {
	builder.PrependBoolSlot(2, useBossAiPhaseSync, false)
}
func EliminateRaidStageExcelAddRaidBossGroup(builder *flatbuffers.Builder, raidBossGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(raidBossGroup), 0)
}
func EliminateRaidStageExcelAddRaidEnterCostType(builder *flatbuffers.Builder, raidEnterCostType ParcelType) {
	builder.PrependInt32Slot(4, int32(raidEnterCostType), 0)
}
func EliminateRaidStageExcelAddRaidEnterCostId(builder *flatbuffers.Builder, raidEnterCostId int64) {
	builder.PrependInt64Slot(5, raidEnterCostId, 0)
}
func EliminateRaidStageExcelAddRaidEnterCostAmount(builder *flatbuffers.Builder, raidEnterCostAmount int32) {
	builder.PrependInt32Slot(6, raidEnterCostAmount, 0)
}
func EliminateRaidStageExcelAddBossSpinePath(builder *flatbuffers.Builder, bossSpinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(bossSpinePath), 0)
}
func EliminateRaidStageExcelAddPortraitPath(builder *flatbuffers.Builder, portraitPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(portraitPath), 0)
}
func EliminateRaidStageExcelAddBgPath(builder *flatbuffers.Builder, bgPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(bgPath), 0)
}
func EliminateRaidStageExcelAddRaidCharacterId(builder *flatbuffers.Builder, raidCharacterId int64) {
	builder.PrependInt64Slot(10, raidCharacterId, 0)
}
func EliminateRaidStageExcelAddBossCharacterId(builder *flatbuffers.Builder, bossCharacterId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(bossCharacterId), 0)
}
func EliminateRaidStageExcelStartBossCharacterIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EliminateRaidStageExcelAddDifficulty(builder *flatbuffers.Builder, difficulty Difficulty) {
	builder.PrependInt32Slot(12, int32(difficulty), 0)
}
func EliminateRaidStageExcelAddIsOpen(builder *flatbuffers.Builder, isOpen bool) {
	builder.PrependBoolSlot(13, isOpen, false)
}
func EliminateRaidStageExcelAddMaxPlayerCount(builder *flatbuffers.Builder, maxPlayerCount int64) {
	builder.PrependInt64Slot(14, maxPlayerCount, 0)
}
func EliminateRaidStageExcelAddRaidRoomLifeTime(builder *flatbuffers.Builder, raidRoomLifeTime int32) {
	builder.PrependInt32Slot(15, raidRoomLifeTime, 0)
}
func EliminateRaidStageExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(16, battleDuration, 0)
}
func EliminateRaidStageExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(17, groundId, 0)
}
func EliminateRaidStageExcelAddGroundDevName(builder *flatbuffers.Builder, groundDevName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(groundDevName), 0)
}
func EliminateRaidStageExcelAddEnterTimeLine(builder *flatbuffers.Builder, enterTimeLine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(enterTimeLine), 0)
}
func EliminateRaidStageExcelAddTacticEnvironment(builder *flatbuffers.Builder, tacticEnvironment TacticEnvironment) {
	builder.PrependInt32Slot(20, int32(tacticEnvironment), 0)
}
func EliminateRaidStageExcelAddDefaultClearScore(builder *flatbuffers.Builder, defaultClearScore int64) {
	builder.PrependInt64Slot(21, defaultClearScore, 0)
}
func EliminateRaidStageExcelAddMaximumScore(builder *flatbuffers.Builder, maximumScore int64) {
	builder.PrependInt64Slot(22, maximumScore, 0)
}
func EliminateRaidStageExcelAddPerSecondMinusScore(builder *flatbuffers.Builder, perSecondMinusScore int64) {
	builder.PrependInt64Slot(23, perSecondMinusScore, 0)
}
func EliminateRaidStageExcelAddHpPercentScore(builder *flatbuffers.Builder, hpPercentScore int64) {
	builder.PrependInt64Slot(24, hpPercentScore, 0)
}
func EliminateRaidStageExcelAddMinimumAcquisitionScore(builder *flatbuffers.Builder, minimumAcquisitionScore int64) {
	builder.PrependInt64Slot(25, minimumAcquisitionScore, 0)
}
func EliminateRaidStageExcelAddMaximumAcquisitionScore(builder *flatbuffers.Builder, maximumAcquisitionScore int64) {
	builder.PrependInt64Slot(26, maximumAcquisitionScore, 0)
}
func EliminateRaidStageExcelAddRaidRewardGroupId(builder *flatbuffers.Builder, raidRewardGroupId int64) {
	builder.PrependInt64Slot(27, raidRewardGroupId, 0)
}
func EliminateRaidStageExcelAddBattleReadyTimelinePath(builder *flatbuffers.Builder, battleReadyTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(battleReadyTimelinePath), 0)
}
func EliminateRaidStageExcelStartBattleReadyTimelinePathVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EliminateRaidStageExcelAddBattleReadyTimelinePhaseStart(builder *flatbuffers.Builder, battleReadyTimelinePhaseStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(battleReadyTimelinePhaseStart), 0)
}
func EliminateRaidStageExcelStartBattleReadyTimelinePhaseStartVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EliminateRaidStageExcelAddBattleReadyTimelinePhaseEnd(builder *flatbuffers.Builder, battleReadyTimelinePhaseEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(battleReadyTimelinePhaseEnd), 0)
}
func EliminateRaidStageExcelStartBattleReadyTimelinePhaseEndVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EliminateRaidStageExcelAddVictoryTimelinePath(builder *flatbuffers.Builder, victoryTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(victoryTimelinePath), 0)
}
func EliminateRaidStageExcelAddPhaseChangeTimelinePath(builder *flatbuffers.Builder, phaseChangeTimelinePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(phaseChangeTimelinePath), 0)
}
func EliminateRaidStageExcelAddTimeLinePhase(builder *flatbuffers.Builder, timeLinePhase int64) {
	builder.PrependInt64Slot(33, timeLinePhase, 0)
}
func EliminateRaidStageExcelAddEnterScenarioKey(builder *flatbuffers.Builder, enterScenarioKey uint32) {
	builder.PrependUint32Slot(34, enterScenarioKey, 0)
}
func EliminateRaidStageExcelAddClearScenarioKey(builder *flatbuffers.Builder, clearScenarioKey uint32) {
	builder.PrependUint32Slot(35, clearScenarioKey, 0)
}
func EliminateRaidStageExcelAddShowSkillCard(builder *flatbuffers.Builder, showSkillCard bool) {
	builder.PrependBoolSlot(36, showSkillCard, false)
}
func EliminateRaidStageExcelAddBossBgInfoKey(builder *flatbuffers.Builder, bossBgInfoKey uint32) {
	builder.PrependUint32Slot(37, bossBgInfoKey, 0)
}
func EliminateRaidStageExcelAddEchelonExtensionType(builder *flatbuffers.Builder, echelonExtensionType EchelonExtensionType) {
	builder.PrependInt32Slot(38, int32(echelonExtensionType), 0)
}
func EliminateRaidStageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
