// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDreamReplayScenarioExcelDto represents a FlatBuffers table
type MiniGameDreamReplayScenarioExcelDto struct {
	fbsutils.FlatBuffer
	IsReplayScenarioHorizon         bool   `json:"is_replay_scenario_horizon"`
	ReplayScenarioResource          string `json:"replay_scenario_resource"`
	ReplaySummaryLocalizeScenarioId uint32 `json:"replay_summary_localize_scenario_id"`
	ReplaySummaryTitleLocalize      uint32 `json:"replay_summary_title_localize"`
	Order                           int64  `json:"order"`
	ScenarioGroupId                 int64  `json:"scenario_group_id"`
	EventContentId                  int64  `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDreamReplayScenarioExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDreamReplayScenarioExcelStart(b)
	MiniGameDreamReplayScenarioExcelAddIsReplayScenarioHorizon(b, t.IsReplayScenarioHorizon)
	MiniGameDreamReplayScenarioExcelAddReplayScenarioResource(b, b.CreateString(fbsutils.Convert(t.ReplayScenarioResource, t.FlatBuffer.TableKey)))
	MiniGameDreamReplayScenarioExcelAddReplaySummaryLocalizeScenarioId(b, fbsutils.Convert(t.ReplaySummaryLocalizeScenarioId, t.FlatBuffer.TableKey))
	MiniGameDreamReplayScenarioExcelAddReplaySummaryTitleLocalize(b, fbsutils.Convert(t.ReplaySummaryTitleLocalize, t.FlatBuffer.TableKey))
	MiniGameDreamReplayScenarioExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	MiniGameDreamReplayScenarioExcelAddScenarioGroupId(b, fbsutils.Convert(t.ScenarioGroupId, t.FlatBuffer.TableKey))
	MiniGameDreamReplayScenarioExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return MiniGameDreamReplayScenarioExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDreamReplayScenarioExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamReplayScenarioExcelDto) UnmarshalMessage(e *MiniGameDreamReplayScenarioExcel) error {
	t.IsReplayScenarioHorizon = e.IsReplayScenarioHorizon()
	t.ReplayScenarioResource = fbsutils.Convert(string(e.ReplayScenarioResource()), t.FlatBuffer.TableKey)
	t.ReplaySummaryLocalizeScenarioId = fbsutils.Convert(e.ReplaySummaryLocalizeScenarioId(), t.FlatBuffer.TableKey)
	t.ReplaySummaryTitleLocalize = fbsutils.Convert(e.ReplaySummaryTitleLocalize(), t.FlatBuffer.TableKey)
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.ScenarioGroupId = fbsutils.Convert(e.ScenarioGroupId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamReplayScenarioExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDreamReplayScenarioExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDreamReplayScenarioExcelDto) FlatDataName() string {
	return "MiniGameDreamReplayScenarioExcel"
}
