// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScenarioCharacterSituationSetExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsScenarioCharacterSituationSetExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioCharacterSituationSetExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScenarioCharacterSituationSetExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScenarioCharacterSituationSetExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioCharacterSituationSetExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScenarioCharacterSituationSetExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScenarioCharacterSituationSetExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScenarioCharacterSituationSetExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScenarioCharacterSituationSetExcel) Action() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioCharacterSituationSetExcel) Behavior() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioCharacterSituationSetExcel) Effect() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioCharacterSituationSetExcel) MutateEffect(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ScenarioCharacterSituationSetExcel) Emotion() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioCharacterSituationSetExcel) MutateEmotion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ScenarioCharacterSituationSetExcel) Face() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioCharacterSituationSetExcel) Name() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioCharacterSituationSetExcel) MutateName(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *ScenarioCharacterSituationSetExcel) Shape() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ScenarioCharacterSituationSetExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ScenarioCharacterSituationSetExcelAddAction(builder *flatbuffers.Builder, action flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(action), 0)
}
func ScenarioCharacterSituationSetExcelAddBehavior(builder *flatbuffers.Builder, behavior flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(behavior), 0)
}
func ScenarioCharacterSituationSetExcelAddEffect(builder *flatbuffers.Builder, effect uint32) {
	builder.PrependUint32Slot(2, effect, 0)
}
func ScenarioCharacterSituationSetExcelAddEmotion(builder *flatbuffers.Builder, emotion uint32) {
	builder.PrependUint32Slot(3, emotion, 0)
}
func ScenarioCharacterSituationSetExcelAddFace(builder *flatbuffers.Builder, face flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(face), 0)
}
func ScenarioCharacterSituationSetExcelAddName(builder *flatbuffers.Builder, name uint32) {
	builder.PrependUint32Slot(5, name, 0)
}
func ScenarioCharacterSituationSetExcelAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(shape), 0)
}
func ScenarioCharacterSituationSetExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
