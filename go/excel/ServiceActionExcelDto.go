// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ServiceActionExcelDto represents a FlatBuffers table
type ServiceActionExcelDto struct {
	fbsutils.FlatBuffer
	ServiceActionType ServiceActionType `json:"service_action_type"`
	IsLegacy          bool              `json:"is_legacy"`
	GoodsId           int64             `json:"goods_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ServiceActionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ServiceActionExcelStart(b)
	ServiceActionExcelAddServiceActionType(b, fbsutils.Convert(t.ServiceActionType, t.FlatBuffer.TableKey))
	ServiceActionExcelAddIsLegacy(b, t.IsLegacy)
	ServiceActionExcelAddGoodsId(b, fbsutils.Convert(t.GoodsId, t.FlatBuffer.TableKey))
	return ServiceActionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ServiceActionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishServiceActionExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ServiceActionExcelDto) UnmarshalMessage(e *ServiceActionExcel) error {
	t.ServiceActionType = ServiceActionType(fbsutils.Convert(int32(e.ServiceActionType()), t.FlatBuffer.TableKey))
	t.IsLegacy = e.IsLegacy()
	t.GoodsId = fbsutils.Convert(e.GoodsId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ServiceActionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsServiceActionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ServiceActionExcelDto) FlatDataName() string {
	return "ServiceActionExcel"
}
