// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BattlePassFlavorTextExcelDto represents a FlatBuffers table
type BattlePassFlavorTextExcelDto struct {
	fbsutils.FlatBuffer
	GroupId        int64  `json:"group_id"`
	Id             int64  `json:"id"`
	LocalizeCodeId uint32 `json:"localize_code_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BattlePassFlavorTextExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	BattlePassFlavorTextExcelStart(b)
	BattlePassFlavorTextExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	BattlePassFlavorTextExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	BattlePassFlavorTextExcelAddLocalizeCodeId(b, fbsutils.Convert(t.LocalizeCodeId, t.FlatBuffer.TableKey))
	return BattlePassFlavorTextExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BattlePassFlavorTextExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassFlavorTextExcelDto) UnmarshalMessage(e *BattlePassFlavorTextExcel) error {
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.LocalizeCodeId = fbsutils.Convert(e.LocalizeCodeId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassFlavorTextExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBattlePassFlavorTextExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BattlePassFlavorTextExcelDto) FlatDataName() string {
	return "BattlePassFlavorTextExcel"
}
