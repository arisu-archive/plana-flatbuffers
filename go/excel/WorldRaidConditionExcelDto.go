// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WorldRaidConditionExcelDto represents a FlatBuffers table
type WorldRaidConditionExcelDto struct {
	fbsutils.FlatBuffer
	WorldRaidBossKill          []int64                    `json:"world_raid_boss_kill"`
	AfterWhenDate              string                     `json:"after_when_date"`
	MultipleConditionCheckType MultipleConditionCheckType `json:"multiple_condition_check_type"`
	CampaignStageId            []int64                    `json:"campaign_stage_id"`
	ScenarioModeId             []int64                    `json:"scenario_mode_id"`
	AccountLevel               int64                      `json:"account_level"`
	HideWhenLocked             bool                       `json:"hide_when_locked"`
	LockUi                     []string                   `json:"lock_ui"`
	Id                         int64                      `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WorldRaidConditionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	WorldRaidConditionExcelStart(b)
	WorldRaidConditionExcelStartWorldRaidBossKillVector(b, len(t.WorldRaidBossKill))
	for i := range len(t.WorldRaidBossKill) {
		b.PrependInt64(fbsutils.Convert(t.WorldRaidBossKill[len(t.WorldRaidBossKill)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidConditionExcelAddWorldRaidBossKill(b, b.EndVector(len(t.WorldRaidBossKill)))
	WorldRaidConditionExcelAddAfterWhenDate(b, b.CreateString(fbsutils.Convert(t.AfterWhenDate, t.FlatBuffer.TableKey)))
	WorldRaidConditionExcelAddMultipleConditionCheckType(b, fbsutils.Convert(t.MultipleConditionCheckType, t.FlatBuffer.TableKey))
	WorldRaidConditionExcelStartCampaignStageIdVector(b, len(t.CampaignStageId))
	for i := range len(t.CampaignStageId) {
		b.PrependInt64(fbsutils.Convert(t.CampaignStageId[len(t.CampaignStageId)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidConditionExcelAddCampaignStageId(b, b.EndVector(len(t.CampaignStageId)))
	WorldRaidConditionExcelStartScenarioModeIdVector(b, len(t.ScenarioModeId))
	for i := range len(t.ScenarioModeId) {
		b.PrependInt64(fbsutils.Convert(t.ScenarioModeId[len(t.ScenarioModeId)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidConditionExcelAddScenarioModeId(b, b.EndVector(len(t.ScenarioModeId)))
	WorldRaidConditionExcelAddAccountLevel(b, fbsutils.Convert(t.AccountLevel, t.FlatBuffer.TableKey))
	WorldRaidConditionExcelAddHideWhenLocked(b, t.HideWhenLocked)
	WorldRaidConditionExcelStartLockUiVector(b, len(t.LockUi))
	for i := range len(t.LockUi) {
		b.PrependUOffsetT(b.CreateString(t.LockUi[len(t.LockUi)-i-1]))
	}
	WorldRaidConditionExcelAddLockUi(b, b.EndVector(len(t.LockUi)))
	WorldRaidConditionExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return WorldRaidConditionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WorldRaidConditionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidConditionExcelDto) UnmarshalMessage(e *WorldRaidConditionExcel) error {
	t.WorldRaidBossKill = make([]int64, e.WorldRaidBossKillLength())
	for i := range e.WorldRaidBossKillLength() {
		t.WorldRaidBossKill[i] = fbsutils.Convert(e.WorldRaidBossKill(i), t.FlatBuffer.TableKey)
	}
	t.AfterWhenDate = fbsutils.Convert(string(e.AfterWhenDate()), t.FlatBuffer.TableKey)
	t.MultipleConditionCheckType = MultipleConditionCheckType(fbsutils.Convert(int32(e.MultipleConditionCheckType()), t.FlatBuffer.TableKey))
	t.CampaignStageId = make([]int64, e.CampaignStageIdLength())
	for i := range e.CampaignStageIdLength() {
		t.CampaignStageId[i] = fbsutils.Convert(e.CampaignStageId(i), t.FlatBuffer.TableKey)
	}
	t.ScenarioModeId = make([]int64, e.ScenarioModeIdLength())
	for i := range e.ScenarioModeIdLength() {
		t.ScenarioModeId[i] = fbsutils.Convert(e.ScenarioModeId(i), t.FlatBuffer.TableKey)
	}
	t.AccountLevel = fbsutils.Convert(e.AccountLevel(), t.FlatBuffer.TableKey)
	t.HideWhenLocked = e.HideWhenLocked()
	t.LockUi = make([]string, e.LockUiLength())
	for i := range e.LockUiLength() {
		t.LockUi[i] = fbsutils.Convert(string(e.LockUi(i)), t.FlatBuffer.TableKey)
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidConditionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsWorldRaidConditionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WorldRaidConditionExcelDto) FlatDataName() string {
	return "WorldRaidConditionExcel"
}
