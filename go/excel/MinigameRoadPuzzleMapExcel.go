// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameRoadPuzzleMapExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameRoadPuzzleMapExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadPuzzleMapExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameRoadPuzzleMapExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameRoadPuzzleMapExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadPuzzleMapExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameRoadPuzzleMapExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameRoadPuzzleMapExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameRoadPuzzleMapExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameRoadPuzzleMapExcel) AvailableRailTileAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) AvailableRailTileAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateAvailableRailTileAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameRoadPuzzleMapExcel) AvailableRailTile(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) AvailableRailTileLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateAvailableRailTile(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameRoadPuzzleMapExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MinigameRoadPuzzleMapExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MinigameRoadPuzzleMapExcel) Map() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameRoadPuzzleMapExcel) MapBg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameRoadPuzzleMapExcel) MapGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateMapGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MinigameRoadPuzzleMapExcel) OriginalTileCount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) OriginalTileCountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateOriginalTileCount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameRoadPuzzleMapExcel) TrainSpeed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateTrainSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *MinigameRoadPuzzleMapExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func MinigameRoadPuzzleMapExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func MinigameRoadPuzzleMapExcelAddAvailableRailTileAmount(builder *flatbuffers.Builder, availableRailTileAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(availableRailTileAmount), 0)
}
func MinigameRoadPuzzleMapExcelStartAvailableRailTileAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameRoadPuzzleMapExcelAddAvailableRailTile(builder *flatbuffers.Builder, availableRailTile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(availableRailTile), 0)
}
func MinigameRoadPuzzleMapExcelStartAvailableRailTileVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameRoadPuzzleMapExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(2, bgmId, 0)
}
func MinigameRoadPuzzleMapExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func MinigameRoadPuzzleMapExcelAddMap(builder *flatbuffers.Builder, map_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(map_), 0)
}
func MinigameRoadPuzzleMapExcelAddMapBg(builder *flatbuffers.Builder, mapBg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(mapBg), 0)
}
func MinigameRoadPuzzleMapExcelAddMapGroupId(builder *flatbuffers.Builder, mapGroupId int64) {
	builder.PrependInt64Slot(6, mapGroupId, 0)
}
func MinigameRoadPuzzleMapExcelAddOriginalTileCount(builder *flatbuffers.Builder, originalTileCount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(originalTileCount), 0)
}
func MinigameRoadPuzzleMapExcelStartOriginalTileCountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameRoadPuzzleMapExcelAddTrainSpeed(builder *flatbuffers.Builder, trainSpeed float32) {
	builder.PrependFloat32Slot(8, trainSpeed, 0.0)
}
func MinigameRoadPuzzleMapExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(9, uniqueId, 0)
}
func MinigameRoadPuzzleMapExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
