// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FarmingDungeonLocationManageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFarmingDungeonLocationManageExcel(buf []byte, offset flatbuffers.UOffsetT) *FarmingDungeonLocationManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FarmingDungeonLocationManageExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishFarmingDungeonLocationManageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFarmingDungeonLocationManageExcel(buf []byte, offset flatbuffers.UOffsetT) *FarmingDungeonLocationManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FarmingDungeonLocationManageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFarmingDungeonLocationManageExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FarmingDungeonLocationManageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FarmingDungeonLocationManageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FarmingDungeonLocationManageExcel) FarmingDungeonLocationId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateFarmingDungeonLocationId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FarmingDungeonLocationManageExcel) ContentType() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateContentType(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *FarmingDungeonLocationManageExcel) WeekDungeonType() WeekDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return WeekDungeonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateWeekDungeonType(n WeekDungeonType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *FarmingDungeonLocationManageExcel) SchoolDungeonType() SchoolDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return SchoolDungeonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateSchoolDungeonType(n SchoolDungeonType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *FarmingDungeonLocationManageExcel) Order() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *FarmingDungeonLocationManageExcel) OpenStartDateTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FarmingDungeonLocationManageExcel) OpenEndDateTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FarmingDungeonLocationManageExcel) LocationButtonImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FarmingDungeonLocationManageExcel) LocalizeCodeTitle() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateLocalizeCodeTitle(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *FarmingDungeonLocationManageExcel) LocalizeCodeInfo() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FarmingDungeonLocationManageExcel) MutateLocalizeCodeInfo(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func FarmingDungeonLocationManageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func FarmingDungeonLocationManageExcelAddFarmingDungeonLocationId(builder *flatbuffers.Builder, farmingDungeonLocationId int64) {
	builder.PrependInt64Slot(0, farmingDungeonLocationId, 0)
}
func FarmingDungeonLocationManageExcelAddContentType(builder *flatbuffers.Builder, contentType ContentType) {
	builder.PrependInt32Slot(1, int32(contentType), 0)
}
func FarmingDungeonLocationManageExcelAddWeekDungeonType(builder *flatbuffers.Builder, weekDungeonType WeekDungeonType) {
	builder.PrependInt32Slot(2, int32(weekDungeonType), 0)
}
func FarmingDungeonLocationManageExcelAddSchoolDungeonType(builder *flatbuffers.Builder, schoolDungeonType SchoolDungeonType) {
	builder.PrependInt32Slot(3, int32(schoolDungeonType), 0)
}
func FarmingDungeonLocationManageExcelAddOrder(builder *flatbuffers.Builder, order int64) {
	builder.PrependInt64Slot(4, order, 0)
}
func FarmingDungeonLocationManageExcelAddOpenStartDateTime(builder *flatbuffers.Builder, openStartDateTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(openStartDateTime), 0)
}
func FarmingDungeonLocationManageExcelAddOpenEndDateTime(builder *flatbuffers.Builder, openEndDateTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(openEndDateTime), 0)
}
func FarmingDungeonLocationManageExcelAddLocationButtonImagePath(builder *flatbuffers.Builder, locationButtonImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(locationButtonImagePath), 0)
}
func FarmingDungeonLocationManageExcelAddLocalizeCodeTitle(builder *flatbuffers.Builder, localizeCodeTitle uint32) {
	builder.PrependUint32Slot(8, localizeCodeTitle, 0)
}
func FarmingDungeonLocationManageExcelAddLocalizeCodeInfo(builder *flatbuffers.Builder, localizeCodeInfo uint32) {
	builder.PrependUint32Slot(9, localizeCodeInfo, 0)
}
func FarmingDungeonLocationManageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
