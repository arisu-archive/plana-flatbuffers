// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterDialogExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterDialogExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterDialogExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterDialogExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterDialogExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterDialogExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterDialogExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterDialogExcel) ActionName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) AnimationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) Anniversary() Anniversary {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Anniversary(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateAnniversary(n Anniversary) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *CharacterDialogExcel) ApplyPosition() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogExcel) MutateApplyPosition(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *CharacterDialogExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterDialogExcel) CollectionVisible() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogExcel) MutateCollectionVisible(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *CharacterDialogExcel) CostumeUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateCostumeUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *CharacterDialogExcel) CvCollectionType() CVCollectionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return CVCollectionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateCvCollectionType(n CVCollectionType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *CharacterDialogExcel) DialogCategory() DialogCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return DialogCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateDialogCategory(n DialogCategory) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *CharacterDialogExcel) DialogCondition() DialogCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return DialogCondition(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateDialogCondition(n DialogCondition) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *CharacterDialogExcel) DialogType() DialogType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return DialogType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateDialogType(n DialogType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *CharacterDialogExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *CharacterDialogExcel) Duration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *CharacterDialogExcel) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *CharacterDialogExcel) LocalizeCvGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) LocalizeJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) LocalizeKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) PosX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterDialogExcel) MutatePosX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(40, n)
}

func (rcv *CharacterDialogExcel) PosY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterDialogExcel) MutatePosY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(42, n)
}

func (rcv *CharacterDialogExcel) ProductionStep() ProductionStep {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return ProductionStep(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateProductionStep(n ProductionStep) bool {
	return rcv._tab.MutateInt32Slot(44, int32(n))
}

func (rcv *CharacterDialogExcel) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogExcel) UnlockEquipWeapon() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogExcel) MutateUnlockEquipWeapon(n bool) bool {
	return rcv._tab.MutateBoolSlot(48, n)
}

func (rcv *CharacterDialogExcel) UnlockFavorRank() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateUnlockFavorRank(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *CharacterDialogExcel) VoiceId(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CharacterDialogExcel) VoiceIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterDialogExcel) MutateVoiceId(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func CharacterDialogExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(25)
}
func CharacterDialogExcelAddActionName(builder *flatbuffers.Builder, actionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(actionName), 0)
}
func CharacterDialogExcelAddAnimationName(builder *flatbuffers.Builder, animationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(animationName), 0)
}
func CharacterDialogExcelAddAnniversary(builder *flatbuffers.Builder, anniversary Anniversary) {
	builder.PrependInt32Slot(2, int32(anniversary), 0)
}
func CharacterDialogExcelAddApplyPosition(builder *flatbuffers.Builder, applyPosition bool) {
	builder.PrependBoolSlot(3, applyPosition, false)
}
func CharacterDialogExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(4, characterId, 0)
}
func CharacterDialogExcelAddCollectionVisible(builder *flatbuffers.Builder, collectionVisible bool) {
	builder.PrependBoolSlot(5, collectionVisible, false)
}
func CharacterDialogExcelAddCostumeUniqueId(builder *flatbuffers.Builder, costumeUniqueId int64) {
	builder.PrependInt64Slot(6, costumeUniqueId, 0)
}
func CharacterDialogExcelAddCvCollectionType(builder *flatbuffers.Builder, cvCollectionType CVCollectionType) {
	builder.PrependInt32Slot(7, int32(cvCollectionType), 0)
}
func CharacterDialogExcelAddDialogCategory(builder *flatbuffers.Builder, dialogCategory DialogCategory) {
	builder.PrependInt32Slot(8, int32(dialogCategory), 0)
}
func CharacterDialogExcelAddDialogCondition(builder *flatbuffers.Builder, dialogCondition DialogCondition) {
	builder.PrependInt32Slot(9, int32(dialogCondition), 0)
}
func CharacterDialogExcelAddDialogType(builder *flatbuffers.Builder, dialogType DialogType) {
	builder.PrependInt32Slot(10, int32(dialogType), 0)
}
func CharacterDialogExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(11, displayOrder, 0)
}
func CharacterDialogExcelAddDuration(builder *flatbuffers.Builder, duration int64) {
	builder.PrependInt64Slot(12, duration, 0)
}
func CharacterDialogExcelAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(endDate), 0)
}
func CharacterDialogExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(14, groupId, 0)
}
func CharacterDialogExcelAddLocalizeCvGroup(builder *flatbuffers.Builder, localizeCvGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(localizeCvGroup), 0)
}
func CharacterDialogExcelAddLocalizeJp(builder *flatbuffers.Builder, localizeJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(localizeJp), 0)
}
func CharacterDialogExcelAddLocalizeKr(builder *flatbuffers.Builder, localizeKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(localizeKr), 0)
}
func CharacterDialogExcelAddPosX(builder *flatbuffers.Builder, posX float32) {
	builder.PrependFloat32Slot(18, posX, 0.0)
}
func CharacterDialogExcelAddPosY(builder *flatbuffers.Builder, posY float32) {
	builder.PrependFloat32Slot(19, posY, 0.0)
}
func CharacterDialogExcelAddProductionStep(builder *flatbuffers.Builder, productionStep ProductionStep) {
	builder.PrependInt32Slot(20, int32(productionStep), 0)
}
func CharacterDialogExcelAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(startDate), 0)
}
func CharacterDialogExcelAddUnlockEquipWeapon(builder *flatbuffers.Builder, unlockEquipWeapon bool) {
	builder.PrependBoolSlot(22, unlockEquipWeapon, false)
}
func CharacterDialogExcelAddUnlockFavorRank(builder *flatbuffers.Builder, unlockFavorRank int64) {
	builder.PrependInt64Slot(23, unlockFavorRank, 0)
}
func CharacterDialogExcelAddVoiceId(builder *flatbuffers.Builder, voiceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(voiceId), 0)
}
func CharacterDialogExcelStartVoiceIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterDialogExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
