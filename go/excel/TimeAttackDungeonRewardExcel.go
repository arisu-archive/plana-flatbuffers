// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeAttackDungeonRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeAttackDungeonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *TimeAttackDungeonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeAttackDungeonRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeAttackDungeonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *TimeAttackDungeonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeAttackDungeonRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeAttackDungeonRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeAttackDungeonRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelMaxAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelMaxAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardParcelMaxAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelDefaultAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelDefaultAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardParcelDefaultAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *TimeAttackDungeonRewardExcel) RewardMinPoint(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) RewardMinPointLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardMinPoint(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *TimeAttackDungeonRewardExcel) RewardType(j int) TimeAttackDungeonRewardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return TimeAttackDungeonRewardType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) RewardTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardType(j int, n TimeAttackDungeonRewardType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *TimeAttackDungeonRewardExcel) RewardMaxPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateRewardMaxPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *TimeAttackDungeonRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func TimeAttackDungeonRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func TimeAttackDungeonRewardExcelAddRewardParcelMaxAmount(builder *flatbuffers.Builder, rewardParcelMaxAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rewardParcelMaxAmount), 0)
}
func TimeAttackDungeonRewardExcelStartRewardParcelMaxAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TimeAttackDungeonRewardExcelAddRewardParcelDefaultAmount(builder *flatbuffers.Builder, rewardParcelDefaultAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rewardParcelDefaultAmount), 0)
}
func TimeAttackDungeonRewardExcelStartRewardParcelDefaultAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TimeAttackDungeonRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rewardParcelId), 0)
}
func TimeAttackDungeonRewardExcelStartRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TimeAttackDungeonRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func TimeAttackDungeonRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonRewardExcelAddRewardMinPoint(builder *flatbuffers.Builder, rewardMinPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rewardMinPoint), 0)
}
func TimeAttackDungeonRewardExcelStartRewardMinPointVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TimeAttackDungeonRewardExcelAddRewardType(builder *flatbuffers.Builder, rewardType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rewardType), 0)
}
func TimeAttackDungeonRewardExcelStartRewardTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TimeAttackDungeonRewardExcelAddRewardMaxPoint(builder *flatbuffers.Builder, rewardMaxPoint int64) {
	builder.PrependInt64Slot(6, rewardMaxPoint, 0)
}
func TimeAttackDungeonRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(7, id, 0)
}
func TimeAttackDungeonRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
