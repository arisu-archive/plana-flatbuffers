// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentZoneVisitRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentZoneVisitRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentZoneVisitRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentZoneVisitRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentZoneVisitRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentZoneVisitRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentZoneVisitRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentZoneVisitRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentZoneVisitRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardProb(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardProbLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateVisitRewardProb(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateVisitRewardAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateVisitRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) VisitRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateVisitRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentZoneVisitRewardExcel) CharacterDevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentZoneVisitRewardExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EventContentZoneVisitRewardExcel) DevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentZoneVisitRewardExcel) EventContentLocationId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateEventContentLocationId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *EventContentZoneVisitRewardExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentZoneVisitRewardExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func EventContentZoneVisitRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func EventContentZoneVisitRewardExcelAddVisitRewardProb(builder *flatbuffers.Builder, visitRewardProb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(visitRewardProb), 0)
}
func EventContentZoneVisitRewardExcelStartVisitRewardProbVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentZoneVisitRewardExcelAddVisitRewardAmount(builder *flatbuffers.Builder, visitRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(visitRewardAmount), 0)
}
func EventContentZoneVisitRewardExcelStartVisitRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentZoneVisitRewardExcelAddVisitRewardParcelId(builder *flatbuffers.Builder, visitRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(visitRewardParcelId), 0)
}
func EventContentZoneVisitRewardExcelStartVisitRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentZoneVisitRewardExcelAddVisitRewardParcelType(builder *flatbuffers.Builder, visitRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(visitRewardParcelType), 0)
}
func EventContentZoneVisitRewardExcelStartVisitRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentZoneVisitRewardExcelAddCharacterDevName(builder *flatbuffers.Builder, characterDevName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(characterDevName), 0)
}
func EventContentZoneVisitRewardExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(5, characterId, 0)
}
func EventContentZoneVisitRewardExcelAddDevName(builder *flatbuffers.Builder, devName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(devName), 0)
}
func EventContentZoneVisitRewardExcelAddEventContentLocationId(builder *flatbuffers.Builder, eventContentLocationId int64) {
	builder.PrependInt64Slot(7, eventContentLocationId, 0)
}
func EventContentZoneVisitRewardExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(8, eventContentId, 0)
}
func EventContentZoneVisitRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
