// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGLevelNodeExcelDto represents a FlatBuffers table
type MinigameCCGLevelNodeExcelDto struct {
	fbsutils.FlatBuffer
	LevelId      int64            `json:"level_id"`
	NextNodeId   []int64          `json:"next_node_id"`
	NodeIcon     CCGLevelNodeIcon `json:"node_icon"`
	NodeId       int64            `json:"node_id"`
	StageGroupId int64            `json:"stage_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGLevelNodeExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameCCGLevelNodeExcelStart(b)
	MinigameCCGLevelNodeExcelAddLevelId(b, fbsutils.Convert(t.LevelId, t.FlatBuffer.TableKey))
	MinigameCCGLevelNodeExcelStartNextNodeIdVector(b, len(t.NextNodeId))
	for i := range len(t.NextNodeId) {
		b.PrependInt64(fbsutils.Convert(t.NextNodeId[len(t.NextNodeId)-i-1], t.FlatBuffer.TableKey))
	}
	MinigameCCGLevelNodeExcelAddNextNodeId(b, b.EndVector(len(t.NextNodeId)))
	MinigameCCGLevelNodeExcelAddNodeIcon(b, fbsutils.Convert(t.NodeIcon, t.FlatBuffer.TableKey))
	MinigameCCGLevelNodeExcelAddNodeId(b, fbsutils.Convert(t.NodeId, t.FlatBuffer.TableKey))
	MinigameCCGLevelNodeExcelAddStageGroupId(b, fbsutils.Convert(t.StageGroupId, t.FlatBuffer.TableKey))
	return MinigameCCGLevelNodeExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGLevelNodeExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGLevelNodeExcelDto) UnmarshalMessage(e *MinigameCCGLevelNodeExcel) error {
	t.LevelId = fbsutils.Convert(e.LevelId(), t.FlatBuffer.TableKey)
	t.NextNodeId = make([]int64, e.NextNodeIdLength())
	for i := range e.NextNodeIdLength() {
		t.NextNodeId[i] = fbsutils.Convert(e.NextNodeId(i), t.FlatBuffer.TableKey)
	}
	t.NodeIcon = CCGLevelNodeIcon(fbsutils.Convert(int32(e.NodeIcon()), t.FlatBuffer.TableKey))
	t.NodeId = fbsutils.Convert(e.NodeId(), t.FlatBuffer.TableKey)
	t.StageGroupId = fbsutils.Convert(e.StageGroupId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGLevelNodeExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGLevelNodeExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGLevelNodeExcelDto) FlatDataName() string {
	return "MinigameCCGLevelNodeExcel"
}
