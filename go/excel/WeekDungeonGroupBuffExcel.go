// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WeekDungeonGroupBuffExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsWeekDungeonGroupBuffExcel(buf []byte, offset flatbuffers.UOffsetT) *WeekDungeonGroupBuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WeekDungeonGroupBuffExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishWeekDungeonGroupBuffExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWeekDungeonGroupBuffExcel(buf []byte, offset flatbuffers.UOffsetT) *WeekDungeonGroupBuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WeekDungeonGroupBuffExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWeekDungeonGroupBuffExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WeekDungeonGroupBuffExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WeekDungeonGroupBuffExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WeekDungeonGroupBuffExcel) WeekDungeonBuffId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonGroupBuffExcel) MutateWeekDungeonBuffId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *WeekDungeonGroupBuffExcel) School() School {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return School(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WeekDungeonGroupBuffExcel) MutateSchool(n School) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *WeekDungeonGroupBuffExcel) RecommandLocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonGroupBuffExcel) MutateRecommandLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *WeekDungeonGroupBuffExcel) FormationLocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonGroupBuffExcel) MutateFormationLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *WeekDungeonGroupBuffExcel) SkillGroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func WeekDungeonGroupBuffExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func WeekDungeonGroupBuffExcelAddWeekDungeonBuffId(builder *flatbuffers.Builder, weekDungeonBuffId int64) {
	builder.PrependInt64Slot(0, weekDungeonBuffId, 0)
}
func WeekDungeonGroupBuffExcelAddSchool(builder *flatbuffers.Builder, school School) {
	builder.PrependInt32Slot(1, int32(school), 0)
}
func WeekDungeonGroupBuffExcelAddRecommandLocalizeEtcId(builder *flatbuffers.Builder, recommandLocalizeEtcId uint32) {
	builder.PrependUint32Slot(2, recommandLocalizeEtcId, 0)
}
func WeekDungeonGroupBuffExcelAddFormationLocalizeEtcId(builder *flatbuffers.Builder, formationLocalizeEtcId uint32) {
	builder.PrependUint32Slot(3, formationLocalizeEtcId, 0)
}
func WeekDungeonGroupBuffExcelAddSkillGroupId(builder *flatbuffers.Builder, skillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(skillGroupId), 0)
}
func WeekDungeonGroupBuffExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
