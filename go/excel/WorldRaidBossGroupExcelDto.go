// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WorldRaidBossGroupExcelDto represents a FlatBuffers table
type WorldRaidBossGroupExcelDto struct {
	fbsutils.FlatBuffer
	Id                              int64   `json:"id"`
	WorldRaidBossGroupId            int64   `json:"world_raid_boss_group_id"`
	WorldBossName                   string  `json:"world_boss_name"`
	WorldBossPopupPortrait          string  `json:"world_boss_popup_portrait"`
	WorldBossPopupBg                string  `json:"world_boss_popup_bg"`
	WorldBossParcelPortrait         string  `json:"world_boss_parcel_portrait"`
	WorldBossListParcel             string  `json:"world_boss_list_parcel"`
	WorldBossHp                     int64   `json:"world_boss_hp"`
	UiHideBeforeSpawn               bool    `json:"ui_hide_before_spawn"`
	HideAnotherBossKilled           bool    `json:"hide_another_boss_killed"`
	WorldBossClearRewardGroupId     int64   `json:"world_boss_clear_reward_group_id"`
	AnotherBossKilled               []int64 `json:"another_boss_killed"`
	EchelonConstraintGroupId        int64   `json:"echelon_constraint_group_id"`
	ExclusiveOperatorBossSpawn      string  `json:"exclusive_operator_boss_spawn"`
	ExclusiveOperatorBossKill       string  `json:"exclusive_operator_boss_kill"`
	ExclusiveOperatorScenarioBattle string  `json:"exclusive_operator_scenario_battle"`
	ExclusiveOperatorBossDamaged    string  `json:"exclusive_operator_boss_damaged"`
	BossGroupOpenCondition          int64   `json:"boss_group_open_condition"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WorldRaidBossGroupExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_world_boss_name := b.CreateString(fbsutils.Convert(t.WorldBossName, t.FlatBuffer.TableKey))
	__offset_world_boss_popup_portrait := b.CreateString(fbsutils.Convert(t.WorldBossPopupPortrait, t.FlatBuffer.TableKey))
	__offset_world_boss_popup_bg := b.CreateString(fbsutils.Convert(t.WorldBossPopupBg, t.FlatBuffer.TableKey))
	__offset_world_boss_parcel_portrait := b.CreateString(fbsutils.Convert(t.WorldBossParcelPortrait, t.FlatBuffer.TableKey))
	__offset_world_boss_list_parcel := b.CreateString(fbsutils.Convert(t.WorldBossListParcel, t.FlatBuffer.TableKey))
	__offset_exclusive_operator_boss_spawn := b.CreateString(fbsutils.Convert(t.ExclusiveOperatorBossSpawn, t.FlatBuffer.TableKey))
	__offset_exclusive_operator_boss_kill := b.CreateString(fbsutils.Convert(t.ExclusiveOperatorBossKill, t.FlatBuffer.TableKey))
	__offset_exclusive_operator_scenario_battle := b.CreateString(fbsutils.Convert(t.ExclusiveOperatorScenarioBattle, t.FlatBuffer.TableKey))
	__offset_exclusive_operator_boss_damaged := b.CreateString(fbsutils.Convert(t.ExclusiveOperatorBossDamaged, t.FlatBuffer.TableKey))
	WorldRaidBossGroupExcelStart(b)
	WorldRaidBossGroupExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	WorldRaidBossGroupExcelAddWorldRaidBossGroupId(b, fbsutils.Convert(t.WorldRaidBossGroupId, t.FlatBuffer.TableKey))
	WorldRaidBossGroupExcelAddWorldBossName(b, __offset_world_boss_name)
	WorldRaidBossGroupExcelAddWorldBossPopupPortrait(b, __offset_world_boss_popup_portrait)
	WorldRaidBossGroupExcelAddWorldBossPopupBg(b, __offset_world_boss_popup_bg)
	WorldRaidBossGroupExcelAddWorldBossParcelPortrait(b, __offset_world_boss_parcel_portrait)
	WorldRaidBossGroupExcelAddWorldBossListParcel(b, __offset_world_boss_list_parcel)
	WorldRaidBossGroupExcelAddWorldBossHp(b, fbsutils.Convert(t.WorldBossHp, t.FlatBuffer.TableKey))
	WorldRaidBossGroupExcelAddUiHideBeforeSpawn(b, t.UiHideBeforeSpawn)
	WorldRaidBossGroupExcelAddHideAnotherBossKilled(b, t.HideAnotherBossKilled)
	WorldRaidBossGroupExcelAddWorldBossClearRewardGroupId(b, fbsutils.Convert(t.WorldBossClearRewardGroupId, t.FlatBuffer.TableKey))
	WorldRaidBossGroupExcelStartAnotherBossKilledVector(b, len(t.AnotherBossKilled))
	for i := range len(t.AnotherBossKilled) {
		b.PrependInt64(fbsutils.Convert(t.AnotherBossKilled[len(t.AnotherBossKilled)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidBossGroupExcelAddAnotherBossKilled(b, b.EndVector(len(t.AnotherBossKilled)))
	WorldRaidBossGroupExcelAddEchelonConstraintGroupId(b, fbsutils.Convert(t.EchelonConstraintGroupId, t.FlatBuffer.TableKey))
	WorldRaidBossGroupExcelAddExclusiveOperatorBossSpawn(b, __offset_exclusive_operator_boss_spawn)
	WorldRaidBossGroupExcelAddExclusiveOperatorBossKill(b, __offset_exclusive_operator_boss_kill)
	WorldRaidBossGroupExcelAddExclusiveOperatorScenarioBattle(b, __offset_exclusive_operator_scenario_battle)
	WorldRaidBossGroupExcelAddExclusiveOperatorBossDamaged(b, __offset_exclusive_operator_boss_damaged)
	WorldRaidBossGroupExcelAddBossGroupOpenCondition(b, fbsutils.Convert(t.BossGroupOpenCondition, t.FlatBuffer.TableKey))
	return WorldRaidBossGroupExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WorldRaidBossGroupExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidBossGroupExcelDto) UnmarshalMessage(e *WorldRaidBossGroupExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.WorldRaidBossGroupId = fbsutils.Convert(e.WorldRaidBossGroupId(), t.FlatBuffer.TableKey)
	t.WorldBossName = fbsutils.Convert(string(e.WorldBossName()), t.FlatBuffer.TableKey)
	t.WorldBossPopupPortrait = fbsutils.Convert(string(e.WorldBossPopupPortrait()), t.FlatBuffer.TableKey)
	t.WorldBossPopupBg = fbsutils.Convert(string(e.WorldBossPopupBg()), t.FlatBuffer.TableKey)
	t.WorldBossParcelPortrait = fbsutils.Convert(string(e.WorldBossParcelPortrait()), t.FlatBuffer.TableKey)
	t.WorldBossListParcel = fbsutils.Convert(string(e.WorldBossListParcel()), t.FlatBuffer.TableKey)
	t.WorldBossHp = fbsutils.Convert(e.WorldBossHp(), t.FlatBuffer.TableKey)
	t.UiHideBeforeSpawn = e.UiHideBeforeSpawn()
	t.HideAnotherBossKilled = e.HideAnotherBossKilled()
	t.WorldBossClearRewardGroupId = fbsutils.Convert(e.WorldBossClearRewardGroupId(), t.FlatBuffer.TableKey)
	t.AnotherBossKilled = make([]int64, e.AnotherBossKilledLength())
	for i := range e.AnotherBossKilledLength() {
		t.AnotherBossKilled[i] = fbsutils.Convert(e.AnotherBossKilled(i), t.FlatBuffer.TableKey)
	}
	t.EchelonConstraintGroupId = fbsutils.Convert(e.EchelonConstraintGroupId(), t.FlatBuffer.TableKey)
	t.ExclusiveOperatorBossSpawn = fbsutils.Convert(string(e.ExclusiveOperatorBossSpawn()), t.FlatBuffer.TableKey)
	t.ExclusiveOperatorBossKill = fbsutils.Convert(string(e.ExclusiveOperatorBossKill()), t.FlatBuffer.TableKey)
	t.ExclusiveOperatorScenarioBattle = fbsutils.Convert(string(e.ExclusiveOperatorScenarioBattle()), t.FlatBuffer.TableKey)
	t.ExclusiveOperatorBossDamaged = fbsutils.Convert(string(e.ExclusiveOperatorBossDamaged()), t.FlatBuffer.TableKey)
	t.BossGroupOpenCondition = fbsutils.Convert(e.BossGroupOpenCondition(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidBossGroupExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsWorldRaidBossGroupExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WorldRaidBossGroupExcelDto) FlatDataName() string {
	return "WorldRaidBossGroupExcel"
}
