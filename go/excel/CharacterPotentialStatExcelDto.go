// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterPotentialStatExcelDto represents a FlatBuffers table
type CharacterPotentialStatExcelDto struct {
	fbsutils.FlatBuffer
	PotentialLevel       int32 `json:"potential_level"`
	PotentialStatGroupId int64 `json:"potential_stat_group_id"`
	RecipeId             int64 `json:"recipe_id"`
	StatBonusRate        int64 `json:"stat_bonus_rate"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterPotentialStatExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterPotentialStatExcelStart(b)
	CharacterPotentialStatExcelAddPotentialLevel(b, fbsutils.Convert(t.PotentialLevel, t.FlatBuffer.TableKey))
	CharacterPotentialStatExcelAddPotentialStatGroupId(b, fbsutils.Convert(t.PotentialStatGroupId, t.FlatBuffer.TableKey))
	CharacterPotentialStatExcelAddRecipeId(b, fbsutils.Convert(t.RecipeId, t.FlatBuffer.TableKey))
	CharacterPotentialStatExcelAddStatBonusRate(b, fbsutils.Convert(t.StatBonusRate, t.FlatBuffer.TableKey))
	return CharacterPotentialStatExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterPotentialStatExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterPotentialStatExcelDto) UnmarshalMessage(e *CharacterPotentialStatExcel) error {
	t.PotentialLevel = fbsutils.Convert(e.PotentialLevel(), t.FlatBuffer.TableKey)
	t.PotentialStatGroupId = fbsutils.Convert(e.PotentialStatGroupId(), t.FlatBuffer.TableKey)
	t.RecipeId = fbsutils.Convert(e.RecipeId(), t.FlatBuffer.TableKey)
	t.StatBonusRate = fbsutils.Convert(e.StatBonusRate(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterPotentialStatExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterPotentialStatExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterPotentialStatExcelDto) FlatDataName() string {
	return "CharacterPotentialStatExcel"
}
