// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterVoiceSubtitleExcelDto represents a FlatBuffers table
type CharacterVoiceSubtitleExcelDto struct {
	fbsutils.FlatBuffer
	CharacterVoiceGroupId int64  `json:"character_voice_group_id"`
	Duration              int64  `json:"duration"`
	LocalizeCvGroup       string `json:"localize_cv_group"`
	LocalizeJp            string `json:"localize_jp"`
	LocalizeKr            string `json:"localize_kr"`
	Separate              bool   `json:"separate"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterVoiceSubtitleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterVoiceSubtitleExcelStart(b)
	CharacterVoiceSubtitleExcelAddCharacterVoiceGroupId(b, fbsutils.Convert(t.CharacterVoiceGroupId, t.FlatBuffer.TableKey))
	CharacterVoiceSubtitleExcelAddDuration(b, fbsutils.Convert(t.Duration, t.FlatBuffer.TableKey))
	CharacterVoiceSubtitleExcelAddLocalizeCvGroup(b, b.CreateString(fbsutils.Convert(t.LocalizeCvGroup, t.FlatBuffer.TableKey)))
	CharacterVoiceSubtitleExcelAddLocalizeJp(b, b.CreateString(fbsutils.Convert(t.LocalizeJp, t.FlatBuffer.TableKey)))
	CharacterVoiceSubtitleExcelAddLocalizeKr(b, b.CreateString(fbsutils.Convert(t.LocalizeKr, t.FlatBuffer.TableKey)))
	CharacterVoiceSubtitleExcelAddSeparate(b, t.Separate)
	return CharacterVoiceSubtitleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterVoiceSubtitleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterVoiceSubtitleExcelDto) UnmarshalMessage(e *CharacterVoiceSubtitleExcel) error {
	t.CharacterVoiceGroupId = fbsutils.Convert(e.CharacterVoiceGroupId(), t.FlatBuffer.TableKey)
	t.Duration = fbsutils.Convert(e.Duration(), t.FlatBuffer.TableKey)
	t.LocalizeCvGroup = fbsutils.Convert(string(e.LocalizeCvGroup()), t.FlatBuffer.TableKey)
	t.LocalizeJp = fbsutils.Convert(string(e.LocalizeJp()), t.FlatBuffer.TableKey)
	t.LocalizeKr = fbsutils.Convert(string(e.LocalizeKr()), t.FlatBuffer.TableKey)
	t.Separate = e.Separate()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterVoiceSubtitleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterVoiceSubtitleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterVoiceSubtitleExcelDto) FlatDataName() string {
	return "CharacterVoiceSubtitleExcel"
}
