// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDreamTimelineExcelDto represents a FlatBuffers table
type MiniGameDreamTimelineExcelDto struct {
	fbsutils.FlatBuffer
	ArtLevelPath          string `json:"art_level_path"`
	Bgm                   int64  `json:"bgm"`
	DesignLevelPath       string `json:"design_level_path"`
	DreamMakerActionPoint int64  `json:"dream_maker_action_point"`
	DreamMakerDays        int64  `json:"dream_maker_days"`
	EnterScenarioGroupId  int64  `json:"enter_scenario_group_id"`
	EventContentId        int64  `json:"event_content_id"`
	GroupId               int64  `json:"group_id"`
	Id                    int64  `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDreamTimelineExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDreamTimelineExcelStart(b)
	MiniGameDreamTimelineExcelAddArtLevelPath(b, b.CreateString(fbsutils.Convert(t.ArtLevelPath, t.FlatBuffer.TableKey)))
	MiniGameDreamTimelineExcelAddBgm(b, fbsutils.Convert(t.Bgm, t.FlatBuffer.TableKey))
	MiniGameDreamTimelineExcelAddDesignLevelPath(b, b.CreateString(fbsutils.Convert(t.DesignLevelPath, t.FlatBuffer.TableKey)))
	MiniGameDreamTimelineExcelAddDreamMakerActionPoint(b, fbsutils.Convert(t.DreamMakerActionPoint, t.FlatBuffer.TableKey))
	MiniGameDreamTimelineExcelAddDreamMakerDays(b, fbsutils.Convert(t.DreamMakerDays, t.FlatBuffer.TableKey))
	MiniGameDreamTimelineExcelAddEnterScenarioGroupId(b, fbsutils.Convert(t.EnterScenarioGroupId, t.FlatBuffer.TableKey))
	MiniGameDreamTimelineExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MiniGameDreamTimelineExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	MiniGameDreamTimelineExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return MiniGameDreamTimelineExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDreamTimelineExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamTimelineExcelDto) UnmarshalMessage(e *MiniGameDreamTimelineExcel) error {
	t.ArtLevelPath = fbsutils.Convert(string(e.ArtLevelPath()), t.FlatBuffer.TableKey)
	t.Bgm = fbsutils.Convert(e.Bgm(), t.FlatBuffer.TableKey)
	t.DesignLevelPath = fbsutils.Convert(string(e.DesignLevelPath()), t.FlatBuffer.TableKey)
	t.DreamMakerActionPoint = fbsutils.Convert(e.DreamMakerActionPoint(), t.FlatBuffer.TableKey)
	t.DreamMakerDays = fbsutils.Convert(e.DreamMakerDays(), t.FlatBuffer.TableKey)
	t.EnterScenarioGroupId = fbsutils.Convert(e.EnterScenarioGroupId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamTimelineExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDreamTimelineExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDreamTimelineExcelDto) FlatDataName() string {
	return "MiniGameDreamTimelineExcel"
}
