// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentTreasureRoundExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentTreasureRoundExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentTreasureRoundExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentTreasureRoundExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentTreasureRoundExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentTreasureRoundExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentTreasureRoundExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentTreasureRoundExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentTreasureRoundExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentTreasureRoundExcel) CellCheckGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateCellCheckGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentTreasureRoundExcel) CellRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateCellRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentTreasureRoundExcel) CellVisualSortUnstructed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentTreasureRoundExcel) MutateCellVisualSortUnstructed(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *EventContentTreasureRoundExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EventContentTreasureRoundExcel) RewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) RewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *EventContentTreasureRoundExcel) RewardId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) RewardIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateRewardId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentTreasureRoundExcel) TreasureCellImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentTreasureRoundExcel) TreasureRound() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateTreasureRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *EventContentTreasureRoundExcel) TreasureRoundSize(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) TreasureRoundSizeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentTreasureRoundExcel) MutateTreasureRoundSize(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func EventContentTreasureRoundExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func EventContentTreasureRoundExcelAddCellCheckGoodsId(builder *flatbuffers.Builder, cellCheckGoodsId int64) {
	builder.PrependInt64Slot(0, cellCheckGoodsId, 0)
}
func EventContentTreasureRoundExcelAddCellRewardId(builder *flatbuffers.Builder, cellRewardId int64) {
	builder.PrependInt64Slot(1, cellRewardId, 0)
}
func EventContentTreasureRoundExcelAddCellVisualSortUnstructed(builder *flatbuffers.Builder, cellVisualSortUnstructed bool) {
	builder.PrependBoolSlot(2, cellVisualSortUnstructed, false)
}
func EventContentTreasureRoundExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func EventContentTreasureRoundExcelAddRewardAmount(builder *flatbuffers.Builder, rewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rewardAmount), 0)
}
func EventContentTreasureRoundExcelStartRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentTreasureRoundExcelAddRewardId(builder *flatbuffers.Builder, rewardId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rewardId), 0)
}
func EventContentTreasureRoundExcelStartRewardIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentTreasureRoundExcelAddTreasureCellImagePath(builder *flatbuffers.Builder, treasureCellImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(treasureCellImagePath), 0)
}
func EventContentTreasureRoundExcelAddTreasureRound(builder *flatbuffers.Builder, treasureRound int32) {
	builder.PrependInt32Slot(7, treasureRound, 0)
}
func EventContentTreasureRoundExcelAddTreasureRoundSize(builder *flatbuffers.Builder, treasureRoundSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(treasureRoundSize), 0)
}
func EventContentTreasureRoundExcelStartTreasureRoundSizeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentTreasureRoundExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
