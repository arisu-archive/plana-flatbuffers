// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CampaignChapterExcelDto represents a FlatBuffers table
type CampaignChapterExcelDto struct {
	fbsutils.FlatBuffer
	IsTacticSkip            bool    `json:"is_tactic_skip"`
	VeryHardCampaignStageId []int64 `json:"very_hard_campaign_stage_id"`
	HardCampaignStageId     []int64 `json:"hard_campaign_stage_id"`
	NormalExtraStageId      []int64 `json:"normal_extra_stage_id"`
	NormalCampaignStageId   []int64 `json:"normal_campaign_stage_id"`
	ChapterVeryHardRewardId int64   `json:"chapter_very_hard_reward_id"`
	ChapterHardRewardId     int64   `json:"chapter_hard_reward_id"`
	ChapterRewardId         int64   `json:"chapter_reward_id"`
	PreChapterId            []int64 `json:"pre_chapter_id"`
	Order                   int64   `json:"order"`
	HardImagePath           string  `json:"hard_image_path"`
	NormalImagePath         string  `json:"normal_image_path"`
	Name                    string  `json:"name"`
	Id                      int64   `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CampaignChapterExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CampaignChapterExcelStart(b)
	CampaignChapterExcelAddIsTacticSkip(b, t.IsTacticSkip)
	CampaignChapterExcelStartVeryHardCampaignStageIdVector(b, len(t.VeryHardCampaignStageId))
	for i := range len(t.VeryHardCampaignStageId) {
		b.PrependInt64(fbsutils.Convert(t.VeryHardCampaignStageId[len(t.VeryHardCampaignStageId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignChapterExcelAddVeryHardCampaignStageId(b, b.EndVector(len(t.VeryHardCampaignStageId)))
	CampaignChapterExcelStartHardCampaignStageIdVector(b, len(t.HardCampaignStageId))
	for i := range len(t.HardCampaignStageId) {
		b.PrependInt64(fbsutils.Convert(t.HardCampaignStageId[len(t.HardCampaignStageId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignChapterExcelAddHardCampaignStageId(b, b.EndVector(len(t.HardCampaignStageId)))
	CampaignChapterExcelStartNormalExtraStageIdVector(b, len(t.NormalExtraStageId))
	for i := range len(t.NormalExtraStageId) {
		b.PrependInt64(fbsutils.Convert(t.NormalExtraStageId[len(t.NormalExtraStageId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignChapterExcelAddNormalExtraStageId(b, b.EndVector(len(t.NormalExtraStageId)))
	CampaignChapterExcelStartNormalCampaignStageIdVector(b, len(t.NormalCampaignStageId))
	for i := range len(t.NormalCampaignStageId) {
		b.PrependInt64(fbsutils.Convert(t.NormalCampaignStageId[len(t.NormalCampaignStageId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignChapterExcelAddNormalCampaignStageId(b, b.EndVector(len(t.NormalCampaignStageId)))
	CampaignChapterExcelAddChapterVeryHardRewardId(b, fbsutils.Convert(t.ChapterVeryHardRewardId, t.FlatBuffer.TableKey))
	CampaignChapterExcelAddChapterHardRewardId(b, fbsutils.Convert(t.ChapterHardRewardId, t.FlatBuffer.TableKey))
	CampaignChapterExcelAddChapterRewardId(b, fbsutils.Convert(t.ChapterRewardId, t.FlatBuffer.TableKey))
	CampaignChapterExcelStartPreChapterIdVector(b, len(t.PreChapterId))
	for i := range len(t.PreChapterId) {
		b.PrependInt64(fbsutils.Convert(t.PreChapterId[len(t.PreChapterId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignChapterExcelAddPreChapterId(b, b.EndVector(len(t.PreChapterId)))
	CampaignChapterExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	CampaignChapterExcelAddHardImagePath(b, b.CreateString(fbsutils.Convert(t.HardImagePath, t.FlatBuffer.TableKey)))
	CampaignChapterExcelAddNormalImagePath(b, b.CreateString(fbsutils.Convert(t.NormalImagePath, t.FlatBuffer.TableKey)))
	CampaignChapterExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	CampaignChapterExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return CampaignChapterExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CampaignChapterExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CampaignChapterExcelDto) UnmarshalMessage(e *CampaignChapterExcel) error {
	t.IsTacticSkip = e.IsTacticSkip()
	t.VeryHardCampaignStageId = make([]int64, e.VeryHardCampaignStageIdLength())
	for i := range e.VeryHardCampaignStageIdLength() {
		t.VeryHardCampaignStageId[i] = fbsutils.Convert(e.VeryHardCampaignStageId(i), t.FlatBuffer.TableKey)
	}
	t.HardCampaignStageId = make([]int64, e.HardCampaignStageIdLength())
	for i := range e.HardCampaignStageIdLength() {
		t.HardCampaignStageId[i] = fbsutils.Convert(e.HardCampaignStageId(i), t.FlatBuffer.TableKey)
	}
	t.NormalExtraStageId = make([]int64, e.NormalExtraStageIdLength())
	for i := range e.NormalExtraStageIdLength() {
		t.NormalExtraStageId[i] = fbsutils.Convert(e.NormalExtraStageId(i), t.FlatBuffer.TableKey)
	}
	t.NormalCampaignStageId = make([]int64, e.NormalCampaignStageIdLength())
	for i := range e.NormalCampaignStageIdLength() {
		t.NormalCampaignStageId[i] = fbsutils.Convert(e.NormalCampaignStageId(i), t.FlatBuffer.TableKey)
	}
	t.ChapterVeryHardRewardId = fbsutils.Convert(e.ChapterVeryHardRewardId(), t.FlatBuffer.TableKey)
	t.ChapterHardRewardId = fbsutils.Convert(e.ChapterHardRewardId(), t.FlatBuffer.TableKey)
	t.ChapterRewardId = fbsutils.Convert(e.ChapterRewardId(), t.FlatBuffer.TableKey)
	t.PreChapterId = make([]int64, e.PreChapterIdLength())
	for i := range e.PreChapterIdLength() {
		t.PreChapterId[i] = fbsutils.Convert(e.PreChapterId(i), t.FlatBuffer.TableKey)
	}
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.HardImagePath = fbsutils.Convert(string(e.HardImagePath()), t.FlatBuffer.TableKey)
	t.NormalImagePath = fbsutils.Convert(string(e.NormalImagePath()), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CampaignChapterExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCampaignChapterExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CampaignChapterExcelDto) FlatDataName() string {
	return "CampaignChapterExcel"
}
