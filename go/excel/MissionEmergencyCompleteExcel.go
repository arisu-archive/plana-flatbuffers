// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MissionEmergencyCompleteExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMissionEmergencyCompleteExcel(buf []byte, offset flatbuffers.UOffsetT) *MissionEmergencyCompleteExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MissionEmergencyCompleteExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishMissionEmergencyCompleteExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMissionEmergencyCompleteExcel(buf []byte, offset flatbuffers.UOffsetT) *MissionEmergencyCompleteExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MissionEmergencyCompleteExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMissionEmergencyCompleteExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MissionEmergencyCompleteExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MissionEmergencyCompleteExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MissionEmergencyCompleteExcel) MissionId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionEmergencyCompleteExcel) MutateMissionId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MissionEmergencyCompleteExcel) EmergencyComplete() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MissionEmergencyCompleteExcel) MutateEmergencyComplete(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func MissionEmergencyCompleteExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MissionEmergencyCompleteExcelAddMissionId(builder *flatbuffers.Builder, missionId int64) {
	builder.PrependInt64Slot(0, missionId, 0)
}
func MissionEmergencyCompleteExcelAddEmergencyComplete(builder *flatbuffers.Builder, emergencyComplete bool) {
	builder.PrependBoolSlot(1, emergencyComplete, false)
}
func MissionEmergencyCompleteExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
