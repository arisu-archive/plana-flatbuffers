// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// PersonalityExcelDto represents a FlatBuffers table
type PersonalityExcelDto struct {
	fbsutils.FlatBuffer
	Name string `json:"name"`
	Id   int64  `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *PersonalityExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	PersonalityExcelStart(b)
	PersonalityExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	PersonalityExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return PersonalityExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *PersonalityExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *PersonalityExcelDto) UnmarshalMessage(e *PersonalityExcel) error {
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *PersonalityExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsPersonalityExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (PersonalityExcelDto) FlatDataName() string {
	return "PersonalityExcel"
}
