// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentBuffExcelDto represents a FlatBuffers table
type EventContentBuffExcelDto struct {
	fbsutils.FlatBuffer
	BuffDescriptionLocalizeCodeId string                   `json:"buff_description_localize_code_id"`
	CharacterTag                  Tag                      `json:"character_tag"`
	EnumType                      EventContentBuffFindRule `json:"enum_type"`
	EnumTypeValue                 []string                 `json:"enum_type_value"`
	EventContentBuffId            int64                    `json:"event_content_buff_id"`
	IconPath                      string                   `json:"icon_path"`
	IsBuff                        bool                     `json:"is_buff"`
	SkillGroupId                  string                   `json:"skill_group_id"`
	SpriteName                    string                   `json:"sprite_name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentBuffExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentBuffExcelStart(b)
	EventContentBuffExcelAddBuffDescriptionLocalizeCodeId(b, b.CreateString(fbsutils.Convert(t.BuffDescriptionLocalizeCodeId, t.FlatBuffer.TableKey)))
	EventContentBuffExcelAddCharacterTag(b, fbsutils.Convert(t.CharacterTag, t.FlatBuffer.TableKey))
	EventContentBuffExcelAddEnumType(b, fbsutils.Convert(t.EnumType, t.FlatBuffer.TableKey))
	EventContentBuffExcelStartEnumTypeValueVector(b, len(t.EnumTypeValue))
	for i := range len(t.EnumTypeValue) {
		b.PrependUOffsetT(b.CreateString(t.EnumTypeValue[len(t.EnumTypeValue)-i-1]))
	}
	EventContentBuffExcelAddEnumTypeValue(b, b.EndVector(len(t.EnumTypeValue)))
	EventContentBuffExcelAddEventContentBuffId(b, fbsutils.Convert(t.EventContentBuffId, t.FlatBuffer.TableKey))
	EventContentBuffExcelAddIconPath(b, b.CreateString(fbsutils.Convert(t.IconPath, t.FlatBuffer.TableKey)))
	EventContentBuffExcelAddIsBuff(b, t.IsBuff)
	EventContentBuffExcelAddSkillGroupId(b, b.CreateString(fbsutils.Convert(t.SkillGroupId, t.FlatBuffer.TableKey)))
	EventContentBuffExcelAddSpriteName(b, b.CreateString(fbsutils.Convert(t.SpriteName, t.FlatBuffer.TableKey)))
	return EventContentBuffExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentBuffExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentBuffExcelDto) UnmarshalMessage(e *EventContentBuffExcel) error {
	t.BuffDescriptionLocalizeCodeId = fbsutils.Convert(string(e.BuffDescriptionLocalizeCodeId()), t.FlatBuffer.TableKey)
	t.CharacterTag = Tag(fbsutils.Convert(int32(e.CharacterTag()), t.FlatBuffer.TableKey))
	t.EnumType = EventContentBuffFindRule(fbsutils.Convert(int32(e.EnumType()), t.FlatBuffer.TableKey))
	t.EnumTypeValue = make([]string, e.EnumTypeValueLength())
	for i := range e.EnumTypeValueLength() {
		t.EnumTypeValue[i] = fbsutils.Convert(string(e.EnumTypeValue(i)), t.FlatBuffer.TableKey)
	}
	t.EventContentBuffId = fbsutils.Convert(e.EventContentBuffId(), t.FlatBuffer.TableKey)
	t.IconPath = fbsutils.Convert(string(e.IconPath()), t.FlatBuffer.TableKey)
	t.IsBuff = e.IsBuff()
	t.SkillGroupId = fbsutils.Convert(string(e.SkillGroupId()), t.FlatBuffer.TableKey)
	t.SpriteName = fbsutils.Convert(string(e.SpriteName()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentBuffExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentBuffExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentBuffExcelDto) FlatDataName() string {
	return "EventContentBuffExcel"
}
