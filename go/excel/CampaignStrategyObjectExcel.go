// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CampaignStrategyObjectExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCampaignStrategyObjectExcel(buf []byte, offset flatbuffers.UOffsetT) *CampaignStrategyObjectExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CampaignStrategyObjectExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCampaignStrategyObjectExcel(buf []byte, offset flatbuffers.UOffsetT) *CampaignStrategyObjectExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CampaignStrategyObjectExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CampaignStrategyObjectExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CampaignStrategyObjectExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CampaignStrategyObjectExcel) BuffId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateBuffId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *CampaignStrategyObjectExcel) Disposable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CampaignStrategyObjectExcel) MutateDisposable(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *CampaignStrategyObjectExcel) HealValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateHealValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *CampaignStrategyObjectExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CampaignStrategyObjectExcel) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *CampaignStrategyObjectExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CampaignStrategyObjectExcel) PortalId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutatePortalId(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *CampaignStrategyObjectExcel) PrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CampaignStrategyObjectExcel) StrategyObjectType() StrategyObjectType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return StrategyObjectType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateStrategyObjectType(n StrategyObjectType) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *CampaignStrategyObjectExcel) StrategyRewardAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateStrategyRewardAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *CampaignStrategyObjectExcel) StrategyRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateStrategyRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *CampaignStrategyObjectExcel) StrategyRewardName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CampaignStrategyObjectExcel) StrategyRewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateStrategyRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *CampaignStrategyObjectExcel) StrategySightRange() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateStrategySightRange(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *CampaignStrategyObjectExcel) SwithId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignStrategyObjectExcel) MutateSwithId(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func CampaignStrategyObjectExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func CampaignStrategyObjectExcelAddBuffId(builder *flatbuffers.Builder, buffId int32) {
	builder.PrependInt32Slot(0, buffId, 0)
}
func CampaignStrategyObjectExcelAddDisposable(builder *flatbuffers.Builder, disposable bool) {
	builder.PrependBoolSlot(1, disposable, false)
}
func CampaignStrategyObjectExcelAddHealValue(builder *flatbuffers.Builder, healValue int32) {
	builder.PrependInt32Slot(2, healValue, 0)
}
func CampaignStrategyObjectExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(3, id, 0)
}
func CampaignStrategyObjectExcelAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(4, key, 0)
}
func CampaignStrategyObjectExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(name), 0)
}
func CampaignStrategyObjectExcelAddPortalId(builder *flatbuffers.Builder, portalId int32) {
	builder.PrependInt32Slot(6, portalId, 0)
}
func CampaignStrategyObjectExcelAddPrefabName(builder *flatbuffers.Builder, prefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(prefabName), 0)
}
func CampaignStrategyObjectExcelAddStrategyObjectType(builder *flatbuffers.Builder, strategyObjectType StrategyObjectType) {
	builder.PrependInt32Slot(8, int32(strategyObjectType), 0)
}
func CampaignStrategyObjectExcelAddStrategyRewardAmount(builder *flatbuffers.Builder, strategyRewardAmount int32) {
	builder.PrependInt32Slot(9, strategyRewardAmount, 0)
}
func CampaignStrategyObjectExcelAddStrategyRewardId(builder *flatbuffers.Builder, strategyRewardId int64) {
	builder.PrependInt64Slot(10, strategyRewardId, 0)
}
func CampaignStrategyObjectExcelAddStrategyRewardName(builder *flatbuffers.Builder, strategyRewardName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(strategyRewardName), 0)
}
func CampaignStrategyObjectExcelAddStrategyRewardParcelType(builder *flatbuffers.Builder, strategyRewardParcelType ParcelType) {
	builder.PrependInt32Slot(12, int32(strategyRewardParcelType), 0)
}
func CampaignStrategyObjectExcelAddStrategySightRange(builder *flatbuffers.Builder, strategySightRange int64) {
	builder.PrependInt64Slot(13, strategySightRange, 0)
}
func CampaignStrategyObjectExcelAddSwithId(builder *flatbuffers.Builder, swithId int32) {
	builder.PrependInt32Slot(14, swithId, 0)
}
func CampaignStrategyObjectExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
