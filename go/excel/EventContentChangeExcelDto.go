// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentChangeExcelDto represents a FlatBuffers table
type EventContentChangeExcelDto struct {
	fbsutils.FlatBuffer
	ChangeCostAmount int32      `json:"change_cost_amount"`
	ChangeCostId     int64      `json:"change_cost_id"`
	ChangeCostType   ParcelType `json:"change_cost_type"`
	ChangeCount      int64      `json:"change_count"`
	EventContentId   int64      `json:"event_content_id"`
	IsLast           bool       `json:"is_last"`
	RewardAmount     int32      `json:"reward_amount"`
	RewardId         int64      `json:"reward_id"`
	RewardParcelType ParcelType `json:"reward_parcel_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentChangeExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentChangeExcelStart(b)
	EventContentChangeExcelAddChangeCostAmount(b, fbsutils.Convert(t.ChangeCostAmount, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddChangeCostId(b, fbsutils.Convert(t.ChangeCostId, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddChangeCostType(b, fbsutils.Convert(t.ChangeCostType, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddChangeCount(b, fbsutils.Convert(t.ChangeCount, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddIsLast(b, t.IsLast)
	EventContentChangeExcelAddRewardAmount(b, fbsutils.Convert(t.RewardAmount, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddRewardId(b, fbsutils.Convert(t.RewardId, t.FlatBuffer.TableKey))
	EventContentChangeExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	return EventContentChangeExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentChangeExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentChangeExcelDto) UnmarshalMessage(e *EventContentChangeExcel) error {
	t.ChangeCostAmount = fbsutils.Convert(e.ChangeCostAmount(), t.FlatBuffer.TableKey)
	t.ChangeCostId = fbsutils.Convert(e.ChangeCostId(), t.FlatBuffer.TableKey)
	t.ChangeCostType = ParcelType(fbsutils.Convert(int32(e.ChangeCostType()), t.FlatBuffer.TableKey))
	t.ChangeCount = fbsutils.Convert(e.ChangeCount(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.IsLast = e.IsLast()
	t.RewardAmount = fbsutils.Convert(e.RewardAmount(), t.FlatBuffer.TableKey)
	t.RewardId = fbsutils.Convert(e.RewardId(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentChangeExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentChangeExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentChangeExcelDto) FlatDataName() string {
	return "EventContentChangeExcel"
}
