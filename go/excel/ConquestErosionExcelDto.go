// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConquestErosionExcelDto represents a FlatBuffers table
type ConquestErosionExcelDto struct {
	fbsutils.FlatBuffer
	ConquestRewardId                     int64                   `json:"conquest_reward_id"`
	ErosionBattleConditionParcelAmount   int64                   `json:"erosion_battle_condition_parcel_amount"`
	ErosionBattleConditionParcelUniqueId int64                   `json:"erosion_battle_condition_parcel_unique_id"`
	ErosionBattleConditionParcelType     ParcelType              `json:"erosion_battle_condition_parcel_type"`
	PhaseBeforeExposeConditionParameter  []string                `json:"phase_before_expose_condition_parameter"`
	PhaseBeforeExposeConditionType       []ConquestConditionType `json:"phase_before_expose_condition_type"`
	PhaseStartConditionParameter         []string                `json:"phase_start_condition_parameter"`
	PhaseStartConditionType              []ConquestConditionType `json:"phase_start_condition_type"`
	StepIndex                            int32                   `json:"step_index"`
	PhaseAlarm                           bool                    `json:"phase_alarm"`
	Phase                                int32                   `json:"phase"`
	ErosionType                          ConquestErosionType     `json:"erosion_type"`
	Id                                   int64                   `json:"id"`
	EventContentId                       int64                   `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConquestErosionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ConquestErosionExcelStart(b)
	ConquestErosionExcelAddConquestRewardId(b, fbsutils.Convert(t.ConquestRewardId, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddErosionBattleConditionParcelAmount(b, fbsutils.Convert(t.ErosionBattleConditionParcelAmount, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddErosionBattleConditionParcelUniqueId(b, fbsutils.Convert(t.ErosionBattleConditionParcelUniqueId, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddErosionBattleConditionParcelType(b, fbsutils.Convert(t.ErosionBattleConditionParcelType, t.FlatBuffer.TableKey))
	ConquestErosionExcelStartPhaseBeforeExposeConditionParameterVector(b, len(t.PhaseBeforeExposeConditionParameter))
	for i := range len(t.PhaseBeforeExposeConditionParameter) {
		b.PrependUOffsetT(b.CreateString(t.PhaseBeforeExposeConditionParameter[len(t.PhaseBeforeExposeConditionParameter)-i-1]))
	}
	ConquestErosionExcelAddPhaseBeforeExposeConditionParameter(b, b.EndVector(len(t.PhaseBeforeExposeConditionParameter)))
	ConquestErosionExcelStartPhaseBeforeExposeConditionTypeVector(b, len(t.PhaseBeforeExposeConditionType))
	for i := range len(t.PhaseBeforeExposeConditionType) {
		b.PrependInt32(fbsutils.Convert(int32(t.PhaseBeforeExposeConditionType[len(t.PhaseBeforeExposeConditionType)-i-1]), t.FlatBuffer.TableKey))
	}
	ConquestErosionExcelAddPhaseBeforeExposeConditionType(b, b.EndVector(len(t.PhaseBeforeExposeConditionType)))
	ConquestErosionExcelStartPhaseStartConditionParameterVector(b, len(t.PhaseStartConditionParameter))
	for i := range len(t.PhaseStartConditionParameter) {
		b.PrependUOffsetT(b.CreateString(t.PhaseStartConditionParameter[len(t.PhaseStartConditionParameter)-i-1]))
	}
	ConquestErosionExcelAddPhaseStartConditionParameter(b, b.EndVector(len(t.PhaseStartConditionParameter)))
	ConquestErosionExcelStartPhaseStartConditionTypeVector(b, len(t.PhaseStartConditionType))
	for i := range len(t.PhaseStartConditionType) {
		b.PrependInt32(fbsutils.Convert(int32(t.PhaseStartConditionType[len(t.PhaseStartConditionType)-i-1]), t.FlatBuffer.TableKey))
	}
	ConquestErosionExcelAddPhaseStartConditionType(b, b.EndVector(len(t.PhaseStartConditionType)))
	ConquestErosionExcelAddStepIndex(b, fbsutils.Convert(t.StepIndex, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddPhaseAlarm(b, t.PhaseAlarm)
	ConquestErosionExcelAddPhase(b, fbsutils.Convert(t.Phase, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddErosionType(b, fbsutils.Convert(t.ErosionType, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	ConquestErosionExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return ConquestErosionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConquestErosionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConquestErosionExcelDto) UnmarshalMessage(e *ConquestErosionExcel) error {
	t.ConquestRewardId = fbsutils.Convert(e.ConquestRewardId(), t.FlatBuffer.TableKey)
	t.ErosionBattleConditionParcelAmount = fbsutils.Convert(e.ErosionBattleConditionParcelAmount(), t.FlatBuffer.TableKey)
	t.ErosionBattleConditionParcelUniqueId = fbsutils.Convert(e.ErosionBattleConditionParcelUniqueId(), t.FlatBuffer.TableKey)
	t.ErosionBattleConditionParcelType = ParcelType(fbsutils.Convert(int32(e.ErosionBattleConditionParcelType()), t.FlatBuffer.TableKey))
	t.PhaseBeforeExposeConditionParameter = make([]string, e.PhaseBeforeExposeConditionParameterLength())
	for i := range e.PhaseBeforeExposeConditionParameterLength() {
		t.PhaseBeforeExposeConditionParameter[i] = fbsutils.Convert(string(e.PhaseBeforeExposeConditionParameter(i)), t.FlatBuffer.TableKey)
	}
	t.PhaseBeforeExposeConditionType = make([]ConquestConditionType, e.PhaseBeforeExposeConditionTypeLength())
	for i := range e.PhaseBeforeExposeConditionTypeLength() {
		t.PhaseBeforeExposeConditionType[i] = ConquestConditionType(fbsutils.Convert(int32(e.PhaseBeforeExposeConditionType(i)), t.FlatBuffer.TableKey))
	}
	t.PhaseStartConditionParameter = make([]string, e.PhaseStartConditionParameterLength())
	for i := range e.PhaseStartConditionParameterLength() {
		t.PhaseStartConditionParameter[i] = fbsutils.Convert(string(e.PhaseStartConditionParameter(i)), t.FlatBuffer.TableKey)
	}
	t.PhaseStartConditionType = make([]ConquestConditionType, e.PhaseStartConditionTypeLength())
	for i := range e.PhaseStartConditionTypeLength() {
		t.PhaseStartConditionType[i] = ConquestConditionType(fbsutils.Convert(int32(e.PhaseStartConditionType(i)), t.FlatBuffer.TableKey))
	}
	t.StepIndex = fbsutils.Convert(e.StepIndex(), t.FlatBuffer.TableKey)
	t.PhaseAlarm = e.PhaseAlarm()
	t.Phase = fbsutils.Convert(e.Phase(), t.FlatBuffer.TableKey)
	t.ErosionType = ConquestErosionType(fbsutils.Convert(int32(e.ErosionType()), t.FlatBuffer.TableKey))
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConquestErosionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConquestErosionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConquestErosionExcelDto) FlatDataName() string {
	return "ConquestErosionExcel"
}
