// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FixedEchelonSettingExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsFixedEchelonSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *FixedEchelonSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FixedEchelonSettingExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFixedEchelonSettingExcel(buf []byte, offset flatbuffers.UOffsetT) *FixedEchelonSettingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FixedEchelonSettingExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FixedEchelonSettingExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FixedEchelonSettingExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FixedEchelonSettingExcel) InteractionTsCharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateInteractionTsCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterGearLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterGearLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportCharacterGearLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterGearTier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterGearTierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportCharacterGearTier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterWeaponLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterWeaponLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportCharacterWeaponLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterWeaponGrade(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterWeaponGradeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportCharacterWeaponGrade(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment3Level(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment3LevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportEquipment3Level(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment3Tier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment3TierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportEquipment3Tier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment2Level(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment2LevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportEquipment2Level(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment2Tier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment2TierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportEquipment2Tier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment1Level(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment1LevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportEquipment1Level(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment1Tier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportEquipment1TierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportEquipment1Tier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportNoneExSkillLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportNoneExSkillLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportNoneExSkillLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportExSkillLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportExSkillLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportExSkillLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportGrade(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportGradeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportGrade(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) SupportCharacterIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateSupportCharacterId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainCharacterGearLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainCharacterGearLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainCharacterGearLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainCharacterGearTier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainCharacterGearTierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainCharacterGearTier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainCharacterWeaponLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainCharacterWeaponLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainCharacterWeaponLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainCharacterWeaponGrade(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainCharacterWeaponGradeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainCharacterWeaponGrade(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainEquipment3Level(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainEquipment3LevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainEquipment3Level(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainEquipment3Tier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainEquipment3TierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainEquipment3Tier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainEquipment2Level(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainEquipment2LevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainEquipment2Level(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainEquipment2Tier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainEquipment2TierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainEquipment2Tier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainEquipment1Level(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainEquipment1LevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainEquipment1Level(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainEquipment1Tier(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainEquipment1TierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainEquipment1Tier(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainNoneExSkillLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainNoneExSkillLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainNoneExSkillLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainExSkillLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainExSkillLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainExSkillLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainGrade(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainGradeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainGrade(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainCharacterId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MainCharacterIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainCharacterId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MainLeaderSlot() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateMainLeaderSlot(n int32) bool {
	return rcv._tab.MutateInt32Slot(66, n)
}

func (rcv *FixedEchelonSettingExcel) EchelonSceneSkip() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FixedEchelonSettingExcel) MutateEchelonSceneSkip(n bool) bool {
	return rcv._tab.MutateBoolSlot(68, n)
}

func (rcv *FixedEchelonSettingExcel) FixedEchelonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FixedEchelonSettingExcel) MutateFixedEchelonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

func FixedEchelonSettingExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(34)
}
func FixedEchelonSettingExcelAddInteractionTsCharacterId(builder *flatbuffers.Builder, interactionTsCharacterId int64) {
	builder.PrependInt64Slot(0, interactionTsCharacterId, 0)
}
func FixedEchelonSettingExcelAddSupportCharacterGearLevel(builder *flatbuffers.Builder, supportCharacterGearLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(supportCharacterGearLevel), 0)
}
func FixedEchelonSettingExcelStartSupportCharacterGearLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportCharacterGearTier(builder *flatbuffers.Builder, supportCharacterGearTier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(supportCharacterGearTier), 0)
}
func FixedEchelonSettingExcelStartSupportCharacterGearTierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportCharacterWeaponLevel(builder *flatbuffers.Builder, supportCharacterWeaponLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(supportCharacterWeaponLevel), 0)
}
func FixedEchelonSettingExcelStartSupportCharacterWeaponLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportCharacterWeaponGrade(builder *flatbuffers.Builder, supportCharacterWeaponGrade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(supportCharacterWeaponGrade), 0)
}
func FixedEchelonSettingExcelStartSupportCharacterWeaponGradeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportEquipment3Level(builder *flatbuffers.Builder, supportEquipment3Level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(supportEquipment3Level), 0)
}
func FixedEchelonSettingExcelStartSupportEquipment3LevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportEquipment3Tier(builder *flatbuffers.Builder, supportEquipment3Tier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(supportEquipment3Tier), 0)
}
func FixedEchelonSettingExcelStartSupportEquipment3TierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportEquipment2Level(builder *flatbuffers.Builder, supportEquipment2Level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(supportEquipment2Level), 0)
}
func FixedEchelonSettingExcelStartSupportEquipment2LevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportEquipment2Tier(builder *flatbuffers.Builder, supportEquipment2Tier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(supportEquipment2Tier), 0)
}
func FixedEchelonSettingExcelStartSupportEquipment2TierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportEquipment1Level(builder *flatbuffers.Builder, supportEquipment1Level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(supportEquipment1Level), 0)
}
func FixedEchelonSettingExcelStartSupportEquipment1LevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportEquipment1Tier(builder *flatbuffers.Builder, supportEquipment1Tier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(supportEquipment1Tier), 0)
}
func FixedEchelonSettingExcelStartSupportEquipment1TierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportNoneExSkillLevel(builder *flatbuffers.Builder, supportNoneExSkillLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(supportNoneExSkillLevel), 0)
}
func FixedEchelonSettingExcelStartSupportNoneExSkillLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportExSkillLevel(builder *flatbuffers.Builder, supportExSkillLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(supportExSkillLevel), 0)
}
func FixedEchelonSettingExcelStartSupportExSkillLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportGrade(builder *flatbuffers.Builder, supportGrade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(supportGrade), 0)
}
func FixedEchelonSettingExcelStartSupportGradeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportLevel(builder *flatbuffers.Builder, supportLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(supportLevel), 0)
}
func FixedEchelonSettingExcelStartSupportLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddSupportCharacterId(builder *flatbuffers.Builder, supportCharacterId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(supportCharacterId), 0)
}
func FixedEchelonSettingExcelStartSupportCharacterIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FixedEchelonSettingExcelAddMainCharacterGearLevel(builder *flatbuffers.Builder, mainCharacterGearLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(mainCharacterGearLevel), 0)
}
func FixedEchelonSettingExcelStartMainCharacterGearLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainCharacterGearTier(builder *flatbuffers.Builder, mainCharacterGearTier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(mainCharacterGearTier), 0)
}
func FixedEchelonSettingExcelStartMainCharacterGearTierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainCharacterWeaponLevel(builder *flatbuffers.Builder, mainCharacterWeaponLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(mainCharacterWeaponLevel), 0)
}
func FixedEchelonSettingExcelStartMainCharacterWeaponLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainCharacterWeaponGrade(builder *flatbuffers.Builder, mainCharacterWeaponGrade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(mainCharacterWeaponGrade), 0)
}
func FixedEchelonSettingExcelStartMainCharacterWeaponGradeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainEquipment3Level(builder *flatbuffers.Builder, mainEquipment3Level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(mainEquipment3Level), 0)
}
func FixedEchelonSettingExcelStartMainEquipment3LevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainEquipment3Tier(builder *flatbuffers.Builder, mainEquipment3Tier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(mainEquipment3Tier), 0)
}
func FixedEchelonSettingExcelStartMainEquipment3TierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainEquipment2Level(builder *flatbuffers.Builder, mainEquipment2Level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(mainEquipment2Level), 0)
}
func FixedEchelonSettingExcelStartMainEquipment2LevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainEquipment2Tier(builder *flatbuffers.Builder, mainEquipment2Tier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(mainEquipment2Tier), 0)
}
func FixedEchelonSettingExcelStartMainEquipment2TierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainEquipment1Level(builder *flatbuffers.Builder, mainEquipment1Level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(mainEquipment1Level), 0)
}
func FixedEchelonSettingExcelStartMainEquipment1LevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainEquipment1Tier(builder *flatbuffers.Builder, mainEquipment1Tier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(mainEquipment1Tier), 0)
}
func FixedEchelonSettingExcelStartMainEquipment1TierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainNoneExSkillLevel(builder *flatbuffers.Builder, mainNoneExSkillLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(mainNoneExSkillLevel), 0)
}
func FixedEchelonSettingExcelStartMainNoneExSkillLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainExSkillLevel(builder *flatbuffers.Builder, mainExSkillLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(mainExSkillLevel), 0)
}
func FixedEchelonSettingExcelStartMainExSkillLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainGrade(builder *flatbuffers.Builder, mainGrade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(mainGrade), 0)
}
func FixedEchelonSettingExcelStartMainGradeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainLevel(builder *flatbuffers.Builder, mainLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(mainLevel), 0)
}
func FixedEchelonSettingExcelStartMainLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FixedEchelonSettingExcelAddMainCharacterId(builder *flatbuffers.Builder, mainCharacterId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(mainCharacterId), 0)
}
func FixedEchelonSettingExcelStartMainCharacterIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FixedEchelonSettingExcelAddMainLeaderSlot(builder *flatbuffers.Builder, mainLeaderSlot int32) {
	builder.PrependInt32Slot(31, mainLeaderSlot, 0)
}
func FixedEchelonSettingExcelAddEchelonSceneSkip(builder *flatbuffers.Builder, echelonSceneSkip bool) {
	builder.PrependBoolSlot(32, echelonSceneSkip, false)
}
func FixedEchelonSettingExcelAddFixedEchelonId(builder *flatbuffers.Builder, fixedEchelonId int64) {
	builder.PrependInt64Slot(33, fixedEchelonId, 0)
}
func FixedEchelonSettingExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
