// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PickupFirstGetBonusExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsPickupFirstGetBonusExcel(buf []byte, offset flatbuffers.UOffsetT) *PickupFirstGetBonusExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PickupFirstGetBonusExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPickupFirstGetBonusExcel(buf []byte, offset flatbuffers.UOffsetT) *PickupFirstGetBonusExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PickupFirstGetBonusExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PickupFirstGetBonusExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PickupFirstGetBonusExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PickupFirstGetBonusExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PickupFirstGetBonusExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PickupFirstGetBonusExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PickupFirstGetBonusExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *PickupFirstGetBonusExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PickupFirstGetBonusExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *PickupFirstGetBonusExcel) PickupCharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PickupFirstGetBonusExcel) MutatePickupCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *PickupFirstGetBonusExcel) RecruitSellectionShopId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PickupFirstGetBonusExcel) MutateRecruitSellectionShopId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *PickupFirstGetBonusExcel) ShopRecruitId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PickupFirstGetBonusExcel) MutateShopRecruitId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func PickupFirstGetBonusExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PickupFirstGetBonusExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(0, rewardParcelAmount, 0)
}
func PickupFirstGetBonusExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(1, rewardParcelId, 0)
}
func PickupFirstGetBonusExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(rewardParcelType), 0)
}
func PickupFirstGetBonusExcelAddPickupCharacterId(builder *flatbuffers.Builder, pickupCharacterId int64) {
	builder.PrependInt64Slot(3, pickupCharacterId, 0)
}
func PickupFirstGetBonusExcelAddRecruitSellectionShopId(builder *flatbuffers.Builder, recruitSellectionShopId int64) {
	builder.PrependInt64Slot(4, recruitSellectionShopId, 0)
}
func PickupFirstGetBonusExcelAddShopRecruitId(builder *flatbuffers.Builder, shopRecruitId int64) {
	builder.PrependInt64Slot(5, shopRecruitId, 0)
}
func PickupFirstGetBonusExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
