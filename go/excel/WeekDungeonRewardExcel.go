// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WeekDungeonRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsWeekDungeonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *WeekDungeonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WeekDungeonRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWeekDungeonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *WeekDungeonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WeekDungeonRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WeekDungeonRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WeekDungeonRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WeekDungeonRewardExcel) DropItemModelPrefabPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WeekDungeonRewardExcel) DungeonType() WeekDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return WeekDungeonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WeekDungeonRewardExcel) MutateDungeonType(n WeekDungeonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *WeekDungeonRewardExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonRewardExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *WeekDungeonRewardExcel) IsDisplayed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WeekDungeonRewardExcel) MutateIsDisplayed(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *WeekDungeonRewardExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonRewardExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *WeekDungeonRewardExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonRewardExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *WeekDungeonRewardExcel) RewardParcelProbability() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeekDungeonRewardExcel) MutateRewardParcelProbability(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *WeekDungeonRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WeekDungeonRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func WeekDungeonRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func WeekDungeonRewardExcelAddDropItemModelPrefabPath(builder *flatbuffers.Builder, dropItemModelPrefabPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dropItemModelPrefabPath), 0)
}
func WeekDungeonRewardExcelAddDungeonType(builder *flatbuffers.Builder, dungeonType WeekDungeonType) {
	builder.PrependInt32Slot(1, int32(dungeonType), 0)
}
func WeekDungeonRewardExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(2, groupId, 0)
}
func WeekDungeonRewardExcelAddIsDisplayed(builder *flatbuffers.Builder, isDisplayed bool) {
	builder.PrependBoolSlot(3, isDisplayed, false)
}
func WeekDungeonRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(4, rewardParcelAmount, 0)
}
func WeekDungeonRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(5, rewardParcelId, 0)
}
func WeekDungeonRewardExcelAddRewardParcelProbability(builder *flatbuffers.Builder, rewardParcelProbability int64) {
	builder.PrependInt64Slot(6, rewardParcelProbability, 0)
}
func WeekDungeonRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(7, int32(rewardParcelType), 0)
}
func WeekDungeonRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
