// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EliminateRaidStageRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEliminateRaidStageRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidStageRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EliminateRaidStageRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEliminateRaidStageRewardExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEliminateRaidStageRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidStageRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EliminateRaidStageRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEliminateRaidStageRewardExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EliminateRaidStageRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EliminateRaidStageRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EliminateRaidStageRewardExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageRewardExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EliminateRaidStageRewardExcel) IsClearStageRewardHideInfo() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EliminateRaidStageRewardExcel) MutateIsClearStageRewardHideInfo(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *EliminateRaidStageRewardExcel) ClearStageRewardProb() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageRewardExcel) MutateClearStageRewardProb(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EliminateRaidStageRewardExcel) ClearStageRewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EliminateRaidStageRewardExcel) MutateClearStageRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *EliminateRaidStageRewardExcel) ClearStageRewardParcelUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageRewardExcel) MutateClearStageRewardParcelUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EliminateRaidStageRewardExcel) ClearStageRewardAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageRewardExcel) MutateClearStageRewardAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func EliminateRaidStageRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EliminateRaidStageRewardExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(0, groupId, 0)
}
func EliminateRaidStageRewardExcelAddIsClearStageRewardHideInfo(builder *flatbuffers.Builder, isClearStageRewardHideInfo bool) {
	builder.PrependBoolSlot(1, isClearStageRewardHideInfo, false)
}
func EliminateRaidStageRewardExcelAddClearStageRewardProb(builder *flatbuffers.Builder, clearStageRewardProb int64) {
	builder.PrependInt64Slot(2, clearStageRewardProb, 0)
}
func EliminateRaidStageRewardExcelAddClearStageRewardParcelType(builder *flatbuffers.Builder, clearStageRewardParcelType ParcelType) {
	builder.PrependInt32Slot(3, int32(clearStageRewardParcelType), 0)
}
func EliminateRaidStageRewardExcelAddClearStageRewardParcelUniqueId(builder *flatbuffers.Builder, clearStageRewardParcelUniqueId int64) {
	builder.PrependInt64Slot(4, clearStageRewardParcelUniqueId, 0)
}
func EliminateRaidStageRewardExcelAddClearStageRewardAmount(builder *flatbuffers.Builder, clearStageRewardAmount int64) {
	builder.PrependInt64Slot(5, clearStageRewardAmount, 0)
}
func EliminateRaidStageRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
