// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShopRefreshExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsShopRefreshExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopRefreshExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShopRefreshExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShopRefreshExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopRefreshExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShopRefreshExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShopRefreshExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShopRefreshExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShopRefreshExcel) BuyReportEventName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopRefreshExcel) CategoryType() ShopCategoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ShopCategoryType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateCategoryType(n ShopCategoryType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ShopRefreshExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ShopRefreshExcel) DisplayTag() ProductDisplayTag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ProductDisplayTag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateDisplayTag(n ProductDisplayTag) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *ShopRefreshExcel) GoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ShopRefreshExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ShopRefreshExcel) IsBundle() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopRefreshExcel) MutateIsBundle(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *ShopRefreshExcel) IsLegacy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ShopRefreshExcel) MutateIsLegacy(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *ShopRefreshExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *ShopRefreshExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *ShopRefreshExcel) ProductUpdateTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopRefreshExcel) PurchaseCountLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutatePurchaseCountLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *ShopRefreshExcel) RefreshGroup() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateRefreshGroup(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *ShopRefreshExcel) ShopPurchasePopupType() ShopPurchasePopupType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return ShopPurchasePopupType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateShopPurchasePopupType(n ShopPurchasePopupType) bool {
	return rcv._tab.MutateInt32Slot(30, int32(n))
}

func (rcv *ShopRefreshExcel) VisibleAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopRefreshExcel) MutateVisibleAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func ShopRefreshExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func ShopRefreshExcelAddBuyReportEventName(builder *flatbuffers.Builder, buyReportEventName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(buyReportEventName), 0)
}
func ShopRefreshExcelAddCategoryType(builder *flatbuffers.Builder, categoryType ShopCategoryType) {
	builder.PrependInt32Slot(1, int32(categoryType), 0)
}
func ShopRefreshExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(2, displayOrder, 0)
}
func ShopRefreshExcelAddDisplayTag(builder *flatbuffers.Builder, displayTag ProductDisplayTag) {
	builder.PrependInt32Slot(3, int32(displayTag), 0)
}
func ShopRefreshExcelAddGoodsId(builder *flatbuffers.Builder, goodsId int64) {
	builder.PrependInt64Slot(4, goodsId, 0)
}
func ShopRefreshExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(5, id, 0)
}
func ShopRefreshExcelAddIsBundle(builder *flatbuffers.Builder, isBundle bool) {
	builder.PrependBoolSlot(6, isBundle, false)
}
func ShopRefreshExcelAddIsLegacy(builder *flatbuffers.Builder, isLegacy bool) {
	builder.PrependBoolSlot(7, isLegacy, false)
}
func ShopRefreshExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(8, localizeEtcId, 0)
}
func ShopRefreshExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(9, prob, 0)
}
func ShopRefreshExcelAddProductUpdateTime(builder *flatbuffers.Builder, productUpdateTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(productUpdateTime), 0)
}
func ShopRefreshExcelAddPurchaseCountLimit(builder *flatbuffers.Builder, purchaseCountLimit int64) {
	builder.PrependInt64Slot(11, purchaseCountLimit, 0)
}
func ShopRefreshExcelAddRefreshGroup(builder *flatbuffers.Builder, refreshGroup int32) {
	builder.PrependInt32Slot(12, refreshGroup, 0)
}
func ShopRefreshExcelAddShopPurchasePopupType(builder *flatbuffers.Builder, shopPurchasePopupType ShopPurchasePopupType) {
	builder.PrependInt32Slot(13, int32(shopPurchasePopupType), 0)
}
func ShopRefreshExcelAddVisibleAmount(builder *flatbuffers.Builder, visibleAmount int64) {
	builder.PrependInt64Slot(14, visibleAmount, 0)
}
func ShopRefreshExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
