// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterVoiceSubtitleExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterVoiceSubtitleExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterVoiceSubtitleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterVoiceSubtitleExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCharacterVoiceSubtitleExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCharacterVoiceSubtitleExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterVoiceSubtitleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterVoiceSubtitleExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCharacterVoiceSubtitleExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CharacterVoiceSubtitleExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterVoiceSubtitleExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterVoiceSubtitleExcel) LocalizeCvGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterVoiceSubtitleExcel) CharacterVoiceGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterVoiceSubtitleExcel) MutateCharacterVoiceGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *CharacterVoiceSubtitleExcel) Duration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterVoiceSubtitleExcel) MutateDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CharacterVoiceSubtitleExcel) Separate() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterVoiceSubtitleExcel) MutateSeparate(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *CharacterVoiceSubtitleExcel) LocalizeKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterVoiceSubtitleExcel) LocalizeJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CharacterVoiceSubtitleExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CharacterVoiceSubtitleExcelAddLocalizeCvGroup(builder *flatbuffers.Builder, localizeCvGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(localizeCvGroup), 0)
}
func CharacterVoiceSubtitleExcelAddCharacterVoiceGroupId(builder *flatbuffers.Builder, characterVoiceGroupId int64) {
	builder.PrependInt64Slot(1, characterVoiceGroupId, 0)
}
func CharacterVoiceSubtitleExcelAddDuration(builder *flatbuffers.Builder, duration int64) {
	builder.PrependInt64Slot(2, duration, 0)
}
func CharacterVoiceSubtitleExcelAddSeparate(builder *flatbuffers.Builder, separate bool) {
	builder.PrependBoolSlot(3, separate, false)
}
func CharacterVoiceSubtitleExcelAddLocalizeKr(builder *flatbuffers.Builder, localizeKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(localizeKr), 0)
}
func CharacterVoiceSubtitleExcelAddLocalizeJp(builder *flatbuffers.Builder, localizeJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(localizeJp), 0)
}
func CharacterVoiceSubtitleExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
