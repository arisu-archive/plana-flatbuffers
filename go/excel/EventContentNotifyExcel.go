// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentNotifyExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentNotifyExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentNotifyExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentNotifyExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentNotifyExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentNotifyExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentNotifyExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentNotifyExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentNotifyExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentNotifyExcel) IsShortcutEnable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentNotifyExcel) MutateIsShortcutEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *EventContentNotifyExcel) ShortcutEventTargetType() EventTargetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EventTargetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentNotifyExcel) MutateShortcutEventTargetType(n EventTargetType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentNotifyExcel) EventTargetType() EventTargetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return EventTargetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentNotifyExcel) MutateEventTargetType(n EventTargetType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EventContentNotifyExcel) EventNotifyType() EventNotifyType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EventNotifyType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentNotifyExcel) MutateEventNotifyType(n EventNotifyType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *EventContentNotifyExcel) IconPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentNotifyExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentNotifyExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *EventContentNotifyExcel) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentNotifyExcel) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func EventContentNotifyExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func EventContentNotifyExcelAddIsShortcutEnable(builder *flatbuffers.Builder, isShortcutEnable bool) {
	builder.PrependBoolSlot(0, isShortcutEnable, false)
}
func EventContentNotifyExcelAddShortcutEventTargetType(builder *flatbuffers.Builder, shortcutEventTargetType EventTargetType) {
	builder.PrependInt32Slot(1, int32(shortcutEventTargetType), 0)
}
func EventContentNotifyExcelAddEventTargetType(builder *flatbuffers.Builder, eventTargetType EventTargetType) {
	builder.PrependInt32Slot(2, int32(eventTargetType), 0)
}
func EventContentNotifyExcelAddEventNotifyType(builder *flatbuffers.Builder, eventNotifyType EventNotifyType) {
	builder.PrependInt32Slot(3, int32(eventNotifyType), 0)
}
func EventContentNotifyExcelAddIconPath(builder *flatbuffers.Builder, iconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(iconPath), 0)
}
func EventContentNotifyExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(5, localizeEtcId, 0)
}
func EventContentNotifyExcelAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(6, id, 0)
}
func EventContentNotifyExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
