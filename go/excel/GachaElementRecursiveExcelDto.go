// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GachaElementRecursiveExcelDto represents a FlatBuffers table
type GachaElementRecursiveExcelDto struct {
	fbsutils.FlatBuffer
	GachaGroupId    int64      `json:"gacha_group_id"`
	Id              int64      `json:"id"`
	ParcelAmountMax int32      `json:"parcel_amount_max"`
	ParcelAmountMin int32      `json:"parcel_amount_min"`
	ParcelId        int64      `json:"parcel_id"`
	ParcelType      ParcelType `json:"parcel_type"`
	Prob            int32      `json:"prob"`
	State           int32      `json:"state"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GachaElementRecursiveExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	GachaElementRecursiveExcelStart(b)
	GachaElementRecursiveExcelAddGachaGroupId(b, fbsutils.Convert(t.GachaGroupId, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddParcelAmountMax(b, fbsutils.Convert(t.ParcelAmountMax, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddParcelAmountMin(b, fbsutils.Convert(t.ParcelAmountMin, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddParcelId(b, fbsutils.Convert(t.ParcelId, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddParcelType(b, fbsutils.Convert(t.ParcelType, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	GachaElementRecursiveExcelAddState(b, fbsutils.Convert(t.State, t.FlatBuffer.TableKey))
	return GachaElementRecursiveExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GachaElementRecursiveExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GachaElementRecursiveExcelDto) UnmarshalMessage(e *GachaElementRecursiveExcel) error {
	t.GachaGroupId = fbsutils.Convert(e.GachaGroupId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.ParcelAmountMax = fbsutils.Convert(e.ParcelAmountMax(), t.FlatBuffer.TableKey)
	t.ParcelAmountMin = fbsutils.Convert(e.ParcelAmountMin(), t.FlatBuffer.TableKey)
	t.ParcelId = fbsutils.Convert(e.ParcelId(), t.FlatBuffer.TableKey)
	t.ParcelType = ParcelType(fbsutils.Convert(int32(e.ParcelType()), t.FlatBuffer.TableKey))
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	t.State = fbsutils.Convert(e.State(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GachaElementRecursiveExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGachaElementRecursiveExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GachaElementRecursiveExcelDto) FlatDataName() string {
	return "GachaElementRecursiveExcel"
}
