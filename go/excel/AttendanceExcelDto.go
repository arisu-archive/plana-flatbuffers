// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AttendanceExcelDto represents a FlatBuffers table
type AttendanceExcelDto struct {
	fbsutils.FlatBuffer
	DecorationGarlandImagePath string              `json:"decoration_garland_image_path"`
	DecorationImagePath        string              `json:"decoration_image_path"`
	TitleImagePath             string              `json:"title_image_path"`
	DialogCategory             DialogCategory      `json:"dialog_category"`
	MailType                   MailType            `json:"mail_type"`
	ExpiryDate                 int64               `json:"expiry_date"`
	EndDate                    string              `json:"end_date"`
	StartableEndDate           string              `json:"startable_end_date"`
	StartDate                  string              `json:"start_date"`
	BookSize                   int64               `json:"book_size"`
	CountReset                 AttendanceResetType `json:"count_reset"`
	CountRule                  AttendanceCountRule `json:"count_rule"`
	InfomationLocalizeCode     string              `json:"infomation_localize_code"`
	Title                      string              `json:"title"`
	AccountLevelLimit          int64               `json:"account_level_limit"`
	AccountType                AccountState        `json:"account_type"`
	DisplayOrder               int64               `json:"display_order"`
	CountdownPrefab            string              `json:"countdown_prefab"`
	Type                       AttendanceType      `json:"type"`
	Id                         int64               `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AttendanceExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	AttendanceExcelStart(b)
	AttendanceExcelAddDecorationGarlandImagePath(b, b.CreateString(fbsutils.Convert(t.DecorationGarlandImagePath, t.FlatBuffer.TableKey)))
	AttendanceExcelAddDecorationImagePath(b, b.CreateString(fbsutils.Convert(t.DecorationImagePath, t.FlatBuffer.TableKey)))
	AttendanceExcelAddTitleImagePath(b, b.CreateString(fbsutils.Convert(t.TitleImagePath, t.FlatBuffer.TableKey)))
	AttendanceExcelAddDialogCategory(b, fbsutils.Convert(t.DialogCategory, t.FlatBuffer.TableKey))
	AttendanceExcelAddMailType(b, fbsutils.Convert(t.MailType, t.FlatBuffer.TableKey))
	AttendanceExcelAddExpiryDate(b, fbsutils.Convert(t.ExpiryDate, t.FlatBuffer.TableKey))
	AttendanceExcelAddEndDate(b, b.CreateString(fbsutils.Convert(t.EndDate, t.FlatBuffer.TableKey)))
	AttendanceExcelAddStartableEndDate(b, b.CreateString(fbsutils.Convert(t.StartableEndDate, t.FlatBuffer.TableKey)))
	AttendanceExcelAddStartDate(b, b.CreateString(fbsutils.Convert(t.StartDate, t.FlatBuffer.TableKey)))
	AttendanceExcelAddBookSize(b, fbsutils.Convert(t.BookSize, t.FlatBuffer.TableKey))
	AttendanceExcelAddCountReset(b, fbsutils.Convert(t.CountReset, t.FlatBuffer.TableKey))
	AttendanceExcelAddCountRule(b, fbsutils.Convert(t.CountRule, t.FlatBuffer.TableKey))
	AttendanceExcelAddInfomationLocalizeCode(b, b.CreateString(fbsutils.Convert(t.InfomationLocalizeCode, t.FlatBuffer.TableKey)))
	AttendanceExcelAddTitle(b, b.CreateString(fbsutils.Convert(t.Title, t.FlatBuffer.TableKey)))
	AttendanceExcelAddAccountLevelLimit(b, fbsutils.Convert(t.AccountLevelLimit, t.FlatBuffer.TableKey))
	AttendanceExcelAddAccountType(b, fbsutils.Convert(t.AccountType, t.FlatBuffer.TableKey))
	AttendanceExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	AttendanceExcelAddCountdownPrefab(b, b.CreateString(fbsutils.Convert(t.CountdownPrefab, t.FlatBuffer.TableKey)))
	AttendanceExcelAddType(b, fbsutils.Convert(t.Type, t.FlatBuffer.TableKey))
	AttendanceExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return AttendanceExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AttendanceExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AttendanceExcelDto) UnmarshalMessage(e *AttendanceExcel) error {
	t.DecorationGarlandImagePath = fbsutils.Convert(string(e.DecorationGarlandImagePath()), t.FlatBuffer.TableKey)
	t.DecorationImagePath = fbsutils.Convert(string(e.DecorationImagePath()), t.FlatBuffer.TableKey)
	t.TitleImagePath = fbsutils.Convert(string(e.TitleImagePath()), t.FlatBuffer.TableKey)
	t.DialogCategory = DialogCategory(fbsutils.Convert(int32(e.DialogCategory()), t.FlatBuffer.TableKey))
	t.MailType = MailType(fbsutils.Convert(int32(e.MailType()), t.FlatBuffer.TableKey))
	t.ExpiryDate = fbsutils.Convert(e.ExpiryDate(), t.FlatBuffer.TableKey)
	t.EndDate = fbsutils.Convert(string(e.EndDate()), t.FlatBuffer.TableKey)
	t.StartableEndDate = fbsutils.Convert(string(e.StartableEndDate()), t.FlatBuffer.TableKey)
	t.StartDate = fbsutils.Convert(string(e.StartDate()), t.FlatBuffer.TableKey)
	t.BookSize = fbsutils.Convert(e.BookSize(), t.FlatBuffer.TableKey)
	t.CountReset = AttendanceResetType(fbsutils.Convert(int32(e.CountReset()), t.FlatBuffer.TableKey))
	t.CountRule = AttendanceCountRule(fbsutils.Convert(int32(e.CountRule()), t.FlatBuffer.TableKey))
	t.InfomationLocalizeCode = fbsutils.Convert(string(e.InfomationLocalizeCode()), t.FlatBuffer.TableKey)
	t.Title = fbsutils.Convert(string(e.Title()), t.FlatBuffer.TableKey)
	t.AccountLevelLimit = fbsutils.Convert(e.AccountLevelLimit(), t.FlatBuffer.TableKey)
	t.AccountType = AccountState(fbsutils.Convert(int32(e.AccountType()), t.FlatBuffer.TableKey))
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.CountdownPrefab = fbsutils.Convert(string(e.CountdownPrefab()), t.FlatBuffer.TableKey)
	t.Type = AttendanceType(fbsutils.Convert(int32(e.Type()), t.FlatBuffer.TableKey))
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AttendanceExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAttendanceExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AttendanceExcelDto) FlatDataName() string {
	return "AttendanceExcel"
}
