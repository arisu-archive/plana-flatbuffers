// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CampaignUnitExcelDto represents a FlatBuffers table
type CampaignUnitExcelDto struct {
	fbsutils.FlatBuffer
	IsTacticSkip         bool              `json:"is_tactic_skip"`
	Scale                float32           `json:"scale"`
	EnvironmentType      TacticEnvironment `json:"environment_type"`
	Grade                HexaUnitGrade     `json:"grade"`
	AiMoveType           StrategyAIType    `json:"ai_move_type"`
	MoveRange            int32             `json:"move_range"`
	GroundId             int64             `json:"ground_id"`
	ClearScenarioGroupId []int64           `json:"clear_scenario_group_id"`
	EnterScenarioGroupId []int64           `json:"enter_scenario_group_id"`
	StrategyPrefabName   string            `json:"strategy_prefab_name"`
	PrefabName           string            `json:"prefab_name"`
	Name                 string            `json:"name"`
	Key                  uint32            `json:"key"`
	Id                   int64             `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CampaignUnitExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CampaignUnitExcelStart(b)
	CampaignUnitExcelAddIsTacticSkip(b, t.IsTacticSkip)
	CampaignUnitExcelAddScale(b, fbsutils.Convert(t.Scale, t.FlatBuffer.TableKey))
	CampaignUnitExcelAddEnvironmentType(b, fbsutils.Convert(t.EnvironmentType, t.FlatBuffer.TableKey))
	CampaignUnitExcelAddGrade(b, fbsutils.Convert(t.Grade, t.FlatBuffer.TableKey))
	CampaignUnitExcelAddAiMoveType(b, fbsutils.Convert(t.AiMoveType, t.FlatBuffer.TableKey))
	CampaignUnitExcelAddMoveRange(b, fbsutils.Convert(t.MoveRange, t.FlatBuffer.TableKey))
	CampaignUnitExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	CampaignUnitExcelStartClearScenarioGroupIdVector(b, len(t.ClearScenarioGroupId))
	for i := range len(t.ClearScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.ClearScenarioGroupId[len(t.ClearScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignUnitExcelAddClearScenarioGroupId(b, b.EndVector(len(t.ClearScenarioGroupId)))
	CampaignUnitExcelStartEnterScenarioGroupIdVector(b, len(t.EnterScenarioGroupId))
	for i := range len(t.EnterScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.EnterScenarioGroupId[len(t.EnterScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	CampaignUnitExcelAddEnterScenarioGroupId(b, b.EndVector(len(t.EnterScenarioGroupId)))
	CampaignUnitExcelAddStrategyPrefabName(b, b.CreateString(fbsutils.Convert(t.StrategyPrefabName, t.FlatBuffer.TableKey)))
	CampaignUnitExcelAddPrefabName(b, b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey)))
	CampaignUnitExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	CampaignUnitExcelAddKey(b, fbsutils.Convert(t.Key, t.FlatBuffer.TableKey))
	CampaignUnitExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return CampaignUnitExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CampaignUnitExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CampaignUnitExcelDto) UnmarshalMessage(e *CampaignUnitExcel) error {
	t.IsTacticSkip = e.IsTacticSkip()
	t.Scale = fbsutils.Convert(e.Scale(), t.FlatBuffer.TableKey)
	t.EnvironmentType = TacticEnvironment(fbsutils.Convert(int32(e.EnvironmentType()), t.FlatBuffer.TableKey))
	t.Grade = HexaUnitGrade(fbsutils.Convert(int32(e.Grade()), t.FlatBuffer.TableKey))
	t.AiMoveType = StrategyAIType(fbsutils.Convert(int32(e.AiMoveType()), t.FlatBuffer.TableKey))
	t.MoveRange = fbsutils.Convert(e.MoveRange(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.ClearScenarioGroupId = make([]int64, e.ClearScenarioGroupIdLength())
	for i := range e.ClearScenarioGroupIdLength() {
		t.ClearScenarioGroupId[i] = fbsutils.Convert(e.ClearScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.EnterScenarioGroupId = make([]int64, e.EnterScenarioGroupIdLength())
	for i := range e.EnterScenarioGroupIdLength() {
		t.EnterScenarioGroupId[i] = fbsutils.Convert(e.EnterScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.StrategyPrefabName = fbsutils.Convert(string(e.StrategyPrefabName()), t.FlatBuffer.TableKey)
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Key = fbsutils.Convert(e.Key(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CampaignUnitExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCampaignUnitExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CampaignUnitExcelDto) FlatDataName() string {
	return "CampaignUnitExcel"
}
