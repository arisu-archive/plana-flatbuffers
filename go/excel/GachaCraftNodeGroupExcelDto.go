// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GachaCraftNodeGroupExcelDto represents a FlatBuffers table
type GachaCraftNodeGroupExcelDto struct {
	fbsutils.FlatBuffer
	ProbWeight   int64 `json:"prob_weight"`
	GachaGroupId int64 `json:"gacha_group_id"`
	NodeId       int64 `json:"node_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GachaCraftNodeGroupExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	GachaCraftNodeGroupExcelStart(b)
	GachaCraftNodeGroupExcelAddProbWeight(b, fbsutils.Convert(t.ProbWeight, t.FlatBuffer.TableKey))
	GachaCraftNodeGroupExcelAddGachaGroupId(b, fbsutils.Convert(t.GachaGroupId, t.FlatBuffer.TableKey))
	GachaCraftNodeGroupExcelAddNodeId(b, fbsutils.Convert(t.NodeId, t.FlatBuffer.TableKey))
	return GachaCraftNodeGroupExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GachaCraftNodeGroupExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GachaCraftNodeGroupExcelDto) UnmarshalMessage(e *GachaCraftNodeGroupExcel) error {
	t.ProbWeight = fbsutils.Convert(e.ProbWeight(), t.FlatBuffer.TableKey)
	t.GachaGroupId = fbsutils.Convert(e.GachaGroupId(), t.FlatBuffer.TableKey)
	t.NodeId = fbsutils.Convert(e.NodeId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GachaCraftNodeGroupExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGachaCraftNodeGroupExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GachaCraftNodeGroupExcelDto) FlatDataName() string {
	return "GachaCraftNodeGroupExcel"
}
