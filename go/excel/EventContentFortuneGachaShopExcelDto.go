// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentFortuneGachaShopExcelDto represents a FlatBuffers table
type EventContentFortuneGachaShopExcelDto struct {
	fbsutils.FlatBuffer
	RewardParcelAmount  []int64      `json:"reward_parcel_amount"`
	RewardParcelId      []int64      `json:"reward_parcel_id"`
	RewardParcelType    []ParcelType `json:"reward_parcel_type"`
	ProbModifyLimit     int32        `json:"prob_modify_limit"`
	ProbModifyValue     int32        `json:"prob_modify_value"`
	Prob                int32        `json:"prob"`
	FortuneGachaGroupId int32        `json:"fortune_gacha_group_id"`
	IsLegacy            bool         `json:"is_legacy"`
	CostGoodsId         int64        `json:"cost_goods_id"`
	Grade               int32        `json:"grade"`
	Id                  int64        `json:"id"`
	EventContentId      int64        `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentFortuneGachaShopExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentFortuneGachaShopExcelStart(b)
	EventContentFortuneGachaShopExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentFortuneGachaShopExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	EventContentFortuneGachaShopExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentFortuneGachaShopExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	EventContentFortuneGachaShopExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentFortuneGachaShopExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentFortuneGachaShopExcelAddProbModifyLimit(b, fbsutils.Convert(t.ProbModifyLimit, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddProbModifyValue(b, fbsutils.Convert(t.ProbModifyValue, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddFortuneGachaGroupId(b, fbsutils.Convert(t.FortuneGachaGroupId, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddIsLegacy(b, t.IsLegacy)
	EventContentFortuneGachaShopExcelAddCostGoodsId(b, fbsutils.Convert(t.CostGoodsId, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddGrade(b, fbsutils.Convert(t.Grade, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EventContentFortuneGachaShopExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return EventContentFortuneGachaShopExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentFortuneGachaShopExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentFortuneGachaShopExcelDto) UnmarshalMessage(e *EventContentFortuneGachaShopExcel) error {
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.ProbModifyLimit = fbsutils.Convert(e.ProbModifyLimit(), t.FlatBuffer.TableKey)
	t.ProbModifyValue = fbsutils.Convert(e.ProbModifyValue(), t.FlatBuffer.TableKey)
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	t.FortuneGachaGroupId = fbsutils.Convert(e.FortuneGachaGroupId(), t.FlatBuffer.TableKey)
	t.IsLegacy = e.IsLegacy()
	t.CostGoodsId = fbsutils.Convert(e.CostGoodsId(), t.FlatBuffer.TableKey)
	t.Grade = fbsutils.Convert(e.Grade(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentFortuneGachaShopExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentFortuneGachaShopExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentFortuneGachaShopExcelDto) FlatDataName() string {
	return "EventContentFortuneGachaShopExcel"
}
