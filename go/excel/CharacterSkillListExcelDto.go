// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterSkillListExcelDto represents a FlatBuffers table
type CharacterSkillListExcelDto struct {
	fbsutils.FlatBuffer
	CharacterSkillListGroupId    int64    `json:"character_skill_list_group_id"`
	MinimumGradeCharacterWeapon  int32    `json:"minimum_grade_character_weapon"`
	MinimumTierCharacterGear     int32    `json:"minimum_tier_character_gear"`
	FormIndex                    int32    `json:"form_index"`
	IsRootMotion                 bool     `json:"is_root_motion"`
	IsMoveLeftRight              bool     `json:"is_move_left_right"`
	UseRandomExSkillTimeline     bool     `json:"use_random_ex_skill_timeline"`
	TsaInteractionId             int64    `json:"tsa_interaction_id"`
	NormalSkillGroupId           []string `json:"normal_skill_group_id"`
	NormalSkillTimeLineIndex     []int32  `json:"normal_skill_time_line_index"`
	SelectExSkillActionSkillSlot int32    `json:"select_ex_skill_action_skill_slot"`
	ExSkillGroupId               []string `json:"ex_skill_group_id"`
	ExSkillCutInTimeLineIndex    []string `json:"ex_skill_cut_in_time_line_index"`
	ExSkillLevelTimeLineIndex    []string `json:"ex_skill_level_time_line_index"`
	PublicSkillGroupId           []string `json:"public_skill_group_id"`
	PublicSkillTimeLineIndex     []int32  `json:"public_skill_time_line_index"`
	PassiveSkillGroupId          []string `json:"passive_skill_group_id"`
	LeaderSkillGroupId           []string `json:"leader_skill_group_id"`
	ExtraPassiveSkillGroupId     []string `json:"extra_passive_skill_group_id"`
	HiddenPassiveSkillGroupId    []string `json:"hidden_passive_skill_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterSkillListExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	var __offset_normal_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_normal_skill_group_id := make([]flatbuffers.UOffsetT, len(t.NormalSkillGroupId))
	for i := range len(t.NormalSkillGroupId) {
		__stringOffsets_normal_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.NormalSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartNormalSkillGroupIdVector(b, len(t.NormalSkillGroupId))
	for i := range len(t.NormalSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_normal_skill_group_id[len(t.NormalSkillGroupId)-i-1])
	}
	__offset_normal_skill_group_id = b.EndVector(len(t.NormalSkillGroupId))
	var __offset_ex_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_ex_skill_group_id := make([]flatbuffers.UOffsetT, len(t.ExSkillGroupId))
	for i := range len(t.ExSkillGroupId) {
		__stringOffsets_ex_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.ExSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartExSkillGroupIdVector(b, len(t.ExSkillGroupId))
	for i := range len(t.ExSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_ex_skill_group_id[len(t.ExSkillGroupId)-i-1])
	}
	__offset_ex_skill_group_id = b.EndVector(len(t.ExSkillGroupId))
	var __offset_ex_skill_cut_in_time_line_index flatbuffers.UOffsetT
	__stringOffsets_ex_skill_cut_in_time_line_index := make([]flatbuffers.UOffsetT, len(t.ExSkillCutInTimeLineIndex))
	for i := range len(t.ExSkillCutInTimeLineIndex) {
		__stringOffsets_ex_skill_cut_in_time_line_index[i] = b.CreateString(fbsutils.Convert(t.ExSkillCutInTimeLineIndex[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartExSkillCutInTimeLineIndexVector(b, len(t.ExSkillCutInTimeLineIndex))
	for i := range len(t.ExSkillCutInTimeLineIndex) {
		b.PrependUOffsetT(__stringOffsets_ex_skill_cut_in_time_line_index[len(t.ExSkillCutInTimeLineIndex)-i-1])
	}
	__offset_ex_skill_cut_in_time_line_index = b.EndVector(len(t.ExSkillCutInTimeLineIndex))
	var __offset_ex_skill_level_time_line_index flatbuffers.UOffsetT
	__stringOffsets_ex_skill_level_time_line_index := make([]flatbuffers.UOffsetT, len(t.ExSkillLevelTimeLineIndex))
	for i := range len(t.ExSkillLevelTimeLineIndex) {
		__stringOffsets_ex_skill_level_time_line_index[i] = b.CreateString(fbsutils.Convert(t.ExSkillLevelTimeLineIndex[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartExSkillLevelTimeLineIndexVector(b, len(t.ExSkillLevelTimeLineIndex))
	for i := range len(t.ExSkillLevelTimeLineIndex) {
		b.PrependUOffsetT(__stringOffsets_ex_skill_level_time_line_index[len(t.ExSkillLevelTimeLineIndex)-i-1])
	}
	__offset_ex_skill_level_time_line_index = b.EndVector(len(t.ExSkillLevelTimeLineIndex))
	var __offset_public_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_public_skill_group_id := make([]flatbuffers.UOffsetT, len(t.PublicSkillGroupId))
	for i := range len(t.PublicSkillGroupId) {
		__stringOffsets_public_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.PublicSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartPublicSkillGroupIdVector(b, len(t.PublicSkillGroupId))
	for i := range len(t.PublicSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_public_skill_group_id[len(t.PublicSkillGroupId)-i-1])
	}
	__offset_public_skill_group_id = b.EndVector(len(t.PublicSkillGroupId))
	var __offset_passive_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_passive_skill_group_id := make([]flatbuffers.UOffsetT, len(t.PassiveSkillGroupId))
	for i := range len(t.PassiveSkillGroupId) {
		__stringOffsets_passive_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.PassiveSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartPassiveSkillGroupIdVector(b, len(t.PassiveSkillGroupId))
	for i := range len(t.PassiveSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_passive_skill_group_id[len(t.PassiveSkillGroupId)-i-1])
	}
	__offset_passive_skill_group_id = b.EndVector(len(t.PassiveSkillGroupId))
	var __offset_leader_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_leader_skill_group_id := make([]flatbuffers.UOffsetT, len(t.LeaderSkillGroupId))
	for i := range len(t.LeaderSkillGroupId) {
		__stringOffsets_leader_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.LeaderSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartLeaderSkillGroupIdVector(b, len(t.LeaderSkillGroupId))
	for i := range len(t.LeaderSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_leader_skill_group_id[len(t.LeaderSkillGroupId)-i-1])
	}
	__offset_leader_skill_group_id = b.EndVector(len(t.LeaderSkillGroupId))
	var __offset_extra_passive_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_extra_passive_skill_group_id := make([]flatbuffers.UOffsetT, len(t.ExtraPassiveSkillGroupId))
	for i := range len(t.ExtraPassiveSkillGroupId) {
		__stringOffsets_extra_passive_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.ExtraPassiveSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartExtraPassiveSkillGroupIdVector(b, len(t.ExtraPassiveSkillGroupId))
	for i := range len(t.ExtraPassiveSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_extra_passive_skill_group_id[len(t.ExtraPassiveSkillGroupId)-i-1])
	}
	__offset_extra_passive_skill_group_id = b.EndVector(len(t.ExtraPassiveSkillGroupId))
	var __offset_hidden_passive_skill_group_id flatbuffers.UOffsetT
	__stringOffsets_hidden_passive_skill_group_id := make([]flatbuffers.UOffsetT, len(t.HiddenPassiveSkillGroupId))
	for i := range len(t.HiddenPassiveSkillGroupId) {
		__stringOffsets_hidden_passive_skill_group_id[i] = b.CreateString(fbsutils.Convert(t.HiddenPassiveSkillGroupId[i], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelStartHiddenPassiveSkillGroupIdVector(b, len(t.HiddenPassiveSkillGroupId))
	for i := range len(t.HiddenPassiveSkillGroupId) {
		b.PrependUOffsetT(__stringOffsets_hidden_passive_skill_group_id[len(t.HiddenPassiveSkillGroupId)-i-1])
	}
	__offset_hidden_passive_skill_group_id = b.EndVector(len(t.HiddenPassiveSkillGroupId))
	CharacterSkillListExcelStart(b)
	CharacterSkillListExcelAddCharacterSkillListGroupId(b, fbsutils.Convert(t.CharacterSkillListGroupId, t.FlatBuffer.TableKey))
	CharacterSkillListExcelAddMinimumGradeCharacterWeapon(b, fbsutils.Convert(t.MinimumGradeCharacterWeapon, t.FlatBuffer.TableKey))
	CharacterSkillListExcelAddMinimumTierCharacterGear(b, fbsutils.Convert(t.MinimumTierCharacterGear, t.FlatBuffer.TableKey))
	CharacterSkillListExcelAddFormIndex(b, fbsutils.Convert(t.FormIndex, t.FlatBuffer.TableKey))
	CharacterSkillListExcelAddIsRootMotion(b, t.IsRootMotion)
	CharacterSkillListExcelAddIsMoveLeftRight(b, t.IsMoveLeftRight)
	CharacterSkillListExcelAddUseRandomExSkillTimeline(b, t.UseRandomExSkillTimeline)
	CharacterSkillListExcelAddTsaInteractionId(b, fbsutils.Convert(t.TsaInteractionId, t.FlatBuffer.TableKey))
	CharacterSkillListExcelAddNormalSkillGroupId(b, __offset_normal_skill_group_id)
	CharacterSkillListExcelStartNormalSkillTimeLineIndexVector(b, len(t.NormalSkillTimeLineIndex))
	for i := range len(t.NormalSkillTimeLineIndex) {
		b.PrependInt32(fbsutils.Convert(t.NormalSkillTimeLineIndex[len(t.NormalSkillTimeLineIndex)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelAddNormalSkillTimeLineIndex(b, b.EndVector(len(t.NormalSkillTimeLineIndex)))
	CharacterSkillListExcelAddSelectExSkillActionSkillSlot(b, fbsutils.Convert(t.SelectExSkillActionSkillSlot, t.FlatBuffer.TableKey))
	CharacterSkillListExcelAddExSkillGroupId(b, __offset_ex_skill_group_id)
	CharacterSkillListExcelAddExSkillCutInTimeLineIndex(b, __offset_ex_skill_cut_in_time_line_index)
	CharacterSkillListExcelAddExSkillLevelTimeLineIndex(b, __offset_ex_skill_level_time_line_index)
	CharacterSkillListExcelAddPublicSkillGroupId(b, __offset_public_skill_group_id)
	CharacterSkillListExcelStartPublicSkillTimeLineIndexVector(b, len(t.PublicSkillTimeLineIndex))
	for i := range len(t.PublicSkillTimeLineIndex) {
		b.PrependInt32(fbsutils.Convert(t.PublicSkillTimeLineIndex[len(t.PublicSkillTimeLineIndex)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterSkillListExcelAddPublicSkillTimeLineIndex(b, b.EndVector(len(t.PublicSkillTimeLineIndex)))
	CharacterSkillListExcelAddPassiveSkillGroupId(b, __offset_passive_skill_group_id)
	CharacterSkillListExcelAddLeaderSkillGroupId(b, __offset_leader_skill_group_id)
	CharacterSkillListExcelAddExtraPassiveSkillGroupId(b, __offset_extra_passive_skill_group_id)
	CharacterSkillListExcelAddHiddenPassiveSkillGroupId(b, __offset_hidden_passive_skill_group_id)
	return CharacterSkillListExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterSkillListExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterSkillListExcelDto) UnmarshalMessage(e *CharacterSkillListExcel) error {
	t.CharacterSkillListGroupId = fbsutils.Convert(e.CharacterSkillListGroupId(), t.FlatBuffer.TableKey)
	t.MinimumGradeCharacterWeapon = fbsutils.Convert(e.MinimumGradeCharacterWeapon(), t.FlatBuffer.TableKey)
	t.MinimumTierCharacterGear = fbsutils.Convert(e.MinimumTierCharacterGear(), t.FlatBuffer.TableKey)
	t.FormIndex = fbsutils.Convert(e.FormIndex(), t.FlatBuffer.TableKey)
	t.IsRootMotion = e.IsRootMotion()
	t.IsMoveLeftRight = e.IsMoveLeftRight()
	t.UseRandomExSkillTimeline = e.UseRandomExSkillTimeline()
	t.TsaInteractionId = fbsutils.Convert(e.TsaInteractionId(), t.FlatBuffer.TableKey)
	t.NormalSkillGroupId = make([]string, e.NormalSkillGroupIdLength())
	for i := range e.NormalSkillGroupIdLength() {
		t.NormalSkillGroupId[i] = fbsutils.Convert(string(e.NormalSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	t.NormalSkillTimeLineIndex = make([]int32, e.NormalSkillTimeLineIndexLength())
	for i := range e.NormalSkillTimeLineIndexLength() {
		t.NormalSkillTimeLineIndex[i] = fbsutils.Convert(e.NormalSkillTimeLineIndex(i), t.FlatBuffer.TableKey)
	}
	t.SelectExSkillActionSkillSlot = fbsutils.Convert(e.SelectExSkillActionSkillSlot(), t.FlatBuffer.TableKey)
	t.ExSkillGroupId = make([]string, e.ExSkillGroupIdLength())
	for i := range e.ExSkillGroupIdLength() {
		t.ExSkillGroupId[i] = fbsutils.Convert(string(e.ExSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	t.ExSkillCutInTimeLineIndex = make([]string, e.ExSkillCutInTimeLineIndexLength())
	for i := range e.ExSkillCutInTimeLineIndexLength() {
		t.ExSkillCutInTimeLineIndex[i] = fbsutils.Convert(string(e.ExSkillCutInTimeLineIndex(i)), t.FlatBuffer.TableKey)
	}
	t.ExSkillLevelTimeLineIndex = make([]string, e.ExSkillLevelTimeLineIndexLength())
	for i := range e.ExSkillLevelTimeLineIndexLength() {
		t.ExSkillLevelTimeLineIndex[i] = fbsutils.Convert(string(e.ExSkillLevelTimeLineIndex(i)), t.FlatBuffer.TableKey)
	}
	t.PublicSkillGroupId = make([]string, e.PublicSkillGroupIdLength())
	for i := range e.PublicSkillGroupIdLength() {
		t.PublicSkillGroupId[i] = fbsutils.Convert(string(e.PublicSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	t.PublicSkillTimeLineIndex = make([]int32, e.PublicSkillTimeLineIndexLength())
	for i := range e.PublicSkillTimeLineIndexLength() {
		t.PublicSkillTimeLineIndex[i] = fbsutils.Convert(e.PublicSkillTimeLineIndex(i), t.FlatBuffer.TableKey)
	}
	t.PassiveSkillGroupId = make([]string, e.PassiveSkillGroupIdLength())
	for i := range e.PassiveSkillGroupIdLength() {
		t.PassiveSkillGroupId[i] = fbsutils.Convert(string(e.PassiveSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	t.LeaderSkillGroupId = make([]string, e.LeaderSkillGroupIdLength())
	for i := range e.LeaderSkillGroupIdLength() {
		t.LeaderSkillGroupId[i] = fbsutils.Convert(string(e.LeaderSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	t.ExtraPassiveSkillGroupId = make([]string, e.ExtraPassiveSkillGroupIdLength())
	for i := range e.ExtraPassiveSkillGroupIdLength() {
		t.ExtraPassiveSkillGroupId[i] = fbsutils.Convert(string(e.ExtraPassiveSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	t.HiddenPassiveSkillGroupId = make([]string, e.HiddenPassiveSkillGroupIdLength())
	for i := range e.HiddenPassiveSkillGroupIdLength() {
		t.HiddenPassiveSkillGroupId[i] = fbsutils.Convert(string(e.HiddenPassiveSkillGroupId(i)), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterSkillListExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterSkillListExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterSkillListExcelDto) FlatDataName() string {
	return "CharacterSkillListExcel"
}
