// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RaidStageRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsRaidStageRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *RaidStageRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RaidStageRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRaidStageRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *RaidStageRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RaidStageRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RaidStageRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RaidStageRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RaidStageRewardExcel) ClearStageRewardAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidStageRewardExcel) MutateClearStageRewardAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RaidStageRewardExcel) ClearStageRewardParcelUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidStageRewardExcel) MutateClearStageRewardParcelUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *RaidStageRewardExcel) ClearStageRewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RaidStageRewardExcel) MutateClearStageRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *RaidStageRewardExcel) ClearStageRewardProb() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidStageRewardExcel) MutateClearStageRewardProb(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *RaidStageRewardExcel) IsClearStageRewardHideInfo() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RaidStageRewardExcel) MutateIsClearStageRewardHideInfo(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *RaidStageRewardExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidStageRewardExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func RaidStageRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func RaidStageRewardExcelAddClearStageRewardAmount(builder *flatbuffers.Builder, clearStageRewardAmount int64) {
	builder.PrependInt64Slot(0, clearStageRewardAmount, 0)
}
func RaidStageRewardExcelAddClearStageRewardParcelUniqueId(builder *flatbuffers.Builder, clearStageRewardParcelUniqueId int64) {
	builder.PrependInt64Slot(1, clearStageRewardParcelUniqueId, 0)
}
func RaidStageRewardExcelAddClearStageRewardParcelType(builder *flatbuffers.Builder, clearStageRewardParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(clearStageRewardParcelType), 0)
}
func RaidStageRewardExcelAddClearStageRewardProb(builder *flatbuffers.Builder, clearStageRewardProb int64) {
	builder.PrependInt64Slot(3, clearStageRewardProb, 0)
}
func RaidStageRewardExcelAddIsClearStageRewardHideInfo(builder *flatbuffers.Builder, isClearStageRewardHideInfo bool) {
	builder.PrependBoolSlot(4, isClearStageRewardHideInfo, false)
}
func RaidStageRewardExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(5, groupId, 0)
}
func RaidStageRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
