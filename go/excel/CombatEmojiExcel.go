// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CombatEmojiExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCombatEmojiExcel(buf []byte, offset flatbuffers.UOffsetT) *CombatEmojiExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CombatEmojiExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCombatEmojiExcel(buf []byte, offset flatbuffers.UOffsetT) *CombatEmojiExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CombatEmojiExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CombatEmojiExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CombatEmojiExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CombatEmojiExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CombatEmojiExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CombatEmojiExcel) EmojiEvent() EmojiEvent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EmojiEvent(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CombatEmojiExcel) MutateEmojiEvent(n EmojiEvent) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *CombatEmojiExcel) OrderOfPriority() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CombatEmojiExcel) MutateOrderOfPriority(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *CombatEmojiExcel) EmojiDuration() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CombatEmojiExcel) MutateEmojiDuration(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *CombatEmojiExcel) EmojiReversal() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CombatEmojiExcel) MutateEmojiReversal(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *CombatEmojiExcel) EmojiTurnOn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CombatEmojiExcel) MutateEmojiTurnOn(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *CombatEmojiExcel) ShowEmojiDelay() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CombatEmojiExcel) MutateShowEmojiDelay(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *CombatEmojiExcel) ShowDefaultBg() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CombatEmojiExcel) MutateShowDefaultBg(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func CombatEmojiExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func CombatEmojiExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(0, uniqueId, 0)
}
func CombatEmojiExcelAddEmojiEvent(builder *flatbuffers.Builder, emojiEvent EmojiEvent) {
	builder.PrependInt32Slot(1, int32(emojiEvent), 0)
}
func CombatEmojiExcelAddOrderOfPriority(builder *flatbuffers.Builder, orderOfPriority int32) {
	builder.PrependInt32Slot(2, orderOfPriority, 0)
}
func CombatEmojiExcelAddEmojiDuration(builder *flatbuffers.Builder, emojiDuration bool) {
	builder.PrependBoolSlot(3, emojiDuration, false)
}
func CombatEmojiExcelAddEmojiReversal(builder *flatbuffers.Builder, emojiReversal bool) {
	builder.PrependBoolSlot(4, emojiReversal, false)
}
func CombatEmojiExcelAddEmojiTurnOn(builder *flatbuffers.Builder, emojiTurnOn bool) {
	builder.PrependBoolSlot(5, emojiTurnOn, false)
}
func CombatEmojiExcelAddShowEmojiDelay(builder *flatbuffers.Builder, showEmojiDelay int32) {
	builder.PrependInt32Slot(6, showEmojiDelay, 0)
}
func CombatEmojiExcelAddShowDefaultBg(builder *flatbuffers.Builder, showDefaultBg bool) {
	builder.PrependBoolSlot(7, showDefaultBg, false)
}
func CombatEmojiExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
