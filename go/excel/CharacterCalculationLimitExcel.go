// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterCalculationLimitExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterCalculationLimitExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterCalculationLimitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterCalculationLimitExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterCalculationLimitExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterCalculationLimitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterCalculationLimitExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterCalculationLimitExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterCalculationLimitExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterCalculationLimitExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterCalculationLimitExcel) TacticEntityType() TacticEntityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return TacticEntityType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateTacticEntityType(n TacticEntityType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *CharacterCalculationLimitExcel) CalculationValue() BattleCalculationStat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return BattleCalculationStat(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateCalculationValue(n BattleCalculationStat) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *CharacterCalculationLimitExcel) MinValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateMinValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CharacterCalculationLimitExcel) MaxValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateMaxValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterCalculationLimitExcel) LimitStartValue(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) LimitStartValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateLimitStartValue(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CharacterCalculationLimitExcel) DecreaseRate(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) DecreaseRateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterCalculationLimitExcel) MutateDecreaseRate(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func CharacterCalculationLimitExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CharacterCalculationLimitExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CharacterCalculationLimitExcelAddTacticEntityType(builder *flatbuffers.Builder, tacticEntityType TacticEntityType) {
	builder.PrependInt32Slot(1, int32(tacticEntityType), 0)
}
func CharacterCalculationLimitExcelAddCalculationValue(builder *flatbuffers.Builder, calculationValue BattleCalculationStat) {
	builder.PrependInt32Slot(2, int32(calculationValue), 0)
}
func CharacterCalculationLimitExcelAddMinValue(builder *flatbuffers.Builder, minValue int64) {
	builder.PrependInt64Slot(3, minValue, 0)
}
func CharacterCalculationLimitExcelAddMaxValue(builder *flatbuffers.Builder, maxValue int64) {
	builder.PrependInt64Slot(4, maxValue, 0)
}
func CharacterCalculationLimitExcelAddLimitStartValue(builder *flatbuffers.Builder, limitStartValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(limitStartValue), 0)
}
func CharacterCalculationLimitExcelStartLimitStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterCalculationLimitExcelAddDecreaseRate(builder *flatbuffers.Builder, decreaseRate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(decreaseRate), 0)
}
func CharacterCalculationLimitExcelStartDecreaseRateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterCalculationLimitExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
