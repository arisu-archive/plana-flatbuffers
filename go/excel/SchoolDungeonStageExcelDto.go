// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// SchoolDungeonStageExcelDto represents a FlatBuffers table
type SchoolDungeonStageExcelDto struct {
	fbsutils.FlatBuffer
	BattleDuration              int64                `json:"battle_duration"`
	Difficulty                  int32                `json:"difficulty"`
	DungeonType                 SchoolDungeonType    `json:"dungeon_type"`
	EchelonExtensionType        EchelonExtensionType `json:"echelon_extension_type"`
	GroundId                    int32                `json:"ground_id"`
	PlayTimeLimitInSeconds      int64                `json:"play_time_limit_in_seconds"`
	PrevStageId                 int64                `json:"prev_stage_id"`
	RecommandLevel              int64                `json:"recommand_level"`
	StageEnterCostAmount        []int64              `json:"stage_enter_cost_amount"`
	StageEnterCostId            []int64              `json:"stage_enter_cost_id"`
	StageEnterCostMinimumAmount []int64              `json:"stage_enter_cost_minimum_amount"`
	StageEnterCostType          []ParcelType         `json:"stage_enter_cost_type"`
	StageId                     int64                `json:"stage_id"`
	StageRewardId               int64                `json:"stage_reward_id"`
	StageTopography             StageTopography      `json:"stage_topography"`
	StarGoalAmount              []int32              `json:"star_goal_amount"`
	StarGoal                    []StarGoalType       `json:"star_goal"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *SchoolDungeonStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	SchoolDungeonStageExcelStart(b)
	SchoolDungeonStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddDifficulty(b, fbsutils.Convert(t.Difficulty, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddDungeonType(b, fbsutils.Convert(t.DungeonType, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddPlayTimeLimitInSeconds(b, fbsutils.Convert(t.PlayTimeLimitInSeconds, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddPrevStageId(b, fbsutils.Convert(t.PrevStageId, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddRecommandLevel(b, fbsutils.Convert(t.RecommandLevel, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelStartStageEnterCostAmountVector(b, len(t.StageEnterCostAmount))
	for i := range len(t.StageEnterCostAmount) {
		b.PrependInt64(fbsutils.Convert(t.StageEnterCostAmount[len(t.StageEnterCostAmount)-i-1], t.FlatBuffer.TableKey))
	}
	SchoolDungeonStageExcelAddStageEnterCostAmount(b, b.EndVector(len(t.StageEnterCostAmount)))
	SchoolDungeonStageExcelStartStageEnterCostIdVector(b, len(t.StageEnterCostId))
	for i := range len(t.StageEnterCostId) {
		b.PrependInt64(fbsutils.Convert(t.StageEnterCostId[len(t.StageEnterCostId)-i-1], t.FlatBuffer.TableKey))
	}
	SchoolDungeonStageExcelAddStageEnterCostId(b, b.EndVector(len(t.StageEnterCostId)))
	SchoolDungeonStageExcelStartStageEnterCostMinimumAmountVector(b, len(t.StageEnterCostMinimumAmount))
	for i := range len(t.StageEnterCostMinimumAmount) {
		b.PrependInt64(fbsutils.Convert(t.StageEnterCostMinimumAmount[len(t.StageEnterCostMinimumAmount)-i-1], t.FlatBuffer.TableKey))
	}
	SchoolDungeonStageExcelAddStageEnterCostMinimumAmount(b, b.EndVector(len(t.StageEnterCostMinimumAmount)))
	SchoolDungeonStageExcelStartStageEnterCostTypeVector(b, len(t.StageEnterCostType))
	for i := range len(t.StageEnterCostType) {
		b.PrependInt32(fbsutils.Convert(int32(t.StageEnterCostType[len(t.StageEnterCostType)-i-1]), t.FlatBuffer.TableKey))
	}
	SchoolDungeonStageExcelAddStageEnterCostType(b, b.EndVector(len(t.StageEnterCostType)))
	SchoolDungeonStageExcelAddStageId(b, fbsutils.Convert(t.StageId, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddStageRewardId(b, fbsutils.Convert(t.StageRewardId, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	SchoolDungeonStageExcelStartStarGoalAmountVector(b, len(t.StarGoalAmount))
	for i := range len(t.StarGoalAmount) {
		b.PrependInt32(fbsutils.Convert(t.StarGoalAmount[len(t.StarGoalAmount)-i-1], t.FlatBuffer.TableKey))
	}
	SchoolDungeonStageExcelAddStarGoalAmount(b, b.EndVector(len(t.StarGoalAmount)))
	SchoolDungeonStageExcelStartStarGoalVector(b, len(t.StarGoal))
	for i := range len(t.StarGoal) {
		b.PrependInt32(fbsutils.Convert(int32(t.StarGoal[len(t.StarGoal)-i-1]), t.FlatBuffer.TableKey))
	}
	SchoolDungeonStageExcelAddStarGoal(b, b.EndVector(len(t.StarGoal)))
	return SchoolDungeonStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *SchoolDungeonStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *SchoolDungeonStageExcelDto) UnmarshalMessage(e *SchoolDungeonStageExcel) error {
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.Difficulty = fbsutils.Convert(e.Difficulty(), t.FlatBuffer.TableKey)
	t.DungeonType = SchoolDungeonType(fbsutils.Convert(int32(e.DungeonType()), t.FlatBuffer.TableKey))
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.PlayTimeLimitInSeconds = fbsutils.Convert(e.PlayTimeLimitInSeconds(), t.FlatBuffer.TableKey)
	t.PrevStageId = fbsutils.Convert(e.PrevStageId(), t.FlatBuffer.TableKey)
	t.RecommandLevel = fbsutils.Convert(e.RecommandLevel(), t.FlatBuffer.TableKey)
	t.StageEnterCostAmount = make([]int64, e.StageEnterCostAmountLength())
	for i := range e.StageEnterCostAmountLength() {
		t.StageEnterCostAmount[i] = fbsutils.Convert(e.StageEnterCostAmount(i), t.FlatBuffer.TableKey)
	}
	t.StageEnterCostId = make([]int64, e.StageEnterCostIdLength())
	for i := range e.StageEnterCostIdLength() {
		t.StageEnterCostId[i] = fbsutils.Convert(e.StageEnterCostId(i), t.FlatBuffer.TableKey)
	}
	t.StageEnterCostMinimumAmount = make([]int64, e.StageEnterCostMinimumAmountLength())
	for i := range e.StageEnterCostMinimumAmountLength() {
		t.StageEnterCostMinimumAmount[i] = fbsutils.Convert(e.StageEnterCostMinimumAmount(i), t.FlatBuffer.TableKey)
	}
	t.StageEnterCostType = make([]ParcelType, e.StageEnterCostTypeLength())
	for i := range e.StageEnterCostTypeLength() {
		t.StageEnterCostType[i] = ParcelType(fbsutils.Convert(int32(e.StageEnterCostType(i)), t.FlatBuffer.TableKey))
	}
	t.StageId = fbsutils.Convert(e.StageId(), t.FlatBuffer.TableKey)
	t.StageRewardId = fbsutils.Convert(e.StageRewardId(), t.FlatBuffer.TableKey)
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	t.StarGoalAmount = make([]int32, e.StarGoalAmountLength())
	for i := range e.StarGoalAmountLength() {
		t.StarGoalAmount[i] = fbsutils.Convert(e.StarGoalAmount(i), t.FlatBuffer.TableKey)
	}
	t.StarGoal = make([]StarGoalType, e.StarGoalLength())
	for i := range e.StarGoalLength() {
		t.StarGoal[i] = StarGoalType(fbsutils.Convert(int32(e.StarGoal(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *SchoolDungeonStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsSchoolDungeonStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (SchoolDungeonStageExcelDto) FlatDataName() string {
	return "SchoolDungeonStageExcel"
}
