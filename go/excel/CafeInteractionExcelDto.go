// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CafeInteractionExcelDto represents a FlatBuffers table
type CafeInteractionExcelDto struct {
	fbsutils.FlatBuffer
	BubbleDuration                []int64      `json:"bubble_duration"`
	BubbleType                    []BubbleType `json:"bubble_type"`
	CafeCharacterState            []string     `json:"cafe_character_state"`
	CharacterId                   int64        `json:"character_id"`
	FavorEmoticonRewardAmount     int64        `json:"favor_emoticon_reward_amount"`
	FavorEmoticonRewardId         int64        `json:"favor_emoticon_reward_id"`
	FavorEmoticonRewardParcelType ParcelType   `json:"favor_emoticon_reward_parcel_type"`
	IgnoreIfUnobtained            bool         `json:"ignore_if_unobtained"`
	IgnoreIfUnobtainedEndDate     string       `json:"ignore_if_unobtained_end_date"`
	IgnoreIfUnobtainedStartDate   string       `json:"ignore_if_unobtained_start_date"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CafeInteractionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CafeInteractionExcelStart(b)
	CafeInteractionExcelStartBubbleDurationVector(b, len(t.BubbleDuration))
	for i := range len(t.BubbleDuration) {
		b.PrependInt64(fbsutils.Convert(t.BubbleDuration[len(t.BubbleDuration)-i-1], t.FlatBuffer.TableKey))
	}
	CafeInteractionExcelAddBubbleDuration(b, b.EndVector(len(t.BubbleDuration)))
	CafeInteractionExcelStartBubbleTypeVector(b, len(t.BubbleType))
	for i := range len(t.BubbleType) {
		b.PrependInt32(fbsutils.Convert(int32(t.BubbleType[len(t.BubbleType)-i-1]), t.FlatBuffer.TableKey))
	}
	CafeInteractionExcelAddBubbleType(b, b.EndVector(len(t.BubbleType)))
	CafeInteractionExcelStartCafeCharacterStateVector(b, len(t.CafeCharacterState))
	for i := range len(t.CafeCharacterState) {
		b.PrependUOffsetT(b.CreateString(t.CafeCharacterState[len(t.CafeCharacterState)-i-1]))
	}
	CafeInteractionExcelAddCafeCharacterState(b, b.EndVector(len(t.CafeCharacterState)))
	CafeInteractionExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	CafeInteractionExcelAddFavorEmoticonRewardAmount(b, fbsutils.Convert(t.FavorEmoticonRewardAmount, t.FlatBuffer.TableKey))
	CafeInteractionExcelAddFavorEmoticonRewardId(b, fbsutils.Convert(t.FavorEmoticonRewardId, t.FlatBuffer.TableKey))
	CafeInteractionExcelAddFavorEmoticonRewardParcelType(b, fbsutils.Convert(t.FavorEmoticonRewardParcelType, t.FlatBuffer.TableKey))
	CafeInteractionExcelAddIgnoreIfUnobtained(b, t.IgnoreIfUnobtained)
	CafeInteractionExcelAddIgnoreIfUnobtainedEndDate(b, b.CreateString(fbsutils.Convert(t.IgnoreIfUnobtainedEndDate, t.FlatBuffer.TableKey)))
	CafeInteractionExcelAddIgnoreIfUnobtainedStartDate(b, b.CreateString(fbsutils.Convert(t.IgnoreIfUnobtainedStartDate, t.FlatBuffer.TableKey)))
	return CafeInteractionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CafeInteractionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CafeInteractionExcelDto) UnmarshalMessage(e *CafeInteractionExcel) error {
	t.BubbleDuration = make([]int64, e.BubbleDurationLength())
	for i := range e.BubbleDurationLength() {
		t.BubbleDuration[i] = fbsutils.Convert(e.BubbleDuration(i), t.FlatBuffer.TableKey)
	}
	t.BubbleType = make([]BubbleType, e.BubbleTypeLength())
	for i := range e.BubbleTypeLength() {
		t.BubbleType[i] = BubbleType(fbsutils.Convert(int32(e.BubbleType(i)), t.FlatBuffer.TableKey))
	}
	t.CafeCharacterState = make([]string, e.CafeCharacterStateLength())
	for i := range e.CafeCharacterStateLength() {
		t.CafeCharacterState[i] = fbsutils.Convert(string(e.CafeCharacterState(i)), t.FlatBuffer.TableKey)
	}
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.FavorEmoticonRewardAmount = fbsutils.Convert(e.FavorEmoticonRewardAmount(), t.FlatBuffer.TableKey)
	t.FavorEmoticonRewardId = fbsutils.Convert(e.FavorEmoticonRewardId(), t.FlatBuffer.TableKey)
	t.FavorEmoticonRewardParcelType = ParcelType(fbsutils.Convert(int32(e.FavorEmoticonRewardParcelType()), t.FlatBuffer.TableKey))
	t.IgnoreIfUnobtained = e.IgnoreIfUnobtained()
	t.IgnoreIfUnobtainedEndDate = fbsutils.Convert(string(e.IgnoreIfUnobtainedEndDate()), t.FlatBuffer.TableKey)
	t.IgnoreIfUnobtainedStartDate = fbsutils.Convert(string(e.IgnoreIfUnobtainedStartDate()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CafeInteractionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCafeInteractionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CafeInteractionExcelDto) FlatDataName() string {
	return "CafeInteractionExcel"
}
