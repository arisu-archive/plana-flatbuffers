// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AssistRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAssistRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *AssistRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AssistRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAssistRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *AssistRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AssistRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AssistRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AssistRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AssistRewardExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistRewardExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AssistRewardExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistRewardExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *AssistRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AssistRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *AssistRewardExcel) EchelonType() EchelonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EchelonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AssistRewardExcel) MutateEchelonType(n EchelonType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *AssistRewardExcel) RewardType() AssistRewardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return AssistRewardType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AssistRewardExcel) MutateRewardType(n AssistRewardType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func AssistRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AssistRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(0, rewardParcelAmount, 0)
}
func AssistRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(1, rewardParcelId, 0)
}
func AssistRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(rewardParcelType), 0)
}
func AssistRewardExcelAddEchelonType(builder *flatbuffers.Builder, echelonType EchelonType) {
	builder.PrependInt32Slot(3, int32(echelonType), 0)
}
func AssistRewardExcelAddRewardType(builder *flatbuffers.Builder, rewardType AssistRewardType) {
	builder.PrependInt32Slot(4, int32(rewardType), 0)
}
func AssistRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
