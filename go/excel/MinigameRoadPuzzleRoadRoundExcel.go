// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameRoadPuzzleRoadRoundExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameRoadPuzzleRoadRoundExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadPuzzleRoadRoundExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameRoadPuzzleRoadRoundExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameRoadPuzzleRoadRoundExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadPuzzleRoadRoundExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameRoadPuzzleRoadRoundExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) AdditionalRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) AdditionalRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateAdditionalRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) AdditionalRewardId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) AdditionalRewardIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateAdditionalRewardId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) RoundReward() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateRoundReward(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MapGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateMapGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) EndScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateEndScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) EnterScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateEnterScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) IsLoop() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateIsLoop(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) Round() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleRoadRoundExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func MinigameRoadPuzzleRoadRoundExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func MinigameRoadPuzzleRoadRoundExcelAddAdditionalRewardAmount(builder *flatbuffers.Builder, additionalRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(additionalRewardAmount), 0)
}
func MinigameRoadPuzzleRoadRoundExcelStartAdditionalRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MinigameRoadPuzzleRoadRoundExcelAddAdditionalRewardId(builder *flatbuffers.Builder, additionalRewardId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(additionalRewardId), 0)
}
func MinigameRoadPuzzleRoadRoundExcelStartAdditionalRewardIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameRoadPuzzleRoadRoundExcelAddRoundReward(builder *flatbuffers.Builder, roundReward int64) {
	builder.PrependInt64Slot(2, roundReward, 0)
}
func MinigameRoadPuzzleRoadRoundExcelAddMapGroupId(builder *flatbuffers.Builder, mapGroupId int64) {
	builder.PrependInt64Slot(3, mapGroupId, 0)
}
func MinigameRoadPuzzleRoadRoundExcelAddEndScenarioGroupId(builder *flatbuffers.Builder, endScenarioGroupId int64) {
	builder.PrependInt64Slot(4, endScenarioGroupId, 0)
}
func MinigameRoadPuzzleRoadRoundExcelAddEnterScenarioGroupId(builder *flatbuffers.Builder, enterScenarioGroupId int64) {
	builder.PrependInt64Slot(5, enterScenarioGroupId, 0)
}
func MinigameRoadPuzzleRoadRoundExcelAddIsLoop(builder *flatbuffers.Builder, isLoop bool) {
	builder.PrependBoolSlot(6, isLoop, false)
}
func MinigameRoadPuzzleRoadRoundExcelAddRound(builder *flatbuffers.Builder, round int32) {
	builder.PrependInt32Slot(7, round, 0)
}
func MinigameRoadPuzzleRoadRoundExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(8, uniqueId, 0)
}
func MinigameRoadPuzzleRoadRoundExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(9, eventContentId, 0)
}
func MinigameRoadPuzzleRoadRoundExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
