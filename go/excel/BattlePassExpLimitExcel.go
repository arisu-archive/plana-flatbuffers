// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BattlePassExpLimitExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBattlePassExpLimitExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassExpLimitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BattlePassExpLimitExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBattlePassExpLimitExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassExpLimitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BattlePassExpLimitExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BattlePassExpLimitExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BattlePassExpLimitExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BattlePassExpLimitExcel) BattlePassId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassExpLimitExcel) MutateBattlePassId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BattlePassExpLimitExcel) ExpLimitAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassExpLimitExcel) MutateExpLimitAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *BattlePassExpLimitExcel) LimitEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassExpLimitExcel) LimitStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func BattlePassExpLimitExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BattlePassExpLimitExcelAddBattlePassId(builder *flatbuffers.Builder, battlePassId int64) {
	builder.PrependInt64Slot(0, battlePassId, 0)
}
func BattlePassExpLimitExcelAddExpLimitAmount(builder *flatbuffers.Builder, expLimitAmount int64) {
	builder.PrependInt64Slot(1, expLimitAmount, 0)
}
func BattlePassExpLimitExcelAddLimitEndTime(builder *flatbuffers.Builder, limitEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(limitEndTime), 0)
}
func BattlePassExpLimitExcelAddLimitStartTime(builder *flatbuffers.Builder, limitStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(limitStartTime), 0)
}
func BattlePassExpLimitExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
