// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDreamDailyPointExcelDto represents a FlatBuffers table
type MiniGameDreamDailyPointExcelDto struct {
	fbsutils.FlatBuffer
	DailyPointCorrectionValue int64 `json:"daily_point_correction_value"`
	DailyPointCoefficient     int64 `json:"daily_point_coefficient"`
	TotalParameterMax         int64 `json:"total_parameter_max"`
	TotalParameterMin         int64 `json:"total_parameter_min"`
	EventContentId            int64 `json:"event_content_id"`
	UniqueId                  int64 `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDreamDailyPointExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDreamDailyPointExcelStart(b)
	MiniGameDreamDailyPointExcelAddDailyPointCorrectionValue(b, fbsutils.Convert(t.DailyPointCorrectionValue, t.FlatBuffer.TableKey))
	MiniGameDreamDailyPointExcelAddDailyPointCoefficient(b, fbsutils.Convert(t.DailyPointCoefficient, t.FlatBuffer.TableKey))
	MiniGameDreamDailyPointExcelAddTotalParameterMax(b, fbsutils.Convert(t.TotalParameterMax, t.FlatBuffer.TableKey))
	MiniGameDreamDailyPointExcelAddTotalParameterMin(b, fbsutils.Convert(t.TotalParameterMin, t.FlatBuffer.TableKey))
	MiniGameDreamDailyPointExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MiniGameDreamDailyPointExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return MiniGameDreamDailyPointExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDreamDailyPointExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamDailyPointExcelDto) UnmarshalMessage(e *MiniGameDreamDailyPointExcel) error {
	t.DailyPointCorrectionValue = fbsutils.Convert(e.DailyPointCorrectionValue(), t.FlatBuffer.TableKey)
	t.DailyPointCoefficient = fbsutils.Convert(e.DailyPointCoefficient(), t.FlatBuffer.TableKey)
	t.TotalParameterMax = fbsutils.Convert(e.TotalParameterMax(), t.FlatBuffer.TableKey)
	t.TotalParameterMin = fbsutils.Convert(e.TotalParameterMin(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamDailyPointExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDreamDailyPointExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDreamDailyPointExcelDto) FlatDataName() string {
	return "MiniGameDreamDailyPointExcel"
}
