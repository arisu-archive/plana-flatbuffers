// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BossExternalBTExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBossExternalBTExcel(buf []byte, offset flatbuffers.UOffsetT) *BossExternalBTExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BossExternalBTExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBossExternalBTExcel(buf []byte, offset flatbuffers.UOffsetT) *BossExternalBTExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BossExternalBTExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BossExternalBTExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BossExternalBTExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BossExternalBTExcel) BehaviorArgument() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BossExternalBTExcel) ExternalBehavior() ExternalBehavior {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ExternalBehavior(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BossExternalBTExcel) MutateExternalBehavior(n ExternalBehavior) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *BossExternalBTExcel) BehaviorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossExternalBTExcel) MutateBehaviorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *BossExternalBTExcel) TriggerArgument() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BossExternalBTExcel) ExternalBtTrigger() ExternalBTTrigger {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return ExternalBTTrigger(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BossExternalBTExcel) MutateExternalBtTrigger(n ExternalBTTrigger) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *BossExternalBTExcel) ExternalBtNodeType() ExternalBTNodeType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return ExternalBTNodeType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BossExternalBTExcel) MutateExternalBtNodeType(n ExternalBTNodeType) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *BossExternalBTExcel) AiPhase() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossExternalBTExcel) MutateAiPhase(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *BossExternalBTExcel) ExternalBtId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossExternalBTExcel) MutateExternalBtId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func BossExternalBTExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func BossExternalBTExcelAddBehaviorArgument(builder *flatbuffers.Builder, behaviorArgument flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(behaviorArgument), 0)
}
func BossExternalBTExcelAddExternalBehavior(builder *flatbuffers.Builder, externalBehavior ExternalBehavior) {
	builder.PrependInt32Slot(1, int32(externalBehavior), 0)
}
func BossExternalBTExcelAddBehaviorRate(builder *flatbuffers.Builder, behaviorRate int64) {
	builder.PrependInt64Slot(2, behaviorRate, 0)
}
func BossExternalBTExcelAddTriggerArgument(builder *flatbuffers.Builder, triggerArgument flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(triggerArgument), 0)
}
func BossExternalBTExcelAddExternalBtTrigger(builder *flatbuffers.Builder, externalBtTrigger ExternalBTTrigger) {
	builder.PrependInt32Slot(4, int32(externalBtTrigger), 0)
}
func BossExternalBTExcelAddExternalBtNodeType(builder *flatbuffers.Builder, externalBtNodeType ExternalBTNodeType) {
	builder.PrependInt32Slot(5, int32(externalBtNodeType), 0)
}
func BossExternalBTExcelAddAiPhase(builder *flatbuffers.Builder, aiPhase int64) {
	builder.PrependInt64Slot(6, aiPhase, 0)
}
func BossExternalBTExcelAddExternalBtId(builder *flatbuffers.Builder, externalBtId int64) {
	builder.PrependInt64Slot(7, externalBtId, 0)
}
func BossExternalBTExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
