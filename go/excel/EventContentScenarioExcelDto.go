// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentScenarioExcelDto represents a FlatBuffers table
type EventContentScenarioExcelDto struct {
	fbsutils.FlatBuffer
	ClearedScenarioGroupId                int64                             `json:"cleared_scenario_group_id"`
	ConditionAmount                       int64                             `json:"condition_amount"`
	ConditionEventContentId               int64                             `json:"condition_event_content_id"`
	EventContentId                        int64                             `json:"event_content_id"`
	Id                                    int64                             `json:"id"`
	IsMeetup                              bool                              `json:"is_meetup"`
	IsOmnibus                             bool                              `json:"is_omnibus"`
	IsRecollection                        bool                              `json:"is_recollection"`
	IsRecollectionHorizon                 bool                              `json:"is_recollection_horizon"`
	Order                                 int64                             `json:"order"`
	RecollectionNumber                    int64                             `json:"recollection_number"`
	RecollectionResource                  string                            `json:"recollection_resource"`
	RecollectionSummaryLocalizeScenarioId uint32                            `json:"recollection_summary_localize_scenario_id"`
	ReplayDisplayGroup                    int32                             `json:"replay_display_group"`
	RewardAmount                          []int32                           `json:"reward_amount"`
	RewardId                              []int64                           `json:"reward_id"`
	RewardParcelType                      []ParcelType                      `json:"reward_parcel_type"`
	ScenarioConditionType                 EventContentScenarioConditionType `json:"scenario_condition_type"`
	ScenarioGroupId                       []int64                           `json:"scenario_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentScenarioExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentScenarioExcelStart(b)
	EventContentScenarioExcelAddClearedScenarioGroupId(b, fbsutils.Convert(t.ClearedScenarioGroupId, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddConditionAmount(b, fbsutils.Convert(t.ConditionAmount, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddConditionEventContentId(b, fbsutils.Convert(t.ConditionEventContentId, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddIsMeetup(b, t.IsMeetup)
	EventContentScenarioExcelAddIsOmnibus(b, t.IsOmnibus)
	EventContentScenarioExcelAddIsRecollection(b, t.IsRecollection)
	EventContentScenarioExcelAddIsRecollectionHorizon(b, t.IsRecollectionHorizon)
	EventContentScenarioExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddRecollectionNumber(b, fbsutils.Convert(t.RecollectionNumber, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddRecollectionResource(b, b.CreateString(fbsutils.Convert(t.RecollectionResource, t.FlatBuffer.TableKey)))
	EventContentScenarioExcelAddRecollectionSummaryLocalizeScenarioId(b, fbsutils.Convert(t.RecollectionSummaryLocalizeScenarioId, t.FlatBuffer.TableKey))
	EventContentScenarioExcelAddReplayDisplayGroup(b, fbsutils.Convert(t.ReplayDisplayGroup, t.FlatBuffer.TableKey))
	EventContentScenarioExcelStartRewardAmountVector(b, len(t.RewardAmount))
	for i := range len(t.RewardAmount) {
		b.PrependInt32(fbsutils.Convert(t.RewardAmount[len(t.RewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentScenarioExcelAddRewardAmount(b, b.EndVector(len(t.RewardAmount)))
	EventContentScenarioExcelStartRewardIdVector(b, len(t.RewardId))
	for i := range len(t.RewardId) {
		b.PrependInt64(fbsutils.Convert(t.RewardId[len(t.RewardId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentScenarioExcelAddRewardId(b, b.EndVector(len(t.RewardId)))
	EventContentScenarioExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentScenarioExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentScenarioExcelAddScenarioConditionType(b, fbsutils.Convert(t.ScenarioConditionType, t.FlatBuffer.TableKey))
	EventContentScenarioExcelStartScenarioGroupIdVector(b, len(t.ScenarioGroupId))
	for i := range len(t.ScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.ScenarioGroupId[len(t.ScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentScenarioExcelAddScenarioGroupId(b, b.EndVector(len(t.ScenarioGroupId)))
	return EventContentScenarioExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentScenarioExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentScenarioExcelDto) UnmarshalMessage(e *EventContentScenarioExcel) error {
	t.ClearedScenarioGroupId = fbsutils.Convert(e.ClearedScenarioGroupId(), t.FlatBuffer.TableKey)
	t.ConditionAmount = fbsutils.Convert(e.ConditionAmount(), t.FlatBuffer.TableKey)
	t.ConditionEventContentId = fbsutils.Convert(e.ConditionEventContentId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.IsMeetup = e.IsMeetup()
	t.IsOmnibus = e.IsOmnibus()
	t.IsRecollection = e.IsRecollection()
	t.IsRecollectionHorizon = e.IsRecollectionHorizon()
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.RecollectionNumber = fbsutils.Convert(e.RecollectionNumber(), t.FlatBuffer.TableKey)
	t.RecollectionResource = fbsutils.Convert(string(e.RecollectionResource()), t.FlatBuffer.TableKey)
	t.RecollectionSummaryLocalizeScenarioId = fbsutils.Convert(e.RecollectionSummaryLocalizeScenarioId(), t.FlatBuffer.TableKey)
	t.ReplayDisplayGroup = fbsutils.Convert(e.ReplayDisplayGroup(), t.FlatBuffer.TableKey)
	t.RewardAmount = make([]int32, e.RewardAmountLength())
	for i := range e.RewardAmountLength() {
		t.RewardAmount[i] = fbsutils.Convert(e.RewardAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardId = make([]int64, e.RewardIdLength())
	for i := range e.RewardIdLength() {
		t.RewardId[i] = fbsutils.Convert(e.RewardId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.ScenarioConditionType = EventContentScenarioConditionType(fbsutils.Convert(int32(e.ScenarioConditionType()), t.FlatBuffer.TableKey))
	t.ScenarioGroupId = make([]int64, e.ScenarioGroupIdLength())
	for i := range e.ScenarioGroupIdLength() {
		t.ScenarioGroupId[i] = fbsutils.Convert(e.ScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentScenarioExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentScenarioExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentScenarioExcelDto) FlatDataName() string {
	return "EventContentScenarioExcel"
}
