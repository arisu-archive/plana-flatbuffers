// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentCardExcelDto represents a FlatBuffers table
type EventContentCardExcelDto struct {
	fbsutils.FlatBuffer
	CardGroupId      int32        `json:"card_group_id"`
	EventContentId   int64        `json:"event_content_id"`
	LocalizeEtcId    uint32       `json:"localize_etc_id"`
	IconPath         string       `json:"icon_path"`
	BackIconPath     string       `json:"back_icon_path"`
	RewardParcelType []ParcelType `json:"reward_parcel_type"`
	RewardParcelId   []int64      `json:"reward_parcel_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentCardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentCardExcelStart(b)
	EventContentCardExcelAddCardGroupId(b, fbsutils.Convert(t.CardGroupId, t.FlatBuffer.TableKey))
	EventContentCardExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentCardExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	EventContentCardExcelAddIconPath(b, b.CreateString(fbsutils.Convert(t.IconPath, t.FlatBuffer.TableKey)))
	EventContentCardExcelAddBackIconPath(b, b.CreateString(fbsutils.Convert(t.BackIconPath, t.FlatBuffer.TableKey)))
	EventContentCardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentCardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentCardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentCardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	return EventContentCardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentCardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCardExcelDto) UnmarshalMessage(e *EventContentCardExcel) error {
	t.CardGroupId = fbsutils.Convert(e.CardGroupId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.IconPath = fbsutils.Convert(string(e.IconPath()), t.FlatBuffer.TableKey)
	t.BackIconPath = fbsutils.Convert(string(e.BackIconPath()), t.FlatBuffer.TableKey)
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentCardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentCardExcelDto) FlatDataName() string {
	return "EventContentCardExcel"
}
