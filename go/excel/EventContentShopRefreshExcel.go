// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentShopRefreshExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentShopRefreshExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentShopRefreshExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentShopRefreshExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentShopRefreshExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentShopRefreshExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentShopRefreshExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentShopRefreshExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentShopRefreshExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentShopRefreshExcel) BuyReportEventName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentShopRefreshExcel) CategoryType() ShopCategoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ShopCategoryType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateCategoryType(n ShopCategoryType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentShopRefreshExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentShopRefreshExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EventContentShopRefreshExcel) GoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentShopRefreshExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EventContentShopRefreshExcel) IsLegacy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentShopRefreshExcel) MutateIsLegacy(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *EventContentShopRefreshExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *EventContentShopRefreshExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *EventContentShopRefreshExcel) RefreshGroup() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopRefreshExcel) MutateRefreshGroup(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func EventContentShopRefreshExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func EventContentShopRefreshExcelAddBuyReportEventName(builder *flatbuffers.Builder, buyReportEventName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(buyReportEventName), 0)
}
func EventContentShopRefreshExcelAddCategoryType(builder *flatbuffers.Builder, categoryType ShopCategoryType) {
	builder.PrependInt32Slot(1, int32(categoryType), 0)
}
func EventContentShopRefreshExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(2, displayOrder, 0)
}
func EventContentShopRefreshExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func EventContentShopRefreshExcelAddGoodsId(builder *flatbuffers.Builder, goodsId int64) {
	builder.PrependInt64Slot(4, goodsId, 0)
}
func EventContentShopRefreshExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(5, id, 0)
}
func EventContentShopRefreshExcelAddIsLegacy(builder *flatbuffers.Builder, isLegacy bool) {
	builder.PrependBoolSlot(6, isLegacy, false)
}
func EventContentShopRefreshExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(7, localizeEtcId, 0)
}
func EventContentShopRefreshExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(8, prob, 0)
}
func EventContentShopRefreshExcelAddRefreshGroup(builder *flatbuffers.Builder, refreshGroup int32) {
	builder.PrependInt32Slot(9, refreshGroup, 0)
}
func EventContentShopRefreshExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
