// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AudioAnimatorExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAudioAnimatorExcel(buf []byte, offset flatbuffers.UOffsetT) *AudioAnimatorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AudioAnimatorExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishAudioAnimatorExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAudioAnimatorExcel(buf []byte, offset flatbuffers.UOffsetT) *AudioAnimatorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AudioAnimatorExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAudioAnimatorExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AudioAnimatorExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AudioAnimatorExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AudioAnimatorExcel) ControllerNameHash() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) MutateControllerNameHash(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *AudioAnimatorExcel) VoiceNamePrefix() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AudioAnimatorExcel) StateNameHash() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) MutateStateNameHash(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *AudioAnimatorExcel) StateName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AudioAnimatorExcel) IgnoreInterruptDelay() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *AudioAnimatorExcel) MutateIgnoreInterruptDelay(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *AudioAnimatorExcel) IgnoreInterruptPlay() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *AudioAnimatorExcel) MutateIgnoreInterruptPlay(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *AudioAnimatorExcel) IgnoreVelocity() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *AudioAnimatorExcel) MutateIgnoreVelocity(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *AudioAnimatorExcel) Volume() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AudioAnimatorExcel) MutateVolume(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *AudioAnimatorExcel) Delay() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AudioAnimatorExcel) MutateDelay(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *AudioAnimatorExcel) RandomPitchMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) MutateRandomPitchMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *AudioAnimatorExcel) RandomPitchMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) MutateRandomPitchMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *AudioAnimatorExcel) AudioPriority() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) MutateAudioPriority(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *AudioAnimatorExcel) AudioClipPath(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AudioAnimatorExcel) AudioClipPathLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) VoiceHash(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AudioAnimatorExcel) VoiceHashLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AudioAnimatorExcel) MutateVoiceHash(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func AudioAnimatorExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func AudioAnimatorExcelAddControllerNameHash(builder *flatbuffers.Builder, controllerNameHash uint32) {
	builder.PrependUint32Slot(0, controllerNameHash, 0)
}
func AudioAnimatorExcelAddVoiceNamePrefix(builder *flatbuffers.Builder, voiceNamePrefix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(voiceNamePrefix), 0)
}
func AudioAnimatorExcelAddStateNameHash(builder *flatbuffers.Builder, stateNameHash uint32) {
	builder.PrependUint32Slot(2, stateNameHash, 0)
}
func AudioAnimatorExcelAddStateName(builder *flatbuffers.Builder, stateName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(stateName), 0)
}
func AudioAnimatorExcelAddIgnoreInterruptDelay(builder *flatbuffers.Builder, ignoreInterruptDelay bool) {
	builder.PrependBoolSlot(4, ignoreInterruptDelay, false)
}
func AudioAnimatorExcelAddIgnoreInterruptPlay(builder *flatbuffers.Builder, ignoreInterruptPlay bool) {
	builder.PrependBoolSlot(5, ignoreInterruptPlay, false)
}
func AudioAnimatorExcelAddIgnoreVelocity(builder *flatbuffers.Builder, ignoreVelocity bool) {
	builder.PrependBoolSlot(6, ignoreVelocity, false)
}
func AudioAnimatorExcelAddVolume(builder *flatbuffers.Builder, volume float32) {
	builder.PrependFloat32Slot(7, volume, 0.0)
}
func AudioAnimatorExcelAddDelay(builder *flatbuffers.Builder, delay float32) {
	builder.PrependFloat32Slot(8, delay, 0.0)
}
func AudioAnimatorExcelAddRandomPitchMin(builder *flatbuffers.Builder, randomPitchMin int32) {
	builder.PrependInt32Slot(9, randomPitchMin, 0)
}
func AudioAnimatorExcelAddRandomPitchMax(builder *flatbuffers.Builder, randomPitchMax int32) {
	builder.PrependInt32Slot(10, randomPitchMax, 0)
}
func AudioAnimatorExcelAddAudioPriority(builder *flatbuffers.Builder, audioPriority int32) {
	builder.PrependInt32Slot(11, audioPriority, 0)
}
func AudioAnimatorExcelAddAudioClipPath(builder *flatbuffers.Builder, audioClipPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(audioClipPath), 0)
}
func AudioAnimatorExcelStartAudioClipPathVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AudioAnimatorExcelAddVoiceHash(builder *flatbuffers.Builder, voiceHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(voiceHash), 0)
}
func AudioAnimatorExcelStartVoiceHashVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AudioAnimatorExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
