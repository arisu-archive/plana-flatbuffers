// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterExcel) CombineRecipeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateCombineRecipeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterExcel) CharacterPieceItemAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateCharacterPieceItemAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *CharacterExcel) CharacterPieceItemId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateCharacterPieceItemId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CharacterExcel) SecretStoneItemAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateSecretStoneItemAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *CharacterExcel) SecretStoneItemId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateSecretStoneItemId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterExcel) Tags(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *CharacterExcel) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterExcel) MutateTags(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *CharacterExcel) AirUnitHeight() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateAirUnitHeight(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *CharacterExcel) IsAirUnit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateIsAirUnit(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *CharacterExcel) IgnoreObstacle() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateIgnoreObstacle(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *CharacterExcel) CanBattleItemMove() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateCanBattleItemMove(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *CharacterExcel) CanCrowdControl() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateCanCrowdControl(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func (rcv *CharacterExcel) CanFix() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateCanFix(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func (rcv *CharacterExcel) CanMove() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateCanMove(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func (rcv *CharacterExcel) AppearFrame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateAppearFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *CharacterExcel) JumpMotionFrame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateJumpMotionFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *CharacterExcel) MoveEndFrame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateMoveEndFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *CharacterExcel) MoveStartFrame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateMoveStartFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *CharacterExcel) EmojiOffsetY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterExcel) MutateEmojiOffsetY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(38, n)
}

func (rcv *CharacterExcel) EmojiOffsetX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterExcel) MutateEmojiOffsetX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(40, n)
}

func (rcv *CharacterExcel) HighlightFloaterHeight() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterExcel) MutateHighlightFloaterHeight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(42, n)
}

func (rcv *CharacterExcel) HpBarHeight() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterExcel) MutateHpBarHeight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(44, n)
}

func (rcv *CharacterExcel) HpBarHide() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateHpBarHide(n bool) bool {
	return rcv._tab.MutateBoolSlot(46, n)
}

func (rcv *CharacterExcel) RandomEffectRadius() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateRandomEffectRadius(n int64) bool {
	return rcv._tab.MutateInt64Slot(48, n)
}

func (rcv *CharacterExcel) BodyRadius() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateBodyRadius(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *CharacterExcel) DisplayEnemyInfo() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateDisplayEnemyInfo(n bool) bool {
	return rcv._tab.MutateBoolSlot(52, n)
}

func (rcv *CharacterExcel) WeaponLocalizeId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateWeaponLocalizeId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(54, n)
}

func (rcv *CharacterExcel) EquipmentSlot(j int) EquipmentCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return EquipmentCategory(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *CharacterExcel) EquipmentSlotLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterExcel) MutateEquipmentSlot(j int, n EquipmentCategory) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *CharacterExcel) FavorLevelupType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateFavorLevelupType(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

func (rcv *CharacterExcel) SpawnTemplateId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateSpawnTemplateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(60, n)
}

func (rcv *CharacterExcel) ScenarioCharacter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterExcel) CombatStyleIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateCombatStyleIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

func (rcv *CharacterExcel) MainCombatStyleId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateMainCombatStyleId(n int64) bool {
	return rcv._tab.MutateInt64Slot(66, n)
}

func (rcv *CharacterExcel) ExternalBtId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateExternalBtId(n int64) bool {
	return rcv._tab.MutateInt64Slot(68, n)
}

func (rcv *CharacterExcel) CharacterAiId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateCharacterAiId(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

func (rcv *CharacterExcel) PersonalityId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutatePersonalityId(n int64) bool {
	return rcv._tab.MutateInt64Slot(72, n)
}

func (rcv *CharacterExcel) Jumpable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateJumpable(n bool) bool {
	return rcv._tab.MutateBoolSlot(74, n)
}

func (rcv *CharacterExcel) SquadType() SquadType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return SquadType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateSquadType(n SquadType) bool {
	return rcv._tab.MutateInt32Slot(76, int32(n))
}

func (rcv *CharacterExcel) StatLevelUpType() StatLevelUpType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return StatLevelUpType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateStatLevelUpType(n StatLevelUpType) bool {
	return rcv._tab.MutateInt32Slot(78, int32(n))
}

func (rcv *CharacterExcel) MaxStarGrade() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateMaxStarGrade(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

func (rcv *CharacterExcel) DefaultStarGrade() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateDefaultStarGrade(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

func (rcv *CharacterExcel) Club() Club {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return Club(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateClub(n Club) bool {
	return rcv._tab.MutateInt32Slot(84, int32(n))
}

func (rcv *CharacterExcel) School() School {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return School(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateSchool(n School) bool {
	return rcv._tab.MutateInt32Slot(86, int32(n))
}

func (rcv *CharacterExcel) AimIkType() AimIKType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return AimIKType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateAimIkType(n AimIKType) bool {
	return rcv._tab.MutateInt32Slot(88, int32(n))
}

func (rcv *CharacterExcel) ArmorType() ArmorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return ArmorType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateArmorType(n ArmorType) bool {
	return rcv._tab.MutateInt32Slot(90, int32(n))
}

func (rcv *CharacterExcel) BulletType() BulletType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return BulletType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateBulletType(n BulletType) bool {
	return rcv._tab.MutateInt32Slot(92, int32(n))
}

func (rcv *CharacterExcel) TacticRange() TacticRange {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return TacticRange(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateTacticRange(n TacticRange) bool {
	return rcv._tab.MutateInt32Slot(94, int32(n))
}

func (rcv *CharacterExcel) WeaponType() WeaponType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return WeaponType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateWeaponType(n WeaponType) bool {
	return rcv._tab.MutateInt32Slot(96, int32(n))
}

func (rcv *CharacterExcel) TacticRole() TacticRole {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return TacticRole(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateTacticRole(n TacticRole) bool {
	return rcv._tab.MutateInt32Slot(98, int32(n))
}

func (rcv *CharacterExcel) SubPartsCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateSubPartsCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(100, n)
}

func (rcv *CharacterExcel) IsDummy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateIsDummy(n bool) bool {
	return rcv._tab.MutateBoolSlot(102, n)
}

func (rcv *CharacterExcel) CanSurvive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateCanSurvive(n bool) bool {
	return rcv._tab.MutateBoolSlot(104, n)
}

func (rcv *CharacterExcel) TacticEntityType() TacticEntityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return TacticEntityType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateTacticEntityType(n TacticEntityType) bool {
	return rcv._tab.MutateInt32Slot(106, int32(n))
}

func (rcv *CharacterExcel) IsNpc() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateIsNpc(n bool) bool {
	return rcv._tab.MutateBoolSlot(108, n)
}

func (rcv *CharacterExcel) Rarity() Rarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return Rarity(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateRarity(n Rarity) bool {
	return rcv._tab.MutateInt32Slot(110, int32(n))
}

func (rcv *CharacterExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(112, n)
}

func (rcv *CharacterExcel) IsPlayableCharacter() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateIsPlayableCharacter(n bool) bool {
	return rcv._tab.MutateBoolSlot(114, n)
}

func (rcv *CharacterExcel) CollectionVisibleEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterExcel) CollectionVisibleStartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterExcel) ReleaseDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterExcel) CollectionVisible() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateCollectionVisible(n bool) bool {
	return rcv._tab.MutateBoolSlot(122, n)
}

func (rcv *CharacterExcel) ProductionStep() ProductionStep {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return ProductionStep(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterExcel) MutateProductionStep(n ProductionStep) bool {
	return rcv._tab.MutateInt32Slot(124, int32(n))
}

func (rcv *CharacterExcel) IsPlayable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterExcel) MutateIsPlayable(n bool) bool {
	return rcv._tab.MutateBoolSlot(126, n)
}

func (rcv *CharacterExcel) CostumeGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateCostumeGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(128, n)
}

func (rcv *CharacterExcel) DevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(132, n)
}

func CharacterExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(65)
}
func CharacterExcelAddCombineRecipeId(builder *flatbuffers.Builder, combineRecipeId int64) {
	builder.PrependInt64Slot(0, combineRecipeId, 0)
}
func CharacterExcelAddCharacterPieceItemAmount(builder *flatbuffers.Builder, characterPieceItemAmount int32) {
	builder.PrependInt32Slot(1, characterPieceItemAmount, 0)
}
func CharacterExcelAddCharacterPieceItemId(builder *flatbuffers.Builder, characterPieceItemId int64) {
	builder.PrependInt64Slot(2, characterPieceItemId, 0)
}
func CharacterExcelAddSecretStoneItemAmount(builder *flatbuffers.Builder, secretStoneItemAmount int32) {
	builder.PrependInt32Slot(3, secretStoneItemAmount, 0)
}
func CharacterExcelAddSecretStoneItemId(builder *flatbuffers.Builder, secretStoneItemId int64) {
	builder.PrependInt64Slot(4, secretStoneItemId, 0)
}
func CharacterExcelAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tags), 0)
}
func CharacterExcelStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterExcelAddAirUnitHeight(builder *flatbuffers.Builder, airUnitHeight int64) {
	builder.PrependInt64Slot(6, airUnitHeight, 0)
}
func CharacterExcelAddIsAirUnit(builder *flatbuffers.Builder, isAirUnit bool) {
	builder.PrependBoolSlot(7, isAirUnit, false)
}
func CharacterExcelAddIgnoreObstacle(builder *flatbuffers.Builder, ignoreObstacle bool) {
	builder.PrependBoolSlot(8, ignoreObstacle, false)
}
func CharacterExcelAddCanBattleItemMove(builder *flatbuffers.Builder, canBattleItemMove bool) {
	builder.PrependBoolSlot(9, canBattleItemMove, false)
}
func CharacterExcelAddCanCrowdControl(builder *flatbuffers.Builder, canCrowdControl bool) {
	builder.PrependBoolSlot(10, canCrowdControl, false)
}
func CharacterExcelAddCanFix(builder *flatbuffers.Builder, canFix bool) {
	builder.PrependBoolSlot(11, canFix, false)
}
func CharacterExcelAddCanMove(builder *flatbuffers.Builder, canMove bool) {
	builder.PrependBoolSlot(12, canMove, false)
}
func CharacterExcelAddAppearFrame(builder *flatbuffers.Builder, appearFrame int32) {
	builder.PrependInt32Slot(13, appearFrame, 0)
}
func CharacterExcelAddJumpMotionFrame(builder *flatbuffers.Builder, jumpMotionFrame int32) {
	builder.PrependInt32Slot(14, jumpMotionFrame, 0)
}
func CharacterExcelAddMoveEndFrame(builder *flatbuffers.Builder, moveEndFrame int32) {
	builder.PrependInt32Slot(15, moveEndFrame, 0)
}
func CharacterExcelAddMoveStartFrame(builder *flatbuffers.Builder, moveStartFrame int32) {
	builder.PrependInt32Slot(16, moveStartFrame, 0)
}
func CharacterExcelAddEmojiOffsetY(builder *flatbuffers.Builder, emojiOffsetY float32) {
	builder.PrependFloat32Slot(17, emojiOffsetY, 0.0)
}
func CharacterExcelAddEmojiOffsetX(builder *flatbuffers.Builder, emojiOffsetX float32) {
	builder.PrependFloat32Slot(18, emojiOffsetX, 0.0)
}
func CharacterExcelAddHighlightFloaterHeight(builder *flatbuffers.Builder, highlightFloaterHeight float32) {
	builder.PrependFloat32Slot(19, highlightFloaterHeight, 0.0)
}
func CharacterExcelAddHpBarHeight(builder *flatbuffers.Builder, hpBarHeight float32) {
	builder.PrependFloat32Slot(20, hpBarHeight, 0.0)
}
func CharacterExcelAddHpBarHide(builder *flatbuffers.Builder, hpBarHide bool) {
	builder.PrependBoolSlot(21, hpBarHide, false)
}
func CharacterExcelAddRandomEffectRadius(builder *flatbuffers.Builder, randomEffectRadius int64) {
	builder.PrependInt64Slot(22, randomEffectRadius, 0)
}
func CharacterExcelAddBodyRadius(builder *flatbuffers.Builder, bodyRadius int64) {
	builder.PrependInt64Slot(23, bodyRadius, 0)
}
func CharacterExcelAddDisplayEnemyInfo(builder *flatbuffers.Builder, displayEnemyInfo bool) {
	builder.PrependBoolSlot(24, displayEnemyInfo, false)
}
func CharacterExcelAddWeaponLocalizeId(builder *flatbuffers.Builder, weaponLocalizeId uint32) {
	builder.PrependUint32Slot(25, weaponLocalizeId, 0)
}
func CharacterExcelAddEquipmentSlot(builder *flatbuffers.Builder, equipmentSlot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(equipmentSlot), 0)
}
func CharacterExcelStartEquipmentSlotVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterExcelAddFavorLevelupType(builder *flatbuffers.Builder, favorLevelupType int32) {
	builder.PrependInt32Slot(27, favorLevelupType, 0)
}
func CharacterExcelAddSpawnTemplateId(builder *flatbuffers.Builder, spawnTemplateId uint32) {
	builder.PrependUint32Slot(28, spawnTemplateId, 0)
}
func CharacterExcelAddScenarioCharacter(builder *flatbuffers.Builder, scenarioCharacter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(scenarioCharacter), 0)
}
func CharacterExcelAddCombatStyleIndex(builder *flatbuffers.Builder, combatStyleIndex int32) {
	builder.PrependInt32Slot(30, combatStyleIndex, 0)
}
func CharacterExcelAddMainCombatStyleId(builder *flatbuffers.Builder, mainCombatStyleId int64) {
	builder.PrependInt64Slot(31, mainCombatStyleId, 0)
}
func CharacterExcelAddExternalBtId(builder *flatbuffers.Builder, externalBtId int64) {
	builder.PrependInt64Slot(32, externalBtId, 0)
}
func CharacterExcelAddCharacterAiId(builder *flatbuffers.Builder, characterAiId int64) {
	builder.PrependInt64Slot(33, characterAiId, 0)
}
func CharacterExcelAddPersonalityId(builder *flatbuffers.Builder, personalityId int64) {
	builder.PrependInt64Slot(34, personalityId, 0)
}
func CharacterExcelAddJumpable(builder *flatbuffers.Builder, jumpable bool) {
	builder.PrependBoolSlot(35, jumpable, false)
}
func CharacterExcelAddSquadType(builder *flatbuffers.Builder, squadType SquadType) {
	builder.PrependInt32Slot(36, int32(squadType), 0)
}
func CharacterExcelAddStatLevelUpType(builder *flatbuffers.Builder, statLevelUpType StatLevelUpType) {
	builder.PrependInt32Slot(37, int32(statLevelUpType), 0)
}
func CharacterExcelAddMaxStarGrade(builder *flatbuffers.Builder, maxStarGrade int32) {
	builder.PrependInt32Slot(38, maxStarGrade, 0)
}
func CharacterExcelAddDefaultStarGrade(builder *flatbuffers.Builder, defaultStarGrade int32) {
	builder.PrependInt32Slot(39, defaultStarGrade, 0)
}
func CharacterExcelAddClub(builder *flatbuffers.Builder, club Club) {
	builder.PrependInt32Slot(40, int32(club), 0)
}
func CharacterExcelAddSchool(builder *flatbuffers.Builder, school School) {
	builder.PrependInt32Slot(41, int32(school), 0)
}
func CharacterExcelAddAimIkType(builder *flatbuffers.Builder, aimIkType AimIKType) {
	builder.PrependInt32Slot(42, int32(aimIkType), 0)
}
func CharacterExcelAddArmorType(builder *flatbuffers.Builder, armorType ArmorType) {
	builder.PrependInt32Slot(43, int32(armorType), 0)
}
func CharacterExcelAddBulletType(builder *flatbuffers.Builder, bulletType BulletType) {
	builder.PrependInt32Slot(44, int32(bulletType), 0)
}
func CharacterExcelAddTacticRange(builder *flatbuffers.Builder, tacticRange TacticRange) {
	builder.PrependInt32Slot(45, int32(tacticRange), 0)
}
func CharacterExcelAddWeaponType(builder *flatbuffers.Builder, weaponType WeaponType) {
	builder.PrependInt32Slot(46, int32(weaponType), 0)
}
func CharacterExcelAddTacticRole(builder *flatbuffers.Builder, tacticRole TacticRole) {
	builder.PrependInt32Slot(47, int32(tacticRole), 0)
}
func CharacterExcelAddSubPartsCount(builder *flatbuffers.Builder, subPartsCount int32) {
	builder.PrependInt32Slot(48, subPartsCount, 0)
}
func CharacterExcelAddIsDummy(builder *flatbuffers.Builder, isDummy bool) {
	builder.PrependBoolSlot(49, isDummy, false)
}
func CharacterExcelAddCanSurvive(builder *flatbuffers.Builder, canSurvive bool) {
	builder.PrependBoolSlot(50, canSurvive, false)
}
func CharacterExcelAddTacticEntityType(builder *flatbuffers.Builder, tacticEntityType TacticEntityType) {
	builder.PrependInt32Slot(51, int32(tacticEntityType), 0)
}
func CharacterExcelAddIsNpc(builder *flatbuffers.Builder, isNpc bool) {
	builder.PrependBoolSlot(52, isNpc, false)
}
func CharacterExcelAddRarity(builder *flatbuffers.Builder, rarity Rarity) {
	builder.PrependInt32Slot(53, int32(rarity), 0)
}
func CharacterExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(54, localizeEtcId, 0)
}
func CharacterExcelAddIsPlayableCharacter(builder *flatbuffers.Builder, isPlayableCharacter bool) {
	builder.PrependBoolSlot(55, isPlayableCharacter, false)
}
func CharacterExcelAddCollectionVisibleEndDate(builder *flatbuffers.Builder, collectionVisibleEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(collectionVisibleEndDate), 0)
}
func CharacterExcelAddCollectionVisibleStartDate(builder *flatbuffers.Builder, collectionVisibleStartDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(collectionVisibleStartDate), 0)
}
func CharacterExcelAddReleaseDate(builder *flatbuffers.Builder, releaseDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(releaseDate), 0)
}
func CharacterExcelAddCollectionVisible(builder *flatbuffers.Builder, collectionVisible bool) {
	builder.PrependBoolSlot(59, collectionVisible, false)
}
func CharacterExcelAddProductionStep(builder *flatbuffers.Builder, productionStep ProductionStep) {
	builder.PrependInt32Slot(60, int32(productionStep), 0)
}
func CharacterExcelAddIsPlayable(builder *flatbuffers.Builder, isPlayable bool) {
	builder.PrependBoolSlot(61, isPlayable, false)
}
func CharacterExcelAddCostumeGroupId(builder *flatbuffers.Builder, costumeGroupId int64) {
	builder.PrependInt64Slot(62, costumeGroupId, 0)
}
func CharacterExcelAddDevName(builder *flatbuffers.Builder, devName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(devName), 0)
}
func CharacterExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(64, id, 0)
}
func CharacterExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
