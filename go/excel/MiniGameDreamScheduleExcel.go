// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamScheduleExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamScheduleExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamScheduleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamScheduleExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamScheduleExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamScheduleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamScheduleExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamScheduleExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamScheduleExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamScheduleExcel) AnimationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDreamScheduleExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDreamScheduleExcel) DreamMakerScheduleGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleExcel) MutateDreamMakerScheduleGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDreamScheduleExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDreamScheduleExcel) IconPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDreamScheduleExcel) LoadingResource01() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDreamScheduleExcel) LoadingResource02() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDreamScheduleExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func MiniGameDreamScheduleExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MiniGameDreamScheduleExcelAddAnimationName(builder *flatbuffers.Builder, animationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(animationName), 0)
}
func MiniGameDreamScheduleExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(1, displayOrder, 0)
}
func MiniGameDreamScheduleExcelAddDreamMakerScheduleGroupId(builder *flatbuffers.Builder, dreamMakerScheduleGroupId int64) {
	builder.PrependInt64Slot(2, dreamMakerScheduleGroupId, 0)
}
func MiniGameDreamScheduleExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func MiniGameDreamScheduleExcelAddIconPath(builder *flatbuffers.Builder, iconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(iconPath), 0)
}
func MiniGameDreamScheduleExcelAddLoadingResource01(builder *flatbuffers.Builder, loadingResource01 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(loadingResource01), 0)
}
func MiniGameDreamScheduleExcelAddLoadingResource02(builder *flatbuffers.Builder, loadingResource02 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(loadingResource02), 0)
}
func MiniGameDreamScheduleExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(7, localizeEtcId, 0)
}
func MiniGameDreamScheduleExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
