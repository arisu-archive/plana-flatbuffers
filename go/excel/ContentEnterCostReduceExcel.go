// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ContentEnterCostReduceExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsContentEnterCostReduceExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentEnterCostReduceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ContentEnterCostReduceExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishContentEnterCostReduceExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsContentEnterCostReduceExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentEnterCostReduceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ContentEnterCostReduceExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedContentEnterCostReduceExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ContentEnterCostReduceExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ContentEnterCostReduceExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ContentEnterCostReduceExcel) EnterCostReduceGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentEnterCostReduceExcel) MutateEnterCostReduceGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ContentEnterCostReduceExcel) ContentType() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ContentEnterCostReduceExcel) MutateContentType(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ContentEnterCostReduceExcel) StageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentEnterCostReduceExcel) MutateStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ContentEnterCostReduceExcel) ReduceEnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ContentEnterCostReduceExcel) MutateReduceEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *ContentEnterCostReduceExcel) ReduceEnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentEnterCostReduceExcel) MutateReduceEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ContentEnterCostReduceExcel) ReduceAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentEnterCostReduceExcel) MutateReduceAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func ContentEnterCostReduceExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ContentEnterCostReduceExcelAddEnterCostReduceGroupId(builder *flatbuffers.Builder, enterCostReduceGroupId int64) {
	builder.PrependInt64Slot(0, enterCostReduceGroupId, 0)
}
func ContentEnterCostReduceExcelAddContentType(builder *flatbuffers.Builder, contentType ContentType) {
	builder.PrependInt32Slot(1, int32(contentType), 0)
}
func ContentEnterCostReduceExcelAddStageId(builder *flatbuffers.Builder, stageId int64) {
	builder.PrependInt64Slot(2, stageId, 0)
}
func ContentEnterCostReduceExcelAddReduceEnterCostType(builder *flatbuffers.Builder, reduceEnterCostType ParcelType) {
	builder.PrependInt32Slot(3, int32(reduceEnterCostType), 0)
}
func ContentEnterCostReduceExcelAddReduceEnterCostId(builder *flatbuffers.Builder, reduceEnterCostId int64) {
	builder.PrependInt64Slot(4, reduceEnterCostId, 0)
}
func ContentEnterCostReduceExcelAddReduceAmount(builder *flatbuffers.Builder, reduceAmount int64) {
	builder.PrependInt64Slot(5, reduceAmount, 0)
}
func ContentEnterCostReduceExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
