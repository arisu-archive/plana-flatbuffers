// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// LoadingImageExcelDto represents a FlatBuffers table
type LoadingImageExcelDto struct {
	fbsutils.FlatBuffer
	DisplayWeight int32  `json:"display_weight"`
	Id            int64  `json:"id"`
	ImagePathJp   string `json:"image_path_jp"`
	ImagePathKr   string `json:"image_path_kr"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *LoadingImageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	LoadingImageExcelStart(b)
	LoadingImageExcelAddDisplayWeight(b, fbsutils.Convert(t.DisplayWeight, t.FlatBuffer.TableKey))
	LoadingImageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	LoadingImageExcelAddImagePathJp(b, b.CreateString(fbsutils.Convert(t.ImagePathJp, t.FlatBuffer.TableKey)))
	LoadingImageExcelAddImagePathKr(b, b.CreateString(fbsutils.Convert(t.ImagePathKr, t.FlatBuffer.TableKey)))
	return LoadingImageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *LoadingImageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *LoadingImageExcelDto) UnmarshalMessage(e *LoadingImageExcel) error {
	t.DisplayWeight = fbsutils.Convert(e.DisplayWeight(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.ImagePathJp = fbsutils.Convert(string(e.ImagePathJp()), t.FlatBuffer.TableKey)
	t.ImagePathKr = fbsutils.Convert(string(e.ImagePathKr()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *LoadingImageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsLoadingImageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (LoadingImageExcelDto) FlatDataName() string {
	return "LoadingImageExcel"
}
