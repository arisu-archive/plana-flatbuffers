// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentConcentrationCardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentConcentrationCardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentConcentrationCardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentConcentrationCardExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentConcentrationCardExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentConcentrationCardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentConcentrationCardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentConcentrationCardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentConcentrationCardExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentConcentrationCardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentConcentrationCardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentConcentrationCardExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationCardExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentConcentrationCardExcel) CardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationCardExcel) MutateCardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentConcentrationCardExcel) Rarity() Rarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Rarity(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentConcentrationCardExcel) MutateRarity(n Rarity) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EventContentConcentrationCardExcel) ImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentConcentrationCardExcel) BackImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventContentConcentrationCardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EventContentConcentrationCardExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentConcentrationCardExcelAddCardId(builder *flatbuffers.Builder, cardId int64) {
	builder.PrependInt64Slot(1, cardId, 0)
}
func EventContentConcentrationCardExcelAddRarity(builder *flatbuffers.Builder, rarity Rarity) {
	builder.PrependInt32Slot(2, int32(rarity), 0)
}
func EventContentConcentrationCardExcelAddImagePath(builder *flatbuffers.Builder, imagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(imagePath), 0)
}
func EventContentConcentrationCardExcelAddBackImagePath(builder *flatbuffers.Builder, backImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(backImagePath), 0)
}
func EventContentConcentrationCardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
