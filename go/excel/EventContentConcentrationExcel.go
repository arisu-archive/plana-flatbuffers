// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentConcentrationExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentConcentrationExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentConcentrationExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentConcentrationExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentConcentrationExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentConcentrationExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentConcentrationExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentConcentrationExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentConcentrationExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentConcentrationExcel) CardBoardPrefabs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentConcentrationExcel) CostGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationExcel) MutateCostGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentConcentrationExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentConcentrationExcel) InstantClearRound() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationExcel) MutateInstantClearRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *EventContentConcentrationExcel) MaxCardOpenCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationExcel) MutateMaxCardOpenCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *EventContentConcentrationExcel) MaxCardPairCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationExcel) MutateMaxCardPairCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func EventContentConcentrationExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EventContentConcentrationExcelAddCardBoardPrefabs(builder *flatbuffers.Builder, cardBoardPrefabs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cardBoardPrefabs), 0)
}
func EventContentConcentrationExcelAddCostGoodsId(builder *flatbuffers.Builder, costGoodsId int64) {
	builder.PrependInt64Slot(1, costGoodsId, 0)
}
func EventContentConcentrationExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(2, eventContentId, 0)
}
func EventContentConcentrationExcelAddInstantClearRound(builder *flatbuffers.Builder, instantClearRound int32) {
	builder.PrependInt32Slot(3, instantClearRound, 0)
}
func EventContentConcentrationExcelAddMaxCardOpenCount(builder *flatbuffers.Builder, maxCardOpenCount int32) {
	builder.PrependInt32Slot(4, maxCardOpenCount, 0)
}
func EventContentConcentrationExcelAddMaxCardPairCount(builder *flatbuffers.Builder, maxCardPairCount int32) {
	builder.PrependInt32Slot(5, maxCardPairCount, 0)
}
func EventContentConcentrationExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
