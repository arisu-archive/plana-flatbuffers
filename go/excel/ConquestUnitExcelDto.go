// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConquestUnitExcelDto represents a FlatBuffers table
type ConquestUnitExcelDto struct {
	fbsutils.FlatBuffer
	Id                                int64                `json:"id"`
	Key                               uint32               `json:"key"`
	Name                              string               `json:"name"`
	PrefabName                        string               `json:"prefab_name"`
	StrategyPrefabName                string               `json:"strategy_prefab_name"`
	Scale                             float32              `json:"scale"`
	ShieldEffectScale                 float32              `json:"shield_effect_scale"`
	UnitFxPrefabName                  string               `json:"unit_fx_prefab_name"`
	PointAnimation                    string               `json:"point_animation"`
	EnemyType                         ConquestEnemyType    `json:"enemy_type"`
	Team                              ConquestTeamType     `json:"team"`
	UnitGroup                         int64                `json:"unit_group"`
	PrevUnitGroup                     int64                `json:"prev_unit_group"`
	BattleDuration                    int64                `json:"battle_duration"`
	GroundId                          int64                `json:"ground_id"`
	StarGoal                          []StarGoalType       `json:"star_goal"`
	StarGoalAmount                    []int32              `json:"star_goal_amount"`
	GroupBuffId                       int64                `json:"group_buff_id"`
	StageEnterCostType                ParcelType           `json:"stage_enter_cost_type"`
	StageEnterCostId                  int64                `json:"stage_enter_cost_id"`
	StageEnterCostAmount              int32                `json:"stage_enter_cost_amount"`
	ManageEchelonStageEnterCostType   ParcelType           `json:"manage_echelon_stage_enter_cost_type"`
	ManageEchelonStageEnterCostId     int64                `json:"manage_echelon_stage_enter_cost_id"`
	ManageEchelonStageEnterCostAmount int32                `json:"manage_echelon_stage_enter_cost_amount"`
	EnterScenarioGroupId              int64                `json:"enter_scenario_group_id"`
	ClearScenarioGroupId              int64                `json:"clear_scenario_group_id"`
	ConquestRewardId                  int64                `json:"conquest_reward_id"`
	StageTopography                   StageTopography      `json:"stage_topography"`
	RecommandLevel                    int32                `json:"recommand_level"`
	TacticRewardExp                   int64                `json:"tactic_reward_exp"`
	FixedEchelonId                    int64                `json:"fixed_echelon_id"`
	EchelonExtensionType              EchelonExtensionType `json:"echelon_extension_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConquestUnitExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ConquestUnitExcelStart(b)
	ConquestUnitExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddKey(b, fbsutils.Convert(t.Key, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	ConquestUnitExcelAddPrefabName(b, b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey)))
	ConquestUnitExcelAddStrategyPrefabName(b, b.CreateString(fbsutils.Convert(t.StrategyPrefabName, t.FlatBuffer.TableKey)))
	ConquestUnitExcelAddScale(b, fbsutils.Convert(t.Scale, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddShieldEffectScale(b, fbsutils.Convert(t.ShieldEffectScale, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddUnitFxPrefabName(b, b.CreateString(fbsutils.Convert(t.UnitFxPrefabName, t.FlatBuffer.TableKey)))
	ConquestUnitExcelAddPointAnimation(b, b.CreateString(fbsutils.Convert(t.PointAnimation, t.FlatBuffer.TableKey)))
	ConquestUnitExcelAddEnemyType(b, fbsutils.Convert(t.EnemyType, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddTeam(b, fbsutils.Convert(t.Team, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddUnitGroup(b, fbsutils.Convert(t.UnitGroup, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddPrevUnitGroup(b, fbsutils.Convert(t.PrevUnitGroup, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	ConquestUnitExcelStartStarGoalVector(b, len(t.StarGoal))
	for i := range len(t.StarGoal) {
		b.PrependInt32(fbsutils.Convert(int32(t.StarGoal[len(t.StarGoal)-i-1]), t.FlatBuffer.TableKey))
	}
	ConquestUnitExcelAddStarGoal(b, b.EndVector(len(t.StarGoal)))
	ConquestUnitExcelStartStarGoalAmountVector(b, len(t.StarGoalAmount))
	for i := range len(t.StarGoalAmount) {
		b.PrependInt32(fbsutils.Convert(t.StarGoalAmount[len(t.StarGoalAmount)-i-1], t.FlatBuffer.TableKey))
	}
	ConquestUnitExcelAddStarGoalAmount(b, b.EndVector(len(t.StarGoalAmount)))
	ConquestUnitExcelAddGroupBuffId(b, fbsutils.Convert(t.GroupBuffId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddStageEnterCostType(b, fbsutils.Convert(t.StageEnterCostType, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddStageEnterCostId(b, fbsutils.Convert(t.StageEnterCostId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddStageEnterCostAmount(b, fbsutils.Convert(t.StageEnterCostAmount, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddManageEchelonStageEnterCostType(b, fbsutils.Convert(t.ManageEchelonStageEnterCostType, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddManageEchelonStageEnterCostId(b, fbsutils.Convert(t.ManageEchelonStageEnterCostId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddManageEchelonStageEnterCostAmount(b, fbsutils.Convert(t.ManageEchelonStageEnterCostAmount, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddEnterScenarioGroupId(b, fbsutils.Convert(t.EnterScenarioGroupId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddClearScenarioGroupId(b, fbsutils.Convert(t.ClearScenarioGroupId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddConquestRewardId(b, fbsutils.Convert(t.ConquestRewardId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddRecommandLevel(b, fbsutils.Convert(t.RecommandLevel, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddTacticRewardExp(b, fbsutils.Convert(t.TacticRewardExp, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddFixedEchelonId(b, fbsutils.Convert(t.FixedEchelonId, t.FlatBuffer.TableKey))
	ConquestUnitExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	return ConquestUnitExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConquestUnitExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConquestUnitExcelDto) UnmarshalMessage(e *ConquestUnitExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Key = fbsutils.Convert(e.Key(), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.StrategyPrefabName = fbsutils.Convert(string(e.StrategyPrefabName()), t.FlatBuffer.TableKey)
	t.Scale = fbsutils.Convert(e.Scale(), t.FlatBuffer.TableKey)
	t.ShieldEffectScale = fbsutils.Convert(e.ShieldEffectScale(), t.FlatBuffer.TableKey)
	t.UnitFxPrefabName = fbsutils.Convert(string(e.UnitFxPrefabName()), t.FlatBuffer.TableKey)
	t.PointAnimation = fbsutils.Convert(string(e.PointAnimation()), t.FlatBuffer.TableKey)
	t.EnemyType = ConquestEnemyType(fbsutils.Convert(int32(e.EnemyType()), t.FlatBuffer.TableKey))
	t.Team = ConquestTeamType(fbsutils.Convert(int32(e.Team()), t.FlatBuffer.TableKey))
	t.UnitGroup = fbsutils.Convert(e.UnitGroup(), t.FlatBuffer.TableKey)
	t.PrevUnitGroup = fbsutils.Convert(e.PrevUnitGroup(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.StarGoal = make([]StarGoalType, e.StarGoalLength())
	for i := range e.StarGoalLength() {
		t.StarGoal[i] = StarGoalType(fbsutils.Convert(int32(e.StarGoal(i)), t.FlatBuffer.TableKey))
	}
	t.StarGoalAmount = make([]int32, e.StarGoalAmountLength())
	for i := range e.StarGoalAmountLength() {
		t.StarGoalAmount[i] = fbsutils.Convert(e.StarGoalAmount(i), t.FlatBuffer.TableKey)
	}
	t.GroupBuffId = fbsutils.Convert(e.GroupBuffId(), t.FlatBuffer.TableKey)
	t.StageEnterCostType = ParcelType(fbsutils.Convert(int32(e.StageEnterCostType()), t.FlatBuffer.TableKey))
	t.StageEnterCostId = fbsutils.Convert(e.StageEnterCostId(), t.FlatBuffer.TableKey)
	t.StageEnterCostAmount = fbsutils.Convert(e.StageEnterCostAmount(), t.FlatBuffer.TableKey)
	t.ManageEchelonStageEnterCostType = ParcelType(fbsutils.Convert(int32(e.ManageEchelonStageEnterCostType()), t.FlatBuffer.TableKey))
	t.ManageEchelonStageEnterCostId = fbsutils.Convert(e.ManageEchelonStageEnterCostId(), t.FlatBuffer.TableKey)
	t.ManageEchelonStageEnterCostAmount = fbsutils.Convert(e.ManageEchelonStageEnterCostAmount(), t.FlatBuffer.TableKey)
	t.EnterScenarioGroupId = fbsutils.Convert(e.EnterScenarioGroupId(), t.FlatBuffer.TableKey)
	t.ClearScenarioGroupId = fbsutils.Convert(e.ClearScenarioGroupId(), t.FlatBuffer.TableKey)
	t.ConquestRewardId = fbsutils.Convert(e.ConquestRewardId(), t.FlatBuffer.TableKey)
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	t.RecommandLevel = fbsutils.Convert(e.RecommandLevel(), t.FlatBuffer.TableKey)
	t.TacticRewardExp = fbsutils.Convert(e.TacticRewardExp(), t.FlatBuffer.TableKey)
	t.FixedEchelonId = fbsutils.Convert(e.FixedEchelonId(), t.FlatBuffer.TableKey)
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConquestUnitExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConquestUnitExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConquestUnitExcelDto) FlatDataName() string {
	return "ConquestUnitExcel"
}
