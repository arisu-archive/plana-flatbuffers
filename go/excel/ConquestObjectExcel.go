// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestObjectExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestObjectExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestObjectExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestObjectExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConquestObjectExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestObjectExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestObjectExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConquestObjectExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestObjectExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestObjectExcel) StepObjectCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateStepObjectCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ConquestObjectExcel) StepIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateStepIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ConquestObjectExcel) Disposable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConquestObjectExcel) MutateDisposable(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ConquestObjectExcel) ConquestRewardAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateConquestRewardAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ConquestObjectExcel) ConquestRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateConquestRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ConquestObjectExcel) ConquestRewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateConquestRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *ConquestObjectExcel) PrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestObjectExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestObjectExcel) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *ConquestObjectExcel) ConquestObjectType() ConquestObjectType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return ConquestObjectType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateConquestObjectType(n ConquestObjectType) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *ConquestObjectExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *ConquestObjectExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestObjectExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func ConquestObjectExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func ConquestObjectExcelAddStepObjectCount(builder *flatbuffers.Builder, stepObjectCount int32) {
	builder.PrependInt32Slot(0, stepObjectCount, 0)
}
func ConquestObjectExcelAddStepIndex(builder *flatbuffers.Builder, stepIndex int32) {
	builder.PrependInt32Slot(1, stepIndex, 0)
}
func ConquestObjectExcelAddDisposable(builder *flatbuffers.Builder, disposable bool) {
	builder.PrependBoolSlot(2, disposable, false)
}
func ConquestObjectExcelAddConquestRewardAmount(builder *flatbuffers.Builder, conquestRewardAmount int32) {
	builder.PrependInt32Slot(3, conquestRewardAmount, 0)
}
func ConquestObjectExcelAddConquestRewardId(builder *flatbuffers.Builder, conquestRewardId int64) {
	builder.PrependInt64Slot(4, conquestRewardId, 0)
}
func ConquestObjectExcelAddConquestRewardParcelType(builder *flatbuffers.Builder, conquestRewardParcelType ParcelType) {
	builder.PrependInt32Slot(5, int32(conquestRewardParcelType), 0)
}
func ConquestObjectExcelAddPrefabName(builder *flatbuffers.Builder, prefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(prefabName), 0)
}
func ConquestObjectExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(name), 0)
}
func ConquestObjectExcelAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(8, key, 0)
}
func ConquestObjectExcelAddConquestObjectType(builder *flatbuffers.Builder, conquestObjectType ConquestObjectType) {
	builder.PrependInt32Slot(9, int32(conquestObjectType), 0)
}
func ConquestObjectExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(10, eventContentId, 0)
}
func ConquestObjectExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(11, id, 0)
}
func ConquestObjectExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
