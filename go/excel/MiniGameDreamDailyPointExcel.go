// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamDailyPointExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamDailyPointExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamDailyPointExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamDailyPointExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamDailyPointExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamDailyPointExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamDailyPointExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamDailyPointExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamDailyPointExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamDailyPointExcel) DailyPointCoefficient() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamDailyPointExcel) MutateDailyPointCoefficient(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameDreamDailyPointExcel) DailyPointCorrectionValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamDailyPointExcel) MutateDailyPointCorrectionValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDreamDailyPointExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamDailyPointExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDreamDailyPointExcel) TotalParameterMax() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamDailyPointExcel) MutateTotalParameterMax(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDreamDailyPointExcel) TotalParameterMin() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamDailyPointExcel) MutateTotalParameterMin(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MiniGameDreamDailyPointExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamDailyPointExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func MiniGameDreamDailyPointExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MiniGameDreamDailyPointExcelAddDailyPointCoefficient(builder *flatbuffers.Builder, dailyPointCoefficient int64) {
	builder.PrependInt64Slot(0, dailyPointCoefficient, 0)
}
func MiniGameDreamDailyPointExcelAddDailyPointCorrectionValue(builder *flatbuffers.Builder, dailyPointCorrectionValue int64) {
	builder.PrependInt64Slot(1, dailyPointCorrectionValue, 0)
}
func MiniGameDreamDailyPointExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(2, eventContentId, 0)
}
func MiniGameDreamDailyPointExcelAddTotalParameterMax(builder *flatbuffers.Builder, totalParameterMax int64) {
	builder.PrependInt64Slot(3, totalParameterMax, 0)
}
func MiniGameDreamDailyPointExcelAddTotalParameterMin(builder *flatbuffers.Builder, totalParameterMin int64) {
	builder.PrependInt64Slot(4, totalParameterMin, 0)
}
func MiniGameDreamDailyPointExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(5, uniqueId, 0)
}
func MiniGameDreamDailyPointExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
