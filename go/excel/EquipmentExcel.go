// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EquipmentExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEquipmentExcel(buf []byte, offset flatbuffers.UOffsetT) *EquipmentExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EquipmentExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEquipmentExcel(buf []byte, offset flatbuffers.UOffsetT) *EquipmentExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EquipmentExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EquipmentExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EquipmentExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EquipmentExcel) ShortcutTypeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateShortcutTypeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EquipmentExcel) ShopCategory(j int) ShopCategoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ShopCategoryType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EquipmentExcel) ShopCategoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateShopCategory(j int, n ShopCategoryType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EquipmentExcel) ShiftingCraftQuality() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateShiftingCraftQuality(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EquipmentExcel) CraftQualityTier2() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateCraftQualityTier2(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EquipmentExcel) CraftQualityTier1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateCraftQualityTier1(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EquipmentExcel) CraftQualityTier0() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateCraftQualityTier0(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EquipmentExcel) Tags(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EquipmentExcel) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateTags(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EquipmentExcel) ImageName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EquipmentExcel) Icon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EquipmentExcel) StackableMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateStackableMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *EquipmentExcel) NextTierEquipment() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateNextTierEquipment(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *EquipmentExcel) TierInit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateTierInit(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *EquipmentExcel) RecipeId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateRecipeId(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *EquipmentExcel) MaxLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateMaxLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *EquipmentExcel) Wear() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EquipmentExcel) MutateWear(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *EquipmentExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(34, n)
}

func (rcv *EquipmentExcel) Rarity() Rarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return Rarity(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EquipmentExcel) MutateRarity(n Rarity) bool {
	return rcv._tab.MutateInt32Slot(36, int32(n))
}

func (rcv *EquipmentExcel) EquipmentCategory() EquipmentCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return EquipmentCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EquipmentExcel) MutateEquipmentCategory(n EquipmentCategory) bool {
	return rcv._tab.MutateInt32Slot(38, int32(n))
}

func (rcv *EquipmentExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func EquipmentExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func EquipmentExcelAddShortcutTypeId(builder *flatbuffers.Builder, shortcutTypeId int64) {
	builder.PrependInt64Slot(0, shortcutTypeId, 0)
}
func EquipmentExcelAddShopCategory(builder *flatbuffers.Builder, shopCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(shopCategory), 0)
}
func EquipmentExcelStartShopCategoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EquipmentExcelAddShiftingCraftQuality(builder *flatbuffers.Builder, shiftingCraftQuality int64) {
	builder.PrependInt64Slot(2, shiftingCraftQuality, 0)
}
func EquipmentExcelAddCraftQualityTier2(builder *flatbuffers.Builder, craftQualityTier2 int64) {
	builder.PrependInt64Slot(3, craftQualityTier2, 0)
}
func EquipmentExcelAddCraftQualityTier1(builder *flatbuffers.Builder, craftQualityTier1 int64) {
	builder.PrependInt64Slot(4, craftQualityTier1, 0)
}
func EquipmentExcelAddCraftQualityTier0(builder *flatbuffers.Builder, craftQualityTier0 int64) {
	builder.PrependInt64Slot(5, craftQualityTier0, 0)
}
func EquipmentExcelAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(tags), 0)
}
func EquipmentExcelStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EquipmentExcelAddImageName(builder *flatbuffers.Builder, imageName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(imageName), 0)
}
func EquipmentExcelAddIcon(builder *flatbuffers.Builder, icon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(icon), 0)
}
func EquipmentExcelAddStackableMax(builder *flatbuffers.Builder, stackableMax int32) {
	builder.PrependInt32Slot(9, stackableMax, 0)
}
func EquipmentExcelAddNextTierEquipment(builder *flatbuffers.Builder, nextTierEquipment int64) {
	builder.PrependInt64Slot(10, nextTierEquipment, 0)
}
func EquipmentExcelAddTierInit(builder *flatbuffers.Builder, tierInit int64) {
	builder.PrependInt64Slot(11, tierInit, 0)
}
func EquipmentExcelAddRecipeId(builder *flatbuffers.Builder, recipeId int32) {
	builder.PrependInt32Slot(12, recipeId, 0)
}
func EquipmentExcelAddMaxLevel(builder *flatbuffers.Builder, maxLevel int32) {
	builder.PrependInt32Slot(13, maxLevel, 0)
}
func EquipmentExcelAddWear(builder *flatbuffers.Builder, wear bool) {
	builder.PrependBoolSlot(14, wear, false)
}
func EquipmentExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(15, localizeEtcId, 0)
}
func EquipmentExcelAddRarity(builder *flatbuffers.Builder, rarity Rarity) {
	builder.PrependInt32Slot(16, int32(rarity), 0)
}
func EquipmentExcelAddEquipmentCategory(builder *flatbuffers.Builder, equipmentCategory EquipmentCategory) {
	builder.PrependInt32Slot(17, int32(equipmentCategory), 0)
}
func EquipmentExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(18, id, 0)
}
func EquipmentExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
