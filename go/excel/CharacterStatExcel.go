// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterStatExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterStatExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterStatExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterStatExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterStatExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterStatExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterStatExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterStatExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterStatExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterStatExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterStatExcel) StabilityRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateStabilityRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *CharacterStatExcel) StabilityPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateStabilityPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CharacterStatExcel) AttackPower1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateAttackPower1(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CharacterStatExcel) AttackPower100() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateAttackPower100(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterStatExcel) MaxHp1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateMaxHp1(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *CharacterStatExcel) MaxHp100() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateMaxHp100(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *CharacterStatExcel) DefensePower1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDefensePower1(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *CharacterStatExcel) DefensePower100() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDefensePower100(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *CharacterStatExcel) HealPower1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealPower1(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *CharacterStatExcel) HealPower100() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealPower100(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *CharacterStatExcel) DodgePoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDodgePoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *CharacterStatExcel) AccuracyPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateAccuracyPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *CharacterStatExcel) CriticalPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateCriticalPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *CharacterStatExcel) CriticalResistPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateCriticalResistPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *CharacterStatExcel) CriticalDamageRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateCriticalDamageRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *CharacterStatExcel) CriticalDamageResistRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateCriticalDamageResistRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func (rcv *CharacterStatExcel) BlockRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateBlockRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *CharacterStatExcel) HealEffectivenessRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealEffectivenessRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *CharacterStatExcel) OppressionPower() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateOppressionPower(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func (rcv *CharacterStatExcel) OppressionResist() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateOppressionResist(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

func (rcv *CharacterStatExcel) DefensePenetration1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDefensePenetration1(n int64) bool {
	return rcv._tab.MutateInt64Slot(46, n)
}

func (rcv *CharacterStatExcel) DefensePenetration100() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDefensePenetration100(n int64) bool {
	return rcv._tab.MutateInt64Slot(48, n)
}

func (rcv *CharacterStatExcel) DefensePenetrationResist1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDefensePenetrationResist1(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *CharacterStatExcel) DefensePenetrationResist100() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDefensePenetrationResist100(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

func (rcv *CharacterStatExcel) EnhanceExplosionRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceExplosionRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(54, n)
}

func (rcv *CharacterStatExcel) EnhancePierceRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhancePierceRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(56, n)
}

func (rcv *CharacterStatExcel) EnhanceMysticRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceMysticRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(58, n)
}

func (rcv *CharacterStatExcel) EnhanceSonicRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceSonicRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(60, n)
}

func (rcv *CharacterStatExcel) EnhanceSiegeRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceSiegeRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(62, n)
}

func (rcv *CharacterStatExcel) EnhanceNormalRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceNormalRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(64, n)
}

func (rcv *CharacterStatExcel) EnhanceLightArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceLightArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(66, n)
}

func (rcv *CharacterStatExcel) EnhanceHeavyArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceHeavyArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(68, n)
}

func (rcv *CharacterStatExcel) EnhanceUnarmedRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceUnarmedRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

func (rcv *CharacterStatExcel) EnhanceElasticArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceElasticArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(72, n)
}

func (rcv *CharacterStatExcel) EnhanceStructureRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceStructureRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(74, n)
}

func (rcv *CharacterStatExcel) EnhanceNormalArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceNormalArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(76, n)
}

func (rcv *CharacterStatExcel) ExtendBuffDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateExtendBuffDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(78, n)
}

func (rcv *CharacterStatExcel) ExtendDebuffDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateExtendDebuffDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(80, n)
}

func (rcv *CharacterStatExcel) ExtendCrowdControlDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateExtendCrowdControlDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(82, n)
}

func (rcv *CharacterStatExcel) AmmoCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateAmmoCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(84, n)
}

func (rcv *CharacterStatExcel) AmmoCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateAmmoCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(86, n)
}

func (rcv *CharacterStatExcel) IgnoreDelayCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateIgnoreDelayCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(88, n)
}

func (rcv *CharacterStatExcel) NormalAttackSpeed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateNormalAttackSpeed(n int64) bool {
	return rcv._tab.MutateInt64Slot(90, n)
}

func (rcv *CharacterStatExcel) Range() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateRange(n int64) bool {
	return rcv._tab.MutateInt64Slot(92, n)
}

func (rcv *CharacterStatExcel) InitialRangeRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateInitialRangeRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(94, n)
}

func (rcv *CharacterStatExcel) MoveSpeed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateMoveSpeed(n int64) bool {
	return rcv._tab.MutateInt64Slot(96, n)
}

func (rcv *CharacterStatExcel) SightPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateSightPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(98, n)
}

func (rcv *CharacterStatExcel) ActiveGauge() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateActiveGauge(n int64) bool {
	return rcv._tab.MutateInt64Slot(100, n)
}

func (rcv *CharacterStatExcel) GroggyGauge() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateGroggyGauge(n int32) bool {
	return rcv._tab.MutateInt32Slot(102, n)
}

func (rcv *CharacterStatExcel) GroggyTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateGroggyTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(104, n)
}

func (rcv *CharacterStatExcel) StrategyMobility() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateStrategyMobility(n int64) bool {
	return rcv._tab.MutateInt64Slot(106, n)
}

func (rcv *CharacterStatExcel) ActionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateActionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(108, n)
}

func (rcv *CharacterStatExcel) StrategySightRange() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateStrategySightRange(n int64) bool {
	return rcv._tab.MutateInt64Slot(110, n)
}

func (rcv *CharacterStatExcel) DamageRatio() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDamageRatio(n int64) bool {
	return rcv._tab.MutateInt64Slot(112, n)
}

func (rcv *CharacterStatExcel) DamagedRatio() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDamagedRatio(n int64) bool {
	return rcv._tab.MutateInt64Slot(114, n)
}

func (rcv *CharacterStatExcel) DamageRatio2Increase() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDamageRatio2Increase(n int64) bool {
	return rcv._tab.MutateInt64Slot(116, n)
}

func (rcv *CharacterStatExcel) DamageRatio2Decrease() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDamageRatio2Decrease(n int64) bool {
	return rcv._tab.MutateInt64Slot(118, n)
}

func (rcv *CharacterStatExcel) DamagedRatio2Increase() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDamagedRatio2Increase(n int64) bool {
	return rcv._tab.MutateInt64Slot(120, n)
}

func (rcv *CharacterStatExcel) DamagedRatio2Decrease() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateDamagedRatio2Decrease(n int64) bool {
	return rcv._tab.MutateInt64Slot(122, n)
}

func (rcv *CharacterStatExcel) ExDamagedRatioIncrease() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateExDamagedRatioIncrease(n int64) bool {
	return rcv._tab.MutateInt64Slot(124, n)
}

func (rcv *CharacterStatExcel) ExDamagedRatioDecrease() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateExDamagedRatioDecrease(n int64) bool {
	return rcv._tab.MutateInt64Slot(126, n)
}

func (rcv *CharacterStatExcel) EnhanceExDamageRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateEnhanceExDamageRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(128, n)
}

func (rcv *CharacterStatExcel) ReduceExDamagedRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateReduceExDamagedRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(130, n)
}

func (rcv *CharacterStatExcel) HealRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(132, n)
}

func (rcv *CharacterStatExcel) HealLightArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealLightArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(134, n)
}

func (rcv *CharacterStatExcel) HealHeavyArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealHeavyArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(136, n)
}

func (rcv *CharacterStatExcel) HealUnarmedRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealUnarmedRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(138, n)
}

func (rcv *CharacterStatExcel) HealElasticArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealElasticArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(140, n)
}

func (rcv *CharacterStatExcel) HealNormalArmorRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealNormalArmorRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(142, n)
}

func (rcv *CharacterStatExcel) HealedExplosionRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealedExplosionRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(144, n)
}

func (rcv *CharacterStatExcel) HealedPierceRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealedPierceRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(146, n)
}

func (rcv *CharacterStatExcel) HealedMysticRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealedMysticRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(148, n)
}

func (rcv *CharacterStatExcel) HealedSonicRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealedSonicRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(150, n)
}

func (rcv *CharacterStatExcel) HealedNormalRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateHealedNormalRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(152, n)
}

func (rcv *CharacterStatExcel) StreetBattleAdaptation() TerrainAdaptationStat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return TerrainAdaptationStat(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateStreetBattleAdaptation(n TerrainAdaptationStat) bool {
	return rcv._tab.MutateInt32Slot(154, int32(n))
}

func (rcv *CharacterStatExcel) OutdoorBattleAdaptation() TerrainAdaptationStat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return TerrainAdaptationStat(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateOutdoorBattleAdaptation(n TerrainAdaptationStat) bool {
	return rcv._tab.MutateInt32Slot(156, int32(n))
}

func (rcv *CharacterStatExcel) IndoorBattleAdaptation() TerrainAdaptationStat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return TerrainAdaptationStat(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateIndoorBattleAdaptation(n TerrainAdaptationStat) bool {
	return rcv._tab.MutateInt32Slot(158, int32(n))
}

func (rcv *CharacterStatExcel) RegenCost() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatExcel) MutateRegenCost(n int64) bool {
	return rcv._tab.MutateInt64Slot(160, n)
}

func CharacterStatExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(79)
}
func CharacterStatExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(0, characterId, 0)
}
func CharacterStatExcelAddStabilityRate(builder *flatbuffers.Builder, stabilityRate int64) {
	builder.PrependInt64Slot(1, stabilityRate, 0)
}
func CharacterStatExcelAddStabilityPoint(builder *flatbuffers.Builder, stabilityPoint int64) {
	builder.PrependInt64Slot(2, stabilityPoint, 0)
}
func CharacterStatExcelAddAttackPower1(builder *flatbuffers.Builder, attackPower1 int64) {
	builder.PrependInt64Slot(3, attackPower1, 0)
}
func CharacterStatExcelAddAttackPower100(builder *flatbuffers.Builder, attackPower100 int64) {
	builder.PrependInt64Slot(4, attackPower100, 0)
}
func CharacterStatExcelAddMaxHp1(builder *flatbuffers.Builder, maxHp1 int64) {
	builder.PrependInt64Slot(5, maxHp1, 0)
}
func CharacterStatExcelAddMaxHp100(builder *flatbuffers.Builder, maxHp100 int64) {
	builder.PrependInt64Slot(6, maxHp100, 0)
}
func CharacterStatExcelAddDefensePower1(builder *flatbuffers.Builder, defensePower1 int64) {
	builder.PrependInt64Slot(7, defensePower1, 0)
}
func CharacterStatExcelAddDefensePower100(builder *flatbuffers.Builder, defensePower100 int64) {
	builder.PrependInt64Slot(8, defensePower100, 0)
}
func CharacterStatExcelAddHealPower1(builder *flatbuffers.Builder, healPower1 int64) {
	builder.PrependInt64Slot(9, healPower1, 0)
}
func CharacterStatExcelAddHealPower100(builder *flatbuffers.Builder, healPower100 int64) {
	builder.PrependInt64Slot(10, healPower100, 0)
}
func CharacterStatExcelAddDodgePoint(builder *flatbuffers.Builder, dodgePoint int64) {
	builder.PrependInt64Slot(11, dodgePoint, 0)
}
func CharacterStatExcelAddAccuracyPoint(builder *flatbuffers.Builder, accuracyPoint int64) {
	builder.PrependInt64Slot(12, accuracyPoint, 0)
}
func CharacterStatExcelAddCriticalPoint(builder *flatbuffers.Builder, criticalPoint int64) {
	builder.PrependInt64Slot(13, criticalPoint, 0)
}
func CharacterStatExcelAddCriticalResistPoint(builder *flatbuffers.Builder, criticalResistPoint int64) {
	builder.PrependInt64Slot(14, criticalResistPoint, 0)
}
func CharacterStatExcelAddCriticalDamageRate(builder *flatbuffers.Builder, criticalDamageRate int64) {
	builder.PrependInt64Slot(15, criticalDamageRate, 0)
}
func CharacterStatExcelAddCriticalDamageResistRate(builder *flatbuffers.Builder, criticalDamageResistRate int64) {
	builder.PrependInt64Slot(16, criticalDamageResistRate, 0)
}
func CharacterStatExcelAddBlockRate(builder *flatbuffers.Builder, blockRate int64) {
	builder.PrependInt64Slot(17, blockRate, 0)
}
func CharacterStatExcelAddHealEffectivenessRate(builder *flatbuffers.Builder, healEffectivenessRate int64) {
	builder.PrependInt64Slot(18, healEffectivenessRate, 0)
}
func CharacterStatExcelAddOppressionPower(builder *flatbuffers.Builder, oppressionPower int64) {
	builder.PrependInt64Slot(19, oppressionPower, 0)
}
func CharacterStatExcelAddOppressionResist(builder *flatbuffers.Builder, oppressionResist int64) {
	builder.PrependInt64Slot(20, oppressionResist, 0)
}
func CharacterStatExcelAddDefensePenetration1(builder *flatbuffers.Builder, defensePenetration1 int64) {
	builder.PrependInt64Slot(21, defensePenetration1, 0)
}
func CharacterStatExcelAddDefensePenetration100(builder *flatbuffers.Builder, defensePenetration100 int64) {
	builder.PrependInt64Slot(22, defensePenetration100, 0)
}
func CharacterStatExcelAddDefensePenetrationResist1(builder *flatbuffers.Builder, defensePenetrationResist1 int64) {
	builder.PrependInt64Slot(23, defensePenetrationResist1, 0)
}
func CharacterStatExcelAddDefensePenetrationResist100(builder *flatbuffers.Builder, defensePenetrationResist100 int64) {
	builder.PrependInt64Slot(24, defensePenetrationResist100, 0)
}
func CharacterStatExcelAddEnhanceExplosionRate(builder *flatbuffers.Builder, enhanceExplosionRate int64) {
	builder.PrependInt64Slot(25, enhanceExplosionRate, 0)
}
func CharacterStatExcelAddEnhancePierceRate(builder *flatbuffers.Builder, enhancePierceRate int64) {
	builder.PrependInt64Slot(26, enhancePierceRate, 0)
}
func CharacterStatExcelAddEnhanceMysticRate(builder *flatbuffers.Builder, enhanceMysticRate int64) {
	builder.PrependInt64Slot(27, enhanceMysticRate, 0)
}
func CharacterStatExcelAddEnhanceSonicRate(builder *flatbuffers.Builder, enhanceSonicRate int64) {
	builder.PrependInt64Slot(28, enhanceSonicRate, 0)
}
func CharacterStatExcelAddEnhanceSiegeRate(builder *flatbuffers.Builder, enhanceSiegeRate int64) {
	builder.PrependInt64Slot(29, enhanceSiegeRate, 0)
}
func CharacterStatExcelAddEnhanceNormalRate(builder *flatbuffers.Builder, enhanceNormalRate int64) {
	builder.PrependInt64Slot(30, enhanceNormalRate, 0)
}
func CharacterStatExcelAddEnhanceLightArmorRate(builder *flatbuffers.Builder, enhanceLightArmorRate int64) {
	builder.PrependInt64Slot(31, enhanceLightArmorRate, 0)
}
func CharacterStatExcelAddEnhanceHeavyArmorRate(builder *flatbuffers.Builder, enhanceHeavyArmorRate int64) {
	builder.PrependInt64Slot(32, enhanceHeavyArmorRate, 0)
}
func CharacterStatExcelAddEnhanceUnarmedRate(builder *flatbuffers.Builder, enhanceUnarmedRate int64) {
	builder.PrependInt64Slot(33, enhanceUnarmedRate, 0)
}
func CharacterStatExcelAddEnhanceElasticArmorRate(builder *flatbuffers.Builder, enhanceElasticArmorRate int64) {
	builder.PrependInt64Slot(34, enhanceElasticArmorRate, 0)
}
func CharacterStatExcelAddEnhanceStructureRate(builder *flatbuffers.Builder, enhanceStructureRate int64) {
	builder.PrependInt64Slot(35, enhanceStructureRate, 0)
}
func CharacterStatExcelAddEnhanceNormalArmorRate(builder *flatbuffers.Builder, enhanceNormalArmorRate int64) {
	builder.PrependInt64Slot(36, enhanceNormalArmorRate, 0)
}
func CharacterStatExcelAddExtendBuffDuration(builder *flatbuffers.Builder, extendBuffDuration int64) {
	builder.PrependInt64Slot(37, extendBuffDuration, 0)
}
func CharacterStatExcelAddExtendDebuffDuration(builder *flatbuffers.Builder, extendDebuffDuration int64) {
	builder.PrependInt64Slot(38, extendDebuffDuration, 0)
}
func CharacterStatExcelAddExtendCrowdControlDuration(builder *flatbuffers.Builder, extendCrowdControlDuration int64) {
	builder.PrependInt64Slot(39, extendCrowdControlDuration, 0)
}
func CharacterStatExcelAddAmmoCount(builder *flatbuffers.Builder, ammoCount int64) {
	builder.PrependInt64Slot(40, ammoCount, 0)
}
func CharacterStatExcelAddAmmoCost(builder *flatbuffers.Builder, ammoCost int64) {
	builder.PrependInt64Slot(41, ammoCost, 0)
}
func CharacterStatExcelAddIgnoreDelayCount(builder *flatbuffers.Builder, ignoreDelayCount int64) {
	builder.PrependInt64Slot(42, ignoreDelayCount, 0)
}
func CharacterStatExcelAddNormalAttackSpeed(builder *flatbuffers.Builder, normalAttackSpeed int64) {
	builder.PrependInt64Slot(43, normalAttackSpeed, 0)
}
func CharacterStatExcelAddRange(builder *flatbuffers.Builder, range_ int64) {
	builder.PrependInt64Slot(44, range_, 0)
}
func CharacterStatExcelAddInitialRangeRate(builder *flatbuffers.Builder, initialRangeRate int64) {
	builder.PrependInt64Slot(45, initialRangeRate, 0)
}
func CharacterStatExcelAddMoveSpeed(builder *flatbuffers.Builder, moveSpeed int64) {
	builder.PrependInt64Slot(46, moveSpeed, 0)
}
func CharacterStatExcelAddSightPoint(builder *flatbuffers.Builder, sightPoint int64) {
	builder.PrependInt64Slot(47, sightPoint, 0)
}
func CharacterStatExcelAddActiveGauge(builder *flatbuffers.Builder, activeGauge int64) {
	builder.PrependInt64Slot(48, activeGauge, 0)
}
func CharacterStatExcelAddGroggyGauge(builder *flatbuffers.Builder, groggyGauge int32) {
	builder.PrependInt32Slot(49, groggyGauge, 0)
}
func CharacterStatExcelAddGroggyTime(builder *flatbuffers.Builder, groggyTime int32) {
	builder.PrependInt32Slot(50, groggyTime, 0)
}
func CharacterStatExcelAddStrategyMobility(builder *flatbuffers.Builder, strategyMobility int64) {
	builder.PrependInt64Slot(51, strategyMobility, 0)
}
func CharacterStatExcelAddActionCount(builder *flatbuffers.Builder, actionCount int64) {
	builder.PrependInt64Slot(52, actionCount, 0)
}
func CharacterStatExcelAddStrategySightRange(builder *flatbuffers.Builder, strategySightRange int64) {
	builder.PrependInt64Slot(53, strategySightRange, 0)
}
func CharacterStatExcelAddDamageRatio(builder *flatbuffers.Builder, damageRatio int64) {
	builder.PrependInt64Slot(54, damageRatio, 0)
}
func CharacterStatExcelAddDamagedRatio(builder *flatbuffers.Builder, damagedRatio int64) {
	builder.PrependInt64Slot(55, damagedRatio, 0)
}
func CharacterStatExcelAddDamageRatio2Increase(builder *flatbuffers.Builder, damageRatio2Increase int64) {
	builder.PrependInt64Slot(56, damageRatio2Increase, 0)
}
func CharacterStatExcelAddDamageRatio2Decrease(builder *flatbuffers.Builder, damageRatio2Decrease int64) {
	builder.PrependInt64Slot(57, damageRatio2Decrease, 0)
}
func CharacterStatExcelAddDamagedRatio2Increase(builder *flatbuffers.Builder, damagedRatio2Increase int64) {
	builder.PrependInt64Slot(58, damagedRatio2Increase, 0)
}
func CharacterStatExcelAddDamagedRatio2Decrease(builder *flatbuffers.Builder, damagedRatio2Decrease int64) {
	builder.PrependInt64Slot(59, damagedRatio2Decrease, 0)
}
func CharacterStatExcelAddExDamagedRatioIncrease(builder *flatbuffers.Builder, exDamagedRatioIncrease int64) {
	builder.PrependInt64Slot(60, exDamagedRatioIncrease, 0)
}
func CharacterStatExcelAddExDamagedRatioDecrease(builder *flatbuffers.Builder, exDamagedRatioDecrease int64) {
	builder.PrependInt64Slot(61, exDamagedRatioDecrease, 0)
}
func CharacterStatExcelAddEnhanceExDamageRate(builder *flatbuffers.Builder, enhanceExDamageRate int64) {
	builder.PrependInt64Slot(62, enhanceExDamageRate, 0)
}
func CharacterStatExcelAddReduceExDamagedRate(builder *flatbuffers.Builder, reduceExDamagedRate int64) {
	builder.PrependInt64Slot(63, reduceExDamagedRate, 0)
}
func CharacterStatExcelAddHealRate(builder *flatbuffers.Builder, healRate int64) {
	builder.PrependInt64Slot(64, healRate, 0)
}
func CharacterStatExcelAddHealLightArmorRate(builder *flatbuffers.Builder, healLightArmorRate int64) {
	builder.PrependInt64Slot(65, healLightArmorRate, 0)
}
func CharacterStatExcelAddHealHeavyArmorRate(builder *flatbuffers.Builder, healHeavyArmorRate int64) {
	builder.PrependInt64Slot(66, healHeavyArmorRate, 0)
}
func CharacterStatExcelAddHealUnarmedRate(builder *flatbuffers.Builder, healUnarmedRate int64) {
	builder.PrependInt64Slot(67, healUnarmedRate, 0)
}
func CharacterStatExcelAddHealElasticArmorRate(builder *flatbuffers.Builder, healElasticArmorRate int64) {
	builder.PrependInt64Slot(68, healElasticArmorRate, 0)
}
func CharacterStatExcelAddHealNormalArmorRate(builder *flatbuffers.Builder, healNormalArmorRate int64) {
	builder.PrependInt64Slot(69, healNormalArmorRate, 0)
}
func CharacterStatExcelAddHealedExplosionRate(builder *flatbuffers.Builder, healedExplosionRate int64) {
	builder.PrependInt64Slot(70, healedExplosionRate, 0)
}
func CharacterStatExcelAddHealedPierceRate(builder *flatbuffers.Builder, healedPierceRate int64) {
	builder.PrependInt64Slot(71, healedPierceRate, 0)
}
func CharacterStatExcelAddHealedMysticRate(builder *flatbuffers.Builder, healedMysticRate int64) {
	builder.PrependInt64Slot(72, healedMysticRate, 0)
}
func CharacterStatExcelAddHealedSonicRate(builder *flatbuffers.Builder, healedSonicRate int64) {
	builder.PrependInt64Slot(73, healedSonicRate, 0)
}
func CharacterStatExcelAddHealedNormalRate(builder *flatbuffers.Builder, healedNormalRate int64) {
	builder.PrependInt64Slot(74, healedNormalRate, 0)
}
func CharacterStatExcelAddStreetBattleAdaptation(builder *flatbuffers.Builder, streetBattleAdaptation TerrainAdaptationStat) {
	builder.PrependInt32Slot(75, int32(streetBattleAdaptation), 0)
}
func CharacterStatExcelAddOutdoorBattleAdaptation(builder *flatbuffers.Builder, outdoorBattleAdaptation TerrainAdaptationStat) {
	builder.PrependInt32Slot(76, int32(outdoorBattleAdaptation), 0)
}
func CharacterStatExcelAddIndoorBattleAdaptation(builder *flatbuffers.Builder, indoorBattleAdaptation TerrainAdaptationStat) {
	builder.PrependInt32Slot(77, int32(indoorBattleAdaptation), 0)
}
func CharacterStatExcelAddRegenCost(builder *flatbuffers.Builder, regenCost int64) {
	builder.PrependInt64Slot(78, regenCost, 0)
}
func CharacterStatExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
