// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameRoadPuzzleAdditionalRewardExcelDto represents a FlatBuffers table
type MiniGameRoadPuzzleAdditionalRewardExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId     int64      `json:"event_content_id"`
	RewardParcelAmount int64      `json:"reward_parcel_amount"`
	RewardParcelId     int64      `json:"reward_parcel_id"`
	RewardParcelType   ParcelType `json:"reward_parcel_type"`
	UniqueId           int64      `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameRoadPuzzleAdditionalRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameRoadPuzzleAdditionalRewardExcelStart(b)
	MiniGameRoadPuzzleAdditionalRewardExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MiniGameRoadPuzzleAdditionalRewardExcelAddRewardParcelAmount(b, fbsutils.Convert(t.RewardParcelAmount, t.FlatBuffer.TableKey))
	MiniGameRoadPuzzleAdditionalRewardExcelAddRewardParcelId(b, fbsutils.Convert(t.RewardParcelId, t.FlatBuffer.TableKey))
	MiniGameRoadPuzzleAdditionalRewardExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	MiniGameRoadPuzzleAdditionalRewardExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return MiniGameRoadPuzzleAdditionalRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameRoadPuzzleAdditionalRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameRoadPuzzleAdditionalRewardExcelDto) UnmarshalMessage(e *MiniGameRoadPuzzleAdditionalRewardExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = fbsutils.Convert(e.RewardParcelAmount(), t.FlatBuffer.TableKey)
	t.RewardParcelId = fbsutils.Convert(e.RewardParcelId(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameRoadPuzzleAdditionalRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameRoadPuzzleAdditionalRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameRoadPuzzleAdditionalRewardExcelDto) FlatDataName() string {
	return "MiniGameRoadPuzzleAdditionalRewardExcel"
}
