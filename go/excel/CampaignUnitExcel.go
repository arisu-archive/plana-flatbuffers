// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CampaignUnitExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCampaignUnitExcel(buf []byte, offset flatbuffers.UOffsetT) *CampaignUnitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CampaignUnitExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCampaignUnitExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCampaignUnitExcel(buf []byte, offset flatbuffers.UOffsetT) *CampaignUnitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CampaignUnitExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCampaignUnitExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CampaignUnitExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CampaignUnitExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CampaignUnitExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CampaignUnitExcel) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *CampaignUnitExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CampaignUnitExcel) PrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CampaignUnitExcel) StrategyPrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CampaignUnitExcel) EnterScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CampaignUnitExcel) EnterScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateEnterScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CampaignUnitExcel) ClearScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CampaignUnitExcel) ClearScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateClearScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CampaignUnitExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *CampaignUnitExcel) MoveRange() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateMoveRange(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *CampaignUnitExcel) AiMoveType() StrategyAIType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return StrategyAIType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateAiMoveType(n StrategyAIType) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *CampaignUnitExcel) Grade() HexaUnitGrade {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return HexaUnitGrade(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateGrade(n HexaUnitGrade) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *CampaignUnitExcel) EnvironmentType() TacticEnvironment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return TacticEnvironment(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CampaignUnitExcel) MutateEnvironmentType(n TacticEnvironment) bool {
	return rcv._tab.MutateInt32Slot(26, int32(n))
}

func (rcv *CampaignUnitExcel) Scale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CampaignUnitExcel) MutateScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(28, n)
}

func (rcv *CampaignUnitExcel) IsTacticSkip() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CampaignUnitExcel) MutateIsTacticSkip(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

func CampaignUnitExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func CampaignUnitExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CampaignUnitExcelAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(1, key, 0)
}
func CampaignUnitExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func CampaignUnitExcelAddPrefabName(builder *flatbuffers.Builder, prefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(prefabName), 0)
}
func CampaignUnitExcelAddStrategyPrefabName(builder *flatbuffers.Builder, strategyPrefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(strategyPrefabName), 0)
}
func CampaignUnitExcelAddEnterScenarioGroupId(builder *flatbuffers.Builder, enterScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(enterScenarioGroupId), 0)
}
func CampaignUnitExcelStartEnterScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CampaignUnitExcelAddClearScenarioGroupId(builder *flatbuffers.Builder, clearScenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(clearScenarioGroupId), 0)
}
func CampaignUnitExcelStartClearScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CampaignUnitExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(7, groundId, 0)
}
func CampaignUnitExcelAddMoveRange(builder *flatbuffers.Builder, moveRange int32) {
	builder.PrependInt32Slot(8, moveRange, 0)
}
func CampaignUnitExcelAddAiMoveType(builder *flatbuffers.Builder, aiMoveType StrategyAIType) {
	builder.PrependInt32Slot(9, int32(aiMoveType), 0)
}
func CampaignUnitExcelAddGrade(builder *flatbuffers.Builder, grade HexaUnitGrade) {
	builder.PrependInt32Slot(10, int32(grade), 0)
}
func CampaignUnitExcelAddEnvironmentType(builder *flatbuffers.Builder, environmentType TacticEnvironment) {
	builder.PrependInt32Slot(11, int32(environmentType), 0)
}
func CampaignUnitExcelAddScale(builder *flatbuffers.Builder, scale float32) {
	builder.PrependFloat32Slot(12, scale, 0.0)
}
func CampaignUnitExcelAddIsTacticSkip(builder *flatbuffers.Builder, isTacticSkip bool) {
	builder.PrependBoolSlot(13, isTacticSkip, false)
}
func CampaignUnitExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
