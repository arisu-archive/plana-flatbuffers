// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// InformationExcelDto represents a FlatBuffers table
type InformationExcelDto struct {
	fbsutils.FlatBuffer
	GroupId            int64    `json:"group_id"`
	PageName           string   `json:"page_name"`
	LocalizeCodeId     string   `json:"localize_code_id"`
	TutorialParentName []string `json:"tutorial_parent_name"`
	UiName             []string `json:"ui_name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *InformationExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_page_name := b.CreateString(fbsutils.Convert(t.PageName, t.FlatBuffer.TableKey))
	__offset_localize_code_id := b.CreateString(fbsutils.Convert(t.LocalizeCodeId, t.FlatBuffer.TableKey))
	var __offset_tutorial_parent_name flatbuffers.UOffsetT
	__stringOffsets_tutorial_parent_name := make([]flatbuffers.UOffsetT, len(t.TutorialParentName))
	for i := range len(t.TutorialParentName) {
		__stringOffsets_tutorial_parent_name[i] = b.CreateString(fbsutils.Convert(t.TutorialParentName[i], t.FlatBuffer.TableKey))
	}
	InformationExcelStartTutorialParentNameVector(b, len(t.TutorialParentName))
	for i := range len(t.TutorialParentName) {
		b.PrependUOffsetT(__stringOffsets_tutorial_parent_name[len(t.TutorialParentName)-i-1])
	}
	__offset_tutorial_parent_name = b.EndVector(len(t.TutorialParentName))
	var __offset_ui_name flatbuffers.UOffsetT
	__stringOffsets_ui_name := make([]flatbuffers.UOffsetT, len(t.UiName))
	for i := range len(t.UiName) {
		__stringOffsets_ui_name[i] = b.CreateString(fbsutils.Convert(t.UiName[i], t.FlatBuffer.TableKey))
	}
	InformationExcelStartUiNameVector(b, len(t.UiName))
	for i := range len(t.UiName) {
		b.PrependUOffsetT(__stringOffsets_ui_name[len(t.UiName)-i-1])
	}
	__offset_ui_name = b.EndVector(len(t.UiName))
	InformationExcelStart(b)
	InformationExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	InformationExcelAddPageName(b, __offset_page_name)
	InformationExcelAddLocalizeCodeId(b, __offset_localize_code_id)
	InformationExcelAddTutorialParentName(b, __offset_tutorial_parent_name)
	InformationExcelAddUiName(b, __offset_ui_name)
	return InformationExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *InformationExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *InformationExcelDto) UnmarshalMessage(e *InformationExcel) error {
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.PageName = fbsutils.Convert(string(e.PageName()), t.FlatBuffer.TableKey)
	t.LocalizeCodeId = fbsutils.Convert(string(e.LocalizeCodeId()), t.FlatBuffer.TableKey)
	t.TutorialParentName = make([]string, e.TutorialParentNameLength())
	for i := range e.TutorialParentNameLength() {
		t.TutorialParentName[i] = fbsutils.Convert(string(e.TutorialParentName(i)), t.FlatBuffer.TableKey)
	}
	t.UiName = make([]string, e.UiNameLength())
	for i := range e.UiNameLength() {
		t.UiName[i] = fbsutils.Convert(string(e.UiName(i)), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *InformationExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsInformationExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (InformationExcelDto) FlatDataName() string {
	return "InformationExcel"
}
