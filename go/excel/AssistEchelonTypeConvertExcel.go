// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AssistEchelonTypeConvertExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAssistEchelonTypeConvertExcel(buf []byte, offset flatbuffers.UOffsetT) *AssistEchelonTypeConvertExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AssistEchelonTypeConvertExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishAssistEchelonTypeConvertExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAssistEchelonTypeConvertExcel(buf []byte, offset flatbuffers.UOffsetT) *AssistEchelonTypeConvertExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AssistEchelonTypeConvertExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAssistEchelonTypeConvertExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AssistEchelonTypeConvertExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AssistEchelonTypeConvertExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AssistEchelonTypeConvertExcel) Contents() EchelonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return EchelonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AssistEchelonTypeConvertExcel) MutateContents(n EchelonType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *AssistEchelonTypeConvertExcel) ConvertTo() EchelonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EchelonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AssistEchelonTypeConvertExcel) MutateConvertTo(n EchelonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func AssistEchelonTypeConvertExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AssistEchelonTypeConvertExcelAddContents(builder *flatbuffers.Builder, contents EchelonType) {
	builder.PrependInt32Slot(0, int32(contents), 0)
}
func AssistEchelonTypeConvertExcelAddConvertTo(builder *flatbuffers.Builder, convertTo EchelonType) {
	builder.PrependInt32Slot(1, int32(convertTo), 0)
}
func AssistEchelonTypeConvertExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
