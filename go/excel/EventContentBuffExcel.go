// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentBuffExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentBuffExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentBuffExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentBuffExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentBuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentBuffExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentBuffExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentBuffExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentBuffExcel) BuffDescriptionLocalizeCodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentBuffExcel) CharacterTag() Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Tag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentBuffExcel) MutateCharacterTag(n Tag) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentBuffExcel) EnumType() EventContentBuffFindRule {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return EventContentBuffFindRule(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentBuffExcel) MutateEnumType(n EventContentBuffFindRule) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EventContentBuffExcel) EnumTypeValue(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventContentBuffExcel) EnumTypeValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentBuffExcel) EventContentBuffId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentBuffExcel) MutateEventContentBuffId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentBuffExcel) IconPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentBuffExcel) IsBuff() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentBuffExcel) MutateIsBuff(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *EventContentBuffExcel) SkillGroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentBuffExcel) SpriteName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventContentBuffExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func EventContentBuffExcelAddBuffDescriptionLocalizeCodeId(builder *flatbuffers.Builder, buffDescriptionLocalizeCodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(buffDescriptionLocalizeCodeId), 0)
}
func EventContentBuffExcelAddCharacterTag(builder *flatbuffers.Builder, characterTag Tag) {
	builder.PrependInt32Slot(1, int32(characterTag), 0)
}
func EventContentBuffExcelAddEnumType(builder *flatbuffers.Builder, enumType EventContentBuffFindRule) {
	builder.PrependInt32Slot(2, int32(enumType), 0)
}
func EventContentBuffExcelAddEnumTypeValue(builder *flatbuffers.Builder, enumTypeValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(enumTypeValue), 0)
}
func EventContentBuffExcelStartEnumTypeValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentBuffExcelAddEventContentBuffId(builder *flatbuffers.Builder, eventContentBuffId int64) {
	builder.PrependInt64Slot(4, eventContentBuffId, 0)
}
func EventContentBuffExcelAddIconPath(builder *flatbuffers.Builder, iconPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(iconPath), 0)
}
func EventContentBuffExcelAddIsBuff(builder *flatbuffers.Builder, isBuff bool) {
	builder.PrependBoolSlot(6, isBuff, false)
}
func EventContentBuffExcelAddSkillGroupId(builder *flatbuffers.Builder, skillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(skillGroupId), 0)
}
func EventContentBuffExcelAddSpriteName(builder *flatbuffers.Builder, spriteName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(spriteName), 0)
}
func EventContentBuffExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
