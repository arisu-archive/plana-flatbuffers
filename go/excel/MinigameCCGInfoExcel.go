// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGInfoExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGInfoExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGInfoExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGInfoExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGInfoExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGInfoExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MinigameCCGInfoExcel) CcgId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutateCcgId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MinigameCCGInfoExcel) CostParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutateCostParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *MinigameCCGInfoExcel) CostParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutateCostParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MinigameCCGInfoExcel) CostParcelAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutateCostParcelAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *MinigameCCGInfoExcel) CardBackPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGInfoExcel) PerkCostParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutatePerkCostParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *MinigameCCGInfoExcel) PerkCostParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGInfoExcel) MutatePerkCostParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func MinigameCCGInfoExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MinigameCCGInfoExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func MinigameCCGInfoExcelAddCcgId(builder *flatbuffers.Builder, ccgId int64) {
	builder.PrependInt64Slot(1, ccgId, 0)
}
func MinigameCCGInfoExcelAddCostParcelType(builder *flatbuffers.Builder, costParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(costParcelType), 0)
}
func MinigameCCGInfoExcelAddCostParcelId(builder *flatbuffers.Builder, costParcelId int64) {
	builder.PrependInt64Slot(3, costParcelId, 0)
}
func MinigameCCGInfoExcelAddCostParcelAmount(builder *flatbuffers.Builder, costParcelAmount int32) {
	builder.PrependInt32Slot(4, costParcelAmount, 0)
}
func MinigameCCGInfoExcelAddCardBackPath(builder *flatbuffers.Builder, cardBackPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(cardBackPath), 0)
}
func MinigameCCGInfoExcelAddPerkCostParcelType(builder *flatbuffers.Builder, perkCostParcelType ParcelType) {
	builder.PrependInt32Slot(6, int32(perkCostParcelType), 0)
}
func MinigameCCGInfoExcelAddPerkCostParcelId(builder *flatbuffers.Builder, perkCostParcelId int64) {
	builder.PrependInt64Slot(7, perkCostParcelId, 0)
}
func MinigameCCGInfoExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
