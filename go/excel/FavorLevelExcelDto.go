// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FavorLevelExcelDto represents a FlatBuffers table
type FavorLevelExcelDto struct {
	fbsutils.FlatBuffer
	Level   int64   `json:"level"`
	ExpType []int64 `json:"exp_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FavorLevelExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	FavorLevelExcelStart(b)
	FavorLevelExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	FavorLevelExcelStartExpTypeVector(b, len(t.ExpType))
	for i := range len(t.ExpType) {
		b.PrependInt64(fbsutils.Convert(t.ExpType[len(t.ExpType)-i-1], t.FlatBuffer.TableKey))
	}
	FavorLevelExcelAddExpType(b, b.EndVector(len(t.ExpType)))
	return FavorLevelExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FavorLevelExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FavorLevelExcelDto) UnmarshalMessage(e *FavorLevelExcel) error {
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.ExpType = make([]int64, e.ExpTypeLength())
	for i := range e.ExpTypeLength() {
		t.ExpType[i] = fbsutils.Convert(e.ExpType(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FavorLevelExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFavorLevelExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FavorLevelExcelDto) FlatDataName() string {
	return "FavorLevelExcel"
}
