// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamEndingRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamEndingRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamEndingRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamEndingRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamEndingRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamEndingRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamEndingRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamEndingRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamEndingRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamEndingRewardExcel) RewardParcelAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) RewardParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateRewardParcelAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDreamEndingRewardExcel) RewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) RewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDreamEndingRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameDreamEndingRewardExcel) DreamMakerEndingType() DreamMakerEndingType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return DreamMakerEndingType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateDreamMakerEndingType(n DreamMakerEndingType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *MiniGameDreamEndingRewardExcel) DreamMakerEndingRewardType() DreamMakerEndingRewardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return DreamMakerEndingRewardType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateDreamMakerEndingRewardType(n DreamMakerEndingRewardType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *MiniGameDreamEndingRewardExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *MiniGameDreamEndingRewardExcel) EndingId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateEndingId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MiniGameDreamEndingRewardExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingRewardExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func MiniGameDreamEndingRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MiniGameDreamEndingRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rewardParcelAmount), 0)
}
func MiniGameDreamEndingRewardExcelStartRewardParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDreamEndingRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rewardParcelId), 0)
}
func MiniGameDreamEndingRewardExcelStartRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDreamEndingRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func MiniGameDreamEndingRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDreamEndingRewardExcelAddDreamMakerEndingType(builder *flatbuffers.Builder, dreamMakerEndingType DreamMakerEndingType) {
	builder.PrependInt32Slot(3, int32(dreamMakerEndingType), 0)
}
func MiniGameDreamEndingRewardExcelAddDreamMakerEndingRewardType(builder *flatbuffers.Builder, dreamMakerEndingRewardType DreamMakerEndingRewardType) {
	builder.PrependInt32Slot(4, int32(dreamMakerEndingRewardType), 0)
}
func MiniGameDreamEndingRewardExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(5, localizeEtcId, 0)
}
func MiniGameDreamEndingRewardExcelAddEndingId(builder *flatbuffers.Builder, endingId int64) {
	builder.PrependInt64Slot(6, endingId, 0)
}
func MiniGameDreamEndingRewardExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(7, eventContentId, 0)
}
func MiniGameDreamEndingRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
