// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// RaidStageExcelDto represents a FlatBuffers table
type RaidStageExcelDto struct {
	fbsutils.FlatBuffer
	EchelonExtensionType          EchelonExtensionType `json:"echelon_extension_type"`
	BossBgInfoKey                 uint32               `json:"boss_bg_info_key"`
	ShowSkillCard                 bool                 `json:"show_skill_card"`
	ClearScenarioKey              uint32               `json:"clear_scenario_key"`
	EnterScenarioKey              uint32               `json:"enter_scenario_key"`
	TimeLinePhase                 int64                `json:"time_line_phase"`
	PhaseChangeTimelinePath       string               `json:"phase_change_timeline_path"`
	VictoryTimelinePath           string               `json:"victory_timeline_path"`
	BattleReadyTimelinePhaseEnd   []int32              `json:"battle_ready_timeline_phase_end"`
	BattleReadyTimelinePhaseStart []int32              `json:"battle_ready_timeline_phase_start"`
	BattleReadyTimelinePath       []string             `json:"battle_ready_timeline_path"`
	RaidRewardGroupId             int64                `json:"raid_reward_group_id"`
	MaximumAcquisitionScore       int64                `json:"maximum_acquisition_score"`
	MinimumAcquisitionScore       int64                `json:"minimum_acquisition_score"`
	HpPercentScore                int64                `json:"hp_percent_score"`
	PerSecondMinusScore           int64                `json:"per_second_minus_score"`
	MaximumScore                  int64                `json:"maximum_score"`
	DefaultClearScore             int64                `json:"default_clear_score"`
	TacticEnvironment             TacticEnvironment    `json:"tactic_environment"`
	EnterTimeLine                 string               `json:"enter_time_line"`
	GroundDevName                 string               `json:"ground_dev_name"`
	GroundId                      int64                `json:"ground_id"`
	BattleDuration                int64                `json:"battle_duration"`
	RaidRoomLifeTime              int32                `json:"raid_room_life_time"`
	MaxPlayerCount                int64                `json:"max_player_count"`
	DifficultyOpenCondition       bool                 `json:"difficulty_open_condition"`
	Difficulty                    Difficulty           `json:"difficulty"`
	BossCharacterId               []int64              `json:"boss_character_id"`
	RaidCharacterId               int64                `json:"raid_character_id"`
	BgPath                        string               `json:"bg_path"`
	PortraitPath                  string               `json:"portrait_path"`
	RaidBossGroup                 string               `json:"raid_boss_group"`
	UseBossAiPhaseSync            bool                 `json:"use_boss_ai_phase_sync"`
	UseBossIndex                  bool                 `json:"use_boss_index"`
	Id                            int64                `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *RaidStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	RaidStageExcelStart(b)
	RaidStageExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	RaidStageExcelAddBossBgInfoKey(b, fbsutils.Convert(t.BossBgInfoKey, t.FlatBuffer.TableKey))
	RaidStageExcelAddShowSkillCard(b, t.ShowSkillCard)
	RaidStageExcelAddClearScenarioKey(b, fbsutils.Convert(t.ClearScenarioKey, t.FlatBuffer.TableKey))
	RaidStageExcelAddEnterScenarioKey(b, fbsutils.Convert(t.EnterScenarioKey, t.FlatBuffer.TableKey))
	RaidStageExcelAddTimeLinePhase(b, fbsutils.Convert(t.TimeLinePhase, t.FlatBuffer.TableKey))
	RaidStageExcelAddPhaseChangeTimelinePath(b, b.CreateString(fbsutils.Convert(t.PhaseChangeTimelinePath, t.FlatBuffer.TableKey)))
	RaidStageExcelAddVictoryTimelinePath(b, b.CreateString(fbsutils.Convert(t.VictoryTimelinePath, t.FlatBuffer.TableKey)))
	RaidStageExcelStartBattleReadyTimelinePhaseEndVector(b, len(t.BattleReadyTimelinePhaseEnd))
	for i := range len(t.BattleReadyTimelinePhaseEnd) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseEnd[len(t.BattleReadyTimelinePhaseEnd)-i-1], t.FlatBuffer.TableKey))
	}
	RaidStageExcelAddBattleReadyTimelinePhaseEnd(b, b.EndVector(len(t.BattleReadyTimelinePhaseEnd)))
	RaidStageExcelStartBattleReadyTimelinePhaseStartVector(b, len(t.BattleReadyTimelinePhaseStart))
	for i := range len(t.BattleReadyTimelinePhaseStart) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseStart[len(t.BattleReadyTimelinePhaseStart)-i-1], t.FlatBuffer.TableKey))
	}
	RaidStageExcelAddBattleReadyTimelinePhaseStart(b, b.EndVector(len(t.BattleReadyTimelinePhaseStart)))
	RaidStageExcelStartBattleReadyTimelinePathVector(b, len(t.BattleReadyTimelinePath))
	for i := range len(t.BattleReadyTimelinePath) {
		b.PrependUOffsetT(b.CreateString(t.BattleReadyTimelinePath[len(t.BattleReadyTimelinePath)-i-1]))
	}
	RaidStageExcelAddBattleReadyTimelinePath(b, b.EndVector(len(t.BattleReadyTimelinePath)))
	RaidStageExcelAddRaidRewardGroupId(b, fbsutils.Convert(t.RaidRewardGroupId, t.FlatBuffer.TableKey))
	RaidStageExcelAddMaximumAcquisitionScore(b, fbsutils.Convert(t.MaximumAcquisitionScore, t.FlatBuffer.TableKey))
	RaidStageExcelAddMinimumAcquisitionScore(b, fbsutils.Convert(t.MinimumAcquisitionScore, t.FlatBuffer.TableKey))
	RaidStageExcelAddHpPercentScore(b, fbsutils.Convert(t.HpPercentScore, t.FlatBuffer.TableKey))
	RaidStageExcelAddPerSecondMinusScore(b, fbsutils.Convert(t.PerSecondMinusScore, t.FlatBuffer.TableKey))
	RaidStageExcelAddMaximumScore(b, fbsutils.Convert(t.MaximumScore, t.FlatBuffer.TableKey))
	RaidStageExcelAddDefaultClearScore(b, fbsutils.Convert(t.DefaultClearScore, t.FlatBuffer.TableKey))
	RaidStageExcelAddTacticEnvironment(b, fbsutils.Convert(t.TacticEnvironment, t.FlatBuffer.TableKey))
	RaidStageExcelAddEnterTimeLine(b, b.CreateString(fbsutils.Convert(t.EnterTimeLine, t.FlatBuffer.TableKey)))
	RaidStageExcelAddGroundDevName(b, b.CreateString(fbsutils.Convert(t.GroundDevName, t.FlatBuffer.TableKey)))
	RaidStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	RaidStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	RaidStageExcelAddRaidRoomLifeTime(b, fbsutils.Convert(t.RaidRoomLifeTime, t.FlatBuffer.TableKey))
	RaidStageExcelAddMaxPlayerCount(b, fbsutils.Convert(t.MaxPlayerCount, t.FlatBuffer.TableKey))
	RaidStageExcelAddDifficultyOpenCondition(b, t.DifficultyOpenCondition)
	RaidStageExcelAddDifficulty(b, fbsutils.Convert(t.Difficulty, t.FlatBuffer.TableKey))
	RaidStageExcelStartBossCharacterIdVector(b, len(t.BossCharacterId))
	for i := range len(t.BossCharacterId) {
		b.PrependInt64(fbsutils.Convert(t.BossCharacterId[len(t.BossCharacterId)-i-1], t.FlatBuffer.TableKey))
	}
	RaidStageExcelAddBossCharacterId(b, b.EndVector(len(t.BossCharacterId)))
	RaidStageExcelAddRaidCharacterId(b, fbsutils.Convert(t.RaidCharacterId, t.FlatBuffer.TableKey))
	RaidStageExcelAddBgPath(b, b.CreateString(fbsutils.Convert(t.BgPath, t.FlatBuffer.TableKey)))
	RaidStageExcelAddPortraitPath(b, b.CreateString(fbsutils.Convert(t.PortraitPath, t.FlatBuffer.TableKey)))
	RaidStageExcelAddRaidBossGroup(b, b.CreateString(fbsutils.Convert(t.RaidBossGroup, t.FlatBuffer.TableKey)))
	RaidStageExcelAddUseBossAiPhaseSync(b, t.UseBossAiPhaseSync)
	RaidStageExcelAddUseBossIndex(b, t.UseBossIndex)
	RaidStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return RaidStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *RaidStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *RaidStageExcelDto) UnmarshalMessage(e *RaidStageExcel) error {
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	t.BossBgInfoKey = fbsutils.Convert(e.BossBgInfoKey(), t.FlatBuffer.TableKey)
	t.ShowSkillCard = e.ShowSkillCard()
	t.ClearScenarioKey = fbsutils.Convert(e.ClearScenarioKey(), t.FlatBuffer.TableKey)
	t.EnterScenarioKey = fbsutils.Convert(e.EnterScenarioKey(), t.FlatBuffer.TableKey)
	t.TimeLinePhase = fbsutils.Convert(e.TimeLinePhase(), t.FlatBuffer.TableKey)
	t.PhaseChangeTimelinePath = fbsutils.Convert(string(e.PhaseChangeTimelinePath()), t.FlatBuffer.TableKey)
	t.VictoryTimelinePath = fbsutils.Convert(string(e.VictoryTimelinePath()), t.FlatBuffer.TableKey)
	t.BattleReadyTimelinePhaseEnd = make([]int32, e.BattleReadyTimelinePhaseEndLength())
	for i := range e.BattleReadyTimelinePhaseEndLength() {
		t.BattleReadyTimelinePhaseEnd[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseEnd(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePhaseStart = make([]int32, e.BattleReadyTimelinePhaseStartLength())
	for i := range e.BattleReadyTimelinePhaseStartLength() {
		t.BattleReadyTimelinePhaseStart[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseStart(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePath = make([]string, e.BattleReadyTimelinePathLength())
	for i := range e.BattleReadyTimelinePathLength() {
		t.BattleReadyTimelinePath[i] = fbsutils.Convert(string(e.BattleReadyTimelinePath(i)), t.FlatBuffer.TableKey)
	}
	t.RaidRewardGroupId = fbsutils.Convert(e.RaidRewardGroupId(), t.FlatBuffer.TableKey)
	t.MaximumAcquisitionScore = fbsutils.Convert(e.MaximumAcquisitionScore(), t.FlatBuffer.TableKey)
	t.MinimumAcquisitionScore = fbsutils.Convert(e.MinimumAcquisitionScore(), t.FlatBuffer.TableKey)
	t.HpPercentScore = fbsutils.Convert(e.HpPercentScore(), t.FlatBuffer.TableKey)
	t.PerSecondMinusScore = fbsutils.Convert(e.PerSecondMinusScore(), t.FlatBuffer.TableKey)
	t.MaximumScore = fbsutils.Convert(e.MaximumScore(), t.FlatBuffer.TableKey)
	t.DefaultClearScore = fbsutils.Convert(e.DefaultClearScore(), t.FlatBuffer.TableKey)
	t.TacticEnvironment = TacticEnvironment(fbsutils.Convert(int32(e.TacticEnvironment()), t.FlatBuffer.TableKey))
	t.EnterTimeLine = fbsutils.Convert(string(e.EnterTimeLine()), t.FlatBuffer.TableKey)
	t.GroundDevName = fbsutils.Convert(string(e.GroundDevName()), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.RaidRoomLifeTime = fbsutils.Convert(e.RaidRoomLifeTime(), t.FlatBuffer.TableKey)
	t.MaxPlayerCount = fbsutils.Convert(e.MaxPlayerCount(), t.FlatBuffer.TableKey)
	t.DifficultyOpenCondition = e.DifficultyOpenCondition()
	t.Difficulty = Difficulty(fbsutils.Convert(int32(e.Difficulty()), t.FlatBuffer.TableKey))
	t.BossCharacterId = make([]int64, e.BossCharacterIdLength())
	for i := range e.BossCharacterIdLength() {
		t.BossCharacterId[i] = fbsutils.Convert(e.BossCharacterId(i), t.FlatBuffer.TableKey)
	}
	t.RaidCharacterId = fbsutils.Convert(e.RaidCharacterId(), t.FlatBuffer.TableKey)
	t.BgPath = fbsutils.Convert(string(e.BgPath()), t.FlatBuffer.TableKey)
	t.PortraitPath = fbsutils.Convert(string(e.PortraitPath()), t.FlatBuffer.TableKey)
	t.RaidBossGroup = fbsutils.Convert(string(e.RaidBossGroup()), t.FlatBuffer.TableKey)
	t.UseBossAiPhaseSync = e.UseBossAiPhaseSync()
	t.UseBossIndex = e.UseBossIndex()
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *RaidStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsRaidStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (RaidStageExcelDto) FlatDataName() string {
	return "RaidStageExcel"
}
