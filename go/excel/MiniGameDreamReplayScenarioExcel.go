// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamReplayScenarioExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamReplayScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamReplayScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamReplayScenarioExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamReplayScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamReplayScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamReplayScenarioExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamReplayScenarioExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamReplayScenarioExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamReplayScenarioExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamReplayScenarioExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameDreamReplayScenarioExcel) ScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamReplayScenarioExcel) MutateScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDreamReplayScenarioExcel) Order() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamReplayScenarioExcel) MutateOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDreamReplayScenarioExcel) ReplaySummaryTitleLocalize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamReplayScenarioExcel) MutateReplaySummaryTitleLocalize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *MiniGameDreamReplayScenarioExcel) ReplaySummaryLocalizeScenarioId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamReplayScenarioExcel) MutateReplaySummaryLocalizeScenarioId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *MiniGameDreamReplayScenarioExcel) ReplayScenarioResource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDreamReplayScenarioExcel) IsReplayScenarioHorizon() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameDreamReplayScenarioExcel) MutateIsReplayScenarioHorizon(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func MiniGameDreamReplayScenarioExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func MiniGameDreamReplayScenarioExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func MiniGameDreamReplayScenarioExcelAddScenarioGroupId(builder *flatbuffers.Builder, scenarioGroupId int64) {
	builder.PrependInt64Slot(1, scenarioGroupId, 0)
}
func MiniGameDreamReplayScenarioExcelAddOrder(builder *flatbuffers.Builder, order int64) {
	builder.PrependInt64Slot(2, order, 0)
}
func MiniGameDreamReplayScenarioExcelAddReplaySummaryTitleLocalize(builder *flatbuffers.Builder, replaySummaryTitleLocalize uint32) {
	builder.PrependUint32Slot(3, replaySummaryTitleLocalize, 0)
}
func MiniGameDreamReplayScenarioExcelAddReplaySummaryLocalizeScenarioId(builder *flatbuffers.Builder, replaySummaryLocalizeScenarioId uint32) {
	builder.PrependUint32Slot(4, replaySummaryLocalizeScenarioId, 0)
}
func MiniGameDreamReplayScenarioExcelAddReplayScenarioResource(builder *flatbuffers.Builder, replayScenarioResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(replayScenarioResource), 0)
}
func MiniGameDreamReplayScenarioExcelAddIsReplayScenarioHorizon(builder *flatbuffers.Builder, isReplayScenarioHorizon bool) {
	builder.PrependBoolSlot(6, isReplayScenarioHorizon, false)
}
func MiniGameDreamReplayScenarioExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
