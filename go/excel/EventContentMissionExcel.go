// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentMissionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentMissionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentMissionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentMissionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentMissionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentMissionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentMissionExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentMissionExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentMissionExcel) GroupName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentMissionExcel) Category() MissionCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return MissionCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCategory(n MissionCategory) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *EventContentMissionExcel) Description() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateDescription(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *EventContentMissionExcel) ResetType() MissionResetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return MissionResetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateResetType(n MissionResetType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *EventContentMissionExcel) ToastDisplayType() MissionToastDisplayConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return MissionToastDisplayConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateToastDisplayType(n MissionToastDisplayConditionType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *EventContentMissionExcel) ToastImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentMissionExcel) ViewFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentMissionExcel) MutateViewFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *EventContentMissionExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *EventContentMissionExcel) PreMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentMissionExcel) PreMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutatePreMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentMissionExcel) AccountType() AccountState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return AccountState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateAccountType(n AccountState) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *EventContentMissionExcel) AccountLevel() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateAccountLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *EventContentMissionExcel) ShortcutUi(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventContentMissionExcel) ShortcutUiLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) ChallengeStageShortcut() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateChallengeStageShortcut(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *EventContentMissionExcel) CompleteConditionType() MissionCompleteConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return MissionCompleteConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCompleteConditionType(n MissionCompleteConditionType) bool {
	return rcv._tab.MutateInt32Slot(36, int32(n))
}

func (rcv *EventContentMissionExcel) IsCompleteExtensionTime() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentMissionExcel) MutateIsCompleteExtensionTime(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

func (rcv *EventContentMissionExcel) CompleteConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCompleteConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *EventContentMissionExcel) CompleteConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentMissionExcel) CompleteConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCompleteConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentMissionExcel) CompleteConditionParameterTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentMissionExcel) CompleteConditionParameterTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCompleteConditionParameterTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentMissionExcel) RewardIcon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentMissionExcel) CompleteConditionMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentMissionExcel) CompleteConditionMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCompleteConditionMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentMissionExcel) CompleteConditionMissionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateCompleteConditionMissionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *EventContentMissionExcel) MissionRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MissionRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateMissionRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentMissionExcel) MissionRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MissionRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateMissionRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentMissionExcel) MissionRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentMissionExcel) MissionRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateMissionRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *EventContentMissionExcel) ConditionRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentMissionExcel) ConditionRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateConditionRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentMissionExcel) ConditionRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentMissionExcel) ConditionRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateConditionRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentMissionExcel) ConditionRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentMissionExcel) ConditionRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMissionExcel) MutateConditionRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func EventContentMissionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(30)
}
func EventContentMissionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func EventContentMissionExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(1, eventContentId, 0)
}
func EventContentMissionExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(2, groupId, 0)
}
func EventContentMissionExcelAddGroupName(builder *flatbuffers.Builder, groupName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(groupName), 0)
}
func EventContentMissionExcelAddCategory(builder *flatbuffers.Builder, category MissionCategory) {
	builder.PrependInt32Slot(4, int32(category), 0)
}
func EventContentMissionExcelAddDescription(builder *flatbuffers.Builder, description uint32) {
	builder.PrependUint32Slot(5, description, 0)
}
func EventContentMissionExcelAddResetType(builder *flatbuffers.Builder, resetType MissionResetType) {
	builder.PrependInt32Slot(6, int32(resetType), 0)
}
func EventContentMissionExcelAddToastDisplayType(builder *flatbuffers.Builder, toastDisplayType MissionToastDisplayConditionType) {
	builder.PrependInt32Slot(7, int32(toastDisplayType), 0)
}
func EventContentMissionExcelAddToastImagePath(builder *flatbuffers.Builder, toastImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(toastImagePath), 0)
}
func EventContentMissionExcelAddViewFlag(builder *flatbuffers.Builder, viewFlag bool) {
	builder.PrependBoolSlot(9, viewFlag, false)
}
func EventContentMissionExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(10, displayOrder, 0)
}
func EventContentMissionExcelAddPreMissionId(builder *flatbuffers.Builder, preMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(preMissionId), 0)
}
func EventContentMissionExcelStartPreMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentMissionExcelAddAccountType(builder *flatbuffers.Builder, accountType AccountState) {
	builder.PrependInt32Slot(12, int32(accountType), 0)
}
func EventContentMissionExcelAddAccountLevel(builder *flatbuffers.Builder, accountLevel int64) {
	builder.PrependInt64Slot(13, accountLevel, 0)
}
func EventContentMissionExcelAddShortcutUi(builder *flatbuffers.Builder, shortcutUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(shortcutUi), 0)
}
func EventContentMissionExcelStartShortcutUiVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentMissionExcelAddChallengeStageShortcut(builder *flatbuffers.Builder, challengeStageShortcut int64) {
	builder.PrependInt64Slot(15, challengeStageShortcut, 0)
}
func EventContentMissionExcelAddCompleteConditionType(builder *flatbuffers.Builder, completeConditionType MissionCompleteConditionType) {
	builder.PrependInt32Slot(16, int32(completeConditionType), 0)
}
func EventContentMissionExcelAddIsCompleteExtensionTime(builder *flatbuffers.Builder, isCompleteExtensionTime bool) {
	builder.PrependBoolSlot(17, isCompleteExtensionTime, false)
}
func EventContentMissionExcelAddCompleteConditionCount(builder *flatbuffers.Builder, completeConditionCount int64) {
	builder.PrependInt64Slot(18, completeConditionCount, 0)
}
func EventContentMissionExcelAddCompleteConditionParameter(builder *flatbuffers.Builder, completeConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(completeConditionParameter), 0)
}
func EventContentMissionExcelStartCompleteConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentMissionExcelAddCompleteConditionParameterTag(builder *flatbuffers.Builder, completeConditionParameterTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(completeConditionParameterTag), 0)
}
func EventContentMissionExcelStartCompleteConditionParameterTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentMissionExcelAddRewardIcon(builder *flatbuffers.Builder, rewardIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(rewardIcon), 0)
}
func EventContentMissionExcelAddCompleteConditionMissionId(builder *flatbuffers.Builder, completeConditionMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(completeConditionMissionId), 0)
}
func EventContentMissionExcelStartCompleteConditionMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentMissionExcelAddCompleteConditionMissionCount(builder *flatbuffers.Builder, completeConditionMissionCount int64) {
	builder.PrependInt64Slot(23, completeConditionMissionCount, 0)
}
func EventContentMissionExcelAddMissionRewardParcelType(builder *flatbuffers.Builder, missionRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(missionRewardParcelType), 0)
}
func EventContentMissionExcelStartMissionRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentMissionExcelAddMissionRewardParcelId(builder *flatbuffers.Builder, missionRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(missionRewardParcelId), 0)
}
func EventContentMissionExcelStartMissionRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentMissionExcelAddMissionRewardAmount(builder *flatbuffers.Builder, missionRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(missionRewardAmount), 0)
}
func EventContentMissionExcelStartMissionRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentMissionExcelAddConditionRewardParcelType(builder *flatbuffers.Builder, conditionRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(conditionRewardParcelType), 0)
}
func EventContentMissionExcelStartConditionRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentMissionExcelAddConditionRewardParcelId(builder *flatbuffers.Builder, conditionRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(conditionRewardParcelId), 0)
}
func EventContentMissionExcelStartConditionRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentMissionExcelAddConditionRewardAmount(builder *flatbuffers.Builder, conditionRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(conditionRewardAmount), 0)
}
func EventContentMissionExcelStartConditionRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentMissionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
