// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CostumeExcelDto represents a FlatBuffers table
type CostumeExcelDto struct {
	fbsutils.FlatBuffer
	AnimationSsr                              string             `json:"animation_ssr"`
	AnimationValidator                        bool               `json:"animation_validator"`
	AnimatorName                              string             `json:"animator_name"`
	CafeModelPrefabName                       string             `json:"cafe_model_prefab_name"`
	CharacterSkillListGroupId                 int64              `json:"character_skill_list_group_id"`
	CharacterVoiceGroupId                     int64              `json:"character_voice_group_id"`
	CollectionBgTexturePath                   string             `json:"collection_bg_texture_path"`
	CollectionTexturePath                     string             `json:"collection_texture_path"`
	CollectionVisible                         bool               `json:"collection_visible"`
	CollectionVisibleEndDate                  string             `json:"collection_visible_end_date"`
	CollectionVisibleStartDate                string             `json:"collection_visible_start_date"`
	CombatStyleTexturePath                    string             `json:"combat_style_texture_path"`
	CostumeGroupId                            int64              `json:"costume_group_id"`
	CostumeUniqueId                           int64              `json:"costume_unique_id"`
	DevName                                   string             `json:"dev_name"`
	EchelonModelPrefabName                    string             `json:"echelon_model_prefab_name"`
	EnterStrategyAnimationName                string             `json:"enter_strategy_animation_name"`
	EntityMaterialType                        EntityMaterialType `json:"entity_material_type"`
	InformationPacel                          string             `json:"information_pacel"`
	IsDefault                                 bool               `json:"is_default"`
	ModelPrefabName                           string             `json:"model_prefab_name"`
	ProductionStep                            ProductionStep     `json:"production_step"`
	Rarity                                    Rarity             `json:"rarity"`
	ReleaseDate                               string             `json:"release_date"`
	ShowObjectHpStatus                        bool               `json:"show_object_hp_status"`
	SpineResourceName                         string             `json:"spine_resource_name"`
	SpineResourceNameDiorama                  string             `json:"spine_resource_name_diorama"`
	SpineResourceNameDioramaForFormConversion []string           `json:"spine_resource_name_diorama_for_form_conversion"`
	StrategyModelPrefabName                   string             `json:"strategy_model_prefab_name"`
	TextureBoss                               string             `json:"texture_boss"`
	TextureDir                                string             `json:"texture_dir"`
	TextureSkillCard                          []string           `json:"texture_skill_card"`
	UseObjectHpbar                            bool               `json:"use_object_hpbar"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CostumeExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CostumeExcelStart(b)
	CostumeExcelAddAnimationSsr(b, b.CreateString(fbsutils.Convert(t.AnimationSsr, t.FlatBuffer.TableKey)))
	CostumeExcelAddAnimationValidator(b, t.AnimationValidator)
	CostumeExcelAddAnimatorName(b, b.CreateString(fbsutils.Convert(t.AnimatorName, t.FlatBuffer.TableKey)))
	CostumeExcelAddCafeModelPrefabName(b, b.CreateString(fbsutils.Convert(t.CafeModelPrefabName, t.FlatBuffer.TableKey)))
	CostumeExcelAddCharacterSkillListGroupId(b, fbsutils.Convert(t.CharacterSkillListGroupId, t.FlatBuffer.TableKey))
	CostumeExcelAddCharacterVoiceGroupId(b, fbsutils.Convert(t.CharacterVoiceGroupId, t.FlatBuffer.TableKey))
	CostumeExcelAddCollectionBgTexturePath(b, b.CreateString(fbsutils.Convert(t.CollectionBgTexturePath, t.FlatBuffer.TableKey)))
	CostumeExcelAddCollectionTexturePath(b, b.CreateString(fbsutils.Convert(t.CollectionTexturePath, t.FlatBuffer.TableKey)))
	CostumeExcelAddCollectionVisible(b, t.CollectionVisible)
	CostumeExcelAddCollectionVisibleEndDate(b, b.CreateString(fbsutils.Convert(t.CollectionVisibleEndDate, t.FlatBuffer.TableKey)))
	CostumeExcelAddCollectionVisibleStartDate(b, b.CreateString(fbsutils.Convert(t.CollectionVisibleStartDate, t.FlatBuffer.TableKey)))
	CostumeExcelAddCombatStyleTexturePath(b, b.CreateString(fbsutils.Convert(t.CombatStyleTexturePath, t.FlatBuffer.TableKey)))
	CostumeExcelAddCostumeGroupId(b, fbsutils.Convert(t.CostumeGroupId, t.FlatBuffer.TableKey))
	CostumeExcelAddCostumeUniqueId(b, fbsutils.Convert(t.CostumeUniqueId, t.FlatBuffer.TableKey))
	CostumeExcelAddDevName(b, b.CreateString(fbsutils.Convert(t.DevName, t.FlatBuffer.TableKey)))
	CostumeExcelAddEchelonModelPrefabName(b, b.CreateString(fbsutils.Convert(t.EchelonModelPrefabName, t.FlatBuffer.TableKey)))
	CostumeExcelAddEnterStrategyAnimationName(b, b.CreateString(fbsutils.Convert(t.EnterStrategyAnimationName, t.FlatBuffer.TableKey)))
	CostumeExcelAddEntityMaterialType(b, fbsutils.Convert(t.EntityMaterialType, t.FlatBuffer.TableKey))
	CostumeExcelAddInformationPacel(b, b.CreateString(fbsutils.Convert(t.InformationPacel, t.FlatBuffer.TableKey)))
	CostumeExcelAddIsDefault(b, t.IsDefault)
	CostumeExcelAddModelPrefabName(b, b.CreateString(fbsutils.Convert(t.ModelPrefabName, t.FlatBuffer.TableKey)))
	CostumeExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	CostumeExcelAddRarity(b, fbsutils.Convert(t.Rarity, t.FlatBuffer.TableKey))
	CostumeExcelAddReleaseDate(b, b.CreateString(fbsutils.Convert(t.ReleaseDate, t.FlatBuffer.TableKey)))
	CostumeExcelAddShowObjectHpStatus(b, t.ShowObjectHpStatus)
	CostumeExcelAddSpineResourceName(b, b.CreateString(fbsutils.Convert(t.SpineResourceName, t.FlatBuffer.TableKey)))
	CostumeExcelAddSpineResourceNameDiorama(b, b.CreateString(fbsutils.Convert(t.SpineResourceNameDiorama, t.FlatBuffer.TableKey)))
	CostumeExcelStartSpineResourceNameDioramaForFormConversionVector(b, len(t.SpineResourceNameDioramaForFormConversion))
	for i := range len(t.SpineResourceNameDioramaForFormConversion) {
		b.PrependUOffsetT(b.CreateString(t.SpineResourceNameDioramaForFormConversion[len(t.SpineResourceNameDioramaForFormConversion)-i-1]))
	}
	CostumeExcelAddSpineResourceNameDioramaForFormConversion(b, b.EndVector(len(t.SpineResourceNameDioramaForFormConversion)))
	CostumeExcelAddStrategyModelPrefabName(b, b.CreateString(fbsutils.Convert(t.StrategyModelPrefabName, t.FlatBuffer.TableKey)))
	CostumeExcelAddTextureBoss(b, b.CreateString(fbsutils.Convert(t.TextureBoss, t.FlatBuffer.TableKey)))
	CostumeExcelAddTextureDir(b, b.CreateString(fbsutils.Convert(t.TextureDir, t.FlatBuffer.TableKey)))
	CostumeExcelStartTextureSkillCardVector(b, len(t.TextureSkillCard))
	for i := range len(t.TextureSkillCard) {
		b.PrependUOffsetT(b.CreateString(t.TextureSkillCard[len(t.TextureSkillCard)-i-1]))
	}
	CostumeExcelAddTextureSkillCard(b, b.EndVector(len(t.TextureSkillCard)))
	CostumeExcelAddUseObjectHpbar(b, t.UseObjectHpbar)
	return CostumeExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CostumeExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CostumeExcelDto) UnmarshalMessage(e *CostumeExcel) error {
	t.AnimationSsr = fbsutils.Convert(string(e.AnimationSsr()), t.FlatBuffer.TableKey)
	t.AnimationValidator = e.AnimationValidator()
	t.AnimatorName = fbsutils.Convert(string(e.AnimatorName()), t.FlatBuffer.TableKey)
	t.CafeModelPrefabName = fbsutils.Convert(string(e.CafeModelPrefabName()), t.FlatBuffer.TableKey)
	t.CharacterSkillListGroupId = fbsutils.Convert(e.CharacterSkillListGroupId(), t.FlatBuffer.TableKey)
	t.CharacterVoiceGroupId = fbsutils.Convert(e.CharacterVoiceGroupId(), t.FlatBuffer.TableKey)
	t.CollectionBgTexturePath = fbsutils.Convert(string(e.CollectionBgTexturePath()), t.FlatBuffer.TableKey)
	t.CollectionTexturePath = fbsutils.Convert(string(e.CollectionTexturePath()), t.FlatBuffer.TableKey)
	t.CollectionVisible = e.CollectionVisible()
	t.CollectionVisibleEndDate = fbsutils.Convert(string(e.CollectionVisibleEndDate()), t.FlatBuffer.TableKey)
	t.CollectionVisibleStartDate = fbsutils.Convert(string(e.CollectionVisibleStartDate()), t.FlatBuffer.TableKey)
	t.CombatStyleTexturePath = fbsutils.Convert(string(e.CombatStyleTexturePath()), t.FlatBuffer.TableKey)
	t.CostumeGroupId = fbsutils.Convert(e.CostumeGroupId(), t.FlatBuffer.TableKey)
	t.CostumeUniqueId = fbsutils.Convert(e.CostumeUniqueId(), t.FlatBuffer.TableKey)
	t.DevName = fbsutils.Convert(string(e.DevName()), t.FlatBuffer.TableKey)
	t.EchelonModelPrefabName = fbsutils.Convert(string(e.EchelonModelPrefabName()), t.FlatBuffer.TableKey)
	t.EnterStrategyAnimationName = fbsutils.Convert(string(e.EnterStrategyAnimationName()), t.FlatBuffer.TableKey)
	t.EntityMaterialType = EntityMaterialType(fbsutils.Convert(int32(e.EntityMaterialType()), t.FlatBuffer.TableKey))
	t.InformationPacel = fbsutils.Convert(string(e.InformationPacel()), t.FlatBuffer.TableKey)
	t.IsDefault = e.IsDefault()
	t.ModelPrefabName = fbsutils.Convert(string(e.ModelPrefabName()), t.FlatBuffer.TableKey)
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.Rarity = Rarity(fbsutils.Convert(int32(e.Rarity()), t.FlatBuffer.TableKey))
	t.ReleaseDate = fbsutils.Convert(string(e.ReleaseDate()), t.FlatBuffer.TableKey)
	t.ShowObjectHpStatus = e.ShowObjectHpStatus()
	t.SpineResourceName = fbsutils.Convert(string(e.SpineResourceName()), t.FlatBuffer.TableKey)
	t.SpineResourceNameDiorama = fbsutils.Convert(string(e.SpineResourceNameDiorama()), t.FlatBuffer.TableKey)
	t.SpineResourceNameDioramaForFormConversion = make([]string, e.SpineResourceNameDioramaForFormConversionLength())
	for i := range e.SpineResourceNameDioramaForFormConversionLength() {
		t.SpineResourceNameDioramaForFormConversion[i] = fbsutils.Convert(string(e.SpineResourceNameDioramaForFormConversion(i)), t.FlatBuffer.TableKey)
	}
	t.StrategyModelPrefabName = fbsutils.Convert(string(e.StrategyModelPrefabName()), t.FlatBuffer.TableKey)
	t.TextureBoss = fbsutils.Convert(string(e.TextureBoss()), t.FlatBuffer.TableKey)
	t.TextureDir = fbsutils.Convert(string(e.TextureDir()), t.FlatBuffer.TableKey)
	t.TextureSkillCard = make([]string, e.TextureSkillCardLength())
	for i := range e.TextureSkillCardLength() {
		t.TextureSkillCard[i] = fbsutils.Convert(string(e.TextureSkillCard(i)), t.FlatBuffer.TableKey)
	}
	t.UseObjectHpbar = e.UseObjectHpbar()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CostumeExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCostumeExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CostumeExcelDto) FlatDataName() string {
	return "CostumeExcel"
}
