// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentDiceRaceExcelDto represents a FlatBuffers table
type EventContentDiceRaceExcelDto struct {
	fbsutils.FlatBuffer
	DiceCostGoodsId    int64    `json:"dice_cost_goods_id"`
	DiceRaceEventType  []string `json:"dice_race_event_type"`
	DiceRacePawnPrefab string   `json:"dice_race_pawn_prefab"`
	EventContentId     int64    `json:"event_content_id"`
	FixedDiceIcon      []string `json:"fixed_dice_icon"`
	IsUsingFixedDice   bool     `json:"is_using_fixed_dice"`
	SkipableLap        int32    `json:"skipable_lap"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentDiceRaceExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentDiceRaceExcelStart(b)
	EventContentDiceRaceExcelAddDiceCostGoodsId(b, fbsutils.Convert(t.DiceCostGoodsId, t.FlatBuffer.TableKey))
	EventContentDiceRaceExcelStartDiceRaceEventTypeVector(b, len(t.DiceRaceEventType))
	for i := range len(t.DiceRaceEventType) {
		b.PrependUOffsetT(b.CreateString(t.DiceRaceEventType[len(t.DiceRaceEventType)-i-1]))
	}
	EventContentDiceRaceExcelAddDiceRaceEventType(b, b.EndVector(len(t.DiceRaceEventType)))
	EventContentDiceRaceExcelAddDiceRacePawnPrefab(b, b.CreateString(fbsutils.Convert(t.DiceRacePawnPrefab, t.FlatBuffer.TableKey)))
	EventContentDiceRaceExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentDiceRaceExcelStartFixedDiceIconVector(b, len(t.FixedDiceIcon))
	for i := range len(t.FixedDiceIcon) {
		b.PrependUOffsetT(b.CreateString(t.FixedDiceIcon[len(t.FixedDiceIcon)-i-1]))
	}
	EventContentDiceRaceExcelAddFixedDiceIcon(b, b.EndVector(len(t.FixedDiceIcon)))
	EventContentDiceRaceExcelAddIsUsingFixedDice(b, t.IsUsingFixedDice)
	EventContentDiceRaceExcelAddSkipableLap(b, fbsutils.Convert(t.SkipableLap, t.FlatBuffer.TableKey))
	return EventContentDiceRaceExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentDiceRaceExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentDiceRaceExcelDto) UnmarshalMessage(e *EventContentDiceRaceExcel) error {
	t.DiceCostGoodsId = fbsutils.Convert(e.DiceCostGoodsId(), t.FlatBuffer.TableKey)
	t.DiceRaceEventType = make([]string, e.DiceRaceEventTypeLength())
	for i := range e.DiceRaceEventTypeLength() {
		t.DiceRaceEventType[i] = fbsutils.Convert(string(e.DiceRaceEventType(i)), t.FlatBuffer.TableKey)
	}
	t.DiceRacePawnPrefab = fbsutils.Convert(string(e.DiceRacePawnPrefab()), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.FixedDiceIcon = make([]string, e.FixedDiceIconLength())
	for i := range e.FixedDiceIconLength() {
		t.FixedDiceIcon[i] = fbsutils.Convert(string(e.FixedDiceIcon(i)), t.FlatBuffer.TableKey)
	}
	t.IsUsingFixedDice = e.IsUsingFixedDice()
	t.SkipableLap = fbsutils.Convert(e.SkipableLap(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentDiceRaceExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentDiceRaceExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentDiceRaceExcelDto) FlatDataName() string {
	return "EventContentDiceRaceExcel"
}
