// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamScheduleResultExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamScheduleResultExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamScheduleResultExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamScheduleResultExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamScheduleResultExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamScheduleResultExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamScheduleResultExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamScheduleResultExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamScheduleResultExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamScheduleResultExcel) DreamMakerResult() DreamMakerResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return DreamMakerResult(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateDreamMakerResult(n DreamMakerResult) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *MiniGameDreamScheduleResultExcel) DreamMakerScheduleGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateDreamMakerScheduleGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDreamScheduleResultExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDreamScheduleResultExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDreamScheduleResultExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParameterAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParameterAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateRewardParameterAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParameter(j int) DreamMakerParameterType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return DreamMakerParameterType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateRewardParameter(j int, n DreamMakerParameterType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParameterOperationType(j int) DreamMakerParamOperationType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return DreamMakerParamOperationType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParameterOperationTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateRewardParameterOperationType(j int, n DreamMakerParamOperationType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *MiniGameDreamScheduleResultExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamScheduleResultExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func MiniGameDreamScheduleResultExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func MiniGameDreamScheduleResultExcelAddDreamMakerResult(builder *flatbuffers.Builder, dreamMakerResult DreamMakerResult) {
	builder.PrependInt32Slot(0, int32(dreamMakerResult), 0)
}
func MiniGameDreamScheduleResultExcelAddDreamMakerScheduleGroup(builder *flatbuffers.Builder, dreamMakerScheduleGroup int64) {
	builder.PrependInt64Slot(1, dreamMakerScheduleGroup, 0)
}
func MiniGameDreamScheduleResultExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(2, eventContentId, 0)
}
func MiniGameDreamScheduleResultExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(3, id, 0)
}
func MiniGameDreamScheduleResultExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(4, prob, 0)
}
func MiniGameDreamScheduleResultExcelAddRewardParameterAmount(builder *flatbuffers.Builder, rewardParameterAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rewardParameterAmount), 0)
}
func MiniGameDreamScheduleResultExcelStartRewardParameterAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDreamScheduleResultExcelAddRewardParameter(builder *flatbuffers.Builder, rewardParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(rewardParameter), 0)
}
func MiniGameDreamScheduleResultExcelStartRewardParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDreamScheduleResultExcelAddRewardParameterOperationType(builder *flatbuffers.Builder, rewardParameterOperationType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(rewardParameterOperationType), 0)
}
func MiniGameDreamScheduleResultExcelStartRewardParameterOperationTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDreamScheduleResultExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(8, rewardParcelAmount, 0)
}
func MiniGameDreamScheduleResultExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(9, rewardParcelId, 0)
}
func MiniGameDreamScheduleResultExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(10, int32(rewardParcelType), 0)
}
func MiniGameDreamScheduleResultExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
