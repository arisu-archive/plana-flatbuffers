// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameRoadPuzzleMapTileExcelDto represents a FlatBuffers table
type MinigameRoadPuzzleMapTileExcelDto struct {
	fbsutils.FlatBuffer
	MapTileType    RoadPuzzleMapTileType `json:"map_tile_type"`
	PrefabName     string                `json:"prefab_name"`
	UniqueId       int64                 `json:"unique_id"`
	EventContentId int64                 `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameRoadPuzzleMapTileExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameRoadPuzzleMapTileExcelStart(b)
	MinigameRoadPuzzleMapTileExcelAddMapTileType(b, fbsutils.Convert(t.MapTileType, t.FlatBuffer.TableKey))
	MinigameRoadPuzzleMapTileExcelAddPrefabName(b, b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey)))
	MinigameRoadPuzzleMapTileExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MinigameRoadPuzzleMapTileExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return MinigameRoadPuzzleMapTileExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameRoadPuzzleMapTileExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameRoadPuzzleMapTileExcelDto) UnmarshalMessage(e *MinigameRoadPuzzleMapTileExcel) error {
	t.MapTileType = RoadPuzzleMapTileType(fbsutils.Convert(int32(e.MapTileType()), t.FlatBuffer.TableKey))
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameRoadPuzzleMapTileExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameRoadPuzzleMapTileExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameRoadPuzzleMapTileExcelDto) FlatDataName() string {
	return "MinigameRoadPuzzleMapTileExcel"
}
