// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentSpoilerPopupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentSpoilerPopupExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentSpoilerPopupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentSpoilerPopupExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentSpoilerPopupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentSpoilerPopupExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentSpoilerPopupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentSpoilerPopupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentSpoilerPopupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentSpoilerPopupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentSpoilerPopupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentSpoilerPopupExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentSpoilerPopupExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentSpoilerPopupExcel) SpoilerPopupTitle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentSpoilerPopupExcel) SpoilerPopupDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentSpoilerPopupExcel) IsWarningPopUp() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentSpoilerPopupExcel) MutateIsWarningPopUp(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *EventContentSpoilerPopupExcel) ConditionScenarioModeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentSpoilerPopupExcel) MutateConditionScenarioModeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func EventContentSpoilerPopupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EventContentSpoilerPopupExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentSpoilerPopupExcelAddSpoilerPopupTitle(builder *flatbuffers.Builder, spoilerPopupTitle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(spoilerPopupTitle), 0)
}
func EventContentSpoilerPopupExcelAddSpoilerPopupDescription(builder *flatbuffers.Builder, spoilerPopupDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(spoilerPopupDescription), 0)
}
func EventContentSpoilerPopupExcelAddIsWarningPopUp(builder *flatbuffers.Builder, isWarningPopUp bool) {
	builder.PrependBoolSlot(3, isWarningPopUp, false)
}
func EventContentSpoilerPopupExcelAddConditionScenarioModeId(builder *flatbuffers.Builder, conditionScenarioModeId int64) {
	builder.PrependInt64Slot(4, conditionScenarioModeId, 0)
}
func EventContentSpoilerPopupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
