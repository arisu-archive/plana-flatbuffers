// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScenarioBGNameExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsScenarioBGNameExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioBGNameExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScenarioBGNameExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScenarioBGNameExcel(buf []byte, offset flatbuffers.UOffsetT) *ScenarioBGNameExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScenarioBGNameExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScenarioBGNameExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScenarioBGNameExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScenarioBGNameExcel) Name() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioBGNameExcel) MutateName(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ScenarioBGNameExcel) ProductionStep() ProductionStep {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ProductionStep(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioBGNameExcel) MutateProductionStep(n ProductionStep) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ScenarioBGNameExcel) BgFileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioBGNameExcel) BgType() ScenarioBGType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ScenarioBGType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScenarioBGNameExcel) MutateBgType(n ScenarioBGType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *ScenarioBGNameExcel) AnimationRoot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioBGNameExcel) AnimationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScenarioBGNameExcel) SpineScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ScenarioBGNameExcel) MutateSpineScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *ScenarioBGNameExcel) SpineLocalPosX() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioBGNameExcel) MutateSpineLocalPosX(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *ScenarioBGNameExcel) SpineLocalPosY() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScenarioBGNameExcel) MutateSpineLocalPosY(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func ScenarioBGNameExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ScenarioBGNameExcelAddName(builder *flatbuffers.Builder, name uint32) {
	builder.PrependUint32Slot(0, name, 0)
}
func ScenarioBGNameExcelAddProductionStep(builder *flatbuffers.Builder, productionStep ProductionStep) {
	builder.PrependInt32Slot(1, int32(productionStep), 0)
}
func ScenarioBGNameExcelAddBgFileName(builder *flatbuffers.Builder, bgFileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(bgFileName), 0)
}
func ScenarioBGNameExcelAddBgType(builder *flatbuffers.Builder, bgType ScenarioBGType) {
	builder.PrependInt32Slot(3, int32(bgType), 0)
}
func ScenarioBGNameExcelAddAnimationRoot(builder *flatbuffers.Builder, animationRoot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(animationRoot), 0)
}
func ScenarioBGNameExcelAddAnimationName(builder *flatbuffers.Builder, animationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(animationName), 0)
}
func ScenarioBGNameExcelAddSpineScale(builder *flatbuffers.Builder, spineScale float32) {
	builder.PrependFloat32Slot(6, spineScale, 0.0)
}
func ScenarioBGNameExcelAddSpineLocalPosX(builder *flatbuffers.Builder, spineLocalPosX int32) {
	builder.PrependInt32Slot(7, spineLocalPosX, 0)
}
func ScenarioBGNameExcelAddSpineLocalPosY(builder *flatbuffers.Builder, spineLocalPosY int32) {
	builder.PrependInt32Slot(8, spineLocalPosY, 0)
}
func ScenarioBGNameExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
