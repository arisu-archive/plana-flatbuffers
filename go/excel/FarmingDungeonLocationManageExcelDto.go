// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FarmingDungeonLocationManageExcelDto represents a FlatBuffers table
type FarmingDungeonLocationManageExcelDto struct {
	fbsutils.FlatBuffer
	FarmingDungeonLocationId int64             `json:"farming_dungeon_location_id"`
	ContentType              ContentType       `json:"content_type"`
	WeekDungeonType          WeekDungeonType   `json:"week_dungeon_type"`
	SchoolDungeonType        SchoolDungeonType `json:"school_dungeon_type"`
	Order                    int64             `json:"order"`
	OpenStartDateTime        string            `json:"open_start_date_time"`
	OpenEndDateTime          string            `json:"open_end_date_time"`
	LocationButtonImagePath  string            `json:"location_button_image_path"`
	LocalizeCodeTitle        uint32            `json:"localize_code_title"`
	LocalizeCodeInfo         uint32            `json:"localize_code_info"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FarmingDungeonLocationManageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	FarmingDungeonLocationManageExcelStart(b)
	FarmingDungeonLocationManageExcelAddFarmingDungeonLocationId(b, fbsutils.Convert(t.FarmingDungeonLocationId, t.FlatBuffer.TableKey))
	FarmingDungeonLocationManageExcelAddContentType(b, fbsutils.Convert(t.ContentType, t.FlatBuffer.TableKey))
	FarmingDungeonLocationManageExcelAddWeekDungeonType(b, fbsutils.Convert(t.WeekDungeonType, t.FlatBuffer.TableKey))
	FarmingDungeonLocationManageExcelAddSchoolDungeonType(b, fbsutils.Convert(t.SchoolDungeonType, t.FlatBuffer.TableKey))
	FarmingDungeonLocationManageExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	FarmingDungeonLocationManageExcelAddOpenStartDateTime(b, b.CreateString(fbsutils.Convert(t.OpenStartDateTime, t.FlatBuffer.TableKey)))
	FarmingDungeonLocationManageExcelAddOpenEndDateTime(b, b.CreateString(fbsutils.Convert(t.OpenEndDateTime, t.FlatBuffer.TableKey)))
	FarmingDungeonLocationManageExcelAddLocationButtonImagePath(b, b.CreateString(fbsutils.Convert(t.LocationButtonImagePath, t.FlatBuffer.TableKey)))
	FarmingDungeonLocationManageExcelAddLocalizeCodeTitle(b, fbsutils.Convert(t.LocalizeCodeTitle, t.FlatBuffer.TableKey))
	FarmingDungeonLocationManageExcelAddLocalizeCodeInfo(b, fbsutils.Convert(t.LocalizeCodeInfo, t.FlatBuffer.TableKey))
	return FarmingDungeonLocationManageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FarmingDungeonLocationManageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishFarmingDungeonLocationManageExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FarmingDungeonLocationManageExcelDto) UnmarshalMessage(e *FarmingDungeonLocationManageExcel) error {
	t.FarmingDungeonLocationId = fbsutils.Convert(e.FarmingDungeonLocationId(), t.FlatBuffer.TableKey)
	t.ContentType = ContentType(fbsutils.Convert(int32(e.ContentType()), t.FlatBuffer.TableKey))
	t.WeekDungeonType = WeekDungeonType(fbsutils.Convert(int32(e.WeekDungeonType()), t.FlatBuffer.TableKey))
	t.SchoolDungeonType = SchoolDungeonType(fbsutils.Convert(int32(e.SchoolDungeonType()), t.FlatBuffer.TableKey))
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.OpenStartDateTime = fbsutils.Convert(string(e.OpenStartDateTime()), t.FlatBuffer.TableKey)
	t.OpenEndDateTime = fbsutils.Convert(string(e.OpenEndDateTime()), t.FlatBuffer.TableKey)
	t.LocationButtonImagePath = fbsutils.Convert(string(e.LocationButtonImagePath()), t.FlatBuffer.TableKey)
	t.LocalizeCodeTitle = fbsutils.Convert(e.LocalizeCodeTitle(), t.FlatBuffer.TableKey)
	t.LocalizeCodeInfo = fbsutils.Convert(e.LocalizeCodeInfo(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FarmingDungeonLocationManageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFarmingDungeonLocationManageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FarmingDungeonLocationManageExcelDto) FlatDataName() string {
	return "FarmingDungeonLocationManageExcel"
}
