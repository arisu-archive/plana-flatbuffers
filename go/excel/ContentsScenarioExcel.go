// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ContentsScenarioExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsContentsScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentsScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ContentsScenarioExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishContentsScenarioExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsContentsScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentsScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ContentsScenarioExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedContentsScenarioExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ContentsScenarioExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ContentsScenarioExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ContentsScenarioExcel) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentsScenarioExcel) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ContentsScenarioExcel) LocalizeId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentsScenarioExcel) MutateLocalizeId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ContentsScenarioExcel) DisplayOrder() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentsScenarioExcel) MutateDisplayOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ContentsScenarioExcel) ScenarioContentType() ScenarioContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ScenarioContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ContentsScenarioExcel) MutateScenarioContentType(n ScenarioContentType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *ContentsScenarioExcel) ScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ContentsScenarioExcel) ScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ContentsScenarioExcel) MutateScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ContentsScenarioExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ContentsScenarioExcelAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func ContentsScenarioExcelAddLocalizeId(builder *flatbuffers.Builder, localizeId uint32) {
	builder.PrependUint32Slot(1, localizeId, 0)
}
func ContentsScenarioExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int32) {
	builder.PrependInt32Slot(2, displayOrder, 0)
}
func ContentsScenarioExcelAddScenarioContentType(builder *flatbuffers.Builder, scenarioContentType ScenarioContentType) {
	builder.PrependInt32Slot(3, int32(scenarioContentType), 0)
}
func ContentsScenarioExcelAddScenarioGroupId(builder *flatbuffers.Builder, scenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(scenarioGroupId), 0)
}
func ContentsScenarioExcelStartScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ContentsScenarioExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
