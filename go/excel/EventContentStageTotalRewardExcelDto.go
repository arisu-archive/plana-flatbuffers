// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentStageTotalRewardExcelDto represents a FlatBuffers table
type EventContentStageTotalRewardExcelDto struct {
	fbsutils.FlatBuffer
	RewardParcelAmount      []int64      `json:"reward_parcel_amount"`
	RewardParcelId          []int64      `json:"reward_parcel_id"`
	RewardParcelType        []ParcelType `json:"reward_parcel_type"`
	RequiredEventItemAmount int64        `json:"required_event_item_amount"`
	EventContentId          int64        `json:"event_content_id"`
	Id                      int64        `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentStageTotalRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentStageTotalRewardExcelStart(b)
	EventContentStageTotalRewardExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentStageTotalRewardExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	EventContentStageTotalRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentStageTotalRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	EventContentStageTotalRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentStageTotalRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentStageTotalRewardExcelAddRequiredEventItemAmount(b, fbsutils.Convert(t.RequiredEventItemAmount, t.FlatBuffer.TableKey))
	EventContentStageTotalRewardExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentStageTotalRewardExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return EventContentStageTotalRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentStageTotalRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentStageTotalRewardExcelDto) UnmarshalMessage(e *EventContentStageTotalRewardExcel) error {
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RequiredEventItemAmount = fbsutils.Convert(e.RequiredEventItemAmount(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentStageTotalRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentStageTotalRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentStageTotalRewardExcelDto) FlatDataName() string {
	return "EventContentStageTotalRewardExcel"
}
