// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShiftingCraftRecipeExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsShiftingCraftRecipeExcel(buf []byte, offset flatbuffers.UOffsetT) *ShiftingCraftRecipeExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShiftingCraftRecipeExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShiftingCraftRecipeExcel(buf []byte, offset flatbuffers.UOffsetT) *ShiftingCraftRecipeExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShiftingCraftRecipeExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShiftingCraftRecipeExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShiftingCraftRecipeExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShiftingCraftRecipeExcel) IngredientExp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateIngredientExp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ShiftingCraftRecipeExcel) IngredientTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) IngredientTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateIngredientTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ShiftingCraftRecipeExcel) RequireGold() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateRequireGold(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ShiftingCraftRecipeExcel) RequireItemAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateRequireItemAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ShiftingCraftRecipeExcel) RequireItemId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateRequireItemId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ShiftingCraftRecipeExcel) ResultAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateResultAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ShiftingCraftRecipeExcel) ResultId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateResultId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ShiftingCraftRecipeExcel) ResultParcel() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateResultParcel(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *ShiftingCraftRecipeExcel) NotificationId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateNotificationId(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *ShiftingCraftRecipeExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *ShiftingCraftRecipeExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShiftingCraftRecipeExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func ShiftingCraftRecipeExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func ShiftingCraftRecipeExcelAddIngredientExp(builder *flatbuffers.Builder, ingredientExp int64) {
	builder.PrependInt64Slot(0, ingredientExp, 0)
}
func ShiftingCraftRecipeExcelAddIngredientTag(builder *flatbuffers.Builder, ingredientTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ingredientTag), 0)
}
func ShiftingCraftRecipeExcelStartIngredientTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ShiftingCraftRecipeExcelAddRequireGold(builder *flatbuffers.Builder, requireGold int64) {
	builder.PrependInt64Slot(2, requireGold, 0)
}
func ShiftingCraftRecipeExcelAddRequireItemAmount(builder *flatbuffers.Builder, requireItemAmount int64) {
	builder.PrependInt64Slot(3, requireItemAmount, 0)
}
func ShiftingCraftRecipeExcelAddRequireItemId(builder *flatbuffers.Builder, requireItemId int64) {
	builder.PrependInt64Slot(4, requireItemId, 0)
}
func ShiftingCraftRecipeExcelAddResultAmount(builder *flatbuffers.Builder, resultAmount int64) {
	builder.PrependInt64Slot(5, resultAmount, 0)
}
func ShiftingCraftRecipeExcelAddResultId(builder *flatbuffers.Builder, resultId int64) {
	builder.PrependInt64Slot(6, resultId, 0)
}
func ShiftingCraftRecipeExcelAddResultParcel(builder *flatbuffers.Builder, resultParcel ParcelType) {
	builder.PrependInt32Slot(7, int32(resultParcel), 0)
}
func ShiftingCraftRecipeExcelAddNotificationId(builder *flatbuffers.Builder, notificationId int32) {
	builder.PrependInt32Slot(8, notificationId, 0)
}
func ShiftingCraftRecipeExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(9, displayOrder, 0)
}
func ShiftingCraftRecipeExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(10, id, 0)
}
func ShiftingCraftRecipeExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
