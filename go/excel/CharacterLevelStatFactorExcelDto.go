// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterLevelStatFactorExcelDto represents a FlatBuffers table
type CharacterLevelStatFactorExcelDto struct {
	fbsutils.FlatBuffer
	AccuracyFactor  int64 `json:"accuracy_factor"`
	DefenceFactor   int64 `json:"defence_factor"`
	StabilityFactor int64 `json:"stability_factor"`
	CriticalFactor  int64 `json:"critical_factor"`
	Level           int64 `json:"level"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterLevelStatFactorExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterLevelStatFactorExcelStart(b)
	CharacterLevelStatFactorExcelAddAccuracyFactor(b, fbsutils.Convert(t.AccuracyFactor, t.FlatBuffer.TableKey))
	CharacterLevelStatFactorExcelAddDefenceFactor(b, fbsutils.Convert(t.DefenceFactor, t.FlatBuffer.TableKey))
	CharacterLevelStatFactorExcelAddStabilityFactor(b, fbsutils.Convert(t.StabilityFactor, t.FlatBuffer.TableKey))
	CharacterLevelStatFactorExcelAddCriticalFactor(b, fbsutils.Convert(t.CriticalFactor, t.FlatBuffer.TableKey))
	CharacterLevelStatFactorExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	return CharacterLevelStatFactorExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterLevelStatFactorExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterLevelStatFactorExcelDto) UnmarshalMessage(e *CharacterLevelStatFactorExcel) error {
	t.AccuracyFactor = fbsutils.Convert(e.AccuracyFactor(), t.FlatBuffer.TableKey)
	t.DefenceFactor = fbsutils.Convert(e.DefenceFactor(), t.FlatBuffer.TableKey)
	t.StabilityFactor = fbsutils.Convert(e.StabilityFactor(), t.FlatBuffer.TableKey)
	t.CriticalFactor = fbsutils.Convert(e.CriticalFactor(), t.FlatBuffer.TableKey)
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterLevelStatFactorExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterLevelStatFactorExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterLevelStatFactorExcelDto) FlatDataName() string {
	return "CharacterLevelStatFactorExcel"
}
