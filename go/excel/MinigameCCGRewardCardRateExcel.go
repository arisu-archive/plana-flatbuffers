// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGRewardCardRateExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGRewardCardRateExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGRewardCardRateExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGRewardCardRateExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGRewardCardRateExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGRewardCardRateExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGRewardCardRateExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGRewardCardRateExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGRewardCardRateExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGRewardCardRateExcel) CardRarity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardRateExcel) MutateCardRarity(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *MinigameCCGRewardCardRateExcel) RarityGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardRateExcel) MutateRarityGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MinigameCCGRewardCardRateExcel) Rate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardRateExcel) MutateRate(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func MinigameCCGRewardCardRateExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MinigameCCGRewardCardRateExcelAddCardRarity(builder *flatbuffers.Builder, cardRarity int32) {
	builder.PrependInt32Slot(0, cardRarity, 0)
}
func MinigameCCGRewardCardRateExcelAddRarityGroupId(builder *flatbuffers.Builder, rarityGroupId int64) {
	builder.PrependInt64Slot(1, rarityGroupId, 0)
}
func MinigameCCGRewardCardRateExcelAddRate(builder *flatbuffers.Builder, rate int32) {
	builder.PrependInt32Slot(2, rate, 0)
}
func MinigameCCGRewardCardRateExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
