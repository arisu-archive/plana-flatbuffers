// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentCollectionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentCollectionExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentCollectionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentCollectionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentCollectionExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentCollectionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentCollectionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentCollectionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentCollectionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentCollectionExcel) Decoration() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentCollectionExcel) EmblemResource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentCollectionExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentCollectionExcel) FullResource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentCollectionExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentCollectionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EventContentCollectionExcel) IsHorizon() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentCollectionExcel) MutateIsHorizon(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *EventContentCollectionExcel) IsObject() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentCollectionExcel) MutateIsObject(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *EventContentCollectionExcel) IsObjectOnFullResource() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentCollectionExcel) MutateIsObjectOnFullResource(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *EventContentCollectionExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func (rcv *EventContentCollectionExcel) MultipleConditionCheckType() MultipleConditionCheckType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return MultipleConditionCheckType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateMultipleConditionCheckType(n MultipleConditionCheckType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *EventContentCollectionExcel) SubNameLocalizeCodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentCollectionExcel) ThumbResource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentCollectionExcel) UnlockConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateUnlockConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *EventContentCollectionExcel) UnlockConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentCollectionExcel) UnlockConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateUnlockConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentCollectionExcel) UnlockConditionType() CollectionUnlockType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return CollectionUnlockType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentCollectionExcel) MutateUnlockConditionType(n CollectionUnlockType) bool {
	return rcv._tab.MutateInt32Slot(34, int32(n))
}

func EventContentCollectionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func EventContentCollectionExcelAddDecoration(builder *flatbuffers.Builder, decoration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(decoration), 0)
}
func EventContentCollectionExcelAddEmblemResource(builder *flatbuffers.Builder, emblemResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(emblemResource), 0)
}
func EventContentCollectionExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(2, eventContentId, 0)
}
func EventContentCollectionExcelAddFullResource(builder *flatbuffers.Builder, fullResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fullResource), 0)
}
func EventContentCollectionExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(4, groupId, 0)
}
func EventContentCollectionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(5, id, 0)
}
func EventContentCollectionExcelAddIsHorizon(builder *flatbuffers.Builder, isHorizon bool) {
	builder.PrependBoolSlot(6, isHorizon, false)
}
func EventContentCollectionExcelAddIsObject(builder *flatbuffers.Builder, isObject bool) {
	builder.PrependBoolSlot(7, isObject, false)
}
func EventContentCollectionExcelAddIsObjectOnFullResource(builder *flatbuffers.Builder, isObjectOnFullResource bool) {
	builder.PrependBoolSlot(8, isObjectOnFullResource, false)
}
func EventContentCollectionExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(9, localizeEtcId, 0)
}
func EventContentCollectionExcelAddMultipleConditionCheckType(builder *flatbuffers.Builder, multipleConditionCheckType MultipleConditionCheckType) {
	builder.PrependInt32Slot(10, int32(multipleConditionCheckType), 0)
}
func EventContentCollectionExcelAddSubNameLocalizeCodeId(builder *flatbuffers.Builder, subNameLocalizeCodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(subNameLocalizeCodeId), 0)
}
func EventContentCollectionExcelAddThumbResource(builder *flatbuffers.Builder, thumbResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(thumbResource), 0)
}
func EventContentCollectionExcelAddUnlockConditionCount(builder *flatbuffers.Builder, unlockConditionCount int64) {
	builder.PrependInt64Slot(13, unlockConditionCount, 0)
}
func EventContentCollectionExcelAddUnlockConditionParameter(builder *flatbuffers.Builder, unlockConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(unlockConditionParameter), 0)
}
func EventContentCollectionExcelStartUnlockConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentCollectionExcelAddUnlockConditionType(builder *flatbuffers.Builder, unlockConditionType CollectionUnlockType) {
	builder.PrependInt32Slot(15, int32(unlockConditionType), 0)
}
func EventContentCollectionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
