// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterIllustCoordinateExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterIllustCoordinateExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterIllustCoordinateExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterIllustCoordinateExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCharacterIllustCoordinateExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCharacterIllustCoordinateExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterIllustCoordinateExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterIllustCoordinateExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCharacterIllustCoordinateExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CharacterIllustCoordinateExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterIllustCoordinateExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterIllustCoordinateExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterIllustCoordinateExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterIllustCoordinateExcel) CharacterBodyCenterX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterIllustCoordinateExcel) MutateCharacterBodyCenterX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *CharacterIllustCoordinateExcel) CharacterBodyCenterY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterIllustCoordinateExcel) MutateCharacterBodyCenterY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *CharacterIllustCoordinateExcel) DefaultScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterIllustCoordinateExcel) MutateDefaultScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *CharacterIllustCoordinateExcel) MinScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterIllustCoordinateExcel) MutateMinScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *CharacterIllustCoordinateExcel) MaxScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CharacterIllustCoordinateExcel) MutateMaxScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func CharacterIllustCoordinateExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CharacterIllustCoordinateExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CharacterIllustCoordinateExcelAddCharacterBodyCenterX(builder *flatbuffers.Builder, characterBodyCenterX float32) {
	builder.PrependFloat32Slot(1, characterBodyCenterX, 0.0)
}
func CharacterIllustCoordinateExcelAddCharacterBodyCenterY(builder *flatbuffers.Builder, characterBodyCenterY float32) {
	builder.PrependFloat32Slot(2, characterBodyCenterY, 0.0)
}
func CharacterIllustCoordinateExcelAddDefaultScale(builder *flatbuffers.Builder, defaultScale float32) {
	builder.PrependFloat32Slot(3, defaultScale, 0.0)
}
func CharacterIllustCoordinateExcelAddMinScale(builder *flatbuffers.Builder, minScale float32) {
	builder.PrependFloat32Slot(4, minScale, 0.0)
}
func CharacterIllustCoordinateExcelAddMaxScale(builder *flatbuffers.Builder, maxScale float32) {
	builder.PrependFloat32Slot(5, maxScale, 0.0)
}
func CharacterIllustCoordinateExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
