// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterPotentialExcelDto represents a FlatBuffers table
type CharacterPotentialExcelDto struct {
	fbsutils.FlatBuffer
	Id                         int64                      `json:"id"`
	IsUnnecessaryStat          bool                       `json:"is_unnecessary_stat"`
	PotentialStatBonusRateType PotentialStatBonusRateType `json:"potential_stat_bonus_rate_type"`
	PotentialStatGroupId       int64                      `json:"potential_stat_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterPotentialExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterPotentialExcelStart(b)
	CharacterPotentialExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterPotentialExcelAddIsUnnecessaryStat(b, t.IsUnnecessaryStat)
	CharacterPotentialExcelAddPotentialStatBonusRateType(b, fbsutils.Convert(t.PotentialStatBonusRateType, t.FlatBuffer.TableKey))
	CharacterPotentialExcelAddPotentialStatGroupId(b, fbsutils.Convert(t.PotentialStatGroupId, t.FlatBuffer.TableKey))
	return CharacterPotentialExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterPotentialExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterPotentialExcelDto) UnmarshalMessage(e *CharacterPotentialExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.IsUnnecessaryStat = e.IsUnnecessaryStat()
	t.PotentialStatBonusRateType = PotentialStatBonusRateType(fbsutils.Convert(int32(e.PotentialStatBonusRateType()), t.FlatBuffer.TableKey))
	t.PotentialStatGroupId = fbsutils.Convert(e.PotentialStatGroupId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterPotentialExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterPotentialExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterPotentialExcelDto) FlatDataName() string {
	return "CharacterPotentialExcel"
}
