// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClanRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsClanRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *ClanRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClanRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsClanRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *ClanRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ClanRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ClanRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClanRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ClanRewardExcel) ClanRewardType() ClanRewardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ClanRewardType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ClanRewardExcel) MutateClanRewardType(n ClanRewardType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *ClanRewardExcel) EchelonType() EchelonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EchelonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ClanRewardExcel) MutateEchelonType(n EchelonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ClanRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ClanRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ClanRewardExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanRewardExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ClanRewardExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanRewardExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func ClanRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ClanRewardExcelAddClanRewardType(builder *flatbuffers.Builder, clanRewardType ClanRewardType) {
	builder.PrependInt32Slot(0, int32(clanRewardType), 0)
}
func ClanRewardExcelAddEchelonType(builder *flatbuffers.Builder, echelonType EchelonType) {
	builder.PrependInt32Slot(1, int32(echelonType), 0)
}
func ClanRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(rewardParcelType), 0)
}
func ClanRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(3, rewardParcelId, 0)
}
func ClanRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(4, rewardParcelAmount, 0)
}
func ClanRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
