// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ParcelAutoSynthExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsParcelAutoSynthExcel(buf []byte, offset flatbuffers.UOffsetT) *ParcelAutoSynthExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ParcelAutoSynthExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsParcelAutoSynthExcel(buf []byte, offset flatbuffers.UOffsetT) *ParcelAutoSynthExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ParcelAutoSynthExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ParcelAutoSynthExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ParcelAutoSynthExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ParcelAutoSynthExcel) ResultParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateResultParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ParcelAutoSynthExcel) ResultParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateResultParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ParcelAutoSynthExcel) ResultParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateResultParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ParcelAutoSynthExcel) SynthMaxItem() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ParcelAutoSynthExcel) MutateSynthMaxItem(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ParcelAutoSynthExcel) SynthEndAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateSynthEndAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ParcelAutoSynthExcel) SynthStartAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateSynthStartAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ParcelAutoSynthExcel) RequireParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateRequireParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ParcelAutoSynthExcel) RequireParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateRequireParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ParcelAutoSynthExcel) RequireParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ParcelAutoSynthExcel) MutateRequireParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func ParcelAutoSynthExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ParcelAutoSynthExcelAddResultParcelAmount(builder *flatbuffers.Builder, resultParcelAmount int64) {
	builder.PrependInt64Slot(0, resultParcelAmount, 0)
}
func ParcelAutoSynthExcelAddResultParcelId(builder *flatbuffers.Builder, resultParcelId int64) {
	builder.PrependInt64Slot(1, resultParcelId, 0)
}
func ParcelAutoSynthExcelAddResultParcelType(builder *flatbuffers.Builder, resultParcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(resultParcelType), 0)
}
func ParcelAutoSynthExcelAddSynthMaxItem(builder *flatbuffers.Builder, synthMaxItem bool) {
	builder.PrependBoolSlot(3, synthMaxItem, false)
}
func ParcelAutoSynthExcelAddSynthEndAmount(builder *flatbuffers.Builder, synthEndAmount int64) {
	builder.PrependInt64Slot(4, synthEndAmount, 0)
}
func ParcelAutoSynthExcelAddSynthStartAmount(builder *flatbuffers.Builder, synthStartAmount int64) {
	builder.PrependInt64Slot(5, synthStartAmount, 0)
}
func ParcelAutoSynthExcelAddRequireParcelAmount(builder *flatbuffers.Builder, requireParcelAmount int64) {
	builder.PrependInt64Slot(6, requireParcelAmount, 0)
}
func ParcelAutoSynthExcelAddRequireParcelId(builder *flatbuffers.Builder, requireParcelId int64) {
	builder.PrependInt64Slot(7, requireParcelId, 0)
}
func ParcelAutoSynthExcelAddRequireParcelType(builder *flatbuffers.Builder, requireParcelType ParcelType) {
	builder.PrependInt32Slot(8, int32(requireParcelType), 0)
}
func ParcelAutoSynthExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
