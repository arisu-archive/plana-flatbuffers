// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamEndingExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamEndingExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamEndingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamEndingExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamEndingExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamEndingExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamEndingExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamEndingExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamEndingExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamEndingExcel) EndingConditionValue(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) EndingConditionValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateEndingConditionValue(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameDreamEndingExcel) EndingCondition(j int) DreamMakerEndingCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return DreamMakerEndingCondition(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) EndingConditionLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateEndingCondition(j int, n DreamMakerEndingCondition) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameDreamEndingExcel) ScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDreamEndingExcel) Order() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *MiniGameDreamEndingExcel) DreamMakerEndingType() DreamMakerEndingType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return DreamMakerEndingType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateDreamMakerEndingType(n DreamMakerEndingType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *MiniGameDreamEndingExcel) EndingId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateEndingId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *MiniGameDreamEndingExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamEndingExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func MiniGameDreamEndingExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func MiniGameDreamEndingExcelAddEndingConditionValue(builder *flatbuffers.Builder, endingConditionValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(endingConditionValue), 0)
}
func MiniGameDreamEndingExcelStartEndingConditionValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameDreamEndingExcelAddEndingCondition(builder *flatbuffers.Builder, endingCondition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(endingCondition), 0)
}
func MiniGameDreamEndingExcelStartEndingConditionVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameDreamEndingExcelAddScenarioGroupId(builder *flatbuffers.Builder, scenarioGroupId int64) {
	builder.PrependInt64Slot(2, scenarioGroupId, 0)
}
func MiniGameDreamEndingExcelAddOrder(builder *flatbuffers.Builder, order int32) {
	builder.PrependInt32Slot(3, order, 0)
}
func MiniGameDreamEndingExcelAddDreamMakerEndingType(builder *flatbuffers.Builder, dreamMakerEndingType DreamMakerEndingType) {
	builder.PrependInt32Slot(4, int32(dreamMakerEndingType), 0)
}
func MiniGameDreamEndingExcelAddEndingId(builder *flatbuffers.Builder, endingId int64) {
	builder.PrependInt64Slot(5, endingId, 0)
}
func MiniGameDreamEndingExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(6, eventContentId, 0)
}
func MiniGameDreamEndingExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
