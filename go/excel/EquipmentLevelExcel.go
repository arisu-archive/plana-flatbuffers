// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EquipmentLevelExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEquipmentLevelExcel(buf []byte, offset flatbuffers.UOffsetT) *EquipmentLevelExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EquipmentLevelExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEquipmentLevelExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEquipmentLevelExcel(buf []byte, offset flatbuffers.UOffsetT) *EquipmentLevelExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EquipmentLevelExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEquipmentLevelExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EquipmentLevelExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EquipmentLevelExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EquipmentLevelExcel) Level() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquipmentLevelExcel) MutateLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *EquipmentLevelExcel) TierLevelExp(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EquipmentLevelExcel) TierLevelExpLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EquipmentLevelExcel) MutateTierLevelExp(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EquipmentLevelExcel) TotalExp(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EquipmentLevelExcel) TotalExpLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EquipmentLevelExcel) MutateTotalExp(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func EquipmentLevelExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EquipmentLevelExcelAddLevel(builder *flatbuffers.Builder, level int32) {
	builder.PrependInt32Slot(0, level, 0)
}
func EquipmentLevelExcelAddTierLevelExp(builder *flatbuffers.Builder, tierLevelExp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tierLevelExp), 0)
}
func EquipmentLevelExcelStartTierLevelExpVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EquipmentLevelExcelAddTotalExp(builder *flatbuffers.Builder, totalExp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(totalExp), 0)
}
func EquipmentLevelExcelStartTotalExpVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EquipmentLevelExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
