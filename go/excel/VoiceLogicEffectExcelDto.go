// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// VoiceLogicEffectExcelDto represents a FlatBuffers table
type VoiceLogicEffectExcelDto struct {
	fbsutils.FlatBuffer
	LogicEffectNameHash uint32   `json:"logic_effect_name_hash"`
	Self                bool     `json:"self"`
	Priority            int32    `json:"priority"`
	VoiceHash           []uint32 `json:"voice_hash"`
	VoiceId             uint32   `json:"voice_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *VoiceLogicEffectExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	VoiceLogicEffectExcelStart(b)
	VoiceLogicEffectExcelAddLogicEffectNameHash(b, fbsutils.Convert(t.LogicEffectNameHash, t.FlatBuffer.TableKey))
	VoiceLogicEffectExcelAddSelf(b, t.Self)
	VoiceLogicEffectExcelAddPriority(b, fbsutils.Convert(t.Priority, t.FlatBuffer.TableKey))
	VoiceLogicEffectExcelStartVoiceHashVector(b, len(t.VoiceHash))
	for i := range len(t.VoiceHash) {
		b.PrependUint32(fbsutils.Convert(t.VoiceHash[len(t.VoiceHash)-i-1], t.FlatBuffer.TableKey))
	}
	VoiceLogicEffectExcelAddVoiceHash(b, b.EndVector(len(t.VoiceHash)))
	VoiceLogicEffectExcelAddVoiceId(b, fbsutils.Convert(t.VoiceId, t.FlatBuffer.TableKey))
	return VoiceLogicEffectExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *VoiceLogicEffectExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishVoiceLogicEffectExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *VoiceLogicEffectExcelDto) UnmarshalMessage(e *VoiceLogicEffectExcel) error {
	t.LogicEffectNameHash = fbsutils.Convert(e.LogicEffectNameHash(), t.FlatBuffer.TableKey)
	t.Self = e.Self()
	t.Priority = fbsutils.Convert(e.Priority(), t.FlatBuffer.TableKey)
	t.VoiceHash = make([]uint32, e.VoiceHashLength())
	for i := range e.VoiceHashLength() {
		t.VoiceHash[i] = fbsutils.Convert(e.VoiceHash(i), t.FlatBuffer.TableKey)
	}
	t.VoiceId = fbsutils.Convert(e.VoiceId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *VoiceLogicEffectExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsVoiceLogicEffectExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (VoiceLogicEffectExcelDto) FlatDataName() string {
	return "VoiceLogicEffectExcel"
}
