// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterLevelStatFactorExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterLevelStatFactorExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterLevelStatFactorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterLevelStatFactorExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterLevelStatFactorExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterLevelStatFactorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterLevelStatFactorExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterLevelStatFactorExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterLevelStatFactorExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterLevelStatFactorExcel) Level() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterLevelStatFactorExcel) MutateLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterLevelStatFactorExcel) CriticalFactor() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterLevelStatFactorExcel) MutateCriticalFactor(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *CharacterLevelStatFactorExcel) StabilityFactor() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterLevelStatFactorExcel) MutateStabilityFactor(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CharacterLevelStatFactorExcel) DefenceFactor() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterLevelStatFactorExcel) MutateDefenceFactor(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CharacterLevelStatFactorExcel) AccuracyFactor() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterLevelStatFactorExcel) MutateAccuracyFactor(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func CharacterLevelStatFactorExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CharacterLevelStatFactorExcelAddLevel(builder *flatbuffers.Builder, level int64) {
	builder.PrependInt64Slot(0, level, 0)
}
func CharacterLevelStatFactorExcelAddCriticalFactor(builder *flatbuffers.Builder, criticalFactor int64) {
	builder.PrependInt64Slot(1, criticalFactor, 0)
}
func CharacterLevelStatFactorExcelAddStabilityFactor(builder *flatbuffers.Builder, stabilityFactor int64) {
	builder.PrependInt64Slot(2, stabilityFactor, 0)
}
func CharacterLevelStatFactorExcelAddDefenceFactor(builder *flatbuffers.Builder, defenceFactor int64) {
	builder.PrependInt64Slot(3, defenceFactor, 0)
}
func CharacterLevelStatFactorExcelAddAccuracyFactor(builder *flatbuffers.Builder, accuracyFactor int64) {
	builder.PrependInt64Slot(4, accuracyFactor, 0)
}
func CharacterLevelStatFactorExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
