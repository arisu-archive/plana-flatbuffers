// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameRoadPuzzleRailTileExcelDto represents a FlatBuffers table
type MinigameRoadPuzzleRailTileExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId int64                  `json:"event_content_id"`
	UniqueId       int64                  `json:"unique_id"`
	GroupId        int64                  `json:"group_id"`
	OriginalTile   bool                   `json:"original_tile"`
	PrefabName     string                 `json:"prefab_name"`
	RailTileType   RoadPuzzleRailTileType `json:"rail_tile_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameRoadPuzzleRailTileExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_prefab_name := b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey))
	MinigameRoadPuzzleRailTileExcelStart(b)
	MinigameRoadPuzzleRailTileExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MinigameRoadPuzzleRailTileExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MinigameRoadPuzzleRailTileExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	MinigameRoadPuzzleRailTileExcelAddOriginalTile(b, t.OriginalTile)
	MinigameRoadPuzzleRailTileExcelAddPrefabName(b, __offset_prefab_name)
	MinigameRoadPuzzleRailTileExcelAddRailTileType(b, fbsutils.Convert(t.RailTileType, t.FlatBuffer.TableKey))
	return MinigameRoadPuzzleRailTileExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameRoadPuzzleRailTileExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameRoadPuzzleRailTileExcelDto) UnmarshalMessage(e *MinigameRoadPuzzleRailTileExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.OriginalTile = e.OriginalTile()
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.RailTileType = RoadPuzzleRailTileType(fbsutils.Convert(int32(e.RailTileType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameRoadPuzzleRailTileExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameRoadPuzzleRailTileExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameRoadPuzzleRailTileExcelDto) FlatDataName() string {
	return "MinigameRoadPuzzleRailTileExcel"
}
