// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArenaSeasonCloseRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsArenaSeasonCloseRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *ArenaSeasonCloseRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArenaSeasonCloseRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsArenaSeasonCloseRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *ArenaSeasonCloseRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ArenaSeasonCloseRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ArenaSeasonCloseRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArenaSeasonCloseRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArenaSeasonCloseRewardExcel) SeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) MutateSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ArenaSeasonCloseRewardExcel) RankStart() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) MutateRankStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ArenaSeasonCloseRewardExcel) RankEnd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) MutateRankEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ArenaSeasonCloseRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ArenaSeasonCloseRewardExcel) RewardParcelUniqueId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) RewardParcelUniqueIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) MutateRewardParcelUniqueId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ArenaSeasonCloseRewardExcel) RewardParcelAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) RewardParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ArenaSeasonCloseRewardExcel) MutateRewardParcelAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ArenaSeasonCloseRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ArenaSeasonCloseRewardExcelAddSeasonId(builder *flatbuffers.Builder, seasonId int64) {
	builder.PrependInt64Slot(0, seasonId, 0)
}
func ArenaSeasonCloseRewardExcelAddRankStart(builder *flatbuffers.Builder, rankStart int64) {
	builder.PrependInt64Slot(1, rankStart, 0)
}
func ArenaSeasonCloseRewardExcelAddRankEnd(builder *flatbuffers.Builder, rankEnd int64) {
	builder.PrependInt64Slot(2, rankEnd, 0)
}
func ArenaSeasonCloseRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func ArenaSeasonCloseRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ArenaSeasonCloseRewardExcelAddRewardParcelUniqueId(builder *flatbuffers.Builder, rewardParcelUniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rewardParcelUniqueId), 0)
}
func ArenaSeasonCloseRewardExcelStartRewardParcelUniqueIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ArenaSeasonCloseRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rewardParcelAmount), 0)
}
func ArenaSeasonCloseRewardExcelStartRewardParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ArenaSeasonCloseRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
