// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GachaCraftOpenTagExcelDto represents a FlatBuffers table
type GachaCraftOpenTagExcelDto struct {
	fbsutils.FlatBuffer
	NodeTier CraftNodeTier `json:"node_tier"`
	Tag      []Tag         `json:"tag"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GachaCraftOpenTagExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	GachaCraftOpenTagExcelStart(b)
	GachaCraftOpenTagExcelAddNodeTier(b, fbsutils.Convert(t.NodeTier, t.FlatBuffer.TableKey))
	GachaCraftOpenTagExcelStartTagVector(b, len(t.Tag))
	for i := range len(t.Tag) {
		b.PrependInt32(fbsutils.Convert(int32(t.Tag[len(t.Tag)-i-1]), t.FlatBuffer.TableKey))
	}
	GachaCraftOpenTagExcelAddTag(b, b.EndVector(len(t.Tag)))
	return GachaCraftOpenTagExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GachaCraftOpenTagExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GachaCraftOpenTagExcelDto) UnmarshalMessage(e *GachaCraftOpenTagExcel) error {
	t.NodeTier = CraftNodeTier(fbsutils.Convert(int32(e.NodeTier()), t.FlatBuffer.TableKey))
	t.Tag = make([]Tag, e.TagLength())
	for i := range e.TagLength() {
		t.Tag[i] = Tag(fbsutils.Convert(int32(e.Tag(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GachaCraftOpenTagExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGachaCraftOpenTagExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GachaCraftOpenTagExcelDto) FlatDataName() string {
	return "GachaCraftOpenTagExcel"
}
