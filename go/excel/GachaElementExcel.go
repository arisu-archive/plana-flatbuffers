// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GachaElementExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGachaElementExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaElementExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GachaElementExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishGachaElementExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGachaElementExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaElementExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GachaElementExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGachaElementExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GachaElementExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GachaElementExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GachaElementExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GachaElementExcel) GachaGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateGachaGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GachaElementExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaElementExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *GachaElementExcel) ParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *GachaElementExcel) Rarity() Rarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return Rarity(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaElementExcel) MutateRarity(n Rarity) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *GachaElementExcel) ParcelAmountMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateParcelAmountMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *GachaElementExcel) ParcelAmountMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateParcelAmountMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *GachaElementExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *GachaElementExcel) State() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaElementExcel) MutateState(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func GachaElementExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func GachaElementExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func GachaElementExcelAddGachaGroupId(builder *flatbuffers.Builder, gachaGroupId int64) {
	builder.PrependInt64Slot(1, gachaGroupId, 0)
}
func GachaElementExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(2, int32(parcelType), 0)
}
func GachaElementExcelAddParcelId(builder *flatbuffers.Builder, parcelId int64) {
	builder.PrependInt64Slot(3, parcelId, 0)
}
func GachaElementExcelAddRarity(builder *flatbuffers.Builder, rarity Rarity) {
	builder.PrependInt32Slot(4, int32(rarity), 0)
}
func GachaElementExcelAddParcelAmountMin(builder *flatbuffers.Builder, parcelAmountMin int32) {
	builder.PrependInt32Slot(5, parcelAmountMin, 0)
}
func GachaElementExcelAddParcelAmountMax(builder *flatbuffers.Builder, parcelAmountMax int32) {
	builder.PrependInt32Slot(6, parcelAmountMax, 0)
}
func GachaElementExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(7, prob, 0)
}
func GachaElementExcelAddState(builder *flatbuffers.Builder, state int32) {
	builder.PrependInt32Slot(8, state, 0)
}
func GachaElementExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
