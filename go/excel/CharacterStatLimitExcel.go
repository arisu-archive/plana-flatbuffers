// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterStatLimitExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterStatLimitExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterStatLimitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterStatLimitExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterStatLimitExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterStatLimitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterStatLimitExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterStatLimitExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterStatLimitExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterStatLimitExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterStatLimitExcel) StatMaxValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateStatMaxValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *CharacterStatLimitExcel) StatMinValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateStatMinValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CharacterStatLimitExcel) StatRatioMaxValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateStatRatioMaxValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CharacterStatLimitExcel) StatRatioMinValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateStatRatioMinValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterStatLimitExcel) StatType() StatType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return StatType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateStatType(n StatType) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *CharacterStatLimitExcel) TacticEntityType() TacticEntityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return TacticEntityType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatLimitExcel) MutateTacticEntityType(n TacticEntityType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func CharacterStatLimitExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CharacterStatLimitExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CharacterStatLimitExcelAddStatMaxValue(builder *flatbuffers.Builder, statMaxValue int64) {
	builder.PrependInt64Slot(1, statMaxValue, 0)
}
func CharacterStatLimitExcelAddStatMinValue(builder *flatbuffers.Builder, statMinValue int64) {
	builder.PrependInt64Slot(2, statMinValue, 0)
}
func CharacterStatLimitExcelAddStatRatioMaxValue(builder *flatbuffers.Builder, statRatioMaxValue int64) {
	builder.PrependInt64Slot(3, statRatioMaxValue, 0)
}
func CharacterStatLimitExcelAddStatRatioMinValue(builder *flatbuffers.Builder, statRatioMinValue int64) {
	builder.PrependInt64Slot(4, statRatioMinValue, 0)
}
func CharacterStatLimitExcelAddStatType(builder *flatbuffers.Builder, statType StatType) {
	builder.PrependInt32Slot(5, int32(statType), 0)
}
func CharacterStatLimitExcelAddTacticEntityType(builder *flatbuffers.Builder, tacticEntityType TacticEntityType) {
	builder.PrependInt32Slot(6, int32(tacticEntityType), 0)
}
func CharacterStatLimitExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
