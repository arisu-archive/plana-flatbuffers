// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BulletArmorDamageFactorExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBulletArmorDamageFactorExcel(buf []byte, offset flatbuffers.UOffsetT) *BulletArmorDamageFactorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BulletArmorDamageFactorExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBulletArmorDamageFactorExcel(buf []byte, offset flatbuffers.UOffsetT) *BulletArmorDamageFactorExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BulletArmorDamageFactorExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BulletArmorDamageFactorExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BulletArmorDamageFactorExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BulletArmorDamageFactorExcel) ArmorType() ArmorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ArmorType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BulletArmorDamageFactorExcel) MutateArmorType(n ArmorType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *BulletArmorDamageFactorExcel) BulletType() BulletType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BulletType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BulletArmorDamageFactorExcel) MutateBulletType(n BulletType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *BulletArmorDamageFactorExcel) DamageAttribute() DamageAttribute {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return DamageAttribute(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BulletArmorDamageFactorExcel) MutateDamageAttribute(n DamageAttribute) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *BulletArmorDamageFactorExcel) DamageFactorGroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BulletArmorDamageFactorExcel) DamageRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BulletArmorDamageFactorExcel) MutateDamageRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *BulletArmorDamageFactorExcel) MaxDamageRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BulletArmorDamageFactorExcel) MutateMaxDamageRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *BulletArmorDamageFactorExcel) MinDamageRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BulletArmorDamageFactorExcel) MutateMinDamageRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *BulletArmorDamageFactorExcel) ShowHighlightFloater() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BulletArmorDamageFactorExcel) MutateShowHighlightFloater(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func BulletArmorDamageFactorExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func BulletArmorDamageFactorExcelAddArmorType(builder *flatbuffers.Builder, armorType ArmorType) {
	builder.PrependInt32Slot(0, int32(armorType), 0)
}
func BulletArmorDamageFactorExcelAddBulletType(builder *flatbuffers.Builder, bulletType BulletType) {
	builder.PrependInt32Slot(1, int32(bulletType), 0)
}
func BulletArmorDamageFactorExcelAddDamageAttribute(builder *flatbuffers.Builder, damageAttribute DamageAttribute) {
	builder.PrependInt32Slot(2, int32(damageAttribute), 0)
}
func BulletArmorDamageFactorExcelAddDamageFactorGroupId(builder *flatbuffers.Builder, damageFactorGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(damageFactorGroupId), 0)
}
func BulletArmorDamageFactorExcelAddDamageRate(builder *flatbuffers.Builder, damageRate int64) {
	builder.PrependInt64Slot(4, damageRate, 0)
}
func BulletArmorDamageFactorExcelAddMaxDamageRate(builder *flatbuffers.Builder, maxDamageRate int64) {
	builder.PrependInt64Slot(5, maxDamageRate, 0)
}
func BulletArmorDamageFactorExcelAddMinDamageRate(builder *flatbuffers.Builder, minDamageRate int64) {
	builder.PrependInt64Slot(6, minDamageRate, 0)
}
func BulletArmorDamageFactorExcelAddShowHighlightFloater(builder *flatbuffers.Builder, showHighlightFloater bool) {
	builder.PrependBoolSlot(7, showHighlightFloater, false)
}
func BulletArmorDamageFactorExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
