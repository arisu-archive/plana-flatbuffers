// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EliminateRaidRankingRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEliminateRaidRankingRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidRankingRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EliminateRaidRankingRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEliminateRaidRankingRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidRankingRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EliminateRaidRankingRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EliminateRaidRankingRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EliminateRaidRankingRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EliminateRaidRankingRewardExcel) RewardParcelAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) RewardParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateRewardParcelAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EliminateRaidRankingRewardExcel) RewardParcelUniqueId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) RewardParcelUniqueIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateRewardParcelUniqueId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EliminateRaidRankingRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EliminateRaidRankingRewardExcel) Tier() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateTier(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *EliminateRaidRankingRewardExcel) PercentRankEnd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutatePercentRankEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EliminateRaidRankingRewardExcel) PercentRankStart() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutatePercentRankStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EliminateRaidRankingRewardExcel) RankEnd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateRankEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *EliminateRaidRankingRewardExcel) RankStart() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateRankStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *EliminateRaidRankingRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *EliminateRaidRankingRewardExcel) RankingRewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidRankingRewardExcel) MutateRankingRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func EliminateRaidRankingRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func EliminateRaidRankingRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rewardParcelAmount), 0)
}
func EliminateRaidRankingRewardExcelStartRewardParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EliminateRaidRankingRewardExcelAddRewardParcelUniqueId(builder *flatbuffers.Builder, rewardParcelUniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rewardParcelUniqueId), 0)
}
func EliminateRaidRankingRewardExcelStartRewardParcelUniqueIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EliminateRaidRankingRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func EliminateRaidRankingRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EliminateRaidRankingRewardExcelAddTier(builder *flatbuffers.Builder, tier int32) {
	builder.PrependInt32Slot(3, tier, 0)
}
func EliminateRaidRankingRewardExcelAddPercentRankEnd(builder *flatbuffers.Builder, percentRankEnd int64) {
	builder.PrependInt64Slot(4, percentRankEnd, 0)
}
func EliminateRaidRankingRewardExcelAddPercentRankStart(builder *flatbuffers.Builder, percentRankStart int64) {
	builder.PrependInt64Slot(5, percentRankStart, 0)
}
func EliminateRaidRankingRewardExcelAddRankEnd(builder *flatbuffers.Builder, rankEnd int64) {
	builder.PrependInt64Slot(6, rankEnd, 0)
}
func EliminateRaidRankingRewardExcelAddRankStart(builder *flatbuffers.Builder, rankStart int64) {
	builder.PrependInt64Slot(7, rankStart, 0)
}
func EliminateRaidRankingRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(8, id, 0)
}
func EliminateRaidRankingRewardExcelAddRankingRewardGroupId(builder *flatbuffers.Builder, rankingRewardGroupId int64) {
	builder.PrependInt64Slot(9, rankingRewardGroupId, 0)
}
func EliminateRaidRankingRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
