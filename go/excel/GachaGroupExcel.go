// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GachaGroupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGachaGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GachaGroupExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishGachaGroupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGachaGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GachaGroupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGachaGroupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GachaGroupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GachaGroupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GachaGroupExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaGroupExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GachaGroupExcel) NameKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GachaGroupExcel) IsRecursive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GachaGroupExcel) MutateIsRecursive(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *GachaGroupExcel) GroupType() GachaGroupType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return GachaGroupType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaGroupExcel) MutateGroupType(n GachaGroupType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func GachaGroupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GachaGroupExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func GachaGroupExcelAddNameKr(builder *flatbuffers.Builder, nameKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nameKr), 0)
}
func GachaGroupExcelAddIsRecursive(builder *flatbuffers.Builder, isRecursive bool) {
	builder.PrependBoolSlot(2, isRecursive, false)
}
func GachaGroupExcelAddGroupType(builder *flatbuffers.Builder, groupType GachaGroupType) {
	builder.PrependInt32Slot(3, int32(groupType), 0)
}
func GachaGroupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
