// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AudioAnimatorExcelDto represents a FlatBuffers table
type AudioAnimatorExcelDto struct {
	fbsutils.FlatBuffer
	ControllerNameHash   uint32   `json:"controller_name_hash"`
	VoiceNamePrefix      string   `json:"voice_name_prefix"`
	StateNameHash        uint32   `json:"state_name_hash"`
	StateName            string   `json:"state_name"`
	IgnoreInterruptDelay bool     `json:"ignore_interrupt_delay"`
	IgnoreInterruptPlay  bool     `json:"ignore_interrupt_play"`
	IgnoreVelocity       bool     `json:"ignore_velocity"`
	Volume               float32  `json:"volume"`
	Delay                float32  `json:"delay"`
	RandomPitchMin       int32    `json:"random_pitch_min"`
	RandomPitchMax       int32    `json:"random_pitch_max"`
	AudioPriority        int32    `json:"audio_priority"`
	AudioClipPath        []string `json:"audio_clip_path"`
	VoiceHash            []uint32 `json:"voice_hash"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AudioAnimatorExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_voice_name_prefix := b.CreateString(fbsutils.Convert(t.VoiceNamePrefix, t.FlatBuffer.TableKey))
	__offset_state_name := b.CreateString(fbsutils.Convert(t.StateName, t.FlatBuffer.TableKey))
	var __offset_audio_clip_path flatbuffers.UOffsetT
	__stringOffsets_audio_clip_path := make([]flatbuffers.UOffsetT, len(t.AudioClipPath))
	for i := range len(t.AudioClipPath) {
		__stringOffsets_audio_clip_path[i] = b.CreateString(fbsutils.Convert(t.AudioClipPath[i], t.FlatBuffer.TableKey))
	}
	AudioAnimatorExcelStartAudioClipPathVector(b, len(t.AudioClipPath))
	for i := range len(t.AudioClipPath) {
		b.PrependUOffsetT(__stringOffsets_audio_clip_path[len(t.AudioClipPath)-i-1])
	}
	__offset_audio_clip_path = b.EndVector(len(t.AudioClipPath))
	AudioAnimatorExcelStart(b)
	AudioAnimatorExcelAddControllerNameHash(b, fbsutils.Convert(t.ControllerNameHash, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddVoiceNamePrefix(b, __offset_voice_name_prefix)
	AudioAnimatorExcelAddStateNameHash(b, fbsutils.Convert(t.StateNameHash, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddStateName(b, __offset_state_name)
	AudioAnimatorExcelAddIgnoreInterruptDelay(b, t.IgnoreInterruptDelay)
	AudioAnimatorExcelAddIgnoreInterruptPlay(b, t.IgnoreInterruptPlay)
	AudioAnimatorExcelAddIgnoreVelocity(b, t.IgnoreVelocity)
	AudioAnimatorExcelAddVolume(b, fbsutils.Convert(t.Volume, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddDelay(b, fbsutils.Convert(t.Delay, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddRandomPitchMin(b, fbsutils.Convert(t.RandomPitchMin, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddRandomPitchMax(b, fbsutils.Convert(t.RandomPitchMax, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddAudioPriority(b, fbsutils.Convert(t.AudioPriority, t.FlatBuffer.TableKey))
	AudioAnimatorExcelAddAudioClipPath(b, __offset_audio_clip_path)
	AudioAnimatorExcelStartVoiceHashVector(b, len(t.VoiceHash))
	for i := range len(t.VoiceHash) {
		b.PrependUint32(fbsutils.Convert(t.VoiceHash[len(t.VoiceHash)-i-1], t.FlatBuffer.TableKey))
	}
	AudioAnimatorExcelAddVoiceHash(b, b.EndVector(len(t.VoiceHash)))
	return AudioAnimatorExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AudioAnimatorExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AudioAnimatorExcelDto) UnmarshalMessage(e *AudioAnimatorExcel) error {
	t.ControllerNameHash = fbsutils.Convert(e.ControllerNameHash(), t.FlatBuffer.TableKey)
	t.VoiceNamePrefix = fbsutils.Convert(string(e.VoiceNamePrefix()), t.FlatBuffer.TableKey)
	t.StateNameHash = fbsutils.Convert(e.StateNameHash(), t.FlatBuffer.TableKey)
	t.StateName = fbsutils.Convert(string(e.StateName()), t.FlatBuffer.TableKey)
	t.IgnoreInterruptDelay = e.IgnoreInterruptDelay()
	t.IgnoreInterruptPlay = e.IgnoreInterruptPlay()
	t.IgnoreVelocity = e.IgnoreVelocity()
	t.Volume = fbsutils.Convert(e.Volume(), t.FlatBuffer.TableKey)
	t.Delay = fbsutils.Convert(e.Delay(), t.FlatBuffer.TableKey)
	t.RandomPitchMin = fbsutils.Convert(e.RandomPitchMin(), t.FlatBuffer.TableKey)
	t.RandomPitchMax = fbsutils.Convert(e.RandomPitchMax(), t.FlatBuffer.TableKey)
	t.AudioPriority = fbsutils.Convert(e.AudioPriority(), t.FlatBuffer.TableKey)
	t.AudioClipPath = make([]string, e.AudioClipPathLength())
	for i := range e.AudioClipPathLength() {
		t.AudioClipPath[i] = fbsutils.Convert(string(e.AudioClipPath(i)), t.FlatBuffer.TableKey)
	}
	t.VoiceHash = make([]uint32, e.VoiceHashLength())
	for i := range e.VoiceHashLength() {
		t.VoiceHash[i] = fbsutils.Convert(e.VoiceHash(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AudioAnimatorExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAudioAnimatorExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AudioAnimatorExcelDto) FlatDataName() string {
	return "AudioAnimatorExcel"
}
