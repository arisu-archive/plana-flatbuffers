// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDreamCollectionScenarioExcelDto represents a FlatBuffers table
type MiniGameDreamCollectionScenarioExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId  int64                     `json:"event_content_id"`
	Id              int64                     `json:"id"`
	IsSkip          bool                      `json:"is_skip"`
	ParameterAmount []int64                   `json:"parameter_amount"`
	Parameter       []DreamMakerParameterType `json:"parameter"`
	ScenarioGroupId int64                     `json:"scenario_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDreamCollectionScenarioExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDreamCollectionScenarioExcelStart(b)
	MiniGameDreamCollectionScenarioExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MiniGameDreamCollectionScenarioExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	MiniGameDreamCollectionScenarioExcelAddIsSkip(b, t.IsSkip)
	MiniGameDreamCollectionScenarioExcelStartParameterAmountVector(b, len(t.ParameterAmount))
	for i := range len(t.ParameterAmount) {
		b.PrependInt64(fbsutils.Convert(t.ParameterAmount[len(t.ParameterAmount)-i-1], t.FlatBuffer.TableKey))
	}
	MiniGameDreamCollectionScenarioExcelAddParameterAmount(b, b.EndVector(len(t.ParameterAmount)))
	MiniGameDreamCollectionScenarioExcelStartParameterVector(b, len(t.Parameter))
	for i := range len(t.Parameter) {
		b.PrependInt32(fbsutils.Convert(int32(t.Parameter[len(t.Parameter)-i-1]), t.FlatBuffer.TableKey))
	}
	MiniGameDreamCollectionScenarioExcelAddParameter(b, b.EndVector(len(t.Parameter)))
	MiniGameDreamCollectionScenarioExcelAddScenarioGroupId(b, fbsutils.Convert(t.ScenarioGroupId, t.FlatBuffer.TableKey))
	return MiniGameDreamCollectionScenarioExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDreamCollectionScenarioExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamCollectionScenarioExcelDto) UnmarshalMessage(e *MiniGameDreamCollectionScenarioExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.IsSkip = e.IsSkip()
	t.ParameterAmount = make([]int64, e.ParameterAmountLength())
	for i := range e.ParameterAmountLength() {
		t.ParameterAmount[i] = fbsutils.Convert(e.ParameterAmount(i), t.FlatBuffer.TableKey)
	}
	t.Parameter = make([]DreamMakerParameterType, e.ParameterLength())
	for i := range e.ParameterLength() {
		t.Parameter[i] = DreamMakerParameterType(fbsutils.Convert(int32(e.Parameter(i)), t.FlatBuffer.TableKey))
	}
	t.ScenarioGroupId = fbsutils.Convert(e.ScenarioGroupId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamCollectionScenarioExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDreamCollectionScenarioExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDreamCollectionScenarioExcelDto) FlatDataName() string {
	return "MiniGameDreamCollectionScenarioExcel"
}
