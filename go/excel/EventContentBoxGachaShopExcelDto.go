// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentBoxGachaShopExcelDto represents a FlatBuffers table
type EventContentBoxGachaShopExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId     int64   `json:"event_content_id"`
	GroupId            int64   `json:"group_id"`
	GroupElementAmount int64   `json:"group_element_amount"`
	Round              int64   `json:"round"`
	IsLegacy           bool    `json:"is_legacy"`
	IsPrize            bool    `json:"is_prize"`
	GoodsId            []int64 `json:"goods_id"`
	DisplayOrder       int64   `json:"display_order"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentBoxGachaShopExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentBoxGachaShopExcelStart(b)
	EventContentBoxGachaShopExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentBoxGachaShopExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	EventContentBoxGachaShopExcelAddGroupElementAmount(b, fbsutils.Convert(t.GroupElementAmount, t.FlatBuffer.TableKey))
	EventContentBoxGachaShopExcelAddRound(b, fbsutils.Convert(t.Round, t.FlatBuffer.TableKey))
	EventContentBoxGachaShopExcelAddIsLegacy(b, t.IsLegacy)
	EventContentBoxGachaShopExcelAddIsPrize(b, t.IsPrize)
	EventContentBoxGachaShopExcelStartGoodsIdVector(b, len(t.GoodsId))
	for i := range len(t.GoodsId) {
		b.PrependInt64(fbsutils.Convert(t.GoodsId[len(t.GoodsId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentBoxGachaShopExcelAddGoodsId(b, b.EndVector(len(t.GoodsId)))
	EventContentBoxGachaShopExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	return EventContentBoxGachaShopExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentBoxGachaShopExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentBoxGachaShopExcelDto) UnmarshalMessage(e *EventContentBoxGachaShopExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.GroupElementAmount = fbsutils.Convert(e.GroupElementAmount(), t.FlatBuffer.TableKey)
	t.Round = fbsutils.Convert(e.Round(), t.FlatBuffer.TableKey)
	t.IsLegacy = e.IsLegacy()
	t.IsPrize = e.IsPrize()
	t.GoodsId = make([]int64, e.GoodsIdLength())
	for i := range e.GoodsIdLength() {
		t.GoodsId[i] = fbsutils.Convert(e.GoodsId(i), t.FlatBuffer.TableKey)
	}
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentBoxGachaShopExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentBoxGachaShopExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentBoxGachaShopExcelDto) FlatDataName() string {
	return "EventContentBoxGachaShopExcel"
}
