// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AcademyZoneExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAcademyZoneExcel(buf []byte, offset flatbuffers.UOffsetT) *AcademyZoneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AcademyZoneExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAcademyZoneExcel(buf []byte, offset flatbuffers.UOffsetT) *AcademyZoneExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AcademyZoneExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AcademyZoneExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AcademyZoneExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AcademyZoneExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AcademyZoneExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *AcademyZoneExcel) LocationId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateLocationId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *AcademyZoneExcel) LocationRankForUnlock() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateLocationRankForUnlock(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *AcademyZoneExcel) RewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *AcademyZoneExcel) StudentVisitProb(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AcademyZoneExcel) StudentVisitProbLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateStudentVisitProb(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *AcademyZoneExcel) Tags(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *AcademyZoneExcel) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AcademyZoneExcel) MutateTags(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func AcademyZoneExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func AcademyZoneExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func AcademyZoneExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(1, localizeEtcId, 0)
}
func AcademyZoneExcelAddLocationId(builder *flatbuffers.Builder, locationId int64) {
	builder.PrependInt64Slot(2, locationId, 0)
}
func AcademyZoneExcelAddLocationRankForUnlock(builder *flatbuffers.Builder, locationRankForUnlock int64) {
	builder.PrependInt64Slot(3, locationRankForUnlock, 0)
}
func AcademyZoneExcelAddRewardGroupId(builder *flatbuffers.Builder, rewardGroupId int64) {
	builder.PrependInt64Slot(4, rewardGroupId, 0)
}
func AcademyZoneExcelAddStudentVisitProb(builder *flatbuffers.Builder, studentVisitProb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(studentVisitProb), 0)
}
func AcademyZoneExcelStartStudentVisitProbVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AcademyZoneExcelAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(tags), 0)
}
func AcademyZoneExcelStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AcademyZoneExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
