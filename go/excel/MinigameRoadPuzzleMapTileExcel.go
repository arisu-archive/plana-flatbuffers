// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameRoadPuzzleMapTileExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameRoadPuzzleMapTileExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadPuzzleMapTileExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameRoadPuzzleMapTileExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameRoadPuzzleMapTileExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameRoadPuzzleMapTileExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameRoadPuzzleMapTileExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameRoadPuzzleMapTileExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameRoadPuzzleMapTileExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameRoadPuzzleMapTileExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapTileExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MinigameRoadPuzzleMapTileExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapTileExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MinigameRoadPuzzleMapTileExcel) PrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameRoadPuzzleMapTileExcel) MapTileType() RoadPuzzleMapTileType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return RoadPuzzleMapTileType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameRoadPuzzleMapTileExcel) MutateMapTileType(n RoadPuzzleMapTileType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func MinigameRoadPuzzleMapTileExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MinigameRoadPuzzleMapTileExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func MinigameRoadPuzzleMapTileExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(1, uniqueId, 0)
}
func MinigameRoadPuzzleMapTileExcelAddPrefabName(builder *flatbuffers.Builder, prefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(prefabName), 0)
}
func MinigameRoadPuzzleMapTileExcelAddMapTileType(builder *flatbuffers.Builder, mapTileType RoadPuzzleMapTileType) {
	builder.PrependInt32Slot(3, int32(mapTileType), 0)
}
func MinigameRoadPuzzleMapTileExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
