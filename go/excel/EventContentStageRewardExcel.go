// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentStageRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentStageRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentStageRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentStageRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentStageRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentStageRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentStageRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentStageRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentStageRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentStageRewardExcel) IsDisplayed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentStageRewardExcel) MutateIsDisplayed(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *EventContentStageRewardExcel) RewardAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentStageRewardExcel) MutateRewardAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *EventContentStageRewardExcel) RewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentStageRewardExcel) MutateRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentStageRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentStageRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *EventContentStageRewardExcel) RewardProb() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentStageRewardExcel) MutateRewardProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *EventContentStageRewardExcel) RewardTag() RewardTag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return RewardTag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentStageRewardExcel) MutateRewardTag(n RewardTag) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *EventContentStageRewardExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentStageRewardExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func EventContentStageRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func EventContentStageRewardExcelAddIsDisplayed(builder *flatbuffers.Builder, isDisplayed bool) {
	builder.PrependBoolSlot(0, isDisplayed, false)
}
func EventContentStageRewardExcelAddRewardAmount(builder *flatbuffers.Builder, rewardAmount int32) {
	builder.PrependInt32Slot(1, rewardAmount, 0)
}
func EventContentStageRewardExcelAddRewardId(builder *flatbuffers.Builder, rewardId int64) {
	builder.PrependInt64Slot(2, rewardId, 0)
}
func EventContentStageRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(3, int32(rewardParcelType), 0)
}
func EventContentStageRewardExcelAddRewardProb(builder *flatbuffers.Builder, rewardProb int32) {
	builder.PrependInt32Slot(4, rewardProb, 0)
}
func EventContentStageRewardExcelAddRewardTag(builder *flatbuffers.Builder, rewardTag RewardTag) {
	builder.PrependInt32Slot(5, int32(rewardTag), 0)
}
func EventContentStageRewardExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(6, groupId, 0)
}
func EventContentStageRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
