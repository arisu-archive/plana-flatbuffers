// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WeekDungeonOpenScheduleExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsWeekDungeonOpenScheduleExcel(buf []byte, offset flatbuffers.UOffsetT) *WeekDungeonOpenScheduleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WeekDungeonOpenScheduleExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWeekDungeonOpenScheduleExcel(buf []byte, offset flatbuffers.UOffsetT) *WeekDungeonOpenScheduleExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WeekDungeonOpenScheduleExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WeekDungeonOpenScheduleExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WeekDungeonOpenScheduleExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WeekDungeonOpenScheduleExcel) WeekDay() WeekDay {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return WeekDay(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WeekDungeonOpenScheduleExcel) MutateWeekDay(n WeekDay) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *WeekDungeonOpenScheduleExcel) Open(j int) WeekDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return WeekDungeonType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *WeekDungeonOpenScheduleExcel) OpenLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WeekDungeonOpenScheduleExcel) MutateOpen(j int, n WeekDungeonType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func WeekDungeonOpenScheduleExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func WeekDungeonOpenScheduleExcelAddWeekDay(builder *flatbuffers.Builder, weekDay WeekDay) {
	builder.PrependInt32Slot(0, int32(weekDay), 0)
}
func WeekDungeonOpenScheduleExcelAddOpen(builder *flatbuffers.Builder, open flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(open), 0)
}
func WeekDungeonOpenScheduleExcelStartOpenVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeekDungeonOpenScheduleExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
