// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterPotentialExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterPotentialExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterPotentialExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterPotentialExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCharacterPotentialExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCharacterPotentialExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterPotentialExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterPotentialExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCharacterPotentialExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CharacterPotentialExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterPotentialExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterPotentialExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterPotentialExcel) PotentialStatGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialExcel) MutatePotentialStatGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *CharacterPotentialExcel) PotentialStatBonusRateType() PotentialStatBonusRateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return PotentialStatBonusRateType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterPotentialExcel) MutatePotentialStatBonusRateType(n PotentialStatBonusRateType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *CharacterPotentialExcel) IsUnnecessaryStat() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterPotentialExcel) MutateIsUnnecessaryStat(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func CharacterPotentialExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CharacterPotentialExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CharacterPotentialExcelAddPotentialStatGroupId(builder *flatbuffers.Builder, potentialStatGroupId int64) {
	builder.PrependInt64Slot(1, potentialStatGroupId, 0)
}
func CharacterPotentialExcelAddPotentialStatBonusRateType(builder *flatbuffers.Builder, potentialStatBonusRateType PotentialStatBonusRateType) {
	builder.PrependInt32Slot(2, int32(potentialStatBonusRateType), 0)
}
func CharacterPotentialExcelAddIsUnnecessaryStat(builder *flatbuffers.Builder, isUnnecessaryStat bool) {
	builder.PrependBoolSlot(3, isUnnecessaryStat, false)
}
func CharacterPotentialExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
