// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ObstacleStatExcelDto represents a FlatBuffers table
type ObstacleStatExcelDto struct {
	fbsutils.FlatBuffer
	StringId                uint32  `json:"string_id"`
	Name                    string  `json:"name"`
	MaxHp1                  int64   `json:"max_hp1"`
	MaxHp100                int64   `json:"max_hp100"`
	BlockRate               int64   `json:"block_rate"`
	Dodge                   int64   `json:"dodge"`
	CanNotStandRange        int64   `json:"can_not_stand_range"`
	HighlightFloaterHeight  float32 `json:"highlight_floater_height"`
	EnhanceLightArmorRate   int64   `json:"enhance_light_armor_rate"`
	EnhanceHeavyArmorRate   int64   `json:"enhance_heavy_armor_rate"`
	EnhanceUnarmedRate      int64   `json:"enhance_unarmed_rate"`
	EnhanceElasticArmorRate int64   `json:"enhance_elastic_armor_rate"`
	EnhanceStructureRate    int64   `json:"enhance_structure_rate"`
	EnhanceNormalArmorRate  int64   `json:"enhance_normal_armor_rate"`
	ReduceExDamagedRate     int64   `json:"reduce_ex_damaged_rate"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ObstacleStatExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ObstacleStatExcelStart(b)
	ObstacleStatExcelAddStringId(b, fbsutils.Convert(t.StringId, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	ObstacleStatExcelAddMaxHp1(b, fbsutils.Convert(t.MaxHp1, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddMaxHp100(b, fbsutils.Convert(t.MaxHp100, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddBlockRate(b, fbsutils.Convert(t.BlockRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddDodge(b, fbsutils.Convert(t.Dodge, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddCanNotStandRange(b, fbsutils.Convert(t.CanNotStandRange, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddHighlightFloaterHeight(b, fbsutils.Convert(t.HighlightFloaterHeight, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddEnhanceLightArmorRate(b, fbsutils.Convert(t.EnhanceLightArmorRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddEnhanceHeavyArmorRate(b, fbsutils.Convert(t.EnhanceHeavyArmorRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddEnhanceUnarmedRate(b, fbsutils.Convert(t.EnhanceUnarmedRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddEnhanceElasticArmorRate(b, fbsutils.Convert(t.EnhanceElasticArmorRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddEnhanceStructureRate(b, fbsutils.Convert(t.EnhanceStructureRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddEnhanceNormalArmorRate(b, fbsutils.Convert(t.EnhanceNormalArmorRate, t.FlatBuffer.TableKey))
	ObstacleStatExcelAddReduceExDamagedRate(b, fbsutils.Convert(t.ReduceExDamagedRate, t.FlatBuffer.TableKey))
	return ObstacleStatExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ObstacleStatExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ObstacleStatExcelDto) UnmarshalMessage(e *ObstacleStatExcel) error {
	t.StringId = fbsutils.Convert(e.StringId(), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.MaxHp1 = fbsutils.Convert(e.MaxHp1(), t.FlatBuffer.TableKey)
	t.MaxHp100 = fbsutils.Convert(e.MaxHp100(), t.FlatBuffer.TableKey)
	t.BlockRate = fbsutils.Convert(e.BlockRate(), t.FlatBuffer.TableKey)
	t.Dodge = fbsutils.Convert(e.Dodge(), t.FlatBuffer.TableKey)
	t.CanNotStandRange = fbsutils.Convert(e.CanNotStandRange(), t.FlatBuffer.TableKey)
	t.HighlightFloaterHeight = fbsutils.Convert(e.HighlightFloaterHeight(), t.FlatBuffer.TableKey)
	t.EnhanceLightArmorRate = fbsutils.Convert(e.EnhanceLightArmorRate(), t.FlatBuffer.TableKey)
	t.EnhanceHeavyArmorRate = fbsutils.Convert(e.EnhanceHeavyArmorRate(), t.FlatBuffer.TableKey)
	t.EnhanceUnarmedRate = fbsutils.Convert(e.EnhanceUnarmedRate(), t.FlatBuffer.TableKey)
	t.EnhanceElasticArmorRate = fbsutils.Convert(e.EnhanceElasticArmorRate(), t.FlatBuffer.TableKey)
	t.EnhanceStructureRate = fbsutils.Convert(e.EnhanceStructureRate(), t.FlatBuffer.TableKey)
	t.EnhanceNormalArmorRate = fbsutils.Convert(e.EnhanceNormalArmorRate(), t.FlatBuffer.TableKey)
	t.ReduceExDamagedRate = fbsutils.Convert(e.ReduceExDamagedRate(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ObstacleStatExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsObstacleStatExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ObstacleStatExcelDto) FlatDataName() string {
	return "ObstacleStatExcel"
}
