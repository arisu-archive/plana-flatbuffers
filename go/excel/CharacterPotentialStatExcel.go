// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterPotentialStatExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterPotentialStatExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterPotentialStatExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterPotentialStatExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterPotentialStatExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterPotentialStatExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterPotentialStatExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterPotentialStatExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterPotentialStatExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterPotentialStatExcel) PotentialStatGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialStatExcel) MutatePotentialStatGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterPotentialStatExcel) PotentialLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialStatExcel) MutatePotentialLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *CharacterPotentialStatExcel) RecipeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialStatExcel) MutateRecipeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CharacterPotentialStatExcel) StatBonusRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialStatExcel) MutateStatBonusRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func CharacterPotentialStatExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CharacterPotentialStatExcelAddPotentialStatGroupId(builder *flatbuffers.Builder, potentialStatGroupId int64) {
	builder.PrependInt64Slot(0, potentialStatGroupId, 0)
}
func CharacterPotentialStatExcelAddPotentialLevel(builder *flatbuffers.Builder, potentialLevel int32) {
	builder.PrependInt32Slot(1, potentialLevel, 0)
}
func CharacterPotentialStatExcelAddRecipeId(builder *flatbuffers.Builder, recipeId int64) {
	builder.PrependInt64Slot(2, recipeId, 0)
}
func CharacterPotentialStatExcelAddStatBonusRate(builder *flatbuffers.Builder, statBonusRate int64) {
	builder.PrependInt64Slot(3, statBonusRate, 0)
}
func CharacterPotentialStatExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
