// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoadingImageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsLoadingImageExcel(buf []byte, offset flatbuffers.UOffsetT) *LoadingImageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoadingImageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLoadingImageExcel(buf []byte, offset flatbuffers.UOffsetT) *LoadingImageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LoadingImageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LoadingImageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoadingImageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoadingImageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadingImageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *LoadingImageExcel) ImagePathKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoadingImageExcel) ImagePathJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoadingImageExcel) DisplayWeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadingImageExcel) MutateDisplayWeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func LoadingImageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LoadingImageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func LoadingImageExcelAddImagePathKr(builder *flatbuffers.Builder, imagePathKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(imagePathKr), 0)
}
func LoadingImageExcelAddImagePathJp(builder *flatbuffers.Builder, imagePathJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(imagePathJp), 0)
}
func LoadingImageExcelAddDisplayWeight(builder *flatbuffers.Builder, displayWeight int32) {
	builder.PrependInt32Slot(3, displayWeight, 0)
}
func LoadingImageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
