// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GroundExcelDto represents a FlatBuffers table
type GroundExcelDto struct {
	fbsutils.FlatBuffer
	AllyPassiveSkillId           []string         `json:"ally_passive_skill_id"`
	AllyPassiveSkillLevel        []int32          `json:"ally_passive_skill_level"`
	BattleReadyTimelinePath      string           `json:"battle_ready_timeline_path"`
	BeforeVictoryTimelinePath    string           `json:"before_victory_timeline_path"`
	BgmId                        int64            `json:"bgm_id"`
	CoverPointOff                bool             `json:"cover_point_off"`
	EffectCountLimit             int32            `json:"effect_count_limit"`
	EnemyArmorType               ArmorType        `json:"enemy_armor_type"`
	EnemyAttackRangeAdd          int64            `json:"enemy_attack_range_add"`
	EnemyAttackRangeRate         int64            `json:"enemy_attack_range_rate"`
	EnemyBulletType              BulletType       `json:"enemy_bullet_type"`
	EnemyMinimumPositionGapRate  int64            `json:"enemy_minimum_position_gap_rate"`
	EnemyPassiveSkillId          []string         `json:"enemy_passive_skill_id"`
	EnemyPassiveSkillLevel       []int32          `json:"enemy_passive_skill_level"`
	EnemySightPointAdd           int64            `json:"enemy_sight_point_add"`
	EnemySightPointRate          int64            `json:"enemy_sight_point_rate"`
	EnemySightRangeMax           bool             `json:"enemy_sight_range_max"`
	EnemySkillRangeAdd           int64            `json:"enemy_skill_range_add"`
	EnemySkillRangeRate          int64            `json:"enemy_skill_range_rate"`
	ForcedSkillUse               TacticSkillUse   `json:"forced_skill_use"`
	ForcedTacticSpeed            TacticSpeed      `json:"forced_tactic_speed"`
	FormationGroupId             int64            `json:"formation_group_id"`
	GradeBoss                    int64            `json:"grade_boss"`
	GradeChampion                int64            `json:"grade_champion"`
	GradeElite                   int64            `json:"grade_elite"`
	GradeMinion                  int64            `json:"grade_minion"`
	GradeNpc                     int64            `json:"grade_npc"`
	GroundSceneName              string           `json:"ground_scene_name"`
	HideNpcWhenBattleEnd         bool             `json:"hide_npc_when_battle_end"`
	Id                           int64            `json:"id"`
	ImmuneHitBeforeTimeOutEnd    bool             `json:"immune_hit_before_time_out_end"`
	IsPhaseBgm                   bool             `json:"is_phase_bgm"`
	LevelBoss                    int64            `json:"level_boss"`
	LevelChampion                int64            `json:"level_champion"`
	LevelElite                   int64            `json:"level_elite"`
	LevelMinion                  int64            `json:"level_minion"`
	LevelNpc                     int64            `json:"level_npc"`
	ObstacleLevel                int64            `json:"obstacle_level"`
	PlayerAttackRangeAdd         int64            `json:"player_attack_range_add"`
	PlayerAttackRangeRate        int64            `json:"player_attack_range_rate"`
	PlayerMinimumPositionGapRate int64            `json:"player_minimum_position_gap_rate"`
	PlayerSightPointAdd          int64            `json:"player_sight_point_add"`
	PlayerSightPointRate         int64            `json:"player_sight_point_rate"`
	PlayerSightRangeMax          bool             `json:"player_sight_range_max"`
	PlayerSkillRangeAdd          int64            `json:"player_skill_range_add"`
	PlayerSkillRangeRate         int64            `json:"player_skill_range_rate"`
	ShowNpcSkillCutIn            ShowSkillCutIn   `json:"show_npc_skill_cut_in"`
	SkipBattleEnd                bool             `json:"skip_battle_end"`
	StageFileName                []string         `json:"stage_file_name"`
	StageTopography              StageTopography  `json:"stage_topography"`
	TssAirUnitHeight             int64            `json:"tss_air_unit_height"`
	TssHatchOpen                 bool             `json:"tss_hatch_open"`
	UiBattleHideFromScratch      bool             `json:"ui_battle_hide_from_scratch"`
	UiEmojiScale                 float32          `json:"ui_emoji_scale"`
	UiEnemyCount                 UIEnemyCountType `json:"ui_enemy_count"`
	UiHpScale                    float32          `json:"ui_hp_scale"`
	UiSkillMainLogScale          float32          `json:"ui_skill_main_log_scale"`
	WarningUi                    bool             `json:"warning_ui"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GroundExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	GroundExcelStart(b)
	GroundExcelStartAllyPassiveSkillIdVector(b, len(t.AllyPassiveSkillId))
	for i := range len(t.AllyPassiveSkillId) {
		b.PrependUOffsetT(b.CreateString(t.AllyPassiveSkillId[len(t.AllyPassiveSkillId)-i-1]))
	}
	GroundExcelAddAllyPassiveSkillId(b, b.EndVector(len(t.AllyPassiveSkillId)))
	GroundExcelStartAllyPassiveSkillLevelVector(b, len(t.AllyPassiveSkillLevel))
	for i := range len(t.AllyPassiveSkillLevel) {
		b.PrependInt32(fbsutils.Convert(t.AllyPassiveSkillLevel[len(t.AllyPassiveSkillLevel)-i-1], t.FlatBuffer.TableKey))
	}
	GroundExcelAddAllyPassiveSkillLevel(b, b.EndVector(len(t.AllyPassiveSkillLevel)))
	GroundExcelAddBattleReadyTimelinePath(b, b.CreateString(fbsutils.Convert(t.BattleReadyTimelinePath, t.FlatBuffer.TableKey)))
	GroundExcelAddBeforeVictoryTimelinePath(b, b.CreateString(fbsutils.Convert(t.BeforeVictoryTimelinePath, t.FlatBuffer.TableKey)))
	GroundExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	GroundExcelAddCoverPointOff(b, t.CoverPointOff)
	GroundExcelAddEffectCountLimit(b, fbsutils.Convert(t.EffectCountLimit, t.FlatBuffer.TableKey))
	GroundExcelAddEnemyArmorType(b, fbsutils.Convert(t.EnemyArmorType, t.FlatBuffer.TableKey))
	GroundExcelAddEnemyAttackRangeAdd(b, fbsutils.Convert(t.EnemyAttackRangeAdd, t.FlatBuffer.TableKey))
	GroundExcelAddEnemyAttackRangeRate(b, fbsutils.Convert(t.EnemyAttackRangeRate, t.FlatBuffer.TableKey))
	GroundExcelAddEnemyBulletType(b, fbsutils.Convert(t.EnemyBulletType, t.FlatBuffer.TableKey))
	GroundExcelAddEnemyMinimumPositionGapRate(b, fbsutils.Convert(t.EnemyMinimumPositionGapRate, t.FlatBuffer.TableKey))
	GroundExcelStartEnemyPassiveSkillIdVector(b, len(t.EnemyPassiveSkillId))
	for i := range len(t.EnemyPassiveSkillId) {
		b.PrependUOffsetT(b.CreateString(t.EnemyPassiveSkillId[len(t.EnemyPassiveSkillId)-i-1]))
	}
	GroundExcelAddEnemyPassiveSkillId(b, b.EndVector(len(t.EnemyPassiveSkillId)))
	GroundExcelStartEnemyPassiveSkillLevelVector(b, len(t.EnemyPassiveSkillLevel))
	for i := range len(t.EnemyPassiveSkillLevel) {
		b.PrependInt32(fbsutils.Convert(t.EnemyPassiveSkillLevel[len(t.EnemyPassiveSkillLevel)-i-1], t.FlatBuffer.TableKey))
	}
	GroundExcelAddEnemyPassiveSkillLevel(b, b.EndVector(len(t.EnemyPassiveSkillLevel)))
	GroundExcelAddEnemySightPointAdd(b, fbsutils.Convert(t.EnemySightPointAdd, t.FlatBuffer.TableKey))
	GroundExcelAddEnemySightPointRate(b, fbsutils.Convert(t.EnemySightPointRate, t.FlatBuffer.TableKey))
	GroundExcelAddEnemySightRangeMax(b, t.EnemySightRangeMax)
	GroundExcelAddEnemySkillRangeAdd(b, fbsutils.Convert(t.EnemySkillRangeAdd, t.FlatBuffer.TableKey))
	GroundExcelAddEnemySkillRangeRate(b, fbsutils.Convert(t.EnemySkillRangeRate, t.FlatBuffer.TableKey))
	GroundExcelAddForcedSkillUse(b, fbsutils.Convert(t.ForcedSkillUse, t.FlatBuffer.TableKey))
	GroundExcelAddForcedTacticSpeed(b, fbsutils.Convert(t.ForcedTacticSpeed, t.FlatBuffer.TableKey))
	GroundExcelAddFormationGroupId(b, fbsutils.Convert(t.FormationGroupId, t.FlatBuffer.TableKey))
	GroundExcelAddGradeBoss(b, fbsutils.Convert(t.GradeBoss, t.FlatBuffer.TableKey))
	GroundExcelAddGradeChampion(b, fbsutils.Convert(t.GradeChampion, t.FlatBuffer.TableKey))
	GroundExcelAddGradeElite(b, fbsutils.Convert(t.GradeElite, t.FlatBuffer.TableKey))
	GroundExcelAddGradeMinion(b, fbsutils.Convert(t.GradeMinion, t.FlatBuffer.TableKey))
	GroundExcelAddGradeNpc(b, fbsutils.Convert(t.GradeNpc, t.FlatBuffer.TableKey))
	GroundExcelAddGroundSceneName(b, b.CreateString(fbsutils.Convert(t.GroundSceneName, t.FlatBuffer.TableKey)))
	GroundExcelAddHideNpcWhenBattleEnd(b, t.HideNpcWhenBattleEnd)
	GroundExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	GroundExcelAddImmuneHitBeforeTimeOutEnd(b, t.ImmuneHitBeforeTimeOutEnd)
	GroundExcelAddIsPhaseBgm(b, t.IsPhaseBgm)
	GroundExcelAddLevelBoss(b, fbsutils.Convert(t.LevelBoss, t.FlatBuffer.TableKey))
	GroundExcelAddLevelChampion(b, fbsutils.Convert(t.LevelChampion, t.FlatBuffer.TableKey))
	GroundExcelAddLevelElite(b, fbsutils.Convert(t.LevelElite, t.FlatBuffer.TableKey))
	GroundExcelAddLevelMinion(b, fbsutils.Convert(t.LevelMinion, t.FlatBuffer.TableKey))
	GroundExcelAddLevelNpc(b, fbsutils.Convert(t.LevelNpc, t.FlatBuffer.TableKey))
	GroundExcelAddObstacleLevel(b, fbsutils.Convert(t.ObstacleLevel, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerAttackRangeAdd(b, fbsutils.Convert(t.PlayerAttackRangeAdd, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerAttackRangeRate(b, fbsutils.Convert(t.PlayerAttackRangeRate, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerMinimumPositionGapRate(b, fbsutils.Convert(t.PlayerMinimumPositionGapRate, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerSightPointAdd(b, fbsutils.Convert(t.PlayerSightPointAdd, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerSightPointRate(b, fbsutils.Convert(t.PlayerSightPointRate, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerSightRangeMax(b, t.PlayerSightRangeMax)
	GroundExcelAddPlayerSkillRangeAdd(b, fbsutils.Convert(t.PlayerSkillRangeAdd, t.FlatBuffer.TableKey))
	GroundExcelAddPlayerSkillRangeRate(b, fbsutils.Convert(t.PlayerSkillRangeRate, t.FlatBuffer.TableKey))
	GroundExcelAddShowNpcSkillCutIn(b, fbsutils.Convert(t.ShowNpcSkillCutIn, t.FlatBuffer.TableKey))
	GroundExcelAddSkipBattleEnd(b, t.SkipBattleEnd)
	GroundExcelStartStageFileNameVector(b, len(t.StageFileName))
	for i := range len(t.StageFileName) {
		b.PrependUOffsetT(b.CreateString(t.StageFileName[len(t.StageFileName)-i-1]))
	}
	GroundExcelAddStageFileName(b, b.EndVector(len(t.StageFileName)))
	GroundExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	GroundExcelAddTssAirUnitHeight(b, fbsutils.Convert(t.TssAirUnitHeight, t.FlatBuffer.TableKey))
	GroundExcelAddTssHatchOpen(b, t.TssHatchOpen)
	GroundExcelAddUiBattleHideFromScratch(b, t.UiBattleHideFromScratch)
	GroundExcelAddUiEmojiScale(b, fbsutils.Convert(t.UiEmojiScale, t.FlatBuffer.TableKey))
	GroundExcelAddUiEnemyCount(b, fbsutils.Convert(t.UiEnemyCount, t.FlatBuffer.TableKey))
	GroundExcelAddUiHpScale(b, fbsutils.Convert(t.UiHpScale, t.FlatBuffer.TableKey))
	GroundExcelAddUiSkillMainLogScale(b, fbsutils.Convert(t.UiSkillMainLogScale, t.FlatBuffer.TableKey))
	GroundExcelAddWarningUi(b, t.WarningUi)
	return GroundExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GroundExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GroundExcelDto) UnmarshalMessage(e *GroundExcel) error {
	t.AllyPassiveSkillId = make([]string, e.AllyPassiveSkillIdLength())
	for i := range e.AllyPassiveSkillIdLength() {
		t.AllyPassiveSkillId[i] = fbsutils.Convert(string(e.AllyPassiveSkillId(i)), t.FlatBuffer.TableKey)
	}
	t.AllyPassiveSkillLevel = make([]int32, e.AllyPassiveSkillLevelLength())
	for i := range e.AllyPassiveSkillLevelLength() {
		t.AllyPassiveSkillLevel[i] = fbsutils.Convert(e.AllyPassiveSkillLevel(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePath = fbsutils.Convert(string(e.BattleReadyTimelinePath()), t.FlatBuffer.TableKey)
	t.BeforeVictoryTimelinePath = fbsutils.Convert(string(e.BeforeVictoryTimelinePath()), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.CoverPointOff = e.CoverPointOff()
	t.EffectCountLimit = fbsutils.Convert(e.EffectCountLimit(), t.FlatBuffer.TableKey)
	t.EnemyArmorType = ArmorType(fbsutils.Convert(int32(e.EnemyArmorType()), t.FlatBuffer.TableKey))
	t.EnemyAttackRangeAdd = fbsutils.Convert(e.EnemyAttackRangeAdd(), t.FlatBuffer.TableKey)
	t.EnemyAttackRangeRate = fbsutils.Convert(e.EnemyAttackRangeRate(), t.FlatBuffer.TableKey)
	t.EnemyBulletType = BulletType(fbsutils.Convert(int32(e.EnemyBulletType()), t.FlatBuffer.TableKey))
	t.EnemyMinimumPositionGapRate = fbsutils.Convert(e.EnemyMinimumPositionGapRate(), t.FlatBuffer.TableKey)
	t.EnemyPassiveSkillId = make([]string, e.EnemyPassiveSkillIdLength())
	for i := range e.EnemyPassiveSkillIdLength() {
		t.EnemyPassiveSkillId[i] = fbsutils.Convert(string(e.EnemyPassiveSkillId(i)), t.FlatBuffer.TableKey)
	}
	t.EnemyPassiveSkillLevel = make([]int32, e.EnemyPassiveSkillLevelLength())
	for i := range e.EnemyPassiveSkillLevelLength() {
		t.EnemyPassiveSkillLevel[i] = fbsutils.Convert(e.EnemyPassiveSkillLevel(i), t.FlatBuffer.TableKey)
	}
	t.EnemySightPointAdd = fbsutils.Convert(e.EnemySightPointAdd(), t.FlatBuffer.TableKey)
	t.EnemySightPointRate = fbsutils.Convert(e.EnemySightPointRate(), t.FlatBuffer.TableKey)
	t.EnemySightRangeMax = e.EnemySightRangeMax()
	t.EnemySkillRangeAdd = fbsutils.Convert(e.EnemySkillRangeAdd(), t.FlatBuffer.TableKey)
	t.EnemySkillRangeRate = fbsutils.Convert(e.EnemySkillRangeRate(), t.FlatBuffer.TableKey)
	t.ForcedSkillUse = TacticSkillUse(fbsutils.Convert(int32(e.ForcedSkillUse()), t.FlatBuffer.TableKey))
	t.ForcedTacticSpeed = TacticSpeed(fbsutils.Convert(int32(e.ForcedTacticSpeed()), t.FlatBuffer.TableKey))
	t.FormationGroupId = fbsutils.Convert(e.FormationGroupId(), t.FlatBuffer.TableKey)
	t.GradeBoss = fbsutils.Convert(e.GradeBoss(), t.FlatBuffer.TableKey)
	t.GradeChampion = fbsutils.Convert(e.GradeChampion(), t.FlatBuffer.TableKey)
	t.GradeElite = fbsutils.Convert(e.GradeElite(), t.FlatBuffer.TableKey)
	t.GradeMinion = fbsutils.Convert(e.GradeMinion(), t.FlatBuffer.TableKey)
	t.GradeNpc = fbsutils.Convert(e.GradeNpc(), t.FlatBuffer.TableKey)
	t.GroundSceneName = fbsutils.Convert(string(e.GroundSceneName()), t.FlatBuffer.TableKey)
	t.HideNpcWhenBattleEnd = e.HideNpcWhenBattleEnd()
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.ImmuneHitBeforeTimeOutEnd = e.ImmuneHitBeforeTimeOutEnd()
	t.IsPhaseBgm = e.IsPhaseBgm()
	t.LevelBoss = fbsutils.Convert(e.LevelBoss(), t.FlatBuffer.TableKey)
	t.LevelChampion = fbsutils.Convert(e.LevelChampion(), t.FlatBuffer.TableKey)
	t.LevelElite = fbsutils.Convert(e.LevelElite(), t.FlatBuffer.TableKey)
	t.LevelMinion = fbsutils.Convert(e.LevelMinion(), t.FlatBuffer.TableKey)
	t.LevelNpc = fbsutils.Convert(e.LevelNpc(), t.FlatBuffer.TableKey)
	t.ObstacleLevel = fbsutils.Convert(e.ObstacleLevel(), t.FlatBuffer.TableKey)
	t.PlayerAttackRangeAdd = fbsutils.Convert(e.PlayerAttackRangeAdd(), t.FlatBuffer.TableKey)
	t.PlayerAttackRangeRate = fbsutils.Convert(e.PlayerAttackRangeRate(), t.FlatBuffer.TableKey)
	t.PlayerMinimumPositionGapRate = fbsutils.Convert(e.PlayerMinimumPositionGapRate(), t.FlatBuffer.TableKey)
	t.PlayerSightPointAdd = fbsutils.Convert(e.PlayerSightPointAdd(), t.FlatBuffer.TableKey)
	t.PlayerSightPointRate = fbsutils.Convert(e.PlayerSightPointRate(), t.FlatBuffer.TableKey)
	t.PlayerSightRangeMax = e.PlayerSightRangeMax()
	t.PlayerSkillRangeAdd = fbsutils.Convert(e.PlayerSkillRangeAdd(), t.FlatBuffer.TableKey)
	t.PlayerSkillRangeRate = fbsutils.Convert(e.PlayerSkillRangeRate(), t.FlatBuffer.TableKey)
	t.ShowNpcSkillCutIn = ShowSkillCutIn(fbsutils.Convert(int32(e.ShowNpcSkillCutIn()), t.FlatBuffer.TableKey))
	t.SkipBattleEnd = e.SkipBattleEnd()
	t.StageFileName = make([]string, e.StageFileNameLength())
	for i := range e.StageFileNameLength() {
		t.StageFileName[i] = fbsutils.Convert(string(e.StageFileName(i)), t.FlatBuffer.TableKey)
	}
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	t.TssAirUnitHeight = fbsutils.Convert(e.TssAirUnitHeight(), t.FlatBuffer.TableKey)
	t.TssHatchOpen = e.TssHatchOpen()
	t.UiBattleHideFromScratch = e.UiBattleHideFromScratch()
	t.UiEmojiScale = fbsutils.Convert(e.UiEmojiScale(), t.FlatBuffer.TableKey)
	t.UiEnemyCount = UIEnemyCountType(fbsutils.Convert(int32(e.UiEnemyCount()), t.FlatBuffer.TableKey))
	t.UiHpScale = fbsutils.Convert(e.UiHpScale(), t.FlatBuffer.TableKey)
	t.UiSkillMainLogScale = fbsutils.Convert(e.UiSkillMainLogScale(), t.FlatBuffer.TableKey)
	t.WarningUi = e.WarningUi()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GroundExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGroundExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GroundExcelDto) FlatDataName() string {
	return "GroundExcel"
}
