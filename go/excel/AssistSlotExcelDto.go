// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AssistSlotExcelDto represents a FlatBuffers table
type AssistSlotExcelDto struct {
	fbsutils.FlatBuffer
	AssistRentalFeeAmount         int64       `json:"assist_rental_fee_amount"`
	AssistRentalFeeAmountStranger int64       `json:"assist_rental_fee_amount_stranger"`
	AssistRentRewardDailyMaxCount int64       `json:"assist_rent_reward_daily_max_count"`
	AssistRewardLimit             int64       `json:"assist_reward_limit"`
	AssistTermRewardPeriodFromSec int64       `json:"assist_term_reward_period_from_sec"`
	EchelonType                   EchelonType `json:"echelon_type"`
	SlotId                        int64       `json:"slot_id"`
	SlotNumber                    int64       `json:"slot_number"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AssistSlotExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	AssistSlotExcelStart(b)
	AssistSlotExcelAddAssistRentalFeeAmount(b, fbsutils.Convert(t.AssistRentalFeeAmount, t.FlatBuffer.TableKey))
	AssistSlotExcelAddAssistRentalFeeAmountStranger(b, fbsutils.Convert(t.AssistRentalFeeAmountStranger, t.FlatBuffer.TableKey))
	AssistSlotExcelAddAssistRentRewardDailyMaxCount(b, fbsutils.Convert(t.AssistRentRewardDailyMaxCount, t.FlatBuffer.TableKey))
	AssistSlotExcelAddAssistRewardLimit(b, fbsutils.Convert(t.AssistRewardLimit, t.FlatBuffer.TableKey))
	AssistSlotExcelAddAssistTermRewardPeriodFromSec(b, fbsutils.Convert(t.AssistTermRewardPeriodFromSec, t.FlatBuffer.TableKey))
	AssistSlotExcelAddEchelonType(b, fbsutils.Convert(t.EchelonType, t.FlatBuffer.TableKey))
	AssistSlotExcelAddSlotId(b, fbsutils.Convert(t.SlotId, t.FlatBuffer.TableKey))
	AssistSlotExcelAddSlotNumber(b, fbsutils.Convert(t.SlotNumber, t.FlatBuffer.TableKey))
	return AssistSlotExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AssistSlotExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AssistSlotExcelDto) UnmarshalMessage(e *AssistSlotExcel) error {
	t.AssistRentalFeeAmount = fbsutils.Convert(e.AssistRentalFeeAmount(), t.FlatBuffer.TableKey)
	t.AssistRentalFeeAmountStranger = fbsutils.Convert(e.AssistRentalFeeAmountStranger(), t.FlatBuffer.TableKey)
	t.AssistRentRewardDailyMaxCount = fbsutils.Convert(e.AssistRentRewardDailyMaxCount(), t.FlatBuffer.TableKey)
	t.AssistRewardLimit = fbsutils.Convert(e.AssistRewardLimit(), t.FlatBuffer.TableKey)
	t.AssistTermRewardPeriodFromSec = fbsutils.Convert(e.AssistTermRewardPeriodFromSec(), t.FlatBuffer.TableKey)
	t.EchelonType = EchelonType(fbsutils.Convert(int32(e.EchelonType()), t.FlatBuffer.TableKey))
	t.SlotId = fbsutils.Convert(e.SlotId(), t.FlatBuffer.TableKey)
	t.SlotNumber = fbsutils.Convert(e.SlotNumber(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AssistSlotExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAssistSlotExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AssistSlotExcelDto) FlatDataName() string {
	return "AssistSlotExcel"
}
