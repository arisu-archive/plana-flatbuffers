// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BattlePassMissionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBattlePassMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BattlePassMissionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBattlePassMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BattlePassMissionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BattlePassMissionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BattlePassMissionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BattlePassMissionExcel) BattlePassExpAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateBattlePassExpAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *BattlePassMissionExcel) BattlePassId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateBattlePassId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *BattlePassMissionExcel) Category() MissionCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return MissionCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateCategory(n MissionCategory) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *BattlePassMissionExcel) ChallengeStageShortcut() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateChallengeStageShortcut(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *BattlePassMissionExcel) CompleteConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateCompleteConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *BattlePassMissionExcel) CompleteConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) CompleteConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateCompleteConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *BattlePassMissionExcel) CompleteConditionParameterTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) CompleteConditionParameterTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateCompleteConditionParameterTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *BattlePassMissionExcel) CompleteConditionType() MissionCompleteConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return MissionCompleteConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateCompleteConditionType(n MissionCompleteConditionType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *BattlePassMissionExcel) Description() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateDescription(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *BattlePassMissionExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *BattlePassMissionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *BattlePassMissionExcel) PreMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) PreMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutatePreMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *BattlePassMissionExcel) ResetType() MissionResetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return MissionResetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateResetType(n MissionResetType) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *BattlePassMissionExcel) ShortcutUi(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *BattlePassMissionExcel) ShortcutUiLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BattlePassMissionExcel) ToastDisplayType() MissionToastDisplayConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return MissionToastDisplayConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BattlePassMissionExcel) MutateToastDisplayType(n MissionToastDisplayConditionType) bool {
	return rcv._tab.MutateInt32Slot(32, int32(n))
}

func (rcv *BattlePassMissionExcel) ToastImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassMissionExcel) ViewFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BattlePassMissionExcel) MutateViewFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

func BattlePassMissionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func BattlePassMissionExcelAddBattlePassExpAmount(builder *flatbuffers.Builder, battlePassExpAmount int32) {
	builder.PrependInt32Slot(0, battlePassExpAmount, 0)
}
func BattlePassMissionExcelAddBattlePassId(builder *flatbuffers.Builder, battlePassId int64) {
	builder.PrependInt64Slot(1, battlePassId, 0)
}
func BattlePassMissionExcelAddCategory(builder *flatbuffers.Builder, category MissionCategory) {
	builder.PrependInt32Slot(2, int32(category), 0)
}
func BattlePassMissionExcelAddChallengeStageShortcut(builder *flatbuffers.Builder, challengeStageShortcut int64) {
	builder.PrependInt64Slot(3, challengeStageShortcut, 0)
}
func BattlePassMissionExcelAddCompleteConditionCount(builder *flatbuffers.Builder, completeConditionCount int64) {
	builder.PrependInt64Slot(4, completeConditionCount, 0)
}
func BattlePassMissionExcelAddCompleteConditionParameter(builder *flatbuffers.Builder, completeConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(completeConditionParameter), 0)
}
func BattlePassMissionExcelStartCompleteConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func BattlePassMissionExcelAddCompleteConditionParameterTag(builder *flatbuffers.Builder, completeConditionParameterTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(completeConditionParameterTag), 0)
}
func BattlePassMissionExcelStartCompleteConditionParameterTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BattlePassMissionExcelAddCompleteConditionType(builder *flatbuffers.Builder, completeConditionType MissionCompleteConditionType) {
	builder.PrependInt32Slot(7, int32(completeConditionType), 0)
}
func BattlePassMissionExcelAddDescription(builder *flatbuffers.Builder, description uint32) {
	builder.PrependUint32Slot(8, description, 0)
}
func BattlePassMissionExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(9, displayOrder, 0)
}
func BattlePassMissionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(10, id, 0)
}
func BattlePassMissionExcelAddPreMissionId(builder *flatbuffers.Builder, preMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(preMissionId), 0)
}
func BattlePassMissionExcelStartPreMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func BattlePassMissionExcelAddResetType(builder *flatbuffers.Builder, resetType MissionResetType) {
	builder.PrependInt32Slot(12, int32(resetType), 0)
}
func BattlePassMissionExcelAddShortcutUi(builder *flatbuffers.Builder, shortcutUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(shortcutUi), 0)
}
func BattlePassMissionExcelStartShortcutUiVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BattlePassMissionExcelAddToastDisplayType(builder *flatbuffers.Builder, toastDisplayType MissionToastDisplayConditionType) {
	builder.PrependInt32Slot(14, int32(toastDisplayType), 0)
}
func BattlePassMissionExcelAddToastImagePath(builder *flatbuffers.Builder, toastImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(toastImagePath), 0)
}
func BattlePassMissionExcelAddViewFlag(builder *flatbuffers.Builder, viewFlag bool) {
	builder.PrependBoolSlot(16, viewFlag, false)
}
func BattlePassMissionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
