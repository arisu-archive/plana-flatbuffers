// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FavorLevelRewardExcelDto represents a FlatBuffers table
type FavorLevelRewardExcelDto struct {
	fbsutils.FlatBuffer
	CharacterId      int64                 `json:"character_id"`
	FavorLevel       int64                 `json:"favor_level"`
	RewardAmount     []int64               `json:"reward_amount"`
	RewardParcelId   []int64               `json:"reward_parcel_id"`
	RewardParcelType []ParcelType          `json:"reward_parcel_type"`
	StatType         []EquipmentOptionType `json:"stat_type"`
	StatValue        []int64               `json:"stat_value"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FavorLevelRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	FavorLevelRewardExcelStart(b)
	FavorLevelRewardExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	FavorLevelRewardExcelAddFavorLevel(b, fbsutils.Convert(t.FavorLevel, t.FlatBuffer.TableKey))
	FavorLevelRewardExcelStartRewardAmountVector(b, len(t.RewardAmount))
	for i := range len(t.RewardAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardAmount[len(t.RewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	FavorLevelRewardExcelAddRewardAmount(b, b.EndVector(len(t.RewardAmount)))
	FavorLevelRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	FavorLevelRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	FavorLevelRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	FavorLevelRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	FavorLevelRewardExcelStartStatTypeVector(b, len(t.StatType))
	for i := range len(t.StatType) {
		b.PrependInt32(fbsutils.Convert(int32(t.StatType[len(t.StatType)-i-1]), t.FlatBuffer.TableKey))
	}
	FavorLevelRewardExcelAddStatType(b, b.EndVector(len(t.StatType)))
	FavorLevelRewardExcelStartStatValueVector(b, len(t.StatValue))
	for i := range len(t.StatValue) {
		b.PrependInt64(fbsutils.Convert(t.StatValue[len(t.StatValue)-i-1], t.FlatBuffer.TableKey))
	}
	FavorLevelRewardExcelAddStatValue(b, b.EndVector(len(t.StatValue)))
	return FavorLevelRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FavorLevelRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FavorLevelRewardExcelDto) UnmarshalMessage(e *FavorLevelRewardExcel) error {
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.FavorLevel = fbsutils.Convert(e.FavorLevel(), t.FlatBuffer.TableKey)
	t.RewardAmount = make([]int64, e.RewardAmountLength())
	for i := range e.RewardAmountLength() {
		t.RewardAmount[i] = fbsutils.Convert(e.RewardAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.StatType = make([]EquipmentOptionType, e.StatTypeLength())
	for i := range e.StatTypeLength() {
		t.StatType[i] = EquipmentOptionType(fbsutils.Convert(int32(e.StatType(i)), t.FlatBuffer.TableKey))
	}
	t.StatValue = make([]int64, e.StatValueLength())
	for i := range e.StatValueLength() {
		t.StatValue[i] = fbsutils.Convert(e.StatValue(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FavorLevelRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFavorLevelRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FavorLevelRewardExcelDto) FlatDataName() string {
	return "FavorLevelRewardExcel"
}
