// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentConcentrationRewardExcelDto represents a FlatBuffers table
type EventContentConcentrationRewardExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId          int64                   `json:"event_content_id"`
	UniqueId                int64                   `json:"unique_id"`
	ConcentrationRewardType ConcentrationRewardType `json:"concentration_reward_type"`
	LocalizePrefabId        string                  `json:"localize_prefab_id"`
	Rarity                  Rarity                  `json:"rarity"`
	Round                   int32                   `json:"round"`
	IsLoop                  bool                    `json:"is_loop"`
	RewardParcelType        []ParcelType            `json:"reward_parcel_type"`
	RewardParcelId          []int64                 `json:"reward_parcel_id"`
	RewardParcelAmount      []int32                 `json:"reward_parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentConcentrationRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_localize_prefab_id := b.CreateString(fbsutils.Convert(t.LocalizePrefabId, t.FlatBuffer.TableKey))
	EventContentConcentrationRewardExcelStart(b)
	EventContentConcentrationRewardExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentConcentrationRewardExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	EventContentConcentrationRewardExcelAddConcentrationRewardType(b, fbsutils.Convert(t.ConcentrationRewardType, t.FlatBuffer.TableKey))
	EventContentConcentrationRewardExcelAddLocalizePrefabId(b, __offset_localize_prefab_id)
	EventContentConcentrationRewardExcelAddRarity(b, fbsutils.Convert(t.Rarity, t.FlatBuffer.TableKey))
	EventContentConcentrationRewardExcelAddRound(b, fbsutils.Convert(t.Round, t.FlatBuffer.TableKey))
	EventContentConcentrationRewardExcelAddIsLoop(b, t.IsLoop)
	EventContentConcentrationRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentConcentrationRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentConcentrationRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentConcentrationRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	EventContentConcentrationRewardExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt32(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentConcentrationRewardExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	return EventContentConcentrationRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentConcentrationRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentConcentrationRewardExcelDto) UnmarshalMessage(e *EventContentConcentrationRewardExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.ConcentrationRewardType = ConcentrationRewardType(fbsutils.Convert(int32(e.ConcentrationRewardType()), t.FlatBuffer.TableKey))
	t.LocalizePrefabId = fbsutils.Convert(string(e.LocalizePrefabId()), t.FlatBuffer.TableKey)
	t.Rarity = Rarity(fbsutils.Convert(int32(e.Rarity()), t.FlatBuffer.TableKey))
	t.Round = fbsutils.Convert(e.Round(), t.FlatBuffer.TableKey)
	t.IsLoop = e.IsLoop()
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelAmount = make([]int32, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentConcentrationRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentConcentrationRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentConcentrationRewardExcelDto) FlatDataName() string {
	return "EventContentConcentrationRewardExcel"
}
