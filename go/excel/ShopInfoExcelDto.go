// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ShopInfoExcelDto represents a FlatBuffers table
type ShopInfoExcelDto struct {
	fbsutils.FlatBuffer
	ShopUpdateGroupId12   int32                 `json:"shop_update_group_id12"`
	ShopUpdateGroupId11   int32                 `json:"shop_update_group_id11"`
	ShopUpdateGroupId10   int32                 `json:"shop_update_group_id10"`
	ShopUpdateGroupId9    int32                 `json:"shop_update_group_id9"`
	ShopUpdateGroupId8    int32                 `json:"shop_update_group_id8"`
	ShopUpdateGroupId7    int32                 `json:"shop_update_group_id7"`
	ShopUpdateGroupId6    int32                 `json:"shop_update_group_id6"`
	ShopUpdateGroupId5    int32                 `json:"shop_update_group_id5"`
	ShopUpdateGroupId4    int32                 `json:"shop_update_group_id4"`
	ShopUpdateGroupId3    int32                 `json:"shop_update_group_id3"`
	ShopUpdateGroupId2    int32                 `json:"shop_update_group_id2"`
	ShopUpdateGroupId1    int32                 `json:"shop_update_group_id1"`
	ShopUpdateDate        int32                 `json:"shop_update_date"`
	DisplayOrder          int32                 `json:"display_order"`
	IsShopVisible         bool                  `json:"is_shop_visible"`
	DisplayParcelId       int64                 `json:"display_parcel_id"`
	DisplayParcelType     ParcelType            `json:"display_parcel_type"`
	ShopProductUpdateTime string                `json:"shop_product_update_time"`
	RefreshPeriodBaseTime string                `json:"refresh_period_base_time"`
	OpenPeriodTo          string                `json:"open_period_to"`
	OpenPeriodFrom        string                `json:"open_period_from"`
	GoodsId               []int64               `json:"goods_id"`
	RefreshAbleCount      int64                 `json:"refresh_able_count"`
	ShopRefreshPeriodType ShopRefreshPeriodType `json:"shop_refresh_period_type"`
	ShopRefresherType     ShopRefresherType     `json:"shop_refresher_type"`
	AutoRefreshCoolTime   int64                 `json:"auto_refresh_cool_time"`
	CostParcelId          []int64               `json:"cost_parcel_id"`
	CostParcelType        []ParcelType          `json:"cost_parcel_type"`
	IsSoldOutDimmed       bool                  `json:"is_sold_out_dimmed"`
	IsRefresh             bool                  `json:"is_refresh"`
	CategoryType          ShopCategoryType      `json:"category_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ShopInfoExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ShopInfoExcelStart(b)
	ShopInfoExcelAddShopUpdateGroupId12(b, fbsutils.Convert(t.ShopUpdateGroupId12, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId11(b, fbsutils.Convert(t.ShopUpdateGroupId11, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId10(b, fbsutils.Convert(t.ShopUpdateGroupId10, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId9(b, fbsutils.Convert(t.ShopUpdateGroupId9, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId8(b, fbsutils.Convert(t.ShopUpdateGroupId8, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId7(b, fbsutils.Convert(t.ShopUpdateGroupId7, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId6(b, fbsutils.Convert(t.ShopUpdateGroupId6, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId5(b, fbsutils.Convert(t.ShopUpdateGroupId5, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId4(b, fbsutils.Convert(t.ShopUpdateGroupId4, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId3(b, fbsutils.Convert(t.ShopUpdateGroupId3, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId2(b, fbsutils.Convert(t.ShopUpdateGroupId2, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateGroupId1(b, fbsutils.Convert(t.ShopUpdateGroupId1, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopUpdateDate(b, fbsutils.Convert(t.ShopUpdateDate, t.FlatBuffer.TableKey))
	ShopInfoExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	ShopInfoExcelAddIsShopVisible(b, t.IsShopVisible)
	ShopInfoExcelAddDisplayParcelId(b, fbsutils.Convert(t.DisplayParcelId, t.FlatBuffer.TableKey))
	ShopInfoExcelAddDisplayParcelType(b, fbsutils.Convert(t.DisplayParcelType, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopProductUpdateTime(b, b.CreateString(fbsutils.Convert(t.ShopProductUpdateTime, t.FlatBuffer.TableKey)))
	ShopInfoExcelAddRefreshPeriodBaseTime(b, b.CreateString(fbsutils.Convert(t.RefreshPeriodBaseTime, t.FlatBuffer.TableKey)))
	ShopInfoExcelAddOpenPeriodTo(b, b.CreateString(fbsutils.Convert(t.OpenPeriodTo, t.FlatBuffer.TableKey)))
	ShopInfoExcelAddOpenPeriodFrom(b, b.CreateString(fbsutils.Convert(t.OpenPeriodFrom, t.FlatBuffer.TableKey)))
	ShopInfoExcelStartGoodsIdVector(b, len(t.GoodsId))
	for i := range len(t.GoodsId) {
		b.PrependInt64(fbsutils.Convert(t.GoodsId[len(t.GoodsId)-i-1], t.FlatBuffer.TableKey))
	}
	ShopInfoExcelAddGoodsId(b, b.EndVector(len(t.GoodsId)))
	ShopInfoExcelAddRefreshAbleCount(b, fbsutils.Convert(t.RefreshAbleCount, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopRefreshPeriodType(b, fbsutils.Convert(t.ShopRefreshPeriodType, t.FlatBuffer.TableKey))
	ShopInfoExcelAddShopRefresherType(b, fbsutils.Convert(t.ShopRefresherType, t.FlatBuffer.TableKey))
	ShopInfoExcelAddAutoRefreshCoolTime(b, fbsutils.Convert(t.AutoRefreshCoolTime, t.FlatBuffer.TableKey))
	ShopInfoExcelStartCostParcelIdVector(b, len(t.CostParcelId))
	for i := range len(t.CostParcelId) {
		b.PrependInt64(fbsutils.Convert(t.CostParcelId[len(t.CostParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	ShopInfoExcelAddCostParcelId(b, b.EndVector(len(t.CostParcelId)))
	ShopInfoExcelStartCostParcelTypeVector(b, len(t.CostParcelType))
	for i := range len(t.CostParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.CostParcelType[len(t.CostParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	ShopInfoExcelAddCostParcelType(b, b.EndVector(len(t.CostParcelType)))
	ShopInfoExcelAddIsSoldOutDimmed(b, t.IsSoldOutDimmed)
	ShopInfoExcelAddIsRefresh(b, t.IsRefresh)
	ShopInfoExcelAddCategoryType(b, fbsutils.Convert(t.CategoryType, t.FlatBuffer.TableKey))
	return ShopInfoExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ShopInfoExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ShopInfoExcelDto) UnmarshalMessage(e *ShopInfoExcel) error {
	t.ShopUpdateGroupId12 = fbsutils.Convert(e.ShopUpdateGroupId12(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId11 = fbsutils.Convert(e.ShopUpdateGroupId11(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId10 = fbsutils.Convert(e.ShopUpdateGroupId10(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId9 = fbsutils.Convert(e.ShopUpdateGroupId9(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId8 = fbsutils.Convert(e.ShopUpdateGroupId8(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId7 = fbsutils.Convert(e.ShopUpdateGroupId7(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId6 = fbsutils.Convert(e.ShopUpdateGroupId6(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId5 = fbsutils.Convert(e.ShopUpdateGroupId5(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId4 = fbsutils.Convert(e.ShopUpdateGroupId4(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId3 = fbsutils.Convert(e.ShopUpdateGroupId3(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId2 = fbsutils.Convert(e.ShopUpdateGroupId2(), t.FlatBuffer.TableKey)
	t.ShopUpdateGroupId1 = fbsutils.Convert(e.ShopUpdateGroupId1(), t.FlatBuffer.TableKey)
	t.ShopUpdateDate = fbsutils.Convert(e.ShopUpdateDate(), t.FlatBuffer.TableKey)
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.IsShopVisible = e.IsShopVisible()
	t.DisplayParcelId = fbsutils.Convert(e.DisplayParcelId(), t.FlatBuffer.TableKey)
	t.DisplayParcelType = ParcelType(fbsutils.Convert(int32(e.DisplayParcelType()), t.FlatBuffer.TableKey))
	t.ShopProductUpdateTime = fbsutils.Convert(string(e.ShopProductUpdateTime()), t.FlatBuffer.TableKey)
	t.RefreshPeriodBaseTime = fbsutils.Convert(string(e.RefreshPeriodBaseTime()), t.FlatBuffer.TableKey)
	t.OpenPeriodTo = fbsutils.Convert(string(e.OpenPeriodTo()), t.FlatBuffer.TableKey)
	t.OpenPeriodFrom = fbsutils.Convert(string(e.OpenPeriodFrom()), t.FlatBuffer.TableKey)
	t.GoodsId = make([]int64, e.GoodsIdLength())
	for i := range e.GoodsIdLength() {
		t.GoodsId[i] = fbsutils.Convert(e.GoodsId(i), t.FlatBuffer.TableKey)
	}
	t.RefreshAbleCount = fbsutils.Convert(e.RefreshAbleCount(), t.FlatBuffer.TableKey)
	t.ShopRefreshPeriodType = ShopRefreshPeriodType(fbsutils.Convert(int32(e.ShopRefreshPeriodType()), t.FlatBuffer.TableKey))
	t.ShopRefresherType = ShopRefresherType(fbsutils.Convert(int32(e.ShopRefresherType()), t.FlatBuffer.TableKey))
	t.AutoRefreshCoolTime = fbsutils.Convert(e.AutoRefreshCoolTime(), t.FlatBuffer.TableKey)
	t.CostParcelId = make([]int64, e.CostParcelIdLength())
	for i := range e.CostParcelIdLength() {
		t.CostParcelId[i] = fbsutils.Convert(e.CostParcelId(i), t.FlatBuffer.TableKey)
	}
	t.CostParcelType = make([]ParcelType, e.CostParcelTypeLength())
	for i := range e.CostParcelTypeLength() {
		t.CostParcelType[i] = ParcelType(fbsutils.Convert(int32(e.CostParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.IsSoldOutDimmed = e.IsSoldOutDimmed()
	t.IsRefresh = e.IsRefresh()
	t.CategoryType = ShopCategoryType(fbsutils.Convert(int32(e.CategoryType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ShopInfoExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsShopInfoExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ShopInfoExcelDto) FlatDataName() string {
	return "ShopInfoExcel"
}
