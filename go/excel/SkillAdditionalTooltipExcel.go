// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SkillAdditionalTooltipExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsSkillAdditionalTooltipExcel(buf []byte, offset flatbuffers.UOffsetT) *SkillAdditionalTooltipExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SkillAdditionalTooltipExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSkillAdditionalTooltipExcel(buf []byte, offset flatbuffers.UOffsetT) *SkillAdditionalTooltipExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SkillAdditionalTooltipExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SkillAdditionalTooltipExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SkillAdditionalTooltipExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SkillAdditionalTooltipExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillAdditionalTooltipExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SkillAdditionalTooltipExcel) AdditionalSkillGroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillAdditionalTooltipExcel) ShowSkillSlot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SkillAdditionalTooltipExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SkillAdditionalTooltipExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(0, groupId, 0)
}
func SkillAdditionalTooltipExcelAddAdditionalSkillGroupId(builder *flatbuffers.Builder, additionalSkillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(additionalSkillGroupId), 0)
}
func SkillAdditionalTooltipExcelAddShowSkillSlot(builder *flatbuffers.Builder, showSkillSlot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(showSkillSlot), 0)
}
func SkillAdditionalTooltipExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
