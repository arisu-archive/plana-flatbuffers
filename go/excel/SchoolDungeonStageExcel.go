// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SchoolDungeonStageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsSchoolDungeonStageExcel(buf []byte, offset flatbuffers.UOffsetT) *SchoolDungeonStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SchoolDungeonStageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSchoolDungeonStageExcel(buf []byte, offset flatbuffers.UOffsetT) *SchoolDungeonStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SchoolDungeonStageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SchoolDungeonStageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SchoolDungeonStageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SchoolDungeonStageExcel) StageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SchoolDungeonStageExcel) DungeonType() SchoolDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SchoolDungeonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateDungeonType(n SchoolDungeonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *SchoolDungeonStageExcel) Difficulty() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateDifficulty(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *SchoolDungeonStageExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *SchoolDungeonStageExcel) PrevStageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutatePrevStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageEnterCostType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageEnterCostId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageEnterCostAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostMinimumAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) StageEnterCostMinimumAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageEnterCostMinimumAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SchoolDungeonStageExcel) GroundId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateGroundId(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *SchoolDungeonStageExcel) StarGoal(j int) StarGoalType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StarGoalType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) StarGoalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStarGoal(j int, n StarGoalType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *SchoolDungeonStageExcel) StarGoalAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) StarGoalAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStarGoalAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SchoolDungeonStageExcel) StageTopography() StageTopography {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return StageTopography(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageTopography(n StageTopography) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *SchoolDungeonStageExcel) RecommandLevel() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateRecommandLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *SchoolDungeonStageExcel) StageRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateStageRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *SchoolDungeonStageExcel) PlayTimeLimitInSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutatePlayTimeLimitInSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *SchoolDungeonStageExcel) EchelonExtensionType() EchelonExtensionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return EchelonExtensionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SchoolDungeonStageExcel) MutateEchelonExtensionType(n EchelonExtensionType) bool {
	return rcv._tab.MutateInt32Slot(36, int32(n))
}

func SchoolDungeonStageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func SchoolDungeonStageExcelAddStageId(builder *flatbuffers.Builder, stageId int64) {
	builder.PrependInt64Slot(0, stageId, 0)
}
func SchoolDungeonStageExcelAddDungeonType(builder *flatbuffers.Builder, dungeonType SchoolDungeonType) {
	builder.PrependInt32Slot(1, int32(dungeonType), 0)
}
func SchoolDungeonStageExcelAddDifficulty(builder *flatbuffers.Builder, difficulty int32) {
	builder.PrependInt32Slot(2, difficulty, 0)
}
func SchoolDungeonStageExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(3, battleDuration, 0)
}
func SchoolDungeonStageExcelAddPrevStageId(builder *flatbuffers.Builder, prevStageId int64) {
	builder.PrependInt64Slot(4, prevStageId, 0)
}
func SchoolDungeonStageExcelAddStageEnterCostType(builder *flatbuffers.Builder, stageEnterCostType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(stageEnterCostType), 0)
}
func SchoolDungeonStageExcelStartStageEnterCostTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SchoolDungeonStageExcelAddStageEnterCostId(builder *flatbuffers.Builder, stageEnterCostId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stageEnterCostId), 0)
}
func SchoolDungeonStageExcelStartStageEnterCostIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SchoolDungeonStageExcelAddStageEnterCostAmount(builder *flatbuffers.Builder, stageEnterCostAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(stageEnterCostAmount), 0)
}
func SchoolDungeonStageExcelStartStageEnterCostAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SchoolDungeonStageExcelAddStageEnterCostMinimumAmount(builder *flatbuffers.Builder, stageEnterCostMinimumAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(stageEnterCostMinimumAmount), 0)
}
func SchoolDungeonStageExcelStartStageEnterCostMinimumAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SchoolDungeonStageExcelAddGroundId(builder *flatbuffers.Builder, groundId int32) {
	builder.PrependInt32Slot(9, groundId, 0)
}
func SchoolDungeonStageExcelAddStarGoal(builder *flatbuffers.Builder, starGoal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(starGoal), 0)
}
func SchoolDungeonStageExcelStartStarGoalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SchoolDungeonStageExcelAddStarGoalAmount(builder *flatbuffers.Builder, starGoalAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(starGoalAmount), 0)
}
func SchoolDungeonStageExcelStartStarGoalAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SchoolDungeonStageExcelAddStageTopography(builder *flatbuffers.Builder, stageTopography StageTopography) {
	builder.PrependInt32Slot(12, int32(stageTopography), 0)
}
func SchoolDungeonStageExcelAddRecommandLevel(builder *flatbuffers.Builder, recommandLevel int64) {
	builder.PrependInt64Slot(13, recommandLevel, 0)
}
func SchoolDungeonStageExcelAddStageRewardId(builder *flatbuffers.Builder, stageRewardId int64) {
	builder.PrependInt64Slot(14, stageRewardId, 0)
}
func SchoolDungeonStageExcelAddPlayTimeLimitInSeconds(builder *flatbuffers.Builder, playTimeLimitInSeconds int64) {
	builder.PrependInt64Slot(15, playTimeLimitInSeconds, 0)
}
func SchoolDungeonStageExcelAddEchelonExtensionType(builder *flatbuffers.Builder, echelonExtensionType EchelonExtensionType) {
	builder.PrependInt32Slot(16, int32(echelonExtensionType), 0)
}
func SchoolDungeonStageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
