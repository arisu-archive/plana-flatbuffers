// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CheatCodeListExcelDto represents a FlatBuffers table
type CheatCodeListExcelDto struct {
	fbsutils.FlatBuffer
	CheatCode  []string `json:"cheat_code"`
	Desc       string   `json:"desc"`
	Id         int64    `json:"id"`
	InputTitle []string `json:"input_title"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CheatCodeListExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CheatCodeListExcelStart(b)
	CheatCodeListExcelStartCheatCodeVector(b, len(t.CheatCode))
	for i := range len(t.CheatCode) {
		b.PrependUOffsetT(b.CreateString(t.CheatCode[len(t.CheatCode)-i-1]))
	}
	CheatCodeListExcelAddCheatCode(b, b.EndVector(len(t.CheatCode)))
	CheatCodeListExcelAddDesc(b, b.CreateString(fbsutils.Convert(t.Desc, t.FlatBuffer.TableKey)))
	CheatCodeListExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CheatCodeListExcelStartInputTitleVector(b, len(t.InputTitle))
	for i := range len(t.InputTitle) {
		b.PrependUOffsetT(b.CreateString(t.InputTitle[len(t.InputTitle)-i-1]))
	}
	CheatCodeListExcelAddInputTitle(b, b.EndVector(len(t.InputTitle)))
	return CheatCodeListExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CheatCodeListExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CheatCodeListExcelDto) UnmarshalMessage(e *CheatCodeListExcel) error {
	t.CheatCode = make([]string, e.CheatCodeLength())
	for i := range e.CheatCodeLength() {
		t.CheatCode[i] = fbsutils.Convert(string(e.CheatCode(i)), t.FlatBuffer.TableKey)
	}
	t.Desc = fbsutils.Convert(string(e.Desc()), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.InputTitle = make([]string, e.InputTitleLength())
	for i := range e.InputTitleLength() {
		t.InputTitle[i] = fbsutils.Convert(string(e.InputTitle(i)), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CheatCodeListExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCheatCodeListExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CheatCodeListExcelDto) FlatDataName() string {
	return "CheatCodeListExcel"
}
