// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShopFreeRecruitPeriodExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsShopFreeRecruitPeriodExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopFreeRecruitPeriodExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShopFreeRecruitPeriodExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishShopFreeRecruitPeriodExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsShopFreeRecruitPeriodExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopFreeRecruitPeriodExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShopFreeRecruitPeriodExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedShopFreeRecruitPeriodExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ShopFreeRecruitPeriodExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShopFreeRecruitPeriodExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShopFreeRecruitPeriodExcel) ShopFreeRecruitId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopFreeRecruitPeriodExcel) MutateShopFreeRecruitId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ShopFreeRecruitPeriodExcel) ShopFreeRecruitIntervalId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopFreeRecruitPeriodExcel) MutateShopFreeRecruitIntervalId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ShopFreeRecruitPeriodExcel) IntervalDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ShopFreeRecruitPeriodExcel) FreeRecruitCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopFreeRecruitPeriodExcel) MutateFreeRecruitCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func ShopFreeRecruitPeriodExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ShopFreeRecruitPeriodExcelAddShopFreeRecruitId(builder *flatbuffers.Builder, shopFreeRecruitId int64) {
	builder.PrependInt64Slot(0, shopFreeRecruitId, 0)
}
func ShopFreeRecruitPeriodExcelAddShopFreeRecruitIntervalId(builder *flatbuffers.Builder, shopFreeRecruitIntervalId int64) {
	builder.PrependInt64Slot(1, shopFreeRecruitIntervalId, 0)
}
func ShopFreeRecruitPeriodExcelAddIntervalDate(builder *flatbuffers.Builder, intervalDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(intervalDate), 0)
}
func ShopFreeRecruitPeriodExcelAddFreeRecruitCount(builder *flatbuffers.Builder, freeRecruitCount int32) {
	builder.PrependInt32Slot(3, freeRecruitCount, 0)
}
func ShopFreeRecruitPeriodExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
