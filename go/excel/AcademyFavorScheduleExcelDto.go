// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AcademyFavorScheduleExcelDto represents a FlatBuffers table
type AcademyFavorScheduleExcelDto struct {
	fbsutils.FlatBuffer
	Id                   int64        `json:"id"`
	CharacterId          int64        `json:"character_id"`
	ScheduleGroupId      int64        `json:"schedule_group_id"`
	OrderInGroup         int64        `json:"order_in_group"`
	Location             string       `json:"location"`
	LocalizeScenarioId   uint32       `json:"localize_scenario_id"`
	FavorRank            int64        `json:"favor_rank"`
	SecretStoneAmount    int64        `json:"secret_stone_amount"`
	ScenarioSriptGroupId int64        `json:"scenario_sript_group_id"`
	RewardParcelType     []ParcelType `json:"reward_parcel_type"`
	RewardParcelId       []int64      `json:"reward_parcel_id"`
	RewardAmount         []int64      `json:"reward_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AcademyFavorScheduleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	AcademyFavorScheduleExcelStart(b)
	AcademyFavorScheduleExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddScheduleGroupId(b, fbsutils.Convert(t.ScheduleGroupId, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddOrderInGroup(b, fbsutils.Convert(t.OrderInGroup, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddLocation(b, b.CreateString(fbsutils.Convert(t.Location, t.FlatBuffer.TableKey)))
	AcademyFavorScheduleExcelAddLocalizeScenarioId(b, fbsutils.Convert(t.LocalizeScenarioId, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddFavorRank(b, fbsutils.Convert(t.FavorRank, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddSecretStoneAmount(b, fbsutils.Convert(t.SecretStoneAmount, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelAddScenarioSriptGroupId(b, fbsutils.Convert(t.ScenarioSriptGroupId, t.FlatBuffer.TableKey))
	AcademyFavorScheduleExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	AcademyFavorScheduleExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	AcademyFavorScheduleExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	AcademyFavorScheduleExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	AcademyFavorScheduleExcelStartRewardAmountVector(b, len(t.RewardAmount))
	for i := range len(t.RewardAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardAmount[len(t.RewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	AcademyFavorScheduleExcelAddRewardAmount(b, b.EndVector(len(t.RewardAmount)))
	return AcademyFavorScheduleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AcademyFavorScheduleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AcademyFavorScheduleExcelDto) UnmarshalMessage(e *AcademyFavorScheduleExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.ScheduleGroupId = fbsutils.Convert(e.ScheduleGroupId(), t.FlatBuffer.TableKey)
	t.OrderInGroup = fbsutils.Convert(e.OrderInGroup(), t.FlatBuffer.TableKey)
	t.Location = fbsutils.Convert(string(e.Location()), t.FlatBuffer.TableKey)
	t.LocalizeScenarioId = fbsutils.Convert(e.LocalizeScenarioId(), t.FlatBuffer.TableKey)
	t.FavorRank = fbsutils.Convert(e.FavorRank(), t.FlatBuffer.TableKey)
	t.SecretStoneAmount = fbsutils.Convert(e.SecretStoneAmount(), t.FlatBuffer.TableKey)
	t.ScenarioSriptGroupId = fbsutils.Convert(e.ScenarioSriptGroupId(), t.FlatBuffer.TableKey)
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardAmount = make([]int64, e.RewardAmountLength())
	for i := range e.RewardAmountLength() {
		t.RewardAmount[i] = fbsutils.Convert(e.RewardAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AcademyFavorScheduleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAcademyFavorScheduleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AcademyFavorScheduleExcelDto) FlatDataName() string {
	return "AcademyFavorScheduleExcel"
}
