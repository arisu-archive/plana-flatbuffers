// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConquestObjectExcelDto represents a FlatBuffers table
type ConquestObjectExcelDto struct {
	fbsutils.FlatBuffer
	StepObjectCount          int32              `json:"step_object_count"`
	StepIndex                int32              `json:"step_index"`
	Disposable               bool               `json:"disposable"`
	ConquestRewardAmount     int32              `json:"conquest_reward_amount"`
	ConquestRewardId         int64              `json:"conquest_reward_id"`
	ConquestRewardParcelType ParcelType         `json:"conquest_reward_parcel_type"`
	PrefabName               string             `json:"prefab_name"`
	Name                     string             `json:"name"`
	Key                      uint32             `json:"key"`
	ConquestObjectType       ConquestObjectType `json:"conquest_object_type"`
	EventContentId           int64              `json:"event_content_id"`
	Id                       int64              `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConquestObjectExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ConquestObjectExcelStart(b)
	ConquestObjectExcelAddStepObjectCount(b, fbsutils.Convert(t.StepObjectCount, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddStepIndex(b, fbsutils.Convert(t.StepIndex, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddDisposable(b, t.Disposable)
	ConquestObjectExcelAddConquestRewardAmount(b, fbsutils.Convert(t.ConquestRewardAmount, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddConquestRewardId(b, fbsutils.Convert(t.ConquestRewardId, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddConquestRewardParcelType(b, fbsutils.Convert(t.ConquestRewardParcelType, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddPrefabName(b, b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey)))
	ConquestObjectExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	ConquestObjectExcelAddKey(b, fbsutils.Convert(t.Key, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddConquestObjectType(b, fbsutils.Convert(t.ConquestObjectType, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	ConquestObjectExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return ConquestObjectExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConquestObjectExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConquestObjectExcelDto) UnmarshalMessage(e *ConquestObjectExcel) error {
	t.StepObjectCount = fbsutils.Convert(e.StepObjectCount(), t.FlatBuffer.TableKey)
	t.StepIndex = fbsutils.Convert(e.StepIndex(), t.FlatBuffer.TableKey)
	t.Disposable = e.Disposable()
	t.ConquestRewardAmount = fbsutils.Convert(e.ConquestRewardAmount(), t.FlatBuffer.TableKey)
	t.ConquestRewardId = fbsutils.Convert(e.ConquestRewardId(), t.FlatBuffer.TableKey)
	t.ConquestRewardParcelType = ParcelType(fbsutils.Convert(int32(e.ConquestRewardParcelType()), t.FlatBuffer.TableKey))
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.Key = fbsutils.Convert(e.Key(), t.FlatBuffer.TableKey)
	t.ConquestObjectType = ConquestObjectType(fbsutils.Convert(int32(e.ConquestObjectType()), t.FlatBuffer.TableKey))
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConquestObjectExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConquestObjectExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConquestObjectExcelDto) FlatDataName() string {
	return "ConquestObjectExcel"
}
