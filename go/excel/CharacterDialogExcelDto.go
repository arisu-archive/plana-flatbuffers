// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterDialogExcelDto represents a FlatBuffers table
type CharacterDialogExcelDto struct {
	fbsutils.FlatBuffer
	LocalizeCvGroup   string           `json:"localize_cv_group"`
	UnlockEquipWeapon bool             `json:"unlock_equip_weapon"`
	UnlockFavorRank   int64            `json:"unlock_favor_rank"`
	CvCollectionType  CVCollectionType `json:"cv_collection_type"`
	CollectionVisible bool             `json:"collection_visible"`
	PosY              float32          `json:"pos_y"`
	PosX              float32          `json:"pos_x"`
	ApplyPosition     bool             `json:"apply_position"`
	VoiceId           []uint32         `json:"voice_id"`
	LocalizeJp        string           `json:"localize_jp"`
	LocalizeKr        string           `json:"localize_kr"`
	AnimationName     string           `json:"animation_name"`
	Duration          int64            `json:"duration"`
	ActionName        string           `json:"action_name"`
	DialogType        DialogType       `json:"dialog_type"`
	GroupId           int64            `json:"group_id"`
	EndDate           string           `json:"end_date"`
	StartDate         string           `json:"start_date"`
	Anniversary       Anniversary      `json:"anniversary"`
	DialogCondition   DialogCondition  `json:"dialog_condition"`
	DialogCategory    DialogCategory   `json:"dialog_category"`
	ProductionStep    ProductionStep   `json:"production_step"`
	DisplayOrder      int64            `json:"display_order"`
	CostumeUniqueId   int64            `json:"costume_unique_id"`
	CharacterId       int64            `json:"character_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterDialogExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterDialogExcelStart(b)
	CharacterDialogExcelAddLocalizeCvGroup(b, b.CreateString(fbsutils.Convert(t.LocalizeCvGroup, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddUnlockEquipWeapon(b, t.UnlockEquipWeapon)
	CharacterDialogExcelAddUnlockFavorRank(b, fbsutils.Convert(t.UnlockFavorRank, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddCvCollectionType(b, fbsutils.Convert(t.CvCollectionType, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddCollectionVisible(b, t.CollectionVisible)
	CharacterDialogExcelAddPosY(b, fbsutils.Convert(t.PosY, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddPosX(b, fbsutils.Convert(t.PosX, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddApplyPosition(b, t.ApplyPosition)
	CharacterDialogExcelStartVoiceIdVector(b, len(t.VoiceId))
	for i := range len(t.VoiceId) {
		b.PrependUint32(fbsutils.Convert(t.VoiceId[len(t.VoiceId)-i-1], t.FlatBuffer.TableKey))
	}
	CharacterDialogExcelAddVoiceId(b, b.EndVector(len(t.VoiceId)))
	CharacterDialogExcelAddLocalizeJp(b, b.CreateString(fbsutils.Convert(t.LocalizeJp, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddLocalizeKr(b, b.CreateString(fbsutils.Convert(t.LocalizeKr, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddAnimationName(b, b.CreateString(fbsutils.Convert(t.AnimationName, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddDuration(b, fbsutils.Convert(t.Duration, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddActionName(b, b.CreateString(fbsutils.Convert(t.ActionName, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddDialogType(b, fbsutils.Convert(t.DialogType, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddEndDate(b, b.CreateString(fbsutils.Convert(t.EndDate, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddStartDate(b, b.CreateString(fbsutils.Convert(t.StartDate, t.FlatBuffer.TableKey)))
	CharacterDialogExcelAddAnniversary(b, fbsutils.Convert(t.Anniversary, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddDialogCondition(b, fbsutils.Convert(t.DialogCondition, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddDialogCategory(b, fbsutils.Convert(t.DialogCategory, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddCostumeUniqueId(b, fbsutils.Convert(t.CostumeUniqueId, t.FlatBuffer.TableKey))
	CharacterDialogExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	return CharacterDialogExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterDialogExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterDialogExcelDto) UnmarshalMessage(e *CharacterDialogExcel) error {
	t.LocalizeCvGroup = fbsutils.Convert(string(e.LocalizeCvGroup()), t.FlatBuffer.TableKey)
	t.UnlockEquipWeapon = e.UnlockEquipWeapon()
	t.UnlockFavorRank = fbsutils.Convert(e.UnlockFavorRank(), t.FlatBuffer.TableKey)
	t.CvCollectionType = CVCollectionType(fbsutils.Convert(int32(e.CvCollectionType()), t.FlatBuffer.TableKey))
	t.CollectionVisible = e.CollectionVisible()
	t.PosY = fbsutils.Convert(e.PosY(), t.FlatBuffer.TableKey)
	t.PosX = fbsutils.Convert(e.PosX(), t.FlatBuffer.TableKey)
	t.ApplyPosition = e.ApplyPosition()
	t.VoiceId = make([]uint32, e.VoiceIdLength())
	for i := range e.VoiceIdLength() {
		t.VoiceId[i] = fbsutils.Convert(e.VoiceId(i), t.FlatBuffer.TableKey)
	}
	t.LocalizeJp = fbsutils.Convert(string(e.LocalizeJp()), t.FlatBuffer.TableKey)
	t.LocalizeKr = fbsutils.Convert(string(e.LocalizeKr()), t.FlatBuffer.TableKey)
	t.AnimationName = fbsutils.Convert(string(e.AnimationName()), t.FlatBuffer.TableKey)
	t.Duration = fbsutils.Convert(e.Duration(), t.FlatBuffer.TableKey)
	t.ActionName = fbsutils.Convert(string(e.ActionName()), t.FlatBuffer.TableKey)
	t.DialogType = DialogType(fbsutils.Convert(int32(e.DialogType()), t.FlatBuffer.TableKey))
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.EndDate = fbsutils.Convert(string(e.EndDate()), t.FlatBuffer.TableKey)
	t.StartDate = fbsutils.Convert(string(e.StartDate()), t.FlatBuffer.TableKey)
	t.Anniversary = Anniversary(fbsutils.Convert(int32(e.Anniversary()), t.FlatBuffer.TableKey))
	t.DialogCondition = DialogCondition(fbsutils.Convert(int32(e.DialogCondition()), t.FlatBuffer.TableKey))
	t.DialogCategory = DialogCategory(fbsutils.Convert(int32(e.DialogCategory()), t.FlatBuffer.TableKey))
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.CostumeUniqueId = fbsutils.Convert(e.CostumeUniqueId(), t.FlatBuffer.TableKey)
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterDialogExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterDialogExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterDialogExcelDto) FlatDataName() string {
	return "CharacterDialogExcel"
}
