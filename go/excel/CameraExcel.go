// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CameraExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCameraExcel(buf []byte, offset flatbuffers.UOffsetT) *CameraExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CameraExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCameraExcel(buf []byte, offset flatbuffers.UOffsetT) *CameraExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CameraExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CameraExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CameraExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CameraExcel) BottomMargin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraExcel) MutateBottomMargin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *CameraExcel) IgnoreEnemies() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CameraExcel) MutateIgnoreEnemies(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *CameraExcel) LeftMargin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraExcel) MutateLeftMargin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *CameraExcel) MaxDistance() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraExcel) MutateMaxDistance(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *CameraExcel) MinDistance() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraExcel) MutateMinDistance(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *CameraExcel) MoveInstantly() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CameraExcel) MutateMoveInstantly(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *CameraExcel) MoveInstantlyRotationSave() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CameraExcel) MutateMoveInstantlyRotationSave(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *CameraExcel) RotationX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraExcel) MutateRotationX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *CameraExcel) RotationY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraExcel) MutateRotationY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *CameraExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CameraExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *CameraExcel) UseRailPointCompensation() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CameraExcel) MutateUseRailPointCompensation(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func CameraExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func CameraExcelAddBottomMargin(builder *flatbuffers.Builder, bottomMargin float32) {
	builder.PrependFloat32Slot(0, bottomMargin, 0.0)
}
func CameraExcelAddIgnoreEnemies(builder *flatbuffers.Builder, ignoreEnemies bool) {
	builder.PrependBoolSlot(1, ignoreEnemies, false)
}
func CameraExcelAddLeftMargin(builder *flatbuffers.Builder, leftMargin float32) {
	builder.PrependFloat32Slot(2, leftMargin, 0.0)
}
func CameraExcelAddMaxDistance(builder *flatbuffers.Builder, maxDistance float32) {
	builder.PrependFloat32Slot(3, maxDistance, 0.0)
}
func CameraExcelAddMinDistance(builder *flatbuffers.Builder, minDistance float32) {
	builder.PrependFloat32Slot(4, minDistance, 0.0)
}
func CameraExcelAddMoveInstantly(builder *flatbuffers.Builder, moveInstantly bool) {
	builder.PrependBoolSlot(5, moveInstantly, false)
}
func CameraExcelAddMoveInstantlyRotationSave(builder *flatbuffers.Builder, moveInstantlyRotationSave bool) {
	builder.PrependBoolSlot(6, moveInstantlyRotationSave, false)
}
func CameraExcelAddRotationX(builder *flatbuffers.Builder, rotationX float32) {
	builder.PrependFloat32Slot(7, rotationX, 0.0)
}
func CameraExcelAddRotationY(builder *flatbuffers.Builder, rotationY float32) {
	builder.PrependFloat32Slot(8, rotationY, 0.0)
}
func CameraExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(9, uniqueId, 0)
}
func CameraExcelAddUseRailPointCompensation(builder *flatbuffers.Builder, useRailPointCompensation bool) {
	builder.PrependBoolSlot(10, useRailPointCompensation, false)
}
func CameraExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
