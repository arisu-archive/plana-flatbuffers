// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentSpineDisplayPeriodExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentSpineDisplayPeriodExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentSpineDisplayPeriodExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentSpineDisplayPeriodExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentSpineDisplayPeriodExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentSpineDisplayPeriodExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentSpineDisplayPeriodExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentSpineDisplayPeriodExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentSpineDisplayPeriodExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentSpineDisplayPeriodExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentSpineDisplayPeriodExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentSpineDisplayPeriodExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentSpineDisplayPeriodExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentSpineDisplayPeriodExcel) DialogCategory() DialogCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return DialogCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentSpineDisplayPeriodExcel) MutateDialogCategory(n DialogCategory) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentSpineDisplayPeriodExcel) CostumeUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentSpineDisplayPeriodExcel) MutateCostumeUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentSpineDisplayPeriodExcel) ShowPeriodFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentSpineDisplayPeriodExcel) ShowPeriodTo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventContentSpineDisplayPeriodExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EventContentSpineDisplayPeriodExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentSpineDisplayPeriodExcelAddDialogCategory(builder *flatbuffers.Builder, dialogCategory DialogCategory) {
	builder.PrependInt32Slot(1, int32(dialogCategory), 0)
}
func EventContentSpineDisplayPeriodExcelAddCostumeUniqueId(builder *flatbuffers.Builder, costumeUniqueId int64) {
	builder.PrependInt64Slot(2, costumeUniqueId, 0)
}
func EventContentSpineDisplayPeriodExcelAddShowPeriodFrom(builder *flatbuffers.Builder, showPeriodFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(showPeriodFrom), 0)
}
func EventContentSpineDisplayPeriodExcelAddShowPeriodTo(builder *flatbuffers.Builder, showPeriodTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(showPeriodTo), 0)
}
func EventContentSpineDisplayPeriodExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
