// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioCharacterNameExcelDto represents a FlatBuffers table
type ScenarioCharacterNameExcelDto struct {
	fbsutils.FlatBuffer
	CharacterName   uint32                  `json:"character_name"`
	ProductionStep  ProductionStep          `json:"production_step"`
	NameKr          string                  `json:"name_kr"`
	NicknameKr      string                  `json:"nickname_kr"`
	NameJp          string                  `json:"name_jp"`
	NicknameJp      string                  `json:"nickname_jp"`
	Shape           ScenarioCharacterShapes `json:"shape"`
	SpinePrefabName string                  `json:"spine_prefab_name"`
	SmallPortrait   string                  `json:"small_portrait"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioCharacterNameExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_name_kr := b.CreateString(fbsutils.Convert(t.NameKr, t.FlatBuffer.TableKey))
	__offset_nickname_kr := b.CreateString(fbsutils.Convert(t.NicknameKr, t.FlatBuffer.TableKey))
	__offset_name_jp := b.CreateString(fbsutils.Convert(t.NameJp, t.FlatBuffer.TableKey))
	__offset_nickname_jp := b.CreateString(fbsutils.Convert(t.NicknameJp, t.FlatBuffer.TableKey))
	__offset_spine_prefab_name := b.CreateString(fbsutils.Convert(t.SpinePrefabName, t.FlatBuffer.TableKey))
	__offset_small_portrait := b.CreateString(fbsutils.Convert(t.SmallPortrait, t.FlatBuffer.TableKey))
	ScenarioCharacterNameExcelStart(b)
	ScenarioCharacterNameExcelAddCharacterName(b, fbsutils.Convert(t.CharacterName, t.FlatBuffer.TableKey))
	ScenarioCharacterNameExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	ScenarioCharacterNameExcelAddNameKr(b, __offset_name_kr)
	ScenarioCharacterNameExcelAddNicknameKr(b, __offset_nickname_kr)
	ScenarioCharacterNameExcelAddNameJp(b, __offset_name_jp)
	ScenarioCharacterNameExcelAddNicknameJp(b, __offset_nickname_jp)
	ScenarioCharacterNameExcelAddShape(b, fbsutils.Convert(t.Shape, t.FlatBuffer.TableKey))
	ScenarioCharacterNameExcelAddSpinePrefabName(b, __offset_spine_prefab_name)
	ScenarioCharacterNameExcelAddSmallPortrait(b, __offset_small_portrait)
	return ScenarioCharacterNameExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioCharacterNameExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioCharacterNameExcelDto) UnmarshalMessage(e *ScenarioCharacterNameExcel) error {
	t.CharacterName = fbsutils.Convert(e.CharacterName(), t.FlatBuffer.TableKey)
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.NameKr = fbsutils.Convert(string(e.NameKr()), t.FlatBuffer.TableKey)
	t.NicknameKr = fbsutils.Convert(string(e.NicknameKr()), t.FlatBuffer.TableKey)
	t.NameJp = fbsutils.Convert(string(e.NameJp()), t.FlatBuffer.TableKey)
	t.NicknameJp = fbsutils.Convert(string(e.NicknameJp()), t.FlatBuffer.TableKey)
	t.Shape = ScenarioCharacterShapes(fbsutils.Convert(int32(e.Shape()), t.FlatBuffer.TableKey))
	t.SpinePrefabName = fbsutils.Convert(string(e.SpinePrefabName()), t.FlatBuffer.TableKey)
	t.SmallPortrait = fbsutils.Convert(string(e.SmallPortrait()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioCharacterNameExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioCharacterNameExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioCharacterNameExcelDto) FlatDataName() string {
	return "ScenarioCharacterNameExcel"
}
