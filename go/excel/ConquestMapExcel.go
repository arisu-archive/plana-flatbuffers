// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestMapExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestMapExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestMapExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestMapExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConquestMapExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestMapExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestMapExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConquestMapExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestMapExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestMapExcel) CameraSettingId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestMapExcel) MutateCameraSettingId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestMapExcel) ConquestMap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestMapExcel) ConquestMapBg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestMapExcel) DevName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestMapExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestMapExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ConquestMapExcel) MapDifficulty() StageDifficulty {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return StageDifficulty(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestMapExcel) MutateMapDifficulty(n StageDifficulty) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *ConquestMapExcel) MapGoalLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestMapExcel) StepEnterScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestMapExcel) MutateStepEnterScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ConquestMapExcel) StepGoalLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestMapExcel) StepIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestMapExcel) MutateStepIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *ConquestMapExcel) StepNameLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestMapExcel) StepOpenConditionParameter(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ConquestMapExcel) StepOpenConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestMapExcel) StepOpenConditionType(j int) ConquestConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ConquestConditionType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestMapExcel) StepOpenConditionTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestMapExcel) MutateStepOpenConditionType(j int, n ConquestConditionType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func ConquestMapExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func ConquestMapExcelAddCameraSettingId(builder *flatbuffers.Builder, cameraSettingId int64) {
	builder.PrependInt64Slot(0, cameraSettingId, 0)
}
func ConquestMapExcelAddConquestMap(builder *flatbuffers.Builder, conquestMap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(conquestMap), 0)
}
func ConquestMapExcelAddConquestMapBg(builder *flatbuffers.Builder, conquestMapBg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(conquestMapBg), 0)
}
func ConquestMapExcelAddDevName(builder *flatbuffers.Builder, devName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(devName), 0)
}
func ConquestMapExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(4, eventContentId, 0)
}
func ConquestMapExcelAddMapDifficulty(builder *flatbuffers.Builder, mapDifficulty StageDifficulty) {
	builder.PrependInt32Slot(5, int32(mapDifficulty), 0)
}
func ConquestMapExcelAddMapGoalLocalize(builder *flatbuffers.Builder, mapGoalLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(mapGoalLocalize), 0)
}
func ConquestMapExcelAddStepEnterScenarioGroupId(builder *flatbuffers.Builder, stepEnterScenarioGroupId int64) {
	builder.PrependInt64Slot(7, stepEnterScenarioGroupId, 0)
}
func ConquestMapExcelAddStepGoalLocalize(builder *flatbuffers.Builder, stepGoalLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(stepGoalLocalize), 0)
}
func ConquestMapExcelAddStepIndex(builder *flatbuffers.Builder, stepIndex int32) {
	builder.PrependInt32Slot(9, stepIndex, 0)
}
func ConquestMapExcelAddStepNameLocalize(builder *flatbuffers.Builder, stepNameLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(stepNameLocalize), 0)
}
func ConquestMapExcelAddStepOpenConditionParameter(builder *flatbuffers.Builder, stepOpenConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(stepOpenConditionParameter), 0)
}
func ConquestMapExcelStartStepOpenConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestMapExcelAddStepOpenConditionType(builder *flatbuffers.Builder, stepOpenConditionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(stepOpenConditionType), 0)
}
func ConquestMapExcelStartStepOpenConditionTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestMapExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
