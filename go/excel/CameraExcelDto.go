// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CameraExcelDto represents a FlatBuffers table
type CameraExcelDto struct {
	fbsutils.FlatBuffer
	UseRailPointCompensation  bool    `json:"use_rail_point_compensation"`
	IgnoreEnemies             bool    `json:"ignore_enemies"`
	BottomMargin              float32 `json:"bottom_margin"`
	LeftMargin                float32 `json:"left_margin"`
	MoveInstantlyRotationSave bool    `json:"move_instantly_rotation_save"`
	MoveInstantly             bool    `json:"move_instantly"`
	RotationY                 float32 `json:"rotation_y"`
	RotationX                 float32 `json:"rotation_x"`
	MaxDistance               float32 `json:"max_distance"`
	MinDistance               float32 `json:"min_distance"`
	UniqueId                  int64   `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CameraExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CameraExcelStart(b)
	CameraExcelAddUseRailPointCompensation(b, t.UseRailPointCompensation)
	CameraExcelAddIgnoreEnemies(b, t.IgnoreEnemies)
	CameraExcelAddBottomMargin(b, fbsutils.Convert(t.BottomMargin, t.FlatBuffer.TableKey))
	CameraExcelAddLeftMargin(b, fbsutils.Convert(t.LeftMargin, t.FlatBuffer.TableKey))
	CameraExcelAddMoveInstantlyRotationSave(b, t.MoveInstantlyRotationSave)
	CameraExcelAddMoveInstantly(b, t.MoveInstantly)
	CameraExcelAddRotationY(b, fbsutils.Convert(t.RotationY, t.FlatBuffer.TableKey))
	CameraExcelAddRotationX(b, fbsutils.Convert(t.RotationX, t.FlatBuffer.TableKey))
	CameraExcelAddMaxDistance(b, fbsutils.Convert(t.MaxDistance, t.FlatBuffer.TableKey))
	CameraExcelAddMinDistance(b, fbsutils.Convert(t.MinDistance, t.FlatBuffer.TableKey))
	CameraExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return CameraExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CameraExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CameraExcelDto) UnmarshalMessage(e *CameraExcel) error {
	t.UseRailPointCompensation = e.UseRailPointCompensation()
	t.IgnoreEnemies = e.IgnoreEnemies()
	t.BottomMargin = fbsutils.Convert(e.BottomMargin(), t.FlatBuffer.TableKey)
	t.LeftMargin = fbsutils.Convert(e.LeftMargin(), t.FlatBuffer.TableKey)
	t.MoveInstantlyRotationSave = e.MoveInstantlyRotationSave()
	t.MoveInstantly = e.MoveInstantly()
	t.RotationY = fbsutils.Convert(e.RotationY(), t.FlatBuffer.TableKey)
	t.RotationX = fbsutils.Convert(e.RotationX(), t.FlatBuffer.TableKey)
	t.MaxDistance = fbsutils.Convert(e.MaxDistance(), t.FlatBuffer.TableKey)
	t.MinDistance = fbsutils.Convert(e.MinDistance(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CameraExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCameraExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CameraExcelDto) FlatDataName() string {
	return "CameraExcel"
}
