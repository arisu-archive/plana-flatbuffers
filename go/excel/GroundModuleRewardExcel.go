// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GroundModuleRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGroundModuleRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *GroundModuleRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroundModuleRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGroundModuleRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *GroundModuleRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroundModuleRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GroundModuleRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroundModuleRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroundModuleRewardExcel) DropItemModelPrefabPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroundModuleRewardExcel) GroupId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GroundModuleRewardExcel) MutateGroupId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GroundModuleRewardExcel) IsDisplayed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GroundModuleRewardExcel) MutateIsDisplayed(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *GroundModuleRewardExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GroundModuleRewardExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *GroundModuleRewardExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GroundModuleRewardExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *GroundModuleRewardExcel) RewardParcelProbability() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GroundModuleRewardExcel) MutateRewardParcelProbability(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *GroundModuleRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GroundModuleRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func GroundModuleRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func GroundModuleRewardExcelAddDropItemModelPrefabPath(builder *flatbuffers.Builder, dropItemModelPrefabPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dropItemModelPrefabPath), 0)
}
func GroundModuleRewardExcelAddGroupId(builder *flatbuffers.Builder, groupId uint32) {
	builder.PrependUint32Slot(1, groupId, 0)
}
func GroundModuleRewardExcelAddIsDisplayed(builder *flatbuffers.Builder, isDisplayed bool) {
	builder.PrependBoolSlot(2, isDisplayed, false)
}
func GroundModuleRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(3, rewardParcelAmount, 0)
}
func GroundModuleRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(4, rewardParcelId, 0)
}
func GroundModuleRewardExcelAddRewardParcelProbability(builder *flatbuffers.Builder, rewardParcelProbability int64) {
	builder.PrependInt64Slot(5, rewardParcelProbability, 0)
}
func GroundModuleRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(6, int32(rewardParcelType), 0)
}
func GroundModuleRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
