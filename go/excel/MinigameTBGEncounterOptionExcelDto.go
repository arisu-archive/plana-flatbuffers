// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGEncounterOptionExcelDto represents a FlatBuffers table
type MinigameTBGEncounterOptionExcelDto struct {
	fbsutils.FlatBuffer
	RewardHide                          bool   `json:"reward_hide"`
	RunawayOrHigherDiceCount            int32  `json:"runaway_or_higher_dice_count"`
	OptionFailLessDiceCount             int32  `json:"option_fail_less_dice_count"`
	OptionFailLocalize                  string `json:"option_fail_localize"`
	OptionGreatSuccessOrHigherDiceCount int32  `json:"option_great_success_or_higher_dice_count"`
	OptionSuccessOrHigherDiceCount      int32  `json:"option_success_or_higher_dice_count"`
	OptionSuccessRewardGroupId          int64  `json:"option_success_reward_group_id"`
	OptionSuccessLocalize               string `json:"option_success_localize"`
	OptionTitleLocalize                 string `json:"option_title_localize"`
	SlotIndex                           int32  `json:"slot_index"`
	UniqueId                            int64  `json:"unique_id"`
	OptionGroupId                       int64  `json:"option_group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGEncounterOptionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameTBGEncounterOptionExcelStart(b)
	MinigameTBGEncounterOptionExcelAddRewardHide(b, t.RewardHide)
	MinigameTBGEncounterOptionExcelAddRunawayOrHigherDiceCount(b, fbsutils.Convert(t.RunawayOrHigherDiceCount, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddOptionFailLessDiceCount(b, fbsutils.Convert(t.OptionFailLessDiceCount, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddOptionFailLocalize(b, b.CreateString(fbsutils.Convert(t.OptionFailLocalize, t.FlatBuffer.TableKey)))
	MinigameTBGEncounterOptionExcelAddOptionGreatSuccessOrHigherDiceCount(b, fbsutils.Convert(t.OptionGreatSuccessOrHigherDiceCount, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddOptionSuccessOrHigherDiceCount(b, fbsutils.Convert(t.OptionSuccessOrHigherDiceCount, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddOptionSuccessRewardGroupId(b, fbsutils.Convert(t.OptionSuccessRewardGroupId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddOptionSuccessLocalize(b, b.CreateString(fbsutils.Convert(t.OptionSuccessLocalize, t.FlatBuffer.TableKey)))
	MinigameTBGEncounterOptionExcelAddOptionTitleLocalize(b, b.CreateString(fbsutils.Convert(t.OptionTitleLocalize, t.FlatBuffer.TableKey)))
	MinigameTBGEncounterOptionExcelAddSlotIndex(b, fbsutils.Convert(t.SlotIndex, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterOptionExcelAddOptionGroupId(b, fbsutils.Convert(t.OptionGroupId, t.FlatBuffer.TableKey))
	return MinigameTBGEncounterOptionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGEncounterOptionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGEncounterOptionExcelDto) UnmarshalMessage(e *MinigameTBGEncounterOptionExcel) error {
	t.RewardHide = e.RewardHide()
	t.RunawayOrHigherDiceCount = fbsutils.Convert(e.RunawayOrHigherDiceCount(), t.FlatBuffer.TableKey)
	t.OptionFailLessDiceCount = fbsutils.Convert(e.OptionFailLessDiceCount(), t.FlatBuffer.TableKey)
	t.OptionFailLocalize = fbsutils.Convert(string(e.OptionFailLocalize()), t.FlatBuffer.TableKey)
	t.OptionGreatSuccessOrHigherDiceCount = fbsutils.Convert(e.OptionGreatSuccessOrHigherDiceCount(), t.FlatBuffer.TableKey)
	t.OptionSuccessOrHigherDiceCount = fbsutils.Convert(e.OptionSuccessOrHigherDiceCount(), t.FlatBuffer.TableKey)
	t.OptionSuccessRewardGroupId = fbsutils.Convert(e.OptionSuccessRewardGroupId(), t.FlatBuffer.TableKey)
	t.OptionSuccessLocalize = fbsutils.Convert(string(e.OptionSuccessLocalize()), t.FlatBuffer.TableKey)
	t.OptionTitleLocalize = fbsutils.Convert(string(e.OptionTitleLocalize()), t.FlatBuffer.TableKey)
	t.SlotIndex = fbsutils.Convert(e.SlotIndex(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.OptionGroupId = fbsutils.Convert(e.OptionGroupId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGEncounterOptionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGEncounterOptionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGEncounterOptionExcelDto) FlatDataName() string {
	return "MinigameTBGEncounterOptionExcel"
}
