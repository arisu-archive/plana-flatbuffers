// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ObstacleFireLineCheckExcelDto represents a FlatBuffers table
type ObstacleFireLineCheckExcelDto struct {
	fbsutils.FlatBuffer
	MyObstacleFireLineCheck    bool `json:"my_obstacle_fire_line_check"`
	AllyObstacleFireLineCheck  bool `json:"ally_obstacle_fire_line_check"`
	EnemyObstacleFireLineCheck bool `json:"enemy_obstacle_fire_line_check"`
	EmptyObstacleFireLineCheck bool `json:"empty_obstacle_fire_line_check"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ObstacleFireLineCheckExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ObstacleFireLineCheckExcelStart(b)
	ObstacleFireLineCheckExcelAddMyObstacleFireLineCheck(b, t.MyObstacleFireLineCheck)
	ObstacleFireLineCheckExcelAddAllyObstacleFireLineCheck(b, t.AllyObstacleFireLineCheck)
	ObstacleFireLineCheckExcelAddEnemyObstacleFireLineCheck(b, t.EnemyObstacleFireLineCheck)
	ObstacleFireLineCheckExcelAddEmptyObstacleFireLineCheck(b, t.EmptyObstacleFireLineCheck)
	return ObstacleFireLineCheckExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ObstacleFireLineCheckExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ObstacleFireLineCheckExcelDto) UnmarshalMessage(e *ObstacleFireLineCheckExcel) error {
	t.MyObstacleFireLineCheck = e.MyObstacleFireLineCheck()
	t.AllyObstacleFireLineCheck = e.AllyObstacleFireLineCheck()
	t.EnemyObstacleFireLineCheck = e.EnemyObstacleFireLineCheck()
	t.EmptyObstacleFireLineCheck = e.EmptyObstacleFireLineCheck()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ObstacleFireLineCheckExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsObstacleFireLineCheckExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ObstacleFireLineCheckExcelDto) FlatDataName() string {
	return "ObstacleFireLineCheckExcel"
}
