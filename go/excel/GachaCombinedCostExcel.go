// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GachaCombinedCostExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGachaCombinedCostExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaCombinedCostExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GachaCombinedCostExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishGachaCombinedCostExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGachaCombinedCostExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaCombinedCostExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GachaCombinedCostExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGachaCombinedCostExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GachaCombinedCostExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GachaCombinedCostExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GachaCombinedCostExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GachaCombinedCostExcel) Priority() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutatePriority(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GachaCombinedCostExcel) ConsumeGachaTicketType() GachaTicketType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return GachaTicketType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutateConsumeGachaTicketType(n GachaTicketType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *GachaCombinedCostExcel) ConsumeGachaTicketTypeAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutateConsumeGachaTicketTypeAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *GachaCombinedCostExcel) ConsumeParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutateConsumeParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *GachaCombinedCostExcel) ConsumeParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutateConsumeParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *GachaCombinedCostExcel) ConsumeParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GachaCombinedCostExcel) MutateConsumeParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func GachaCombinedCostExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func GachaCombinedCostExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(0, groupId, 0)
}
func GachaCombinedCostExcelAddPriority(builder *flatbuffers.Builder, priority int64) {
	builder.PrependInt64Slot(1, priority, 0)
}
func GachaCombinedCostExcelAddConsumeGachaTicketType(builder *flatbuffers.Builder, consumeGachaTicketType GachaTicketType) {
	builder.PrependInt32Slot(2, int32(consumeGachaTicketType), 0)
}
func GachaCombinedCostExcelAddConsumeGachaTicketTypeAmount(builder *flatbuffers.Builder, consumeGachaTicketTypeAmount int64) {
	builder.PrependInt64Slot(3, consumeGachaTicketTypeAmount, 0)
}
func GachaCombinedCostExcelAddConsumeParcelType(builder *flatbuffers.Builder, consumeParcelType ParcelType) {
	builder.PrependInt32Slot(4, int32(consumeParcelType), 0)
}
func GachaCombinedCostExcelAddConsumeParcelId(builder *flatbuffers.Builder, consumeParcelId int64) {
	builder.PrependInt64Slot(5, consumeParcelId, 0)
}
func GachaCombinedCostExcelAddConsumeParcelAmount(builder *flatbuffers.Builder, consumeParcelAmount int64) {
	builder.PrependInt64Slot(6, consumeParcelAmount, 0)
}
func GachaCombinedCostExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
