// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BattlePassExpLimitExcelDto represents a FlatBuffers table
type BattlePassExpLimitExcelDto struct {
	fbsutils.FlatBuffer
	BattlePassId   int64  `json:"battle_pass_id"`
	LimitStartTime string `json:"limit_start_time"`
	LimitEndTime   string `json:"limit_end_time"`
	ExpLimitAmount int64  `json:"exp_limit_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BattlePassExpLimitExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_limit_start_time := b.CreateString(fbsutils.Convert(t.LimitStartTime, t.FlatBuffer.TableKey))
	__offset_limit_end_time := b.CreateString(fbsutils.Convert(t.LimitEndTime, t.FlatBuffer.TableKey))
	BattlePassExpLimitExcelStart(b)
	BattlePassExpLimitExcelAddBattlePassId(b, fbsutils.Convert(t.BattlePassId, t.FlatBuffer.TableKey))
	BattlePassExpLimitExcelAddLimitStartTime(b, __offset_limit_start_time)
	BattlePassExpLimitExcelAddLimitEndTime(b, __offset_limit_end_time)
	BattlePassExpLimitExcelAddExpLimitAmount(b, fbsutils.Convert(t.ExpLimitAmount, t.FlatBuffer.TableKey))
	return BattlePassExpLimitExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BattlePassExpLimitExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassExpLimitExcelDto) UnmarshalMessage(e *BattlePassExpLimitExcel) error {
	t.BattlePassId = fbsutils.Convert(e.BattlePassId(), t.FlatBuffer.TableKey)
	t.LimitStartTime = fbsutils.Convert(string(e.LimitStartTime()), t.FlatBuffer.TableKey)
	t.LimitEndTime = fbsutils.Convert(string(e.LimitEndTime()), t.FlatBuffer.TableKey)
	t.ExpLimitAmount = fbsutils.Convert(e.ExpLimitAmount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassExpLimitExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBattlePassExpLimitExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BattlePassExpLimitExcelDto) FlatDataName() string {
	return "BattlePassExpLimitExcel"
}
