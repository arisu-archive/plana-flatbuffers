// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentFortuneGachaExcelDto represents a FlatBuffers table
type EventContentFortuneGachaExcelDto struct {
	fbsutils.FlatBuffer
	FortuneGachaGroupId int32  `json:"fortune_gacha_group_id"`
	IconPath            string `json:"icon_path"`
	LocalizeEtcId       uint32 `json:"localize_etc_id"`
	NameImagePath       string `json:"name_image_path"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentFortuneGachaExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentFortuneGachaExcelStart(b)
	EventContentFortuneGachaExcelAddFortuneGachaGroupId(b, fbsutils.Convert(t.FortuneGachaGroupId, t.FlatBuffer.TableKey))
	EventContentFortuneGachaExcelAddIconPath(b, b.CreateString(fbsutils.Convert(t.IconPath, t.FlatBuffer.TableKey)))
	EventContentFortuneGachaExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	EventContentFortuneGachaExcelAddNameImagePath(b, b.CreateString(fbsutils.Convert(t.NameImagePath, t.FlatBuffer.TableKey)))
	return EventContentFortuneGachaExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentFortuneGachaExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentFortuneGachaExcelDto) UnmarshalMessage(e *EventContentFortuneGachaExcel) error {
	t.FortuneGachaGroupId = fbsutils.Convert(e.FortuneGachaGroupId(), t.FlatBuffer.TableKey)
	t.IconPath = fbsutils.Convert(string(e.IconPath()), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.NameImagePath = fbsutils.Convert(string(e.NameImagePath()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentFortuneGachaExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentFortuneGachaExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentFortuneGachaExcelDto) FlatDataName() string {
	return "EventContentFortuneGachaExcel"
}
