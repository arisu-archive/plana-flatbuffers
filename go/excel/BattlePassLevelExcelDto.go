// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BattlePassLevelExcelDto represents a FlatBuffers table
type BattlePassLevelExcelDto struct {
	fbsutils.FlatBuffer
	IsPickUpReward bool  `json:"is_pick_up_reward"`
	Level          int64 `json:"level"`
	BattlePassId   int64 `json:"battle_pass_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BattlePassLevelExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	BattlePassLevelExcelStart(b)
	BattlePassLevelExcelAddIsPickUpReward(b, t.IsPickUpReward)
	BattlePassLevelExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	BattlePassLevelExcelAddBattlePassId(b, fbsutils.Convert(t.BattlePassId, t.FlatBuffer.TableKey))
	return BattlePassLevelExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BattlePassLevelExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassLevelExcelDto) UnmarshalMessage(e *BattlePassLevelExcel) error {
	t.IsPickUpReward = e.IsPickUpReward()
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.BattlePassId = fbsutils.Convert(e.BattlePassId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassLevelExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBattlePassLevelExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BattlePassLevelExcelDto) FlatDataName() string {
	return "BattlePassLevelExcel"
}
