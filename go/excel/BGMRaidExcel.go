// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BGMRaidExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBGMRaidExcel(buf []byte, offset flatbuffers.UOffsetT) *BGMRaidExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BGMRaidExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBGMRaidExcel(buf []byte, offset flatbuffers.UOffsetT) *BGMRaidExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BGMRaidExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BGMRaidExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BGMRaidExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BGMRaidExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMRaidExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BGMRaidExcel) PhaseIndex() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMRaidExcel) MutatePhaseIndex(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *BGMRaidExcel) StageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMRaidExcel) MutateStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func BGMRaidExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BGMRaidExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(0, bgmId, 0)
}
func BGMRaidExcelAddPhaseIndex(builder *flatbuffers.Builder, phaseIndex int64) {
	builder.PrependInt64Slot(1, phaseIndex, 0)
}
func BGMRaidExcelAddStageId(builder *flatbuffers.Builder, stageId int64) {
	builder.PrependInt64Slot(2, stageId, 0)
}
func BGMRaidExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
