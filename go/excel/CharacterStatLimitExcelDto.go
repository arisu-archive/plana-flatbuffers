// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterStatLimitExcelDto represents a FlatBuffers table
type CharacterStatLimitExcelDto struct {
	fbsutils.FlatBuffer
	Id                int64            `json:"id"`
	TacticEntityType  TacticEntityType `json:"tactic_entity_type"`
	StatType          StatType         `json:"stat_type"`
	StatMinValue      int64            `json:"stat_min_value"`
	StatMaxValue      int64            `json:"stat_max_value"`
	StatRatioMinValue int64            `json:"stat_ratio_min_value"`
	StatRatioMaxValue int64            `json:"stat_ratio_max_value"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterStatLimitExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterStatLimitExcelStart(b)
	CharacterStatLimitExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterStatLimitExcelAddTacticEntityType(b, fbsutils.Convert(t.TacticEntityType, t.FlatBuffer.TableKey))
	CharacterStatLimitExcelAddStatType(b, fbsutils.Convert(t.StatType, t.FlatBuffer.TableKey))
	CharacterStatLimitExcelAddStatMinValue(b, fbsutils.Convert(t.StatMinValue, t.FlatBuffer.TableKey))
	CharacterStatLimitExcelAddStatMaxValue(b, fbsutils.Convert(t.StatMaxValue, t.FlatBuffer.TableKey))
	CharacterStatLimitExcelAddStatRatioMinValue(b, fbsutils.Convert(t.StatRatioMinValue, t.FlatBuffer.TableKey))
	CharacterStatLimitExcelAddStatRatioMaxValue(b, fbsutils.Convert(t.StatRatioMaxValue, t.FlatBuffer.TableKey))
	return CharacterStatLimitExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterStatLimitExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatLimitExcelDto) UnmarshalMessage(e *CharacterStatLimitExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.TacticEntityType = TacticEntityType(fbsutils.Convert(int32(e.TacticEntityType()), t.FlatBuffer.TableKey))
	t.StatType = StatType(fbsutils.Convert(int32(e.StatType()), t.FlatBuffer.TableKey))
	t.StatMinValue = fbsutils.Convert(e.StatMinValue(), t.FlatBuffer.TableKey)
	t.StatMaxValue = fbsutils.Convert(e.StatMaxValue(), t.FlatBuffer.TableKey)
	t.StatRatioMinValue = fbsutils.Convert(e.StatRatioMinValue(), t.FlatBuffer.TableKey)
	t.StatRatioMaxValue = fbsutils.Convert(e.StatRatioMaxValue(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatLimitExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterStatLimitExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterStatLimitExcelDto) FlatDataName() string {
	return "CharacterStatLimitExcel"
}
