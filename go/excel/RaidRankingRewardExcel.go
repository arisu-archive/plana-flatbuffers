// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RaidRankingRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsRaidRankingRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *RaidRankingRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RaidRankingRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishRaidRankingRewardExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRaidRankingRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *RaidRankingRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RaidRankingRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRaidRankingRewardExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RaidRankingRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RaidRankingRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RaidRankingRewardExcel) RankingRewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateRankingRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RaidRankingRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *RaidRankingRewardExcel) RankStart() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateRankStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *RaidRankingRewardExcel) RankEnd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateRankEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *RaidRankingRewardExcel) PercentRankStart() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutatePercentRankStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *RaidRankingRewardExcel) PercentRankEnd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutatePercentRankEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *RaidRankingRewardExcel) Tier() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateTier(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *RaidRankingRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *RaidRankingRewardExcel) RewardParcelUniqueId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) RewardParcelUniqueIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateRewardParcelUniqueId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *RaidRankingRewardExcel) RewardParcelAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) RewardParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RaidRankingRewardExcel) MutateRewardParcelAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func RaidRankingRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func RaidRankingRewardExcelAddRankingRewardGroupId(builder *flatbuffers.Builder, rankingRewardGroupId int64) {
	builder.PrependInt64Slot(0, rankingRewardGroupId, 0)
}
func RaidRankingRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func RaidRankingRewardExcelAddRankStart(builder *flatbuffers.Builder, rankStart int64) {
	builder.PrependInt64Slot(2, rankStart, 0)
}
func RaidRankingRewardExcelAddRankEnd(builder *flatbuffers.Builder, rankEnd int64) {
	builder.PrependInt64Slot(3, rankEnd, 0)
}
func RaidRankingRewardExcelAddPercentRankStart(builder *flatbuffers.Builder, percentRankStart int64) {
	builder.PrependInt64Slot(4, percentRankStart, 0)
}
func RaidRankingRewardExcelAddPercentRankEnd(builder *flatbuffers.Builder, percentRankEnd int64) {
	builder.PrependInt64Slot(5, percentRankEnd, 0)
}
func RaidRankingRewardExcelAddTier(builder *flatbuffers.Builder, tier int32) {
	builder.PrependInt32Slot(6, tier, 0)
}
func RaidRankingRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func RaidRankingRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RaidRankingRewardExcelAddRewardParcelUniqueId(builder *flatbuffers.Builder, rewardParcelUniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(rewardParcelUniqueId), 0)
}
func RaidRankingRewardExcelStartRewardParcelUniqueIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func RaidRankingRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(rewardParcelAmount), 0)
}
func RaidRankingRewardExcelStartRewardParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func RaidRankingRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
