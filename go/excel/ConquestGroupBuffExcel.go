// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestGroupBuffExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestGroupBuffExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestGroupBuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestGroupBuffExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishConquestGroupBuffExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConquestGroupBuffExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestGroupBuffExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestGroupBuffExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConquestGroupBuffExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConquestGroupBuffExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestGroupBuffExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestGroupBuffExcel) ConquestBuffId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestGroupBuffExcel) MutateConquestBuffId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestGroupBuffExcel) School(j int) School {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return School(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestGroupBuffExcel) SchoolLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestGroupBuffExcel) MutateSchool(j int, n School) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConquestGroupBuffExcel) RecommandLocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestGroupBuffExcel) MutateRecommandLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ConquestGroupBuffExcel) SkillGroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ConquestGroupBuffExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ConquestGroupBuffExcelAddConquestBuffId(builder *flatbuffers.Builder, conquestBuffId int64) {
	builder.PrependInt64Slot(0, conquestBuffId, 0)
}
func ConquestGroupBuffExcelAddSchool(builder *flatbuffers.Builder, school flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(school), 0)
}
func ConquestGroupBuffExcelStartSchoolVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestGroupBuffExcelAddRecommandLocalizeEtcId(builder *flatbuffers.Builder, recommandLocalizeEtcId uint32) {
	builder.PrependUint32Slot(2, recommandLocalizeEtcId, 0)
}
func ConquestGroupBuffExcelAddSkillGroupId(builder *flatbuffers.Builder, skillGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(skillGroupId), 0)
}
func ConquestGroupBuffExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
