// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGInfoExcelDto represents a FlatBuffers table
type MinigameCCGInfoExcelDto struct {
	fbsutils.FlatBuffer
	CardBackPath       string     `json:"card_back_path"`
	CcgId              int64      `json:"ccg_id"`
	CostParcelAmount   int32      `json:"cost_parcel_amount"`
	CostParcelId       int64      `json:"cost_parcel_id"`
	CostParcelType     ParcelType `json:"cost_parcel_type"`
	EventContentId     int64      `json:"event_content_id"`
	PerkCostParcelId   int64      `json:"perk_cost_parcel_id"`
	PerkCostParcelType ParcelType `json:"perk_cost_parcel_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGInfoExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameCCGInfoExcelStart(b)
	MinigameCCGInfoExcelAddCardBackPath(b, b.CreateString(fbsutils.Convert(t.CardBackPath, t.FlatBuffer.TableKey)))
	MinigameCCGInfoExcelAddCcgId(b, fbsutils.Convert(t.CcgId, t.FlatBuffer.TableKey))
	MinigameCCGInfoExcelAddCostParcelAmount(b, fbsutils.Convert(t.CostParcelAmount, t.FlatBuffer.TableKey))
	MinigameCCGInfoExcelAddCostParcelId(b, fbsutils.Convert(t.CostParcelId, t.FlatBuffer.TableKey))
	MinigameCCGInfoExcelAddCostParcelType(b, fbsutils.Convert(t.CostParcelType, t.FlatBuffer.TableKey))
	MinigameCCGInfoExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MinigameCCGInfoExcelAddPerkCostParcelId(b, fbsutils.Convert(t.PerkCostParcelId, t.FlatBuffer.TableKey))
	MinigameCCGInfoExcelAddPerkCostParcelType(b, fbsutils.Convert(t.PerkCostParcelType, t.FlatBuffer.TableKey))
	return MinigameCCGInfoExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGInfoExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGInfoExcelDto) UnmarshalMessage(e *MinigameCCGInfoExcel) error {
	t.CardBackPath = fbsutils.Convert(string(e.CardBackPath()), t.FlatBuffer.TableKey)
	t.CcgId = fbsutils.Convert(e.CcgId(), t.FlatBuffer.TableKey)
	t.CostParcelAmount = fbsutils.Convert(e.CostParcelAmount(), t.FlatBuffer.TableKey)
	t.CostParcelId = fbsutils.Convert(e.CostParcelId(), t.FlatBuffer.TableKey)
	t.CostParcelType = ParcelType(fbsutils.Convert(int32(e.CostParcelType()), t.FlatBuffer.TableKey))
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.PerkCostParcelId = fbsutils.Convert(e.PerkCostParcelId(), t.FlatBuffer.TableKey)
	t.PerkCostParcelType = ParcelType(fbsutils.Convert(int32(e.PerkCostParcelType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGInfoExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGInfoExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGInfoExcelDto) FlatDataName() string {
	return "MinigameCCGInfoExcel"
}
