// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameAudioAnimatorExcelDto represents a FlatBuffers table
type MiniGameAudioAnimatorExcelDto struct {
	fbsutils.FlatBuffer
	AudioClipPath        []string `json:"audio_clip_path"`
	AudioPriority        int32    `json:"audio_priority"`
	ControllerNameHash   uint32   `json:"controller_name_hash"`
	Delay                float32  `json:"delay"`
	IgnoreInterruptDelay bool     `json:"ignore_interrupt_delay"`
	IgnoreInterruptPlay  bool     `json:"ignore_interrupt_play"`
	StateName            string   `json:"state_name"`
	StateNameHash        uint32   `json:"state_name_hash"`
	VoiceHash            []uint32 `json:"voice_hash"`
	VoiceNamePrefix      string   `json:"voice_name_prefix"`
	Volume               float32  `json:"volume"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameAudioAnimatorExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameAudioAnimatorExcelStart(b)
	MiniGameAudioAnimatorExcelStartAudioClipPathVector(b, len(t.AudioClipPath))
	for i := range len(t.AudioClipPath) {
		b.PrependUOffsetT(b.CreateString(t.AudioClipPath[len(t.AudioClipPath)-i-1]))
	}
	MiniGameAudioAnimatorExcelAddAudioClipPath(b, b.EndVector(len(t.AudioClipPath)))
	MiniGameAudioAnimatorExcelAddAudioPriority(b, fbsutils.Convert(t.AudioPriority, t.FlatBuffer.TableKey))
	MiniGameAudioAnimatorExcelAddControllerNameHash(b, fbsutils.Convert(t.ControllerNameHash, t.FlatBuffer.TableKey))
	MiniGameAudioAnimatorExcelAddDelay(b, fbsutils.Convert(t.Delay, t.FlatBuffer.TableKey))
	MiniGameAudioAnimatorExcelAddIgnoreInterruptDelay(b, t.IgnoreInterruptDelay)
	MiniGameAudioAnimatorExcelAddIgnoreInterruptPlay(b, t.IgnoreInterruptPlay)
	MiniGameAudioAnimatorExcelAddStateName(b, b.CreateString(fbsutils.Convert(t.StateName, t.FlatBuffer.TableKey)))
	MiniGameAudioAnimatorExcelAddStateNameHash(b, fbsutils.Convert(t.StateNameHash, t.FlatBuffer.TableKey))
	MiniGameAudioAnimatorExcelStartVoiceHashVector(b, len(t.VoiceHash))
	for i := range len(t.VoiceHash) {
		b.PrependUint32(fbsutils.Convert(t.VoiceHash[len(t.VoiceHash)-i-1], t.FlatBuffer.TableKey))
	}
	MiniGameAudioAnimatorExcelAddVoiceHash(b, b.EndVector(len(t.VoiceHash)))
	MiniGameAudioAnimatorExcelAddVoiceNamePrefix(b, b.CreateString(fbsutils.Convert(t.VoiceNamePrefix, t.FlatBuffer.TableKey)))
	MiniGameAudioAnimatorExcelAddVolume(b, fbsutils.Convert(t.Volume, t.FlatBuffer.TableKey))
	return MiniGameAudioAnimatorExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameAudioAnimatorExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameAudioAnimatorExcelDto) UnmarshalMessage(e *MiniGameAudioAnimatorExcel) error {
	t.AudioClipPath = make([]string, e.AudioClipPathLength())
	for i := range e.AudioClipPathLength() {
		t.AudioClipPath[i] = fbsutils.Convert(string(e.AudioClipPath(i)), t.FlatBuffer.TableKey)
	}
	t.AudioPriority = fbsutils.Convert(e.AudioPriority(), t.FlatBuffer.TableKey)
	t.ControllerNameHash = fbsutils.Convert(e.ControllerNameHash(), t.FlatBuffer.TableKey)
	t.Delay = fbsutils.Convert(e.Delay(), t.FlatBuffer.TableKey)
	t.IgnoreInterruptDelay = e.IgnoreInterruptDelay()
	t.IgnoreInterruptPlay = e.IgnoreInterruptPlay()
	t.StateName = fbsutils.Convert(string(e.StateName()), t.FlatBuffer.TableKey)
	t.StateNameHash = fbsutils.Convert(e.StateNameHash(), t.FlatBuffer.TableKey)
	t.VoiceHash = make([]uint32, e.VoiceHashLength())
	for i := range e.VoiceHashLength() {
		t.VoiceHash[i] = fbsutils.Convert(e.VoiceHash(i), t.FlatBuffer.TableKey)
	}
	t.VoiceNamePrefix = fbsutils.Convert(string(e.VoiceNamePrefix()), t.FlatBuffer.TableKey)
	t.Volume = fbsutils.Convert(e.Volume(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameAudioAnimatorExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameAudioAnimatorExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameAudioAnimatorExcelDto) FlatDataName() string {
	return "MiniGameAudioAnimatorExcel"
}
