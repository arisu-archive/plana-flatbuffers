// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ClanAssistSlotExcelDto represents a FlatBuffers table
type ClanAssistSlotExcelDto struct {
	fbsutils.FlatBuffer
	SlotId                        int64       `json:"slot_id"`
	EchelonType                   EchelonType `json:"echelon_type"`
	SlotNumber                    int64       `json:"slot_number"`
	AssistTermRewardPeriodFromSec int64       `json:"assist_term_reward_period_from_sec"`
	AssistRewardLimit             int64       `json:"assist_reward_limit"`
	AssistRentRewardDailyMaxCount int64       `json:"assist_rent_reward_daily_max_count"`
	AssistRentalFeeAmount         int64       `json:"assist_rental_fee_amount"`
	AssistRentalFeeAmountStranger int64       `json:"assist_rental_fee_amount_stranger"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ClanAssistSlotExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ClanAssistSlotExcelStart(b)
	ClanAssistSlotExcelAddSlotId(b, fbsutils.Convert(t.SlotId, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddEchelonType(b, fbsutils.Convert(t.EchelonType, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddSlotNumber(b, fbsutils.Convert(t.SlotNumber, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddAssistTermRewardPeriodFromSec(b, fbsutils.Convert(t.AssistTermRewardPeriodFromSec, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddAssistRewardLimit(b, fbsutils.Convert(t.AssistRewardLimit, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddAssistRentRewardDailyMaxCount(b, fbsutils.Convert(t.AssistRentRewardDailyMaxCount, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddAssistRentalFeeAmount(b, fbsutils.Convert(t.AssistRentalFeeAmount, t.FlatBuffer.TableKey))
	ClanAssistSlotExcelAddAssistRentalFeeAmountStranger(b, fbsutils.Convert(t.AssistRentalFeeAmountStranger, t.FlatBuffer.TableKey))
	return ClanAssistSlotExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ClanAssistSlotExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishClanAssistSlotExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ClanAssistSlotExcelDto) UnmarshalMessage(e *ClanAssistSlotExcel) error {
	t.SlotId = fbsutils.Convert(e.SlotId(), t.FlatBuffer.TableKey)
	t.EchelonType = EchelonType(fbsutils.Convert(int32(e.EchelonType()), t.FlatBuffer.TableKey))
	t.SlotNumber = fbsutils.Convert(e.SlotNumber(), t.FlatBuffer.TableKey)
	t.AssistTermRewardPeriodFromSec = fbsutils.Convert(e.AssistTermRewardPeriodFromSec(), t.FlatBuffer.TableKey)
	t.AssistRewardLimit = fbsutils.Convert(e.AssistRewardLimit(), t.FlatBuffer.TableKey)
	t.AssistRentRewardDailyMaxCount = fbsutils.Convert(e.AssistRentRewardDailyMaxCount(), t.FlatBuffer.TableKey)
	t.AssistRentalFeeAmount = fbsutils.Convert(e.AssistRentalFeeAmount(), t.FlatBuffer.TableKey)
	t.AssistRentalFeeAmountStranger = fbsutils.Convert(e.AssistRentalFeeAmountStranger(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ClanAssistSlotExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsClanAssistSlotExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ClanAssistSlotExcelDto) FlatDataName() string {
	return "ClanAssistSlotExcel"
}
