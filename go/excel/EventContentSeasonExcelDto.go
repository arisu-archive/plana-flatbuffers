// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentSeasonExcelDto represents a FlatBuffers table
type EventContentSeasonExcelDto struct {
	fbsutils.FlatBuffer
	ScenarioContentCollectionGroupId   int64                   `json:"scenario_content_collection_group_id"`
	MiniEventShortCutScenarioModeId    int64                   `json:"mini_event_short_cut_scenario_mode_id"`
	RewardTagPermanent                 RewardTag               `json:"reward_tag_permanent"`
	EventContentStageRewardIdPermanent int64                   `json:"event_content_stage_reward_id_permanent"`
	EventContentReleaseType            EventContentReleaseType `json:"event_content_release_type"`
	EventAssist                        bool                    `json:"event_assist"`
	CardBgImagePath                    string                  `json:"card_bg_image_path"`
	MinigameMissionBgImagePath         string                  `json:"minigame_mission_bg_image_path"`
	MinigameMissionBgPrefabName        string                  `json:"minigame_mission_bg_prefab_name"`
	MinigameVictoryPrefabName          string                  `json:"minigame_victory_prefab_name"`
	MinigameLobbyPrefabName            string                  `json:"minigame_lobby_prefab_name"`
	ShiftMainBgImagePath               string                  `json:"shift_main_bg_image_path"`
	ShiftTriggerStageId                int64                   `json:"shift_trigger_stage_id"`
	MainBgImagePath                    string                  `json:"main_bg_image_path"`
	MainBannerImagePath                string                  `json:"main_banner_image_path"`
	BeforehandScenarioGroupId          []int64                 `json:"beforehand_scenario_group_id"`
	MinigamePrologScenarioGroupId      int64                   `json:"minigame_prolog_scenario_group_id"`
	BeforehandBgImagePath              string                  `json:"beforehand_bg_image_path"`
	SubIconParcelPath                  string                  `json:"sub_icon_parcel_path"`
	MainIconParcelPath                 string                  `json:"main_icon_parcel_path"`
	ExtensionTime                      string                  `json:"extension_time"`
	EventContentCloseTime              string                  `json:"event_content_close_time"`
	EventContentCloseNoteTime          string                  `json:"event_content_close_note_time"`
	EventContentOpenTime               string                  `json:"event_content_open_time"`
	BeforehandExposedTime              string                  `json:"beforehand_exposed_time"`
	EventChangeOpenCondition           int64                   `json:"event_change_open_condition"`
	MainEventId                        int64                   `json:"main_event_id"`
	EventItemId                        int64                   `json:"event_item_id"`
	SubEvent                           bool                    `json:"sub_event"`
	SubEventType                       SubEventType            `json:"sub_event_type"`
	IconOrder                          int32                   `json:"icon_order"`
	EventDisplay                       bool                    `json:"event_display"`
	OpenConditionContent               OpenConditionContent    `json:"open_condition_content"`
	EventContentType                   EventContentType        `json:"event_content_type"`
	Name                               string                  `json:"name"`
	IsReturn                           bool                    `json:"is_return"`
	OriginalEventContentId             int64                   `json:"original_event_content_id"`
	EventContentId                     int64                   `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentSeasonExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentSeasonExcelStart(b)
	EventContentSeasonExcelAddScenarioContentCollectionGroupId(b, fbsutils.Convert(t.ScenarioContentCollectionGroupId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddMiniEventShortCutScenarioModeId(b, fbsutils.Convert(t.MiniEventShortCutScenarioModeId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddRewardTagPermanent(b, fbsutils.Convert(t.RewardTagPermanent, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventContentStageRewardIdPermanent(b, fbsutils.Convert(t.EventContentStageRewardIdPermanent, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventContentReleaseType(b, fbsutils.Convert(t.EventContentReleaseType, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventAssist(b, t.EventAssist)
	EventContentSeasonExcelAddCardBgImagePath(b, b.CreateString(fbsutils.Convert(t.CardBgImagePath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddMinigameMissionBgImagePath(b, b.CreateString(fbsutils.Convert(t.MinigameMissionBgImagePath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddMinigameMissionBgPrefabName(b, b.CreateString(fbsutils.Convert(t.MinigameMissionBgPrefabName, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddMinigameVictoryPrefabName(b, b.CreateString(fbsutils.Convert(t.MinigameVictoryPrefabName, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddMinigameLobbyPrefabName(b, b.CreateString(fbsutils.Convert(t.MinigameLobbyPrefabName, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddShiftMainBgImagePath(b, b.CreateString(fbsutils.Convert(t.ShiftMainBgImagePath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddShiftTriggerStageId(b, fbsutils.Convert(t.ShiftTriggerStageId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddMainBgImagePath(b, b.CreateString(fbsutils.Convert(t.MainBgImagePath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddMainBannerImagePath(b, b.CreateString(fbsutils.Convert(t.MainBannerImagePath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelStartBeforehandScenarioGroupIdVector(b, len(t.BeforehandScenarioGroupId))
	for i := range len(t.BeforehandScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.BeforehandScenarioGroupId[len(t.BeforehandScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentSeasonExcelAddBeforehandScenarioGroupId(b, b.EndVector(len(t.BeforehandScenarioGroupId)))
	EventContentSeasonExcelAddMinigamePrologScenarioGroupId(b, fbsutils.Convert(t.MinigamePrologScenarioGroupId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddBeforehandBgImagePath(b, b.CreateString(fbsutils.Convert(t.BeforehandBgImagePath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddSubIconParcelPath(b, b.CreateString(fbsutils.Convert(t.SubIconParcelPath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddMainIconParcelPath(b, b.CreateString(fbsutils.Convert(t.MainIconParcelPath, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddExtensionTime(b, b.CreateString(fbsutils.Convert(t.ExtensionTime, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddEventContentCloseTime(b, b.CreateString(fbsutils.Convert(t.EventContentCloseTime, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddEventContentCloseNoteTime(b, b.CreateString(fbsutils.Convert(t.EventContentCloseNoteTime, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddEventContentOpenTime(b, b.CreateString(fbsutils.Convert(t.EventContentOpenTime, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddBeforehandExposedTime(b, b.CreateString(fbsutils.Convert(t.BeforehandExposedTime, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddEventChangeOpenCondition(b, fbsutils.Convert(t.EventChangeOpenCondition, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddMainEventId(b, fbsutils.Convert(t.MainEventId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventItemId(b, fbsutils.Convert(t.EventItemId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddSubEvent(b, t.SubEvent)
	EventContentSeasonExcelAddSubEventType(b, fbsutils.Convert(t.SubEventType, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddIconOrder(b, fbsutils.Convert(t.IconOrder, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventDisplay(b, t.EventDisplay)
	EventContentSeasonExcelAddOpenConditionContent(b, fbsutils.Convert(t.OpenConditionContent, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventContentType(b, fbsutils.Convert(t.EventContentType, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	EventContentSeasonExcelAddIsReturn(b, t.IsReturn)
	EventContentSeasonExcelAddOriginalEventContentId(b, fbsutils.Convert(t.OriginalEventContentId, t.FlatBuffer.TableKey))
	EventContentSeasonExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return EventContentSeasonExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentSeasonExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentSeasonExcelDto) UnmarshalMessage(e *EventContentSeasonExcel) error {
	t.ScenarioContentCollectionGroupId = fbsutils.Convert(e.ScenarioContentCollectionGroupId(), t.FlatBuffer.TableKey)
	t.MiniEventShortCutScenarioModeId = fbsutils.Convert(e.MiniEventShortCutScenarioModeId(), t.FlatBuffer.TableKey)
	t.RewardTagPermanent = RewardTag(fbsutils.Convert(int32(e.RewardTagPermanent()), t.FlatBuffer.TableKey))
	t.EventContentStageRewardIdPermanent = fbsutils.Convert(e.EventContentStageRewardIdPermanent(), t.FlatBuffer.TableKey)
	t.EventContentReleaseType = EventContentReleaseType(fbsutils.Convert(int32(e.EventContentReleaseType()), t.FlatBuffer.TableKey))
	t.EventAssist = e.EventAssist()
	t.CardBgImagePath = fbsutils.Convert(string(e.CardBgImagePath()), t.FlatBuffer.TableKey)
	t.MinigameMissionBgImagePath = fbsutils.Convert(string(e.MinigameMissionBgImagePath()), t.FlatBuffer.TableKey)
	t.MinigameMissionBgPrefabName = fbsutils.Convert(string(e.MinigameMissionBgPrefabName()), t.FlatBuffer.TableKey)
	t.MinigameVictoryPrefabName = fbsutils.Convert(string(e.MinigameVictoryPrefabName()), t.FlatBuffer.TableKey)
	t.MinigameLobbyPrefabName = fbsutils.Convert(string(e.MinigameLobbyPrefabName()), t.FlatBuffer.TableKey)
	t.ShiftMainBgImagePath = fbsutils.Convert(string(e.ShiftMainBgImagePath()), t.FlatBuffer.TableKey)
	t.ShiftTriggerStageId = fbsutils.Convert(e.ShiftTriggerStageId(), t.FlatBuffer.TableKey)
	t.MainBgImagePath = fbsutils.Convert(string(e.MainBgImagePath()), t.FlatBuffer.TableKey)
	t.MainBannerImagePath = fbsutils.Convert(string(e.MainBannerImagePath()), t.FlatBuffer.TableKey)
	t.BeforehandScenarioGroupId = make([]int64, e.BeforehandScenarioGroupIdLength())
	for i := range e.BeforehandScenarioGroupIdLength() {
		t.BeforehandScenarioGroupId[i] = fbsutils.Convert(e.BeforehandScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.MinigamePrologScenarioGroupId = fbsutils.Convert(e.MinigamePrologScenarioGroupId(), t.FlatBuffer.TableKey)
	t.BeforehandBgImagePath = fbsutils.Convert(string(e.BeforehandBgImagePath()), t.FlatBuffer.TableKey)
	t.SubIconParcelPath = fbsutils.Convert(string(e.SubIconParcelPath()), t.FlatBuffer.TableKey)
	t.MainIconParcelPath = fbsutils.Convert(string(e.MainIconParcelPath()), t.FlatBuffer.TableKey)
	t.ExtensionTime = fbsutils.Convert(string(e.ExtensionTime()), t.FlatBuffer.TableKey)
	t.EventContentCloseTime = fbsutils.Convert(string(e.EventContentCloseTime()), t.FlatBuffer.TableKey)
	t.EventContentCloseNoteTime = fbsutils.Convert(string(e.EventContentCloseNoteTime()), t.FlatBuffer.TableKey)
	t.EventContentOpenTime = fbsutils.Convert(string(e.EventContentOpenTime()), t.FlatBuffer.TableKey)
	t.BeforehandExposedTime = fbsutils.Convert(string(e.BeforehandExposedTime()), t.FlatBuffer.TableKey)
	t.EventChangeOpenCondition = fbsutils.Convert(e.EventChangeOpenCondition(), t.FlatBuffer.TableKey)
	t.MainEventId = fbsutils.Convert(e.MainEventId(), t.FlatBuffer.TableKey)
	t.EventItemId = fbsutils.Convert(e.EventItemId(), t.FlatBuffer.TableKey)
	t.SubEvent = e.SubEvent()
	t.SubEventType = SubEventType(fbsutils.Convert(int32(e.SubEventType()), t.FlatBuffer.TableKey))
	t.IconOrder = fbsutils.Convert(e.IconOrder(), t.FlatBuffer.TableKey)
	t.EventDisplay = e.EventDisplay()
	t.OpenConditionContent = OpenConditionContent(fbsutils.Convert(int32(e.OpenConditionContent()), t.FlatBuffer.TableKey))
	t.EventContentType = EventContentType(fbsutils.Convert(int32(e.EventContentType()), t.FlatBuffer.TableKey))
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.IsReturn = e.IsReturn()
	t.OriginalEventContentId = fbsutils.Convert(e.OriginalEventContentId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentSeasonExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentSeasonExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentSeasonExcelDto) FlatDataName() string {
	return "EventContentSeasonExcel"
}
