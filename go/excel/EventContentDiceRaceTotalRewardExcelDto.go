// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentDiceRaceTotalRewardExcelDto represents a FlatBuffers table
type EventContentDiceRaceTotalRewardExcelDto struct {
	fbsutils.FlatBuffer
	DisplayLapFinishCount  int32        `json:"display_lap_finish_count"`
	EventContentId         int64        `json:"event_content_id"`
	RequiredLapFinishCount int32        `json:"required_lap_finish_count"`
	RewardId               int64        `json:"reward_id"`
	RewardParcelAmount     []int64      `json:"reward_parcel_amount"`
	RewardParcelId         []int64      `json:"reward_parcel_id"`
	RewardParcelType       []ParcelType `json:"reward_parcel_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentDiceRaceTotalRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentDiceRaceTotalRewardExcelStart(b)
	EventContentDiceRaceTotalRewardExcelAddDisplayLapFinishCount(b, fbsutils.Convert(t.DisplayLapFinishCount, t.FlatBuffer.TableKey))
	EventContentDiceRaceTotalRewardExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentDiceRaceTotalRewardExcelAddRequiredLapFinishCount(b, fbsutils.Convert(t.RequiredLapFinishCount, t.FlatBuffer.TableKey))
	EventContentDiceRaceTotalRewardExcelAddRewardId(b, fbsutils.Convert(t.RewardId, t.FlatBuffer.TableKey))
	EventContentDiceRaceTotalRewardExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentDiceRaceTotalRewardExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	EventContentDiceRaceTotalRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentDiceRaceTotalRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	EventContentDiceRaceTotalRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentDiceRaceTotalRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	return EventContentDiceRaceTotalRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentDiceRaceTotalRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentDiceRaceTotalRewardExcelDto) UnmarshalMessage(e *EventContentDiceRaceTotalRewardExcel) error {
	t.DisplayLapFinishCount = fbsutils.Convert(e.DisplayLapFinishCount(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.RequiredLapFinishCount = fbsutils.Convert(e.RequiredLapFinishCount(), t.FlatBuffer.TableKey)
	t.RewardId = fbsutils.Convert(e.RewardId(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentDiceRaceTotalRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentDiceRaceTotalRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentDiceRaceTotalRewardExcelDto) FlatDataName() string {
	return "EventContentDiceRaceTotalRewardExcel"
}
