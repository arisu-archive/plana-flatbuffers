// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// OpenConditionExcelDto represents a FlatBuffers table
type OpenConditionExcelDto struct {
	fbsutils.FlatBuffer
	OpenConditionContentType   OpenConditionContent       `json:"open_condition_content_type"`
	LockUi                     []string                   `json:"lock_ui"`
	ShortcutPopupPriority      int64                      `json:"shortcut_popup_priority"`
	ShortcutUiName             []string                   `json:"shortcut_ui_name"`
	ShortcutParam              int32                      `json:"shortcut_param"`
	Scene                      string                     `json:"scene"`
	HideWhenLocked             bool                       `json:"hide_when_locked"`
	AccountLevel               int64                      `json:"account_level"`
	ScenarioModeId             int64                      `json:"scenario_mode_id"`
	CampaignStageId            int64                      `json:"campaign_stage_id"`
	MultipleConditionCheckType MultipleConditionCheckType `json:"multiple_condition_check_type"`
	OpenDayOfWeek              WeekDay                    `json:"open_day_of_week"`
	OpenHour                   int64                      `json:"open_hour"`
	CloseDayOfWeek             WeekDay                    `json:"close_day_of_week"`
	CloseHour                  int64                      `json:"close_hour"`
	OpenedCafeId               int64                      `json:"opened_cafe_id"`
	CafeIdforCafeRank          int64                      `json:"cafe_idfor_cafe_rank"`
	CafeRank                   int64                      `json:"cafe_rank"`
	ContentsOpenShow           bool                       `json:"contents_open_show"`
	ContentsOpenShortcutUi     string                     `json:"contents_open_shortcut_ui"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *OpenConditionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	var __offset_lock_ui flatbuffers.UOffsetT
	__stringOffsets_lock_ui := make([]flatbuffers.UOffsetT, len(t.LockUi))
	for i := range len(t.LockUi) {
		__stringOffsets_lock_ui[i] = b.CreateString(fbsutils.Convert(t.LockUi[i], t.FlatBuffer.TableKey))
	}
	OpenConditionExcelStartLockUiVector(b, len(t.LockUi))
	for i := range len(t.LockUi) {
		b.PrependUOffsetT(__stringOffsets_lock_ui[len(t.LockUi)-i-1])
	}
	__offset_lock_ui = b.EndVector(len(t.LockUi))
	var __offset_shortcut_ui_name flatbuffers.UOffsetT
	__stringOffsets_shortcut_ui_name := make([]flatbuffers.UOffsetT, len(t.ShortcutUiName))
	for i := range len(t.ShortcutUiName) {
		__stringOffsets_shortcut_ui_name[i] = b.CreateString(fbsutils.Convert(t.ShortcutUiName[i], t.FlatBuffer.TableKey))
	}
	OpenConditionExcelStartShortcutUiNameVector(b, len(t.ShortcutUiName))
	for i := range len(t.ShortcutUiName) {
		b.PrependUOffsetT(__stringOffsets_shortcut_ui_name[len(t.ShortcutUiName)-i-1])
	}
	__offset_shortcut_ui_name = b.EndVector(len(t.ShortcutUiName))
	__offset_scene := b.CreateString(fbsutils.Convert(t.Scene, t.FlatBuffer.TableKey))
	__offset_contents_open_shortcut_ui := b.CreateString(fbsutils.Convert(t.ContentsOpenShortcutUi, t.FlatBuffer.TableKey))
	OpenConditionExcelStart(b)
	OpenConditionExcelAddOpenConditionContentType(b, fbsutils.Convert(t.OpenConditionContentType, t.FlatBuffer.TableKey))
	OpenConditionExcelAddLockUi(b, __offset_lock_ui)
	OpenConditionExcelAddShortcutPopupPriority(b, fbsutils.Convert(t.ShortcutPopupPriority, t.FlatBuffer.TableKey))
	OpenConditionExcelAddShortcutUiName(b, __offset_shortcut_ui_name)
	OpenConditionExcelAddShortcutParam(b, fbsutils.Convert(t.ShortcutParam, t.FlatBuffer.TableKey))
	OpenConditionExcelAddScene(b, __offset_scene)
	OpenConditionExcelAddHideWhenLocked(b, t.HideWhenLocked)
	OpenConditionExcelAddAccountLevel(b, fbsutils.Convert(t.AccountLevel, t.FlatBuffer.TableKey))
	OpenConditionExcelAddScenarioModeId(b, fbsutils.Convert(t.ScenarioModeId, t.FlatBuffer.TableKey))
	OpenConditionExcelAddCampaignStageId(b, fbsutils.Convert(t.CampaignStageId, t.FlatBuffer.TableKey))
	OpenConditionExcelAddMultipleConditionCheckType(b, fbsutils.Convert(t.MultipleConditionCheckType, t.FlatBuffer.TableKey))
	OpenConditionExcelAddOpenDayOfWeek(b, fbsutils.Convert(t.OpenDayOfWeek, t.FlatBuffer.TableKey))
	OpenConditionExcelAddOpenHour(b, fbsutils.Convert(t.OpenHour, t.FlatBuffer.TableKey))
	OpenConditionExcelAddCloseDayOfWeek(b, fbsutils.Convert(t.CloseDayOfWeek, t.FlatBuffer.TableKey))
	OpenConditionExcelAddCloseHour(b, fbsutils.Convert(t.CloseHour, t.FlatBuffer.TableKey))
	OpenConditionExcelAddOpenedCafeId(b, fbsutils.Convert(t.OpenedCafeId, t.FlatBuffer.TableKey))
	OpenConditionExcelAddCafeIdforCafeRank(b, fbsutils.Convert(t.CafeIdforCafeRank, t.FlatBuffer.TableKey))
	OpenConditionExcelAddCafeRank(b, fbsutils.Convert(t.CafeRank, t.FlatBuffer.TableKey))
	OpenConditionExcelAddContentsOpenShow(b, t.ContentsOpenShow)
	OpenConditionExcelAddContentsOpenShortcutUi(b, __offset_contents_open_shortcut_ui)
	return OpenConditionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *OpenConditionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *OpenConditionExcelDto) UnmarshalMessage(e *OpenConditionExcel) error {
	t.OpenConditionContentType = OpenConditionContent(fbsutils.Convert(int32(e.OpenConditionContentType()), t.FlatBuffer.TableKey))
	t.LockUi = make([]string, e.LockUiLength())
	for i := range e.LockUiLength() {
		t.LockUi[i] = fbsutils.Convert(string(e.LockUi(i)), t.FlatBuffer.TableKey)
	}
	t.ShortcutPopupPriority = fbsutils.Convert(e.ShortcutPopupPriority(), t.FlatBuffer.TableKey)
	t.ShortcutUiName = make([]string, e.ShortcutUiNameLength())
	for i := range e.ShortcutUiNameLength() {
		t.ShortcutUiName[i] = fbsutils.Convert(string(e.ShortcutUiName(i)), t.FlatBuffer.TableKey)
	}
	t.ShortcutParam = fbsutils.Convert(e.ShortcutParam(), t.FlatBuffer.TableKey)
	t.Scene = fbsutils.Convert(string(e.Scene()), t.FlatBuffer.TableKey)
	t.HideWhenLocked = e.HideWhenLocked()
	t.AccountLevel = fbsutils.Convert(e.AccountLevel(), t.FlatBuffer.TableKey)
	t.ScenarioModeId = fbsutils.Convert(e.ScenarioModeId(), t.FlatBuffer.TableKey)
	t.CampaignStageId = fbsutils.Convert(e.CampaignStageId(), t.FlatBuffer.TableKey)
	t.MultipleConditionCheckType = MultipleConditionCheckType(fbsutils.Convert(int32(e.MultipleConditionCheckType()), t.FlatBuffer.TableKey))
	t.OpenDayOfWeek = WeekDay(fbsutils.Convert(int32(e.OpenDayOfWeek()), t.FlatBuffer.TableKey))
	t.OpenHour = fbsutils.Convert(e.OpenHour(), t.FlatBuffer.TableKey)
	t.CloseDayOfWeek = WeekDay(fbsutils.Convert(int32(e.CloseDayOfWeek()), t.FlatBuffer.TableKey))
	t.CloseHour = fbsutils.Convert(e.CloseHour(), t.FlatBuffer.TableKey)
	t.OpenedCafeId = fbsutils.Convert(e.OpenedCafeId(), t.FlatBuffer.TableKey)
	t.CafeIdforCafeRank = fbsutils.Convert(e.CafeIdforCafeRank(), t.FlatBuffer.TableKey)
	t.CafeRank = fbsutils.Convert(e.CafeRank(), t.FlatBuffer.TableKey)
	t.ContentsOpenShow = e.ContentsOpenShow()
	t.ContentsOpenShortcutUi = fbsutils.Convert(string(e.ContentsOpenShortcutUi()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *OpenConditionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsOpenConditionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (OpenConditionExcelDto) FlatDataName() string {
	return "OpenConditionExcel"
}
