// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentCardShopExcelDto represents a FlatBuffers table
type EventContentCardShopExcelDto struct {
	fbsutils.FlatBuffer
	RewardParcelAmount []int64      `json:"reward_parcel_amount"`
	RewardParcelId     []int64      `json:"reward_parcel_id"`
	RewardParcelType   []ParcelType `json:"reward_parcel_type"`
	ProbWeight1        int32        `json:"prob_weight1"`
	Prob               int32        `json:"prob"`
	RefreshGroup       int32        `json:"refresh_group"`
	IsLegacy           bool         `json:"is_legacy"`
	CardGroupId        int32        `json:"card_group_id"`
	CostGoodsId        int64        `json:"cost_goods_id"`
	Rarity             Rarity       `json:"rarity"`
	Id                 int64        `json:"id"`
	EventContentId     int64        `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentCardShopExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentCardShopExcelStart(b)
	EventContentCardShopExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentCardShopExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	EventContentCardShopExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentCardShopExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	EventContentCardShopExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentCardShopExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentCardShopExcelAddProbWeight1(b, fbsutils.Convert(t.ProbWeight1, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddRefreshGroup(b, fbsutils.Convert(t.RefreshGroup, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddIsLegacy(b, t.IsLegacy)
	EventContentCardShopExcelAddCardGroupId(b, fbsutils.Convert(t.CardGroupId, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddCostGoodsId(b, fbsutils.Convert(t.CostGoodsId, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddRarity(b, fbsutils.Convert(t.Rarity, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EventContentCardShopExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return EventContentCardShopExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentCardShopExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCardShopExcelDto) UnmarshalMessage(e *EventContentCardShopExcel) error {
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.ProbWeight1 = fbsutils.Convert(e.ProbWeight1(), t.FlatBuffer.TableKey)
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	t.RefreshGroup = fbsutils.Convert(e.RefreshGroup(), t.FlatBuffer.TableKey)
	t.IsLegacy = e.IsLegacy()
	t.CardGroupId = fbsutils.Convert(e.CardGroupId(), t.FlatBuffer.TableKey)
	t.CostGoodsId = fbsutils.Convert(e.CostGoodsId(), t.FlatBuffer.TableKey)
	t.Rarity = Rarity(fbsutils.Convert(int32(e.Rarity()), t.FlatBuffer.TableKey))
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCardShopExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentCardShopExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentCardShopExcelDto) FlatDataName() string {
	return "EventContentCardShopExcel"
}
