// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MessagePopupExcelDto represents a FlatBuffers table
type MessagePopupExcelDto struct {
	fbsutils.FlatBuffer
	ButtonParameter    []string                      `json:"button_parameter"`
	ButtonCommand      []string                      `json:"button_command"`
	ButtonText         []uint32                      `json:"button_text"`
	Button             []MessagePopupButtonType      `json:"button"`
	DisplayXButton     bool                          `json:"display_x_button"`
	ConditionText      []uint32                      `json:"condition_text"`
	MessageText        uint32                        `json:"message_text"`
	SubTitleText       uint32                        `json:"sub_title_text"`
	TitleText          uint32                        `json:"title_text"`
	Image              string                        `json:"image"`
	OrderType          MessagePopupImagePositionType `json:"order_type"`
	MessagePopupLayout MessagePopupLayout            `json:"message_popup_layout"`
	StringId           uint32                        `json:"string_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MessagePopupExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MessagePopupExcelStart(b)
	MessagePopupExcelStartButtonParameterVector(b, len(t.ButtonParameter))
	for i := range len(t.ButtonParameter) {
		b.PrependUOffsetT(b.CreateString(t.ButtonParameter[len(t.ButtonParameter)-i-1]))
	}
	MessagePopupExcelAddButtonParameter(b, b.EndVector(len(t.ButtonParameter)))
	MessagePopupExcelStartButtonCommandVector(b, len(t.ButtonCommand))
	for i := range len(t.ButtonCommand) {
		b.PrependUOffsetT(b.CreateString(t.ButtonCommand[len(t.ButtonCommand)-i-1]))
	}
	MessagePopupExcelAddButtonCommand(b, b.EndVector(len(t.ButtonCommand)))
	MessagePopupExcelStartButtonTextVector(b, len(t.ButtonText))
	for i := range len(t.ButtonText) {
		b.PrependUint32(fbsutils.Convert(t.ButtonText[len(t.ButtonText)-i-1], t.FlatBuffer.TableKey))
	}
	MessagePopupExcelAddButtonText(b, b.EndVector(len(t.ButtonText)))
	MessagePopupExcelStartButtonVector(b, len(t.Button))
	for i := range len(t.Button) {
		b.PrependInt32(fbsutils.Convert(int32(t.Button[len(t.Button)-i-1]), t.FlatBuffer.TableKey))
	}
	MessagePopupExcelAddButton(b, b.EndVector(len(t.Button)))
	MessagePopupExcelAddDisplayXButton(b, t.DisplayXButton)
	MessagePopupExcelStartConditionTextVector(b, len(t.ConditionText))
	for i := range len(t.ConditionText) {
		b.PrependUint32(fbsutils.Convert(t.ConditionText[len(t.ConditionText)-i-1], t.FlatBuffer.TableKey))
	}
	MessagePopupExcelAddConditionText(b, b.EndVector(len(t.ConditionText)))
	MessagePopupExcelAddMessageText(b, fbsutils.Convert(t.MessageText, t.FlatBuffer.TableKey))
	MessagePopupExcelAddSubTitleText(b, fbsutils.Convert(t.SubTitleText, t.FlatBuffer.TableKey))
	MessagePopupExcelAddTitleText(b, fbsutils.Convert(t.TitleText, t.FlatBuffer.TableKey))
	MessagePopupExcelAddImage(b, b.CreateString(fbsutils.Convert(t.Image, t.FlatBuffer.TableKey)))
	MessagePopupExcelAddOrderType(b, fbsutils.Convert(t.OrderType, t.FlatBuffer.TableKey))
	MessagePopupExcelAddMessagePopupLayout(b, fbsutils.Convert(t.MessagePopupLayout, t.FlatBuffer.TableKey))
	MessagePopupExcelAddStringId(b, fbsutils.Convert(t.StringId, t.FlatBuffer.TableKey))
	return MessagePopupExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MessagePopupExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MessagePopupExcelDto) UnmarshalMessage(e *MessagePopupExcel) error {
	t.ButtonParameter = make([]string, e.ButtonParameterLength())
	for i := range e.ButtonParameterLength() {
		t.ButtonParameter[i] = fbsutils.Convert(string(e.ButtonParameter(i)), t.FlatBuffer.TableKey)
	}
	t.ButtonCommand = make([]string, e.ButtonCommandLength())
	for i := range e.ButtonCommandLength() {
		t.ButtonCommand[i] = fbsutils.Convert(string(e.ButtonCommand(i)), t.FlatBuffer.TableKey)
	}
	t.ButtonText = make([]uint32, e.ButtonTextLength())
	for i := range e.ButtonTextLength() {
		t.ButtonText[i] = fbsutils.Convert(e.ButtonText(i), t.FlatBuffer.TableKey)
	}
	t.Button = make([]MessagePopupButtonType, e.ButtonLength())
	for i := range e.ButtonLength() {
		t.Button[i] = MessagePopupButtonType(fbsutils.Convert(int32(e.Button(i)), t.FlatBuffer.TableKey))
	}
	t.DisplayXButton = e.DisplayXButton()
	t.ConditionText = make([]uint32, e.ConditionTextLength())
	for i := range e.ConditionTextLength() {
		t.ConditionText[i] = fbsutils.Convert(e.ConditionText(i), t.FlatBuffer.TableKey)
	}
	t.MessageText = fbsutils.Convert(e.MessageText(), t.FlatBuffer.TableKey)
	t.SubTitleText = fbsutils.Convert(e.SubTitleText(), t.FlatBuffer.TableKey)
	t.TitleText = fbsutils.Convert(e.TitleText(), t.FlatBuffer.TableKey)
	t.Image = fbsutils.Convert(string(e.Image()), t.FlatBuffer.TableKey)
	t.OrderType = MessagePopupImagePositionType(fbsutils.Convert(int32(e.OrderType()), t.FlatBuffer.TableKey))
	t.MessagePopupLayout = MessagePopupLayout(fbsutils.Convert(int32(e.MessagePopupLayout()), t.FlatBuffer.TableKey))
	t.StringId = fbsutils.Convert(e.StringId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MessagePopupExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMessagePopupExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MessagePopupExcelDto) FlatDataName() string {
	return "MessagePopupExcel"
}
