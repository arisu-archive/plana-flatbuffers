// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArenaSeasonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsArenaSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *ArenaSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArenaSeasonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsArenaSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *ArenaSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ArenaSeasonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ArenaSeasonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArenaSeasonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArenaSeasonExcel) PrevSeasonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaSeasonExcel) MutatePrevSeasonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ArenaSeasonExcel) SeasonGroupLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaSeasonExcel) MutateSeasonGroupLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ArenaSeasonExcel) SeasonEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArenaSeasonExcel) SeasonStartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ArenaSeasonExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ArenaSeasonExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func ArenaSeasonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ArenaSeasonExcelAddPrevSeasonId(builder *flatbuffers.Builder, prevSeasonId int64) {
	builder.PrependInt64Slot(0, prevSeasonId, 0)
}
func ArenaSeasonExcelAddSeasonGroupLimit(builder *flatbuffers.Builder, seasonGroupLimit int64) {
	builder.PrependInt64Slot(1, seasonGroupLimit, 0)
}
func ArenaSeasonExcelAddSeasonEndDate(builder *flatbuffers.Builder, seasonEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(seasonEndDate), 0)
}
func ArenaSeasonExcelAddSeasonStartDate(builder *flatbuffers.Builder, seasonStartDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(seasonStartDate), 0)
}
func ArenaSeasonExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(4, uniqueId, 0)
}
func ArenaSeasonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
