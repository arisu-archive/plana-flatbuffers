// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentScenarioExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentScenarioExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentScenarioExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentScenarioExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentScenarioExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentScenarioExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentScenarioExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentScenarioExcel) ReplayDisplayGroup() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateReplayDisplayGroup(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *EventContentScenarioExcel) Order() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EventContentScenarioExcel) RecollectionNumber() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateRecollectionNumber(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentScenarioExcel) IsRecollection() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentScenarioExcel) MutateIsRecollection(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *EventContentScenarioExcel) IsMeetup() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentScenarioExcel) MutateIsMeetup(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *EventContentScenarioExcel) IsOmnibus() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentScenarioExcel) MutateIsOmnibus(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *EventContentScenarioExcel) ScenarioGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentScenarioExcel) ScenarioGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateScenarioGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentScenarioExcel) ScenarioConditionType() EventContentScenarioConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return EventContentScenarioConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateScenarioConditionType(n EventContentScenarioConditionType) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *EventContentScenarioExcel) ConditionAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateConditionAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *EventContentScenarioExcel) ConditionEventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateConditionEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *EventContentScenarioExcel) ClearedScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateClearedScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *EventContentScenarioExcel) RecollectionSummaryLocalizeScenarioId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateRecollectionSummaryLocalizeScenarioId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

func (rcv *EventContentScenarioExcel) RecollectionResource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentScenarioExcel) IsRecollectionHorizon() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentScenarioExcel) MutateIsRecollectionHorizon(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *EventContentScenarioExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentScenarioExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentScenarioExcel) RewardId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentScenarioExcel) RewardIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateRewardId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentScenarioExcel) RewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentScenarioExcel) RewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentScenarioExcel) MutateRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func EventContentScenarioExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func EventContentScenarioExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func EventContentScenarioExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(1, eventContentId, 0)
}
func EventContentScenarioExcelAddReplayDisplayGroup(builder *flatbuffers.Builder, replayDisplayGroup int32) {
	builder.PrependInt32Slot(2, replayDisplayGroup, 0)
}
func EventContentScenarioExcelAddOrder(builder *flatbuffers.Builder, order int64) {
	builder.PrependInt64Slot(3, order, 0)
}
func EventContentScenarioExcelAddRecollectionNumber(builder *flatbuffers.Builder, recollectionNumber int64) {
	builder.PrependInt64Slot(4, recollectionNumber, 0)
}
func EventContentScenarioExcelAddIsRecollection(builder *flatbuffers.Builder, isRecollection bool) {
	builder.PrependBoolSlot(5, isRecollection, false)
}
func EventContentScenarioExcelAddIsMeetup(builder *flatbuffers.Builder, isMeetup bool) {
	builder.PrependBoolSlot(6, isMeetup, false)
}
func EventContentScenarioExcelAddIsOmnibus(builder *flatbuffers.Builder, isOmnibus bool) {
	builder.PrependBoolSlot(7, isOmnibus, false)
}
func EventContentScenarioExcelAddScenarioGroupId(builder *flatbuffers.Builder, scenarioGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(scenarioGroupId), 0)
}
func EventContentScenarioExcelStartScenarioGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentScenarioExcelAddScenarioConditionType(builder *flatbuffers.Builder, scenarioConditionType EventContentScenarioConditionType) {
	builder.PrependInt32Slot(9, int32(scenarioConditionType), 0)
}
func EventContentScenarioExcelAddConditionAmount(builder *flatbuffers.Builder, conditionAmount int64) {
	builder.PrependInt64Slot(10, conditionAmount, 0)
}
func EventContentScenarioExcelAddConditionEventContentId(builder *flatbuffers.Builder, conditionEventContentId int64) {
	builder.PrependInt64Slot(11, conditionEventContentId, 0)
}
func EventContentScenarioExcelAddClearedScenarioGroupId(builder *flatbuffers.Builder, clearedScenarioGroupId int64) {
	builder.PrependInt64Slot(12, clearedScenarioGroupId, 0)
}
func EventContentScenarioExcelAddRecollectionSummaryLocalizeScenarioId(builder *flatbuffers.Builder, recollectionSummaryLocalizeScenarioId uint32) {
	builder.PrependUint32Slot(13, recollectionSummaryLocalizeScenarioId, 0)
}
func EventContentScenarioExcelAddRecollectionResource(builder *flatbuffers.Builder, recollectionResource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(recollectionResource), 0)
}
func EventContentScenarioExcelAddIsRecollectionHorizon(builder *flatbuffers.Builder, isRecollectionHorizon bool) {
	builder.PrependBoolSlot(15, isRecollectionHorizon, false)
}
func EventContentScenarioExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func EventContentScenarioExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentScenarioExcelAddRewardId(builder *flatbuffers.Builder, rewardId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(rewardId), 0)
}
func EventContentScenarioExcelStartRewardIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentScenarioExcelAddRewardAmount(builder *flatbuffers.Builder, rewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(rewardAmount), 0)
}
func EventContentScenarioExcelStartRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentScenarioExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
