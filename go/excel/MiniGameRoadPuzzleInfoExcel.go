// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameRoadPuzzleInfoExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameRoadPuzzleInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameRoadPuzzleInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameRoadPuzzleInfoExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameRoadPuzzleInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameRoadPuzzleInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameRoadPuzzleInfoExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameRoadPuzzleInfoExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameRoadPuzzleInfoExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameRoadPuzzleInfoExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRoadPuzzleInfoExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameRoadPuzzleInfoExcel) EventUseCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameRoadPuzzleInfoExcel) MutateEventUseCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *MiniGameRoadPuzzleInfoExcel) EventUseCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRoadPuzzleInfoExcel) MutateEventUseCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameRoadPuzzleInfoExcel) CostGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRoadPuzzleInfoExcel) MutateCostGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameRoadPuzzleInfoExcel) RailSetRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRoadPuzzleInfoExcel) MutateRailSetRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MiniGameRoadPuzzleInfoExcel) InstantClearRound() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRoadPuzzleInfoExcel) MutateInstantClearRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func MiniGameRoadPuzzleInfoExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MiniGameRoadPuzzleInfoExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func MiniGameRoadPuzzleInfoExcelAddEventUseCostType(builder *flatbuffers.Builder, eventUseCostType ParcelType) {
	builder.PrependInt32Slot(1, int32(eventUseCostType), 0)
}
func MiniGameRoadPuzzleInfoExcelAddEventUseCostId(builder *flatbuffers.Builder, eventUseCostId int64) {
	builder.PrependInt64Slot(2, eventUseCostId, 0)
}
func MiniGameRoadPuzzleInfoExcelAddCostGoodsId(builder *flatbuffers.Builder, costGoodsId int64) {
	builder.PrependInt64Slot(3, costGoodsId, 0)
}
func MiniGameRoadPuzzleInfoExcelAddRailSetRewardId(builder *flatbuffers.Builder, railSetRewardId int64) {
	builder.PrependInt64Slot(4, railSetRewardId, 0)
}
func MiniGameRoadPuzzleInfoExcelAddInstantClearRound(builder *flatbuffers.Builder, instantClearRound int32) {
	builder.PrependInt32Slot(5, instantClearRound, 0)
}
func MiniGameRoadPuzzleInfoExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
