// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentShopInfoExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentShopInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentShopInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentShopInfoExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentShopInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentShopInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentShopInfoExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentShopInfoExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentShopInfoExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentShopInfoExcel) AutoRefreshCoolTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateAutoRefreshCoolTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentShopInfoExcel) CategoryType() ShopCategoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ShopCategoryType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateCategoryType(n ShopCategoryType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentShopInfoExcel) CostParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) CostParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateCostParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentShopInfoExcel) CostParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) CostParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateCostParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentShopInfoExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentShopInfoExcel) GoodsId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) GoodsIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateGoodsId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentShopInfoExcel) IsRefresh() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentShopInfoExcel) MutateIsRefresh(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *EventContentShopInfoExcel) IsSoldOutDimmed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentShopInfoExcel) MutateIsSoldOutDimmed(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *EventContentShopInfoExcel) LocalizeCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateLocalizeCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *EventContentShopInfoExcel) OpenPeriodFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentShopInfoExcel) OpenPeriodTo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentShopInfoExcel) RefreshAbleCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentShopInfoExcel) MutateRefreshAbleCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *EventContentShopInfoExcel) ShopProductUpdateDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventContentShopInfoExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func EventContentShopInfoExcelAddAutoRefreshCoolTime(builder *flatbuffers.Builder, autoRefreshCoolTime int64) {
	builder.PrependInt64Slot(0, autoRefreshCoolTime, 0)
}
func EventContentShopInfoExcelAddCategoryType(builder *flatbuffers.Builder, categoryType ShopCategoryType) {
	builder.PrependInt32Slot(1, int32(categoryType), 0)
}
func EventContentShopInfoExcelAddCostParcelId(builder *flatbuffers.Builder, costParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(costParcelId), 0)
}
func EventContentShopInfoExcelStartCostParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentShopInfoExcelAddCostParcelType(builder *flatbuffers.Builder, costParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(costParcelType), 0)
}
func EventContentShopInfoExcelStartCostParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentShopInfoExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(4, eventContentId, 0)
}
func EventContentShopInfoExcelAddGoodsId(builder *flatbuffers.Builder, goodsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(goodsId), 0)
}
func EventContentShopInfoExcelStartGoodsIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentShopInfoExcelAddIsRefresh(builder *flatbuffers.Builder, isRefresh bool) {
	builder.PrependBoolSlot(6, isRefresh, false)
}
func EventContentShopInfoExcelAddIsSoldOutDimmed(builder *flatbuffers.Builder, isSoldOutDimmed bool) {
	builder.PrependBoolSlot(7, isSoldOutDimmed, false)
}
func EventContentShopInfoExcelAddLocalizeCode(builder *flatbuffers.Builder, localizeCode uint32) {
	builder.PrependUint32Slot(8, localizeCode, 0)
}
func EventContentShopInfoExcelAddOpenPeriodFrom(builder *flatbuffers.Builder, openPeriodFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(openPeriodFrom), 0)
}
func EventContentShopInfoExcelAddOpenPeriodTo(builder *flatbuffers.Builder, openPeriodTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(openPeriodTo), 0)
}
func EventContentShopInfoExcelAddRefreshAbleCount(builder *flatbuffers.Builder, refreshAbleCount int64) {
	builder.PrependInt64Slot(11, refreshAbleCount, 0)
}
func EventContentShopInfoExcelAddShopProductUpdateDate(builder *flatbuffers.Builder, shopProductUpdateDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(shopProductUpdateDate), 0)
}
func EventContentShopInfoExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
