// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDreamTimelineExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDreamTimelineExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamTimelineExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDreamTimelineExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameDreamTimelineExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDreamTimelineExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDreamTimelineExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameDreamTimelineExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDreamTimelineExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDreamTimelineExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameDreamTimelineExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MiniGameDreamTimelineExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDreamTimelineExcel) DreamMakerDays() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateDreamMakerDays(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDreamTimelineExcel) DreamMakerActionPoint() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateDreamMakerActionPoint(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MiniGameDreamTimelineExcel) EnterScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateEnterScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *MiniGameDreamTimelineExcel) Bgm() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDreamTimelineExcel) MutateBgm(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MiniGameDreamTimelineExcel) ArtLevelPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameDreamTimelineExcel) DesignLevelPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MiniGameDreamTimelineExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func MiniGameDreamTimelineExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func MiniGameDreamTimelineExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(1, eventContentId, 0)
}
func MiniGameDreamTimelineExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(2, groupId, 0)
}
func MiniGameDreamTimelineExcelAddDreamMakerDays(builder *flatbuffers.Builder, dreamMakerDays int64) {
	builder.PrependInt64Slot(3, dreamMakerDays, 0)
}
func MiniGameDreamTimelineExcelAddDreamMakerActionPoint(builder *flatbuffers.Builder, dreamMakerActionPoint int64) {
	builder.PrependInt64Slot(4, dreamMakerActionPoint, 0)
}
func MiniGameDreamTimelineExcelAddEnterScenarioGroupId(builder *flatbuffers.Builder, enterScenarioGroupId int64) {
	builder.PrependInt64Slot(5, enterScenarioGroupId, 0)
}
func MiniGameDreamTimelineExcelAddBgm(builder *flatbuffers.Builder, bgm int64) {
	builder.PrependInt64Slot(6, bgm, 0)
}
func MiniGameDreamTimelineExcelAddArtLevelPath(builder *flatbuffers.Builder, artLevelPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(artLevelPath), 0)
}
func MiniGameDreamTimelineExcelAddDesignLevelPath(builder *flatbuffers.Builder, designLevelPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(designLevelPath), 0)
}
func MiniGameDreamTimelineExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
