// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGObjectExcelDto represents a FlatBuffers table
type MinigameTBGObjectExcelDto struct {
	fbsutils.FlatBuffer
	Disposable       bool          `json:"disposable"`
	Key              string        `json:"key"`
	ObjectCostAmount int32         `json:"object_cost_amount"`
	ObjectCostId     int64         `json:"object_cost_id"`
	ObjectCostType   ParcelType    `json:"object_cost_type"`
	ObjectType       TBGObjectType `json:"object_type"`
	PrefabName       string        `json:"prefab_name"`
	ReEncounterCost  bool          `json:"re_encounter_cost"`
	UniqueId         int64         `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGObjectExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameTBGObjectExcelStart(b)
	MinigameTBGObjectExcelAddDisposable(b, t.Disposable)
	MinigameTBGObjectExcelAddKey(b, b.CreateString(fbsutils.Convert(t.Key, t.FlatBuffer.TableKey)))
	MinigameTBGObjectExcelAddObjectCostAmount(b, fbsutils.Convert(t.ObjectCostAmount, t.FlatBuffer.TableKey))
	MinigameTBGObjectExcelAddObjectCostId(b, fbsutils.Convert(t.ObjectCostId, t.FlatBuffer.TableKey))
	MinigameTBGObjectExcelAddObjectCostType(b, fbsutils.Convert(t.ObjectCostType, t.FlatBuffer.TableKey))
	MinigameTBGObjectExcelAddObjectType(b, fbsutils.Convert(t.ObjectType, t.FlatBuffer.TableKey))
	MinigameTBGObjectExcelAddPrefabName(b, b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey)))
	MinigameTBGObjectExcelAddReEncounterCost(b, t.ReEncounterCost)
	MinigameTBGObjectExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return MinigameTBGObjectExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGObjectExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGObjectExcelDto) UnmarshalMessage(e *MinigameTBGObjectExcel) error {
	t.Disposable = e.Disposable()
	t.Key = fbsutils.Convert(string(e.Key()), t.FlatBuffer.TableKey)
	t.ObjectCostAmount = fbsutils.Convert(e.ObjectCostAmount(), t.FlatBuffer.TableKey)
	t.ObjectCostId = fbsutils.Convert(e.ObjectCostId(), t.FlatBuffer.TableKey)
	t.ObjectCostType = ParcelType(fbsutils.Convert(int32(e.ObjectCostType()), t.FlatBuffer.TableKey))
	t.ObjectType = TBGObjectType(fbsutils.Convert(int32(e.ObjectType()), t.FlatBuffer.TableKey))
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.ReEncounterCost = e.ReEncounterCost()
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGObjectExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGObjectExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGObjectExcelDto) FlatDataName() string {
	return "MinigameTBGObjectExcel"
}
