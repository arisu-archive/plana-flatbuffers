// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterPotentialRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterPotentialRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterPotentialRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterPotentialRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterPotentialRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterPotentialRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterPotentialRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterPotentialRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterPotentialRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterPotentialRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterPotentialRewardExcel) RequirePotentialStatType(j int) PotentialStatBonusRateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return PotentialStatBonusRateType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) RequirePotentialStatTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) MutateRequirePotentialStatType(j int, n PotentialStatBonusRateType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *CharacterPotentialRewardExcel) RequirePotentialStatLevel(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) RequirePotentialStatLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) MutateRequirePotentialStatLevel(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CharacterPotentialRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *CharacterPotentialRewardExcel) RewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) MutateRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *CharacterPotentialRewardExcel) RewardAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterPotentialRewardExcel) MutateRewardAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func CharacterPotentialRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CharacterPotentialRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func CharacterPotentialRewardExcelAddRequirePotentialStatType(builder *flatbuffers.Builder, requirePotentialStatType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(requirePotentialStatType), 0)
}
func CharacterPotentialRewardExcelStartRequirePotentialStatTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterPotentialRewardExcelAddRequirePotentialStatLevel(builder *flatbuffers.Builder, requirePotentialStatLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(requirePotentialStatLevel), 0)
}
func CharacterPotentialRewardExcelStartRequirePotentialStatLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterPotentialRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(3, int32(rewardParcelType), 0)
}
func CharacterPotentialRewardExcelAddRewardId(builder *flatbuffers.Builder, rewardId int64) {
	builder.PrependInt64Slot(4, rewardId, 0)
}
func CharacterPotentialRewardExcelAddRewardAmount(builder *flatbuffers.Builder, rewardAmount int32) {
	builder.PrependInt32Slot(5, rewardAmount, 0)
}
func CharacterPotentialRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
