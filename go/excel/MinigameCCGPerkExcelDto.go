// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGPerkExcelDto represents a FlatBuffers table
type MinigameCCGPerkExcelDto struct {
	fbsutils.FlatBuffer
	CcgId                    int64   `json:"ccg_id"`
	CostParcelAmount         int32   `json:"cost_parcel_amount"`
	DiscardPoint             int32   `json:"discard_point"`
	EnvironmentLogicEffectId []int64 `json:"environment_logic_effect_id"`
	Id                       int64   `json:"id"`
	RequiredPerkId           []int64 `json:"required_perk_id"`
	RerollPoint              int32   `json:"reroll_point"`
	ShopIcon                 string  `json:"shop_icon"`
	ShopLocalizeDesc         uint32  `json:"shop_localize_desc"`
	ShopLocalizeTitle        uint32  `json:"shop_localize_title"`
	ShopOrder                int32   `json:"shop_order"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGPerkExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameCCGPerkExcelStart(b)
	MinigameCCGPerkExcelAddCcgId(b, fbsutils.Convert(t.CcgId, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelAddCostParcelAmount(b, fbsutils.Convert(t.CostParcelAmount, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelAddDiscardPoint(b, fbsutils.Convert(t.DiscardPoint, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelStartEnvironmentLogicEffectIdVector(b, len(t.EnvironmentLogicEffectId))
	for i := range len(t.EnvironmentLogicEffectId) {
		b.PrependInt64(fbsutils.Convert(t.EnvironmentLogicEffectId[len(t.EnvironmentLogicEffectId)-i-1], t.FlatBuffer.TableKey))
	}
	MinigameCCGPerkExcelAddEnvironmentLogicEffectId(b, b.EndVector(len(t.EnvironmentLogicEffectId)))
	MinigameCCGPerkExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelStartRequiredPerkIdVector(b, len(t.RequiredPerkId))
	for i := range len(t.RequiredPerkId) {
		b.PrependInt64(fbsutils.Convert(t.RequiredPerkId[len(t.RequiredPerkId)-i-1], t.FlatBuffer.TableKey))
	}
	MinigameCCGPerkExcelAddRequiredPerkId(b, b.EndVector(len(t.RequiredPerkId)))
	MinigameCCGPerkExcelAddRerollPoint(b, fbsutils.Convert(t.RerollPoint, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelAddShopIcon(b, b.CreateString(fbsutils.Convert(t.ShopIcon, t.FlatBuffer.TableKey)))
	MinigameCCGPerkExcelAddShopLocalizeDesc(b, fbsutils.Convert(t.ShopLocalizeDesc, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelAddShopLocalizeTitle(b, fbsutils.Convert(t.ShopLocalizeTitle, t.FlatBuffer.TableKey))
	MinigameCCGPerkExcelAddShopOrder(b, fbsutils.Convert(t.ShopOrder, t.FlatBuffer.TableKey))
	return MinigameCCGPerkExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGPerkExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGPerkExcelDto) UnmarshalMessage(e *MinigameCCGPerkExcel) error {
	t.CcgId = fbsutils.Convert(e.CcgId(), t.FlatBuffer.TableKey)
	t.CostParcelAmount = fbsutils.Convert(e.CostParcelAmount(), t.FlatBuffer.TableKey)
	t.DiscardPoint = fbsutils.Convert(e.DiscardPoint(), t.FlatBuffer.TableKey)
	t.EnvironmentLogicEffectId = make([]int64, e.EnvironmentLogicEffectIdLength())
	for i := range e.EnvironmentLogicEffectIdLength() {
		t.EnvironmentLogicEffectId[i] = fbsutils.Convert(e.EnvironmentLogicEffectId(i), t.FlatBuffer.TableKey)
	}
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.RequiredPerkId = make([]int64, e.RequiredPerkIdLength())
	for i := range e.RequiredPerkIdLength() {
		t.RequiredPerkId[i] = fbsutils.Convert(e.RequiredPerkId(i), t.FlatBuffer.TableKey)
	}
	t.RerollPoint = fbsutils.Convert(e.RerollPoint(), t.FlatBuffer.TableKey)
	t.ShopIcon = fbsutils.Convert(string(e.ShopIcon()), t.FlatBuffer.TableKey)
	t.ShopLocalizeDesc = fbsutils.Convert(e.ShopLocalizeDesc(), t.FlatBuffer.TableKey)
	t.ShopLocalizeTitle = fbsutils.Convert(e.ShopLocalizeTitle(), t.FlatBuffer.TableKey)
	t.ShopOrder = fbsutils.Convert(e.ShopOrder(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGPerkExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGPerkExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGPerkExcelDto) FlatDataName() string {
	return "MinigameCCGPerkExcel"
}
