// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BossExternalBTExcelDto represents a FlatBuffers table
type BossExternalBTExcelDto struct {
	fbsutils.FlatBuffer
	BehaviorArgument   string             `json:"behavior_argument"`
	ExternalBehavior   ExternalBehavior   `json:"external_behavior"`
	BehaviorRate       int64              `json:"behavior_rate"`
	TriggerArgument    string             `json:"trigger_argument"`
	ExternalBtTrigger  ExternalBTTrigger  `json:"external_bt_trigger"`
	ExternalBtNodeType ExternalBTNodeType `json:"external_bt_node_type"`
	AiPhase            int64              `json:"ai_phase"`
	ExternalBtId       int64              `json:"external_bt_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BossExternalBTExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	BossExternalBTExcelStart(b)
	BossExternalBTExcelAddBehaviorArgument(b, b.CreateString(fbsutils.Convert(t.BehaviorArgument, t.FlatBuffer.TableKey)))
	BossExternalBTExcelAddExternalBehavior(b, fbsutils.Convert(t.ExternalBehavior, t.FlatBuffer.TableKey))
	BossExternalBTExcelAddBehaviorRate(b, fbsutils.Convert(t.BehaviorRate, t.FlatBuffer.TableKey))
	BossExternalBTExcelAddTriggerArgument(b, b.CreateString(fbsutils.Convert(t.TriggerArgument, t.FlatBuffer.TableKey)))
	BossExternalBTExcelAddExternalBtTrigger(b, fbsutils.Convert(t.ExternalBtTrigger, t.FlatBuffer.TableKey))
	BossExternalBTExcelAddExternalBtNodeType(b, fbsutils.Convert(t.ExternalBtNodeType, t.FlatBuffer.TableKey))
	BossExternalBTExcelAddAiPhase(b, fbsutils.Convert(t.AiPhase, t.FlatBuffer.TableKey))
	BossExternalBTExcelAddExternalBtId(b, fbsutils.Convert(t.ExternalBtId, t.FlatBuffer.TableKey))
	return BossExternalBTExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BossExternalBTExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BossExternalBTExcelDto) UnmarshalMessage(e *BossExternalBTExcel) error {
	t.BehaviorArgument = fbsutils.Convert(string(e.BehaviorArgument()), t.FlatBuffer.TableKey)
	t.ExternalBehavior = ExternalBehavior(fbsutils.Convert(int32(e.ExternalBehavior()), t.FlatBuffer.TableKey))
	t.BehaviorRate = fbsutils.Convert(e.BehaviorRate(), t.FlatBuffer.TableKey)
	t.TriggerArgument = fbsutils.Convert(string(e.TriggerArgument()), t.FlatBuffer.TableKey)
	t.ExternalBtTrigger = ExternalBTTrigger(fbsutils.Convert(int32(e.ExternalBtTrigger()), t.FlatBuffer.TableKey))
	t.ExternalBtNodeType = ExternalBTNodeType(fbsutils.Convert(int32(e.ExternalBtNodeType()), t.FlatBuffer.TableKey))
	t.AiPhase = fbsutils.Convert(e.AiPhase(), t.FlatBuffer.TableKey)
	t.ExternalBtId = fbsutils.Convert(e.ExternalBtId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BossExternalBTExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBossExternalBTExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BossExternalBTExcelDto) FlatDataName() string {
	return "BossExternalBTExcel"
}
