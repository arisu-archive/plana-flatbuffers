// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SchoolDungeonRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsSchoolDungeonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *SchoolDungeonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SchoolDungeonRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSchoolDungeonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *SchoolDungeonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SchoolDungeonRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SchoolDungeonRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SchoolDungeonRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SchoolDungeonRewardExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SchoolDungeonRewardExcel) DungeonType() SchoolDungeonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SchoolDungeonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateDungeonType(n SchoolDungeonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *SchoolDungeonRewardExcel) RewardTag() RewardTag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return RewardTag(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateRewardTag(n RewardTag) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *SchoolDungeonRewardExcel) RewardParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateRewardParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *SchoolDungeonRewardExcel) RewardParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateRewardParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *SchoolDungeonRewardExcel) RewardParcelAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateRewardParcelAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *SchoolDungeonRewardExcel) RewardParcelProbability() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SchoolDungeonRewardExcel) MutateRewardParcelProbability(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *SchoolDungeonRewardExcel) IsDisplayed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SchoolDungeonRewardExcel) MutateIsDisplayed(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func SchoolDungeonRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func SchoolDungeonRewardExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(0, groupId, 0)
}
func SchoolDungeonRewardExcelAddDungeonType(builder *flatbuffers.Builder, dungeonType SchoolDungeonType) {
	builder.PrependInt32Slot(1, int32(dungeonType), 0)
}
func SchoolDungeonRewardExcelAddRewardTag(builder *flatbuffers.Builder, rewardTag RewardTag) {
	builder.PrependInt32Slot(2, int32(rewardTag), 0)
}
func SchoolDungeonRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType ParcelType) {
	builder.PrependInt32Slot(3, int32(rewardParcelType), 0)
}
func SchoolDungeonRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId int64) {
	builder.PrependInt64Slot(4, rewardParcelId, 0)
}
func SchoolDungeonRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount int64) {
	builder.PrependInt64Slot(5, rewardParcelAmount, 0)
}
func SchoolDungeonRewardExcelAddRewardParcelProbability(builder *flatbuffers.Builder, rewardParcelProbability int64) {
	builder.PrependInt64Slot(6, rewardParcelProbability, 0)
}
func SchoolDungeonRewardExcelAddIsDisplayed(builder *flatbuffers.Builder, isDisplayed bool) {
	builder.PrependBoolSlot(7, isDisplayed, false)
}
func SchoolDungeonRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
