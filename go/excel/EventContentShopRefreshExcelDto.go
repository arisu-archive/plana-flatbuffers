// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentShopRefreshExcelDto represents a FlatBuffers table
type EventContentShopRefreshExcelDto struct {
	fbsutils.FlatBuffer
	BuyReportEventName string           `json:"buy_report_event_name"`
	Prob               int32            `json:"prob"`
	RefreshGroup       int32            `json:"refresh_group"`
	CategoryType       ShopCategoryType `json:"category_type"`
	DisplayOrder       int64            `json:"display_order"`
	GoodsId            int64            `json:"goods_id"`
	IsLegacy           bool             `json:"is_legacy"`
	LocalizeEtcId      uint32           `json:"localize_etc_id"`
	Id                 int64            `json:"id"`
	EventContentId     int64            `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentShopRefreshExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentShopRefreshExcelStart(b)
	EventContentShopRefreshExcelAddBuyReportEventName(b, b.CreateString(fbsutils.Convert(t.BuyReportEventName, t.FlatBuffer.TableKey)))
	EventContentShopRefreshExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddRefreshGroup(b, fbsutils.Convert(t.RefreshGroup, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddCategoryType(b, fbsutils.Convert(t.CategoryType, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddGoodsId(b, fbsutils.Convert(t.GoodsId, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddIsLegacy(b, t.IsLegacy)
	EventContentShopRefreshExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EventContentShopRefreshExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return EventContentShopRefreshExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentShopRefreshExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentShopRefreshExcelDto) UnmarshalMessage(e *EventContentShopRefreshExcel) error {
	t.BuyReportEventName = fbsutils.Convert(string(e.BuyReportEventName()), t.FlatBuffer.TableKey)
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	t.RefreshGroup = fbsutils.Convert(e.RefreshGroup(), t.FlatBuffer.TableKey)
	t.CategoryType = ShopCategoryType(fbsutils.Convert(int32(e.CategoryType()), t.FlatBuffer.TableKey))
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.GoodsId = fbsutils.Convert(e.GoodsId(), t.FlatBuffer.TableKey)
	t.IsLegacy = e.IsLegacy()
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentShopRefreshExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentShopRefreshExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentShopRefreshExcelDto) FlatDataName() string {
	return "EventContentShopRefreshExcel"
}
