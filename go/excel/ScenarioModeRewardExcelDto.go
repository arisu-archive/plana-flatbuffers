// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioModeRewardExcelDto represents a FlatBuffers table
type ScenarioModeRewardExcelDto struct {
	fbsutils.FlatBuffer
	ScenarioModeRewardId int64      `json:"scenario_mode_reward_id"`
	RewardTag            RewardTag  `json:"reward_tag"`
	RewardProb           int32      `json:"reward_prob"`
	RewardParcelType     ParcelType `json:"reward_parcel_type"`
	RewardParcelId       int64      `json:"reward_parcel_id"`
	RewardParcelAmount   int32      `json:"reward_parcel_amount"`
	IsDisplayed          bool       `json:"is_displayed"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioModeRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ScenarioModeRewardExcelStart(b)
	ScenarioModeRewardExcelAddScenarioModeRewardId(b, fbsutils.Convert(t.ScenarioModeRewardId, t.FlatBuffer.TableKey))
	ScenarioModeRewardExcelAddRewardTag(b, fbsutils.Convert(t.RewardTag, t.FlatBuffer.TableKey))
	ScenarioModeRewardExcelAddRewardProb(b, fbsutils.Convert(t.RewardProb, t.FlatBuffer.TableKey))
	ScenarioModeRewardExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	ScenarioModeRewardExcelAddRewardParcelId(b, fbsutils.Convert(t.RewardParcelId, t.FlatBuffer.TableKey))
	ScenarioModeRewardExcelAddRewardParcelAmount(b, fbsutils.Convert(t.RewardParcelAmount, t.FlatBuffer.TableKey))
	ScenarioModeRewardExcelAddIsDisplayed(b, t.IsDisplayed)
	return ScenarioModeRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioModeRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioModeRewardExcelDto) UnmarshalMessage(e *ScenarioModeRewardExcel) error {
	t.ScenarioModeRewardId = fbsutils.Convert(e.ScenarioModeRewardId(), t.FlatBuffer.TableKey)
	t.RewardTag = RewardTag(fbsutils.Convert(int32(e.RewardTag()), t.FlatBuffer.TableKey))
	t.RewardProb = fbsutils.Convert(e.RewardProb(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	t.RewardParcelId = fbsutils.Convert(e.RewardParcelId(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = fbsutils.Convert(e.RewardParcelAmount(), t.FlatBuffer.TableKey)
	t.IsDisplayed = e.IsDisplayed()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioModeRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioModeRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioModeRewardExcelDto) FlatDataName() string {
	return "ScenarioModeRewardExcel"
}
