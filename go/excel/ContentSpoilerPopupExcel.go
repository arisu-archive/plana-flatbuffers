// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ContentSpoilerPopupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsContentSpoilerPopupExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentSpoilerPopupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ContentSpoilerPopupExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishContentSpoilerPopupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsContentSpoilerPopupExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentSpoilerPopupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ContentSpoilerPopupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedContentSpoilerPopupExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ContentSpoilerPopupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ContentSpoilerPopupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ContentSpoilerPopupExcel) ContentType() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ContentSpoilerPopupExcel) MutateContentType(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *ContentSpoilerPopupExcel) SpoilerPopupTitle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ContentSpoilerPopupExcel) SpoilerPopupDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ContentSpoilerPopupExcel) IsWarningPopUp() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ContentSpoilerPopupExcel) MutateIsWarningPopUp(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ContentSpoilerPopupExcel) ConditionScenarioModeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentSpoilerPopupExcel) MutateConditionScenarioModeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func ContentSpoilerPopupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ContentSpoilerPopupExcelAddContentType(builder *flatbuffers.Builder, contentType ContentType) {
	builder.PrependInt32Slot(0, int32(contentType), 0)
}
func ContentSpoilerPopupExcelAddSpoilerPopupTitle(builder *flatbuffers.Builder, spoilerPopupTitle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(spoilerPopupTitle), 0)
}
func ContentSpoilerPopupExcelAddSpoilerPopupDescription(builder *flatbuffers.Builder, spoilerPopupDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(spoilerPopupDescription), 0)
}
func ContentSpoilerPopupExcelAddIsWarningPopUp(builder *flatbuffers.Builder, isWarningPopUp bool) {
	builder.PrependBoolSlot(3, isWarningPopUp, false)
}
func ContentSpoilerPopupExcelAddConditionScenarioModeId(builder *flatbuffers.Builder, conditionScenarioModeId int64) {
	builder.PrependInt64Slot(4, conditionScenarioModeId, 0)
}
func ContentSpoilerPopupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
