// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameRhythmBgmExcelDto represents a FlatBuffers table
type MiniGameRhythmBgmExcelDto struct {
	fbsutils.FlatBuffer
	RhythmBgmId          int64  `json:"rhythm_bgm_id"`
	EventContentId       int64  `json:"event_content_id"`
	StageSelectImagePath string `json:"stage_select_image_path"`
	Bpm                  int64  `json:"bpm"`
	Bgm                  int64  `json:"bgm"`
	BgmNameText          string `json:"bgm_name_text"`
	BgmArtistText        string `json:"bgm_artist_text"`
	HasLyricist          bool   `json:"has_lyricist"`
	BgmComposerText      string `json:"bgm_composer_text"`
	BgmLength            int32  `json:"bgm_length"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameRhythmBgmExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_stage_select_image_path := b.CreateString(fbsutils.Convert(t.StageSelectImagePath, t.FlatBuffer.TableKey))
	__offset_bgm_name_text := b.CreateString(fbsutils.Convert(t.BgmNameText, t.FlatBuffer.TableKey))
	__offset_bgm_artist_text := b.CreateString(fbsutils.Convert(t.BgmArtistText, t.FlatBuffer.TableKey))
	__offset_bgm_composer_text := b.CreateString(fbsutils.Convert(t.BgmComposerText, t.FlatBuffer.TableKey))
	MiniGameRhythmBgmExcelStart(b)
	MiniGameRhythmBgmExcelAddRhythmBgmId(b, fbsutils.Convert(t.RhythmBgmId, t.FlatBuffer.TableKey))
	MiniGameRhythmBgmExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MiniGameRhythmBgmExcelAddStageSelectImagePath(b, __offset_stage_select_image_path)
	MiniGameRhythmBgmExcelAddBpm(b, fbsutils.Convert(t.Bpm, t.FlatBuffer.TableKey))
	MiniGameRhythmBgmExcelAddBgm(b, fbsutils.Convert(t.Bgm, t.FlatBuffer.TableKey))
	MiniGameRhythmBgmExcelAddBgmNameText(b, __offset_bgm_name_text)
	MiniGameRhythmBgmExcelAddBgmArtistText(b, __offset_bgm_artist_text)
	MiniGameRhythmBgmExcelAddHasLyricist(b, t.HasLyricist)
	MiniGameRhythmBgmExcelAddBgmComposerText(b, __offset_bgm_composer_text)
	MiniGameRhythmBgmExcelAddBgmLength(b, fbsutils.Convert(t.BgmLength, t.FlatBuffer.TableKey))
	return MiniGameRhythmBgmExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameRhythmBgmExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameRhythmBgmExcelDto) UnmarshalMessage(e *MiniGameRhythmBgmExcel) error {
	t.RhythmBgmId = fbsutils.Convert(e.RhythmBgmId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.StageSelectImagePath = fbsutils.Convert(string(e.StageSelectImagePath()), t.FlatBuffer.TableKey)
	t.Bpm = fbsutils.Convert(e.Bpm(), t.FlatBuffer.TableKey)
	t.Bgm = fbsutils.Convert(e.Bgm(), t.FlatBuffer.TableKey)
	t.BgmNameText = fbsutils.Convert(string(e.BgmNameText()), t.FlatBuffer.TableKey)
	t.BgmArtistText = fbsutils.Convert(string(e.BgmArtistText()), t.FlatBuffer.TableKey)
	t.HasLyricist = e.HasLyricist()
	t.BgmComposerText = fbsutils.Convert(string(e.BgmComposerText()), t.FlatBuffer.TableKey)
	t.BgmLength = fbsutils.Convert(e.BgmLength(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameRhythmBgmExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameRhythmBgmExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameRhythmBgmExcelDto) FlatDataName() string {
	return "MiniGameRhythmBgmExcel"
}
