// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterTranscendenceExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterTranscendenceExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterTranscendenceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterTranscendenceExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishCharacterTranscendenceExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCharacterTranscendenceExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterTranscendenceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterTranscendenceExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCharacterTranscendenceExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CharacterTranscendenceExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterTranscendenceExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterTranscendenceExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CharacterTranscendenceExcel) MaxFavorLevel(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MaxFavorLevelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateMaxFavorLevel(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CharacterTranscendenceExcel) StatBonusRateAttack(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) StatBonusRateAttackLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateStatBonusRateAttack(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CharacterTranscendenceExcel) StatBonusRateHp(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) StatBonusRateHpLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateStatBonusRateHp(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CharacterTranscendenceExcel) StatBonusRateHeal(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) StatBonusRateHealLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateStatBonusRateHeal(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CharacterTranscendenceExcel) RecipeId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) RecipeIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateRecipeId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CharacterTranscendenceExcel) SkillSlotA(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterTranscendenceExcel) SkillSlotALength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) SkillSlotB(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterTranscendenceExcel) SkillSlotBLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) SkillSlotC(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CharacterTranscendenceExcel) SkillSlotCLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MaxlevelStar(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MaxlevelStarLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterTranscendenceExcel) MutateMaxlevelStar(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func CharacterTranscendenceExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func CharacterTranscendenceExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(0, characterId, 0)
}
func CharacterTranscendenceExcelAddMaxFavorLevel(builder *flatbuffers.Builder, maxFavorLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(maxFavorLevel), 0)
}
func CharacterTranscendenceExcelStartMaxFavorLevelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterTranscendenceExcelAddStatBonusRateAttack(builder *flatbuffers.Builder, statBonusRateAttack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(statBonusRateAttack), 0)
}
func CharacterTranscendenceExcelStartStatBonusRateAttackVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterTranscendenceExcelAddStatBonusRateHp(builder *flatbuffers.Builder, statBonusRateHp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(statBonusRateHp), 0)
}
func CharacterTranscendenceExcelStartStatBonusRateHpVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterTranscendenceExcelAddStatBonusRateHeal(builder *flatbuffers.Builder, statBonusRateHeal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(statBonusRateHeal), 0)
}
func CharacterTranscendenceExcelStartStatBonusRateHealVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterTranscendenceExcelAddRecipeId(builder *flatbuffers.Builder, recipeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(recipeId), 0)
}
func CharacterTranscendenceExcelStartRecipeIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CharacterTranscendenceExcelAddSkillSlotA(builder *flatbuffers.Builder, skillSlotA flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(skillSlotA), 0)
}
func CharacterTranscendenceExcelStartSkillSlotAVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterTranscendenceExcelAddSkillSlotB(builder *flatbuffers.Builder, skillSlotB flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(skillSlotB), 0)
}
func CharacterTranscendenceExcelStartSkillSlotBVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterTranscendenceExcelAddSkillSlotC(builder *flatbuffers.Builder, skillSlotC flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(skillSlotC), 0)
}
func CharacterTranscendenceExcelStartSkillSlotCVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterTranscendenceExcelAddMaxlevelStar(builder *flatbuffers.Builder, maxlevelStar flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(maxlevelStar), 0)
}
func CharacterTranscendenceExcelStartMaxlevelStarVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterTranscendenceExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
