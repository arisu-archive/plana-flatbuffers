// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// VoiceTimelineExcelDto represents a FlatBuffers table
type VoiceTimelineExcelDto struct {
	fbsutils.FlatBuffer
	UniqueId    int64     `json:"unique_id"`
	Id          uint32    `json:"id"`
	Nation      []Nation  `json:"nation"`
	Path        []string  `json:"path"`
	SoundVolume []float32 `json:"sound_volume"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *VoiceTimelineExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	var __offset_path flatbuffers.UOffsetT
	__stringOffsets_path := make([]flatbuffers.UOffsetT, len(t.Path))
	for i := range len(t.Path) {
		__stringOffsets_path[i] = b.CreateString(fbsutils.Convert(t.Path[i], t.FlatBuffer.TableKey))
	}
	VoiceTimelineExcelStartPathVector(b, len(t.Path))
	for i := range len(t.Path) {
		b.PrependUOffsetT(__stringOffsets_path[len(t.Path)-i-1])
	}
	__offset_path = b.EndVector(len(t.Path))
	VoiceTimelineExcelStart(b)
	VoiceTimelineExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	VoiceTimelineExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	VoiceTimelineExcelStartNationVector(b, len(t.Nation))
	for i := range len(t.Nation) {
		b.PrependInt32(fbsutils.Convert(int32(t.Nation[len(t.Nation)-i-1]), t.FlatBuffer.TableKey))
	}
	VoiceTimelineExcelAddNation(b, b.EndVector(len(t.Nation)))
	VoiceTimelineExcelAddPath(b, __offset_path)
	VoiceTimelineExcelStartSoundVolumeVector(b, len(t.SoundVolume))
	for i := range len(t.SoundVolume) {
		b.PrependFloat32(fbsutils.Convert(t.SoundVolume[len(t.SoundVolume)-i-1], t.FlatBuffer.TableKey))
	}
	VoiceTimelineExcelAddSoundVolume(b, b.EndVector(len(t.SoundVolume)))
	return VoiceTimelineExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *VoiceTimelineExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *VoiceTimelineExcelDto) UnmarshalMessage(e *VoiceTimelineExcel) error {
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Nation = make([]Nation, e.NationLength())
	for i := range e.NationLength() {
		t.Nation[i] = Nation(fbsutils.Convert(int32(e.Nation(i)), t.FlatBuffer.TableKey))
	}
	t.Path = make([]string, e.PathLength())
	for i := range e.PathLength() {
		t.Path[i] = fbsutils.Convert(string(e.Path(i)), t.FlatBuffer.TableKey)
	}
	t.SoundVolume = make([]float32, e.SoundVolumeLength())
	for i := range e.SoundVolumeLength() {
		t.SoundVolume[i] = fbsutils.Convert(e.SoundVolume(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *VoiceTimelineExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsVoiceTimelineExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (VoiceTimelineExcelDto) FlatDataName() string {
	return "VoiceTimelineExcel"
}
