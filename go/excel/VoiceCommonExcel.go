// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VoiceCommonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsVoiceCommonExcel(buf []byte, offset flatbuffers.UOffsetT) *VoiceCommonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VoiceCommonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVoiceCommonExcel(buf []byte, offset flatbuffers.UOffsetT) *VoiceCommonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VoiceCommonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *VoiceCommonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VoiceCommonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VoiceCommonExcel) VoiceHash(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *VoiceCommonExcel) VoiceHashLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VoiceCommonExcel) MutateVoiceHash(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *VoiceCommonExcel) Rate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VoiceCommonExcel) MutateRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *VoiceCommonExcel) VoiceEvent() VoiceEvent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return VoiceEvent(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VoiceCommonExcel) MutateVoiceEvent(n VoiceEvent) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func VoiceCommonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func VoiceCommonExcelAddVoiceHash(builder *flatbuffers.Builder, voiceHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(voiceHash), 0)
}
func VoiceCommonExcelStartVoiceHashVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func VoiceCommonExcelAddRate(builder *flatbuffers.Builder, rate int64) {
	builder.PrependInt64Slot(1, rate, 0)
}
func VoiceCommonExcelAddVoiceEvent(builder *flatbuffers.Builder, voiceEvent VoiceEvent) {
	builder.PrependInt32Slot(2, int32(voiceEvent), 0)
}
func VoiceCommonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
