// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentConcentrationRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentConcentrationRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentConcentrationRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentConcentrationRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentConcentrationRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentConcentrationRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentConcentrationRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentConcentrationRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentConcentrationRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentConcentrationRewardExcel) ConcentrationRewardType() ConcentrationRewardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ConcentrationRewardType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateConcentrationRewardType(n ConcentrationRewardType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *EventContentConcentrationRewardExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentConcentrationRewardExcel) IsLoop() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentConcentrationRewardExcel) MutateIsLoop(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *EventContentConcentrationRewardExcel) LocalizePrefabId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentConcentrationRewardExcel) Rarity() Rarity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return Rarity(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateRarity(n Rarity) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *EventContentConcentrationRewardExcel) RewardParcelAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) RewardParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateRewardParcelAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *EventContentConcentrationRewardExcel) RewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) RewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentConcentrationRewardExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentConcentrationRewardExcel) Round() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *EventContentConcentrationRewardExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentConcentrationRewardExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func EventContentConcentrationRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func EventContentConcentrationRewardExcelAddConcentrationRewardType(builder *flatbuffers.Builder, concentrationRewardType ConcentrationRewardType) {
	builder.PrependInt32Slot(0, int32(concentrationRewardType), 0)
}
func EventContentConcentrationRewardExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(1, eventContentId, 0)
}
func EventContentConcentrationRewardExcelAddIsLoop(builder *flatbuffers.Builder, isLoop bool) {
	builder.PrependBoolSlot(2, isLoop, false)
}
func EventContentConcentrationRewardExcelAddLocalizePrefabId(builder *flatbuffers.Builder, localizePrefabId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(localizePrefabId), 0)
}
func EventContentConcentrationRewardExcelAddRarity(builder *flatbuffers.Builder, rarity Rarity) {
	builder.PrependInt32Slot(4, int32(rarity), 0)
}
func EventContentConcentrationRewardExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rewardParcelAmount), 0)
}
func EventContentConcentrationRewardExcelStartRewardParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentConcentrationRewardExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(rewardParcelId), 0)
}
func EventContentConcentrationRewardExcelStartRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentConcentrationRewardExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func EventContentConcentrationRewardExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentConcentrationRewardExcelAddRound(builder *flatbuffers.Builder, round int32) {
	builder.PrependInt32Slot(8, round, 0)
}
func EventContentConcentrationRewardExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(9, uniqueId, 0)
}
func EventContentConcentrationRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
