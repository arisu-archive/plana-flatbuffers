// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EchelonConstraintExcelDto represents a FlatBuffers table
type EchelonConstraintExcelDto struct {
	fbsutils.FlatBuffer
	Role          TacticRole `json:"role"`
	Club          Club       `json:"club"`
	School        School     `json:"school"`
	WeaponType    WeaponType `json:"weapon_type"`
	PersonalityId []int64    `json:"personality_id"`
	CharacterId   []int64    `json:"character_id"`
	IsWhiteList   bool       `json:"is_white_list"`
	GroupId       int64      `json:"group_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EchelonConstraintExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EchelonConstraintExcelStart(b)
	EchelonConstraintExcelAddRole(b, fbsutils.Convert(t.Role, t.FlatBuffer.TableKey))
	EchelonConstraintExcelAddClub(b, fbsutils.Convert(t.Club, t.FlatBuffer.TableKey))
	EchelonConstraintExcelAddSchool(b, fbsutils.Convert(t.School, t.FlatBuffer.TableKey))
	EchelonConstraintExcelAddWeaponType(b, fbsutils.Convert(t.WeaponType, t.FlatBuffer.TableKey))
	EchelonConstraintExcelStartPersonalityIdVector(b, len(t.PersonalityId))
	for i := range len(t.PersonalityId) {
		b.PrependInt64(fbsutils.Convert(t.PersonalityId[len(t.PersonalityId)-i-1], t.FlatBuffer.TableKey))
	}
	EchelonConstraintExcelAddPersonalityId(b, b.EndVector(len(t.PersonalityId)))
	EchelonConstraintExcelStartCharacterIdVector(b, len(t.CharacterId))
	for i := range len(t.CharacterId) {
		b.PrependInt64(fbsutils.Convert(t.CharacterId[len(t.CharacterId)-i-1], t.FlatBuffer.TableKey))
	}
	EchelonConstraintExcelAddCharacterId(b, b.EndVector(len(t.CharacterId)))
	EchelonConstraintExcelAddIsWhiteList(b, t.IsWhiteList)
	EchelonConstraintExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	return EchelonConstraintExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EchelonConstraintExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EchelonConstraintExcelDto) UnmarshalMessage(e *EchelonConstraintExcel) error {
	t.Role = TacticRole(fbsutils.Convert(int32(e.Role()), t.FlatBuffer.TableKey))
	t.Club = Club(fbsutils.Convert(int32(e.Club()), t.FlatBuffer.TableKey))
	t.School = School(fbsutils.Convert(int32(e.School()), t.FlatBuffer.TableKey))
	t.WeaponType = WeaponType(fbsutils.Convert(int32(e.WeaponType()), t.FlatBuffer.TableKey))
	t.PersonalityId = make([]int64, e.PersonalityIdLength())
	for i := range e.PersonalityIdLength() {
		t.PersonalityId[i] = fbsutils.Convert(e.PersonalityId(i), t.FlatBuffer.TableKey)
	}
	t.CharacterId = make([]int64, e.CharacterIdLength())
	for i := range e.CharacterIdLength() {
		t.CharacterId[i] = fbsutils.Convert(e.CharacterId(i), t.FlatBuffer.TableKey)
	}
	t.IsWhiteList = e.IsWhiteList()
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EchelonConstraintExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEchelonConstraintExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EchelonConstraintExcelDto) FlatDataName() string {
	return "EchelonConstraintExcel"
}
