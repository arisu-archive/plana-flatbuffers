// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecipeSelectionGroupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsRecipeSelectionGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *RecipeSelectionGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecipeSelectionGroupExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRecipeSelectionGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *RecipeSelectionGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RecipeSelectionGroupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RecipeSelectionGroupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecipeSelectionGroupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecipeSelectionGroupExcel) ParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionGroupExcel) MutateParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RecipeSelectionGroupExcel) ParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RecipeSelectionGroupExcel) MutateParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *RecipeSelectionGroupExcel) RecipeSelectionGroupComponentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionGroupExcel) MutateRecipeSelectionGroupComponentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *RecipeSelectionGroupExcel) RecipeSelectionGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionGroupExcel) MutateRecipeSelectionGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *RecipeSelectionGroupExcel) ResultAmountMax() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionGroupExcel) MutateResultAmountMax(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *RecipeSelectionGroupExcel) ResultAmountMin() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecipeSelectionGroupExcel) MutateResultAmountMin(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func RecipeSelectionGroupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func RecipeSelectionGroupExcelAddParcelId(builder *flatbuffers.Builder, parcelId int64) {
	builder.PrependInt64Slot(0, parcelId, 0)
}
func RecipeSelectionGroupExcelAddParcelType(builder *flatbuffers.Builder, parcelType ParcelType) {
	builder.PrependInt32Slot(1, int32(parcelType), 0)
}
func RecipeSelectionGroupExcelAddRecipeSelectionGroupComponentId(builder *flatbuffers.Builder, recipeSelectionGroupComponentId int64) {
	builder.PrependInt64Slot(2, recipeSelectionGroupComponentId, 0)
}
func RecipeSelectionGroupExcelAddRecipeSelectionGroupId(builder *flatbuffers.Builder, recipeSelectionGroupId int64) {
	builder.PrependInt64Slot(3, recipeSelectionGroupId, 0)
}
func RecipeSelectionGroupExcelAddResultAmountMax(builder *flatbuffers.Builder, resultAmountMax int64) {
	builder.PrependInt64Slot(4, resultAmountMax, 0)
}
func RecipeSelectionGroupExcelAddResultAmountMin(builder *flatbuffers.Builder, resultAmountMin int64) {
	builder.PrependInt64Slot(5, resultAmountMin, 0)
}
func RecipeSelectionGroupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
