// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterStatExcelDto represents a FlatBuffers table
type CharacterStatExcelDto struct {
	fbsutils.FlatBuffer
	CharacterId                 int64                 `json:"character_id"`
	StabilityRate               int64                 `json:"stability_rate"`
	StabilityPoint              int64                 `json:"stability_point"`
	AttackPower1                int64                 `json:"attack_power1"`
	AttackPower100              int64                 `json:"attack_power100"`
	MaxHp1                      int64                 `json:"max_hp1"`
	MaxHp100                    int64                 `json:"max_hp100"`
	DefensePower1               int64                 `json:"defense_power1"`
	DefensePower100             int64                 `json:"defense_power100"`
	HealPower1                  int64                 `json:"heal_power1"`
	HealPower100                int64                 `json:"heal_power100"`
	DodgePoint                  int64                 `json:"dodge_point"`
	AccuracyPoint               int64                 `json:"accuracy_point"`
	CriticalPoint               int64                 `json:"critical_point"`
	CriticalResistPoint         int64                 `json:"critical_resist_point"`
	CriticalDamageRate          int64                 `json:"critical_damage_rate"`
	CriticalDamageResistRate    int64                 `json:"critical_damage_resist_rate"`
	BlockRate                   int64                 `json:"block_rate"`
	HealEffectivenessRate       int64                 `json:"heal_effectiveness_rate"`
	OppressionPower             int64                 `json:"oppression_power"`
	OppressionResist            int64                 `json:"oppression_resist"`
	DefensePenetration1         int64                 `json:"defense_penetration1"`
	DefensePenetration100       int64                 `json:"defense_penetration100"`
	DefensePenetrationResist1   int64                 `json:"defense_penetration_resist1"`
	DefensePenetrationResist100 int64                 `json:"defense_penetration_resist100"`
	EnhanceExplosionRate        int64                 `json:"enhance_explosion_rate"`
	EnhancePierceRate           int64                 `json:"enhance_pierce_rate"`
	EnhanceMysticRate           int64                 `json:"enhance_mystic_rate"`
	EnhanceSonicRate            int64                 `json:"enhance_sonic_rate"`
	EnhanceSiegeRate            int64                 `json:"enhance_siege_rate"`
	EnhanceNormalRate           int64                 `json:"enhance_normal_rate"`
	EnhanceLightArmorRate       int64                 `json:"enhance_light_armor_rate"`
	EnhanceHeavyArmorRate       int64                 `json:"enhance_heavy_armor_rate"`
	EnhanceUnarmedRate          int64                 `json:"enhance_unarmed_rate"`
	EnhanceElasticArmorRate     int64                 `json:"enhance_elastic_armor_rate"`
	EnhanceStructureRate        int64                 `json:"enhance_structure_rate"`
	EnhanceNormalArmorRate      int64                 `json:"enhance_normal_armor_rate"`
	ExtendBuffDuration          int64                 `json:"extend_buff_duration"`
	ExtendDebuffDuration        int64                 `json:"extend_debuff_duration"`
	ExtendCrowdControlDuration  int64                 `json:"extend_crowd_control_duration"`
	AmmoCount                   int64                 `json:"ammo_count"`
	AmmoCost                    int64                 `json:"ammo_cost"`
	IgnoreDelayCount            int64                 `json:"ignore_delay_count"`
	NormalAttackSpeed           int64                 `json:"normal_attack_speed"`
	Range                       int64                 `json:"range"`
	InitialRangeRate            int64                 `json:"initial_range_rate"`
	MoveSpeed                   int64                 `json:"move_speed"`
	SightPoint                  int64                 `json:"sight_point"`
	ActiveGauge                 int64                 `json:"active_gauge"`
	GroggyGauge                 int32                 `json:"groggy_gauge"`
	GroggyTime                  int32                 `json:"groggy_time"`
	StrategyMobility            int64                 `json:"strategy_mobility"`
	ActionCount                 int64                 `json:"action_count"`
	StrategySightRange          int64                 `json:"strategy_sight_range"`
	DamageRatio                 int64                 `json:"damage_ratio"`
	DamagedRatio                int64                 `json:"damaged_ratio"`
	DamageRatio2Increase        int64                 `json:"damage_ratio2_increase"`
	DamageRatio2Decrease        int64                 `json:"damage_ratio2_decrease"`
	DamagedRatio2Increase       int64                 `json:"damaged_ratio2_increase"`
	DamagedRatio2Decrease       int64                 `json:"damaged_ratio2_decrease"`
	ExDamagedRatioIncrease      int64                 `json:"ex_damaged_ratio_increase"`
	ExDamagedRatioDecrease      int64                 `json:"ex_damaged_ratio_decrease"`
	EnhanceExDamageRate         int64                 `json:"enhance_ex_damage_rate"`
	ReduceExDamagedRate         int64                 `json:"reduce_ex_damaged_rate"`
	EnhanceBasicsDamageRate     int64                 `json:"enhance_basics_damage_rate"`
	ReduceBasicsDamagedRate     int64                 `json:"reduce_basics_damaged_rate"`
	HealRate                    int64                 `json:"heal_rate"`
	HealLightArmorRate          int64                 `json:"heal_light_armor_rate"`
	HealHeavyArmorRate          int64                 `json:"heal_heavy_armor_rate"`
	HealUnarmedRate             int64                 `json:"heal_unarmed_rate"`
	HealElasticArmorRate        int64                 `json:"heal_elastic_armor_rate"`
	HealNormalArmorRate         int64                 `json:"heal_normal_armor_rate"`
	HealedExplosionRate         int64                 `json:"healed_explosion_rate"`
	HealedPierceRate            int64                 `json:"healed_pierce_rate"`
	HealedMysticRate            int64                 `json:"healed_mystic_rate"`
	HealedSonicRate             int64                 `json:"healed_sonic_rate"`
	HealedNormalRate            int64                 `json:"healed_normal_rate"`
	StreetBattleAdaptation      TerrainAdaptationStat `json:"street_battle_adaptation"`
	OutdoorBattleAdaptation     TerrainAdaptationStat `json:"outdoor_battle_adaptation"`
	IndoorBattleAdaptation      TerrainAdaptationStat `json:"indoor_battle_adaptation"`
	RegenCost                   int64                 `json:"regen_cost"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterStatExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterStatExcelStart(b)
	CharacterStatExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	CharacterStatExcelAddStabilityRate(b, fbsutils.Convert(t.StabilityRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddStabilityPoint(b, fbsutils.Convert(t.StabilityPoint, t.FlatBuffer.TableKey))
	CharacterStatExcelAddAttackPower1(b, fbsutils.Convert(t.AttackPower1, t.FlatBuffer.TableKey))
	CharacterStatExcelAddAttackPower100(b, fbsutils.Convert(t.AttackPower100, t.FlatBuffer.TableKey))
	CharacterStatExcelAddMaxHp1(b, fbsutils.Convert(t.MaxHp1, t.FlatBuffer.TableKey))
	CharacterStatExcelAddMaxHp100(b, fbsutils.Convert(t.MaxHp100, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDefensePower1(b, fbsutils.Convert(t.DefensePower1, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDefensePower100(b, fbsutils.Convert(t.DefensePower100, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealPower1(b, fbsutils.Convert(t.HealPower1, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealPower100(b, fbsutils.Convert(t.HealPower100, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDodgePoint(b, fbsutils.Convert(t.DodgePoint, t.FlatBuffer.TableKey))
	CharacterStatExcelAddAccuracyPoint(b, fbsutils.Convert(t.AccuracyPoint, t.FlatBuffer.TableKey))
	CharacterStatExcelAddCriticalPoint(b, fbsutils.Convert(t.CriticalPoint, t.FlatBuffer.TableKey))
	CharacterStatExcelAddCriticalResistPoint(b, fbsutils.Convert(t.CriticalResistPoint, t.FlatBuffer.TableKey))
	CharacterStatExcelAddCriticalDamageRate(b, fbsutils.Convert(t.CriticalDamageRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddCriticalDamageResistRate(b, fbsutils.Convert(t.CriticalDamageResistRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddBlockRate(b, fbsutils.Convert(t.BlockRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealEffectivenessRate(b, fbsutils.Convert(t.HealEffectivenessRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddOppressionPower(b, fbsutils.Convert(t.OppressionPower, t.FlatBuffer.TableKey))
	CharacterStatExcelAddOppressionResist(b, fbsutils.Convert(t.OppressionResist, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDefensePenetration1(b, fbsutils.Convert(t.DefensePenetration1, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDefensePenetration100(b, fbsutils.Convert(t.DefensePenetration100, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDefensePenetrationResist1(b, fbsutils.Convert(t.DefensePenetrationResist1, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDefensePenetrationResist100(b, fbsutils.Convert(t.DefensePenetrationResist100, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceExplosionRate(b, fbsutils.Convert(t.EnhanceExplosionRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhancePierceRate(b, fbsutils.Convert(t.EnhancePierceRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceMysticRate(b, fbsutils.Convert(t.EnhanceMysticRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceSonicRate(b, fbsutils.Convert(t.EnhanceSonicRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceSiegeRate(b, fbsutils.Convert(t.EnhanceSiegeRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceNormalRate(b, fbsutils.Convert(t.EnhanceNormalRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceLightArmorRate(b, fbsutils.Convert(t.EnhanceLightArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceHeavyArmorRate(b, fbsutils.Convert(t.EnhanceHeavyArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceUnarmedRate(b, fbsutils.Convert(t.EnhanceUnarmedRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceElasticArmorRate(b, fbsutils.Convert(t.EnhanceElasticArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceStructureRate(b, fbsutils.Convert(t.EnhanceStructureRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceNormalArmorRate(b, fbsutils.Convert(t.EnhanceNormalArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddExtendBuffDuration(b, fbsutils.Convert(t.ExtendBuffDuration, t.FlatBuffer.TableKey))
	CharacterStatExcelAddExtendDebuffDuration(b, fbsutils.Convert(t.ExtendDebuffDuration, t.FlatBuffer.TableKey))
	CharacterStatExcelAddExtendCrowdControlDuration(b, fbsutils.Convert(t.ExtendCrowdControlDuration, t.FlatBuffer.TableKey))
	CharacterStatExcelAddAmmoCount(b, fbsutils.Convert(t.AmmoCount, t.FlatBuffer.TableKey))
	CharacterStatExcelAddAmmoCost(b, fbsutils.Convert(t.AmmoCost, t.FlatBuffer.TableKey))
	CharacterStatExcelAddIgnoreDelayCount(b, fbsutils.Convert(t.IgnoreDelayCount, t.FlatBuffer.TableKey))
	CharacterStatExcelAddNormalAttackSpeed(b, fbsutils.Convert(t.NormalAttackSpeed, t.FlatBuffer.TableKey))
	CharacterStatExcelAddRange(b, fbsutils.Convert(t.Range, t.FlatBuffer.TableKey))
	CharacterStatExcelAddInitialRangeRate(b, fbsutils.Convert(t.InitialRangeRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddMoveSpeed(b, fbsutils.Convert(t.MoveSpeed, t.FlatBuffer.TableKey))
	CharacterStatExcelAddSightPoint(b, fbsutils.Convert(t.SightPoint, t.FlatBuffer.TableKey))
	CharacterStatExcelAddActiveGauge(b, fbsutils.Convert(t.ActiveGauge, t.FlatBuffer.TableKey))
	CharacterStatExcelAddGroggyGauge(b, fbsutils.Convert(t.GroggyGauge, t.FlatBuffer.TableKey))
	CharacterStatExcelAddGroggyTime(b, fbsutils.Convert(t.GroggyTime, t.FlatBuffer.TableKey))
	CharacterStatExcelAddStrategyMobility(b, fbsutils.Convert(t.StrategyMobility, t.FlatBuffer.TableKey))
	CharacterStatExcelAddActionCount(b, fbsutils.Convert(t.ActionCount, t.FlatBuffer.TableKey))
	CharacterStatExcelAddStrategySightRange(b, fbsutils.Convert(t.StrategySightRange, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDamageRatio(b, fbsutils.Convert(t.DamageRatio, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDamagedRatio(b, fbsutils.Convert(t.DamagedRatio, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDamageRatio2Increase(b, fbsutils.Convert(t.DamageRatio2Increase, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDamageRatio2Decrease(b, fbsutils.Convert(t.DamageRatio2Decrease, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDamagedRatio2Increase(b, fbsutils.Convert(t.DamagedRatio2Increase, t.FlatBuffer.TableKey))
	CharacterStatExcelAddDamagedRatio2Decrease(b, fbsutils.Convert(t.DamagedRatio2Decrease, t.FlatBuffer.TableKey))
	CharacterStatExcelAddExDamagedRatioIncrease(b, fbsutils.Convert(t.ExDamagedRatioIncrease, t.FlatBuffer.TableKey))
	CharacterStatExcelAddExDamagedRatioDecrease(b, fbsutils.Convert(t.ExDamagedRatioDecrease, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceExDamageRate(b, fbsutils.Convert(t.EnhanceExDamageRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddReduceExDamagedRate(b, fbsutils.Convert(t.ReduceExDamagedRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddEnhanceBasicsDamageRate(b, fbsutils.Convert(t.EnhanceBasicsDamageRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddReduceBasicsDamagedRate(b, fbsutils.Convert(t.ReduceBasicsDamagedRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealRate(b, fbsutils.Convert(t.HealRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealLightArmorRate(b, fbsutils.Convert(t.HealLightArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealHeavyArmorRate(b, fbsutils.Convert(t.HealHeavyArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealUnarmedRate(b, fbsutils.Convert(t.HealUnarmedRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealElasticArmorRate(b, fbsutils.Convert(t.HealElasticArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealNormalArmorRate(b, fbsutils.Convert(t.HealNormalArmorRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealedExplosionRate(b, fbsutils.Convert(t.HealedExplosionRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealedPierceRate(b, fbsutils.Convert(t.HealedPierceRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealedMysticRate(b, fbsutils.Convert(t.HealedMysticRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealedSonicRate(b, fbsutils.Convert(t.HealedSonicRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddHealedNormalRate(b, fbsutils.Convert(t.HealedNormalRate, t.FlatBuffer.TableKey))
	CharacterStatExcelAddStreetBattleAdaptation(b, fbsutils.Convert(t.StreetBattleAdaptation, t.FlatBuffer.TableKey))
	CharacterStatExcelAddOutdoorBattleAdaptation(b, fbsutils.Convert(t.OutdoorBattleAdaptation, t.FlatBuffer.TableKey))
	CharacterStatExcelAddIndoorBattleAdaptation(b, fbsutils.Convert(t.IndoorBattleAdaptation, t.FlatBuffer.TableKey))
	CharacterStatExcelAddRegenCost(b, fbsutils.Convert(t.RegenCost, t.FlatBuffer.TableKey))
	return CharacterStatExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterStatExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatExcelDto) UnmarshalMessage(e *CharacterStatExcel) error {
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.StabilityRate = fbsutils.Convert(e.StabilityRate(), t.FlatBuffer.TableKey)
	t.StabilityPoint = fbsutils.Convert(e.StabilityPoint(), t.FlatBuffer.TableKey)
	t.AttackPower1 = fbsutils.Convert(e.AttackPower1(), t.FlatBuffer.TableKey)
	t.AttackPower100 = fbsutils.Convert(e.AttackPower100(), t.FlatBuffer.TableKey)
	t.MaxHp1 = fbsutils.Convert(e.MaxHp1(), t.FlatBuffer.TableKey)
	t.MaxHp100 = fbsutils.Convert(e.MaxHp100(), t.FlatBuffer.TableKey)
	t.DefensePower1 = fbsutils.Convert(e.DefensePower1(), t.FlatBuffer.TableKey)
	t.DefensePower100 = fbsutils.Convert(e.DefensePower100(), t.FlatBuffer.TableKey)
	t.HealPower1 = fbsutils.Convert(e.HealPower1(), t.FlatBuffer.TableKey)
	t.HealPower100 = fbsutils.Convert(e.HealPower100(), t.FlatBuffer.TableKey)
	t.DodgePoint = fbsutils.Convert(e.DodgePoint(), t.FlatBuffer.TableKey)
	t.AccuracyPoint = fbsutils.Convert(e.AccuracyPoint(), t.FlatBuffer.TableKey)
	t.CriticalPoint = fbsutils.Convert(e.CriticalPoint(), t.FlatBuffer.TableKey)
	t.CriticalResistPoint = fbsutils.Convert(e.CriticalResistPoint(), t.FlatBuffer.TableKey)
	t.CriticalDamageRate = fbsutils.Convert(e.CriticalDamageRate(), t.FlatBuffer.TableKey)
	t.CriticalDamageResistRate = fbsutils.Convert(e.CriticalDamageResistRate(), t.FlatBuffer.TableKey)
	t.BlockRate = fbsutils.Convert(e.BlockRate(), t.FlatBuffer.TableKey)
	t.HealEffectivenessRate = fbsutils.Convert(e.HealEffectivenessRate(), t.FlatBuffer.TableKey)
	t.OppressionPower = fbsutils.Convert(e.OppressionPower(), t.FlatBuffer.TableKey)
	t.OppressionResist = fbsutils.Convert(e.OppressionResist(), t.FlatBuffer.TableKey)
	t.DefensePenetration1 = fbsutils.Convert(e.DefensePenetration1(), t.FlatBuffer.TableKey)
	t.DefensePenetration100 = fbsutils.Convert(e.DefensePenetration100(), t.FlatBuffer.TableKey)
	t.DefensePenetrationResist1 = fbsutils.Convert(e.DefensePenetrationResist1(), t.FlatBuffer.TableKey)
	t.DefensePenetrationResist100 = fbsutils.Convert(e.DefensePenetrationResist100(), t.FlatBuffer.TableKey)
	t.EnhanceExplosionRate = fbsutils.Convert(e.EnhanceExplosionRate(), t.FlatBuffer.TableKey)
	t.EnhancePierceRate = fbsutils.Convert(e.EnhancePierceRate(), t.FlatBuffer.TableKey)
	t.EnhanceMysticRate = fbsutils.Convert(e.EnhanceMysticRate(), t.FlatBuffer.TableKey)
	t.EnhanceSonicRate = fbsutils.Convert(e.EnhanceSonicRate(), t.FlatBuffer.TableKey)
	t.EnhanceSiegeRate = fbsutils.Convert(e.EnhanceSiegeRate(), t.FlatBuffer.TableKey)
	t.EnhanceNormalRate = fbsutils.Convert(e.EnhanceNormalRate(), t.FlatBuffer.TableKey)
	t.EnhanceLightArmorRate = fbsutils.Convert(e.EnhanceLightArmorRate(), t.FlatBuffer.TableKey)
	t.EnhanceHeavyArmorRate = fbsutils.Convert(e.EnhanceHeavyArmorRate(), t.FlatBuffer.TableKey)
	t.EnhanceUnarmedRate = fbsutils.Convert(e.EnhanceUnarmedRate(), t.FlatBuffer.TableKey)
	t.EnhanceElasticArmorRate = fbsutils.Convert(e.EnhanceElasticArmorRate(), t.FlatBuffer.TableKey)
	t.EnhanceStructureRate = fbsutils.Convert(e.EnhanceStructureRate(), t.FlatBuffer.TableKey)
	t.EnhanceNormalArmorRate = fbsutils.Convert(e.EnhanceNormalArmorRate(), t.FlatBuffer.TableKey)
	t.ExtendBuffDuration = fbsutils.Convert(e.ExtendBuffDuration(), t.FlatBuffer.TableKey)
	t.ExtendDebuffDuration = fbsutils.Convert(e.ExtendDebuffDuration(), t.FlatBuffer.TableKey)
	t.ExtendCrowdControlDuration = fbsutils.Convert(e.ExtendCrowdControlDuration(), t.FlatBuffer.TableKey)
	t.AmmoCount = fbsutils.Convert(e.AmmoCount(), t.FlatBuffer.TableKey)
	t.AmmoCost = fbsutils.Convert(e.AmmoCost(), t.FlatBuffer.TableKey)
	t.IgnoreDelayCount = fbsutils.Convert(e.IgnoreDelayCount(), t.FlatBuffer.TableKey)
	t.NormalAttackSpeed = fbsutils.Convert(e.NormalAttackSpeed(), t.FlatBuffer.TableKey)
	t.Range = fbsutils.Convert(e.Range(), t.FlatBuffer.TableKey)
	t.InitialRangeRate = fbsutils.Convert(e.InitialRangeRate(), t.FlatBuffer.TableKey)
	t.MoveSpeed = fbsutils.Convert(e.MoveSpeed(), t.FlatBuffer.TableKey)
	t.SightPoint = fbsutils.Convert(e.SightPoint(), t.FlatBuffer.TableKey)
	t.ActiveGauge = fbsutils.Convert(e.ActiveGauge(), t.FlatBuffer.TableKey)
	t.GroggyGauge = fbsutils.Convert(e.GroggyGauge(), t.FlatBuffer.TableKey)
	t.GroggyTime = fbsutils.Convert(e.GroggyTime(), t.FlatBuffer.TableKey)
	t.StrategyMobility = fbsutils.Convert(e.StrategyMobility(), t.FlatBuffer.TableKey)
	t.ActionCount = fbsutils.Convert(e.ActionCount(), t.FlatBuffer.TableKey)
	t.StrategySightRange = fbsutils.Convert(e.StrategySightRange(), t.FlatBuffer.TableKey)
	t.DamageRatio = fbsutils.Convert(e.DamageRatio(), t.FlatBuffer.TableKey)
	t.DamagedRatio = fbsutils.Convert(e.DamagedRatio(), t.FlatBuffer.TableKey)
	t.DamageRatio2Increase = fbsutils.Convert(e.DamageRatio2Increase(), t.FlatBuffer.TableKey)
	t.DamageRatio2Decrease = fbsutils.Convert(e.DamageRatio2Decrease(), t.FlatBuffer.TableKey)
	t.DamagedRatio2Increase = fbsutils.Convert(e.DamagedRatio2Increase(), t.FlatBuffer.TableKey)
	t.DamagedRatio2Decrease = fbsutils.Convert(e.DamagedRatio2Decrease(), t.FlatBuffer.TableKey)
	t.ExDamagedRatioIncrease = fbsutils.Convert(e.ExDamagedRatioIncrease(), t.FlatBuffer.TableKey)
	t.ExDamagedRatioDecrease = fbsutils.Convert(e.ExDamagedRatioDecrease(), t.FlatBuffer.TableKey)
	t.EnhanceExDamageRate = fbsutils.Convert(e.EnhanceExDamageRate(), t.FlatBuffer.TableKey)
	t.ReduceExDamagedRate = fbsutils.Convert(e.ReduceExDamagedRate(), t.FlatBuffer.TableKey)
	t.EnhanceBasicsDamageRate = fbsutils.Convert(e.EnhanceBasicsDamageRate(), t.FlatBuffer.TableKey)
	t.ReduceBasicsDamagedRate = fbsutils.Convert(e.ReduceBasicsDamagedRate(), t.FlatBuffer.TableKey)
	t.HealRate = fbsutils.Convert(e.HealRate(), t.FlatBuffer.TableKey)
	t.HealLightArmorRate = fbsutils.Convert(e.HealLightArmorRate(), t.FlatBuffer.TableKey)
	t.HealHeavyArmorRate = fbsutils.Convert(e.HealHeavyArmorRate(), t.FlatBuffer.TableKey)
	t.HealUnarmedRate = fbsutils.Convert(e.HealUnarmedRate(), t.FlatBuffer.TableKey)
	t.HealElasticArmorRate = fbsutils.Convert(e.HealElasticArmorRate(), t.FlatBuffer.TableKey)
	t.HealNormalArmorRate = fbsutils.Convert(e.HealNormalArmorRate(), t.FlatBuffer.TableKey)
	t.HealedExplosionRate = fbsutils.Convert(e.HealedExplosionRate(), t.FlatBuffer.TableKey)
	t.HealedPierceRate = fbsutils.Convert(e.HealedPierceRate(), t.FlatBuffer.TableKey)
	t.HealedMysticRate = fbsutils.Convert(e.HealedMysticRate(), t.FlatBuffer.TableKey)
	t.HealedSonicRate = fbsutils.Convert(e.HealedSonicRate(), t.FlatBuffer.TableKey)
	t.HealedNormalRate = fbsutils.Convert(e.HealedNormalRate(), t.FlatBuffer.TableKey)
	t.StreetBattleAdaptation = TerrainAdaptationStat(fbsutils.Convert(int32(e.StreetBattleAdaptation()), t.FlatBuffer.TableKey))
	t.OutdoorBattleAdaptation = TerrainAdaptationStat(fbsutils.Convert(int32(e.OutdoorBattleAdaptation()), t.FlatBuffer.TableKey))
	t.IndoorBattleAdaptation = TerrainAdaptationStat(fbsutils.Convert(int32(e.IndoorBattleAdaptation()), t.FlatBuffer.TableKey))
	t.RegenCost = fbsutils.Convert(e.RegenCost(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterStatExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterStatExcelDto) FlatDataName() string {
	return "CharacterStatExcel"
}
