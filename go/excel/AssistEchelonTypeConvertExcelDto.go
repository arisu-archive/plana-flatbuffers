// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AssistEchelonTypeConvertExcelDto represents a FlatBuffers table
type AssistEchelonTypeConvertExcelDto struct {
	fbsutils.FlatBuffer
	Contents  EchelonType `json:"contents"`
	ConvertTo EchelonType `json:"convert_to"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AssistEchelonTypeConvertExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	AssistEchelonTypeConvertExcelStart(b)
	AssistEchelonTypeConvertExcelAddContents(b, fbsutils.Convert(t.Contents, t.FlatBuffer.TableKey))
	AssistEchelonTypeConvertExcelAddConvertTo(b, fbsutils.Convert(t.ConvertTo, t.FlatBuffer.TableKey))
	return AssistEchelonTypeConvertExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AssistEchelonTypeConvertExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AssistEchelonTypeConvertExcelDto) UnmarshalMessage(e *AssistEchelonTypeConvertExcel) error {
	t.Contents = EchelonType(fbsutils.Convert(int32(e.Contents()), t.FlatBuffer.TableKey))
	t.ConvertTo = EchelonType(fbsutils.Convert(int32(e.ConvertTo()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AssistEchelonTypeConvertExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAssistEchelonTypeConvertExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AssistEchelonTypeConvertExcelDto) FlatDataName() string {
	return "AssistEchelonTypeConvertExcel"
}
