// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LocalizeEtcExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsLocalizeEtcExcel(buf []byte, offset flatbuffers.UOffsetT) *LocalizeEtcExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LocalizeEtcExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLocalizeEtcExcel(buf []byte, offset flatbuffers.UOffsetT) *LocalizeEtcExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LocalizeEtcExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LocalizeEtcExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LocalizeEtcExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LocalizeEtcExcel) DescriptionJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalizeEtcExcel) DescriptionKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalizeEtcExcel) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LocalizeEtcExcel) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *LocalizeEtcExcel) NameJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalizeEtcExcel) NameKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LocalizeEtcExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func LocalizeEtcExcelAddDescriptionJp(builder *flatbuffers.Builder, descriptionJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(descriptionJp), 0)
}
func LocalizeEtcExcelAddDescriptionKr(builder *flatbuffers.Builder, descriptionKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(descriptionKr), 0)
}
func LocalizeEtcExcelAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(2, key, 0)
}
func LocalizeEtcExcelAddNameJp(builder *flatbuffers.Builder, nameJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(nameJp), 0)
}
func LocalizeEtcExcelAddNameKr(builder *flatbuffers.Builder, nameKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(nameKr), 0)
}
func LocalizeEtcExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
