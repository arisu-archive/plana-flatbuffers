// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ArenaMapExcelDto represents a FlatBuffers table
type ArenaMapExcelDto struct {
	fbsutils.FlatBuffer
	EndRank                    int64  `json:"end_rank"`
	GroundGroupId              int64  `json:"ground_group_id"`
	GroundGroupNameLocalizeKey string `json:"ground_group_name_localize_key"`
	GroundId                   int64  `json:"ground_id"`
	ImagePath                  string `json:"image_path"`
	StartRank                  int64  `json:"start_rank"`
	TerrainType                int64  `json:"terrain_type"`
	TerrainTypeLocalizeKey     string `json:"terrain_type_localize_key"`
	UniqueId                   int64  `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ArenaMapExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ArenaMapExcelStart(b)
	ArenaMapExcelAddEndRank(b, fbsutils.Convert(t.EndRank, t.FlatBuffer.TableKey))
	ArenaMapExcelAddGroundGroupId(b, fbsutils.Convert(t.GroundGroupId, t.FlatBuffer.TableKey))
	ArenaMapExcelAddGroundGroupNameLocalizeKey(b, b.CreateString(fbsutils.Convert(t.GroundGroupNameLocalizeKey, t.FlatBuffer.TableKey)))
	ArenaMapExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	ArenaMapExcelAddImagePath(b, b.CreateString(fbsutils.Convert(t.ImagePath, t.FlatBuffer.TableKey)))
	ArenaMapExcelAddStartRank(b, fbsutils.Convert(t.StartRank, t.FlatBuffer.TableKey))
	ArenaMapExcelAddTerrainType(b, fbsutils.Convert(t.TerrainType, t.FlatBuffer.TableKey))
	ArenaMapExcelAddTerrainTypeLocalizeKey(b, b.CreateString(fbsutils.Convert(t.TerrainTypeLocalizeKey, t.FlatBuffer.TableKey)))
	ArenaMapExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return ArenaMapExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ArenaMapExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ArenaMapExcelDto) UnmarshalMessage(e *ArenaMapExcel) error {
	t.EndRank = fbsutils.Convert(e.EndRank(), t.FlatBuffer.TableKey)
	t.GroundGroupId = fbsutils.Convert(e.GroundGroupId(), t.FlatBuffer.TableKey)
	t.GroundGroupNameLocalizeKey = fbsutils.Convert(string(e.GroundGroupNameLocalizeKey()), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.ImagePath = fbsutils.Convert(string(e.ImagePath()), t.FlatBuffer.TableKey)
	t.StartRank = fbsutils.Convert(e.StartRank(), t.FlatBuffer.TableKey)
	t.TerrainType = fbsutils.Convert(e.TerrainType(), t.FlatBuffer.TableKey)
	t.TerrainTypeLocalizeKey = fbsutils.Convert(string(e.TerrainTypeLocalizeKey()), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ArenaMapExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsArenaMapExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ArenaMapExcelDto) FlatDataName() string {
	return "ArenaMapExcel"
}
