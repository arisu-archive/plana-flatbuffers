// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StoryStrategyExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsStoryStrategyExcel(buf []byte, offset flatbuffers.UOffsetT) *StoryStrategyExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StoryStrategyExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStoryStrategyExcel(buf []byte, offset flatbuffers.UOffsetT) *StoryStrategyExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StoryStrategyExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StoryStrategyExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StoryStrategyExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StoryStrategyExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *StoryStrategyExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *StoryStrategyExcel) ContentType() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateContentType(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *StoryStrategyExcel) FirstClearReportEventName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StoryStrategyExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *StoryStrategyExcel) Localize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StoryStrategyExcel) MaxTurn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateMaxTurn(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *StoryStrategyExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StoryStrategyExcel) StageEnterEchelonCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateStageEnterEchelonCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *StoryStrategyExcel) StageTopography() StageTopography {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return StageTopography(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateStageTopography(n StageTopography) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *StoryStrategyExcel) StrategyEnvironment() StrategyEnvironment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return StrategyEnvironment(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateStrategyEnvironment(n StrategyEnvironment) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *StoryStrategyExcel) StrategyMap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StoryStrategyExcel) StrategyMapBg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StoryStrategyExcel) WhiteListId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoryStrategyExcel) MutateWhiteListId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func StoryStrategyExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func StoryStrategyExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(0, battleDuration, 0)
}
func StoryStrategyExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(1, bgmId, 0)
}
func StoryStrategyExcelAddContentType(builder *flatbuffers.Builder, contentType ContentType) {
	builder.PrependInt32Slot(2, int32(contentType), 0)
}
func StoryStrategyExcelAddFirstClearReportEventName(builder *flatbuffers.Builder, firstClearReportEventName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(firstClearReportEventName), 0)
}
func StoryStrategyExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(4, id, 0)
}
func StoryStrategyExcelAddLocalize(builder *flatbuffers.Builder, localize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(localize), 0)
}
func StoryStrategyExcelAddMaxTurn(builder *flatbuffers.Builder, maxTurn int32) {
	builder.PrependInt32Slot(6, maxTurn, 0)
}
func StoryStrategyExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(name), 0)
}
func StoryStrategyExcelAddStageEnterEchelonCount(builder *flatbuffers.Builder, stageEnterEchelonCount int32) {
	builder.PrependInt32Slot(8, stageEnterEchelonCount, 0)
}
func StoryStrategyExcelAddStageTopography(builder *flatbuffers.Builder, stageTopography StageTopography) {
	builder.PrependInt32Slot(9, int32(stageTopography), 0)
}
func StoryStrategyExcelAddStrategyEnvironment(builder *flatbuffers.Builder, strategyEnvironment StrategyEnvironment) {
	builder.PrependInt32Slot(10, int32(strategyEnvironment), 0)
}
func StoryStrategyExcelAddStrategyMap(builder *flatbuffers.Builder, strategyMap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(strategyMap), 0)
}
func StoryStrategyExcelAddStrategyMapBg(builder *flatbuffers.Builder, strategyMapBg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(strategyMapBg), 0)
}
func StoryStrategyExcelAddWhiteListId(builder *flatbuffers.Builder, whiteListId int64) {
	builder.PrependInt64Slot(13, whiteListId, 0)
}
func StoryStrategyExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
