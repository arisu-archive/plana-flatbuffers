// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterExcelDto represents a FlatBuffers table
type CharacterExcelDto struct {
	fbsutils.FlatBuffer
	AimIkType                  AimIKType           `json:"aim_ik_type"`
	AirUnitHeight              int64               `json:"air_unit_height"`
	AppearFrame                int32               `json:"appear_frame"`
	ArmorType                  ArmorType           `json:"armor_type"`
	BodyRadius                 int64               `json:"body_radius"`
	BulletType                 BulletType          `json:"bullet_type"`
	CanBattleItemMove          bool                `json:"can_battle_item_move"`
	CanCrowdControl            bool                `json:"can_crowd_control"`
	CanFix                     bool                `json:"can_fix"`
	CanMove                    bool                `json:"can_move"`
	CanSurvive                 bool                `json:"can_survive"`
	CharacterAiId              int64               `json:"character_ai_id"`
	CharacterPieceItemAmount   int32               `json:"character_piece_item_amount"`
	CharacterPieceItemId       int64               `json:"character_piece_item_id"`
	Club                       Club                `json:"club"`
	CollectionVisible          bool                `json:"collection_visible"`
	CollectionVisibleEndDate   string              `json:"collection_visible_end_date"`
	CollectionVisibleStartDate string              `json:"collection_visible_start_date"`
	CombatStyleIndex           int32               `json:"combat_style_index"`
	CombineRecipeId            int64               `json:"combine_recipe_id"`
	CostumeGroupId             int64               `json:"costume_group_id"`
	DefaultStarGrade           int32               `json:"default_star_grade"`
	DevName                    string              `json:"dev_name"`
	DisplayEnemyInfo           bool                `json:"display_enemy_info"`
	EmojiOffsetX               float32             `json:"emoji_offset_x"`
	EmojiOffsetY               float32             `json:"emoji_offset_y"`
	EquipmentSlot              []EquipmentCategory `json:"equipment_slot"`
	ExternalBtId               int64               `json:"external_bt_id"`
	FavorLevelupType           int32               `json:"favor_levelup_type"`
	HighlightFloaterHeight     float32             `json:"highlight_floater_height"`
	HpBarHeight                float32             `json:"hp_bar_height"`
	HpBarHide                  bool                `json:"hp_bar_hide"`
	Id                         int64               `json:"id"`
	IgnoreObstacle             bool                `json:"ignore_obstacle"`
	IsAirUnit                  bool                `json:"is_air_unit"`
	IsDummy                    bool                `json:"is_dummy"`
	IsNpc                      bool                `json:"is_npc"`
	IsPlayable                 bool                `json:"is_playable"`
	IsPlayableCharacter        bool                `json:"is_playable_character"`
	Jumpable                   bool                `json:"jumpable"`
	JumpMotionFrame            int32               `json:"jump_motion_frame"`
	LocalizeEtcId              uint32              `json:"localize_etc_id"`
	MainCombatStyleId          int64               `json:"main_combat_style_id"`
	MaxStarGrade               int32               `json:"max_star_grade"`
	MoveEndFrame               int32               `json:"move_end_frame"`
	MoveStartFrame             int32               `json:"move_start_frame"`
	PersonalityId              int64               `json:"personality_id"`
	ProductionStep             ProductionStep      `json:"production_step"`
	RandomEffectRadius         int64               `json:"random_effect_radius"`
	Rarity                     Rarity              `json:"rarity"`
	ReleaseDate                string              `json:"release_date"`
	ScenarioCharacter          string              `json:"scenario_character"`
	School                     School              `json:"school"`
	SecretStoneItemAmount      int32               `json:"secret_stone_item_amount"`
	SecretStoneItemId          int64               `json:"secret_stone_item_id"`
	SpawnTemplateId            uint32              `json:"spawn_template_id"`
	SquadType                  SquadType           `json:"squad_type"`
	StatLevelUpType            StatLevelUpType     `json:"stat_level_up_type"`
	SubPartsCount              int32               `json:"sub_parts_count"`
	TacticEntityType           TacticEntityType    `json:"tactic_entity_type"`
	TacticRange                TacticRange         `json:"tactic_range"`
	TacticRole                 TacticRole          `json:"tactic_role"`
	Tags                       []Tag               `json:"tags"`
	WeaponLocalizeId           uint32              `json:"weapon_localize_id"`
	WeaponType                 WeaponType          `json:"weapon_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterExcelStart(b)
	CharacterExcelAddAimIkType(b, fbsutils.Convert(t.AimIkType, t.FlatBuffer.TableKey))
	CharacterExcelAddAirUnitHeight(b, fbsutils.Convert(t.AirUnitHeight, t.FlatBuffer.TableKey))
	CharacterExcelAddAppearFrame(b, fbsutils.Convert(t.AppearFrame, t.FlatBuffer.TableKey))
	CharacterExcelAddArmorType(b, fbsutils.Convert(t.ArmorType, t.FlatBuffer.TableKey))
	CharacterExcelAddBodyRadius(b, fbsutils.Convert(t.BodyRadius, t.FlatBuffer.TableKey))
	CharacterExcelAddBulletType(b, fbsutils.Convert(t.BulletType, t.FlatBuffer.TableKey))
	CharacterExcelAddCanBattleItemMove(b, t.CanBattleItemMove)
	CharacterExcelAddCanCrowdControl(b, t.CanCrowdControl)
	CharacterExcelAddCanFix(b, t.CanFix)
	CharacterExcelAddCanMove(b, t.CanMove)
	CharacterExcelAddCanSurvive(b, t.CanSurvive)
	CharacterExcelAddCharacterAiId(b, fbsutils.Convert(t.CharacterAiId, t.FlatBuffer.TableKey))
	CharacterExcelAddCharacterPieceItemAmount(b, fbsutils.Convert(t.CharacterPieceItemAmount, t.FlatBuffer.TableKey))
	CharacterExcelAddCharacterPieceItemId(b, fbsutils.Convert(t.CharacterPieceItemId, t.FlatBuffer.TableKey))
	CharacterExcelAddClub(b, fbsutils.Convert(t.Club, t.FlatBuffer.TableKey))
	CharacterExcelAddCollectionVisible(b, t.CollectionVisible)
	CharacterExcelAddCollectionVisibleEndDate(b, b.CreateString(fbsutils.Convert(t.CollectionVisibleEndDate, t.FlatBuffer.TableKey)))
	CharacterExcelAddCollectionVisibleStartDate(b, b.CreateString(fbsutils.Convert(t.CollectionVisibleStartDate, t.FlatBuffer.TableKey)))
	CharacterExcelAddCombatStyleIndex(b, fbsutils.Convert(t.CombatStyleIndex, t.FlatBuffer.TableKey))
	CharacterExcelAddCombineRecipeId(b, fbsutils.Convert(t.CombineRecipeId, t.FlatBuffer.TableKey))
	CharacterExcelAddCostumeGroupId(b, fbsutils.Convert(t.CostumeGroupId, t.FlatBuffer.TableKey))
	CharacterExcelAddDefaultStarGrade(b, fbsutils.Convert(t.DefaultStarGrade, t.FlatBuffer.TableKey))
	CharacterExcelAddDevName(b, b.CreateString(fbsutils.Convert(t.DevName, t.FlatBuffer.TableKey)))
	CharacterExcelAddDisplayEnemyInfo(b, t.DisplayEnemyInfo)
	CharacterExcelAddEmojiOffsetX(b, fbsutils.Convert(t.EmojiOffsetX, t.FlatBuffer.TableKey))
	CharacterExcelAddEmojiOffsetY(b, fbsutils.Convert(t.EmojiOffsetY, t.FlatBuffer.TableKey))
	CharacterExcelStartEquipmentSlotVector(b, len(t.EquipmentSlot))
	for i := range len(t.EquipmentSlot) {
		b.PrependInt32(fbsutils.Convert(int32(t.EquipmentSlot[len(t.EquipmentSlot)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterExcelAddEquipmentSlot(b, b.EndVector(len(t.EquipmentSlot)))
	CharacterExcelAddExternalBtId(b, fbsutils.Convert(t.ExternalBtId, t.FlatBuffer.TableKey))
	CharacterExcelAddFavorLevelupType(b, fbsutils.Convert(t.FavorLevelupType, t.FlatBuffer.TableKey))
	CharacterExcelAddHighlightFloaterHeight(b, fbsutils.Convert(t.HighlightFloaterHeight, t.FlatBuffer.TableKey))
	CharacterExcelAddHpBarHeight(b, fbsutils.Convert(t.HpBarHeight, t.FlatBuffer.TableKey))
	CharacterExcelAddHpBarHide(b, t.HpBarHide)
	CharacterExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	CharacterExcelAddIgnoreObstacle(b, t.IgnoreObstacle)
	CharacterExcelAddIsAirUnit(b, t.IsAirUnit)
	CharacterExcelAddIsDummy(b, t.IsDummy)
	CharacterExcelAddIsNpc(b, t.IsNpc)
	CharacterExcelAddIsPlayable(b, t.IsPlayable)
	CharacterExcelAddIsPlayableCharacter(b, t.IsPlayableCharacter)
	CharacterExcelAddJumpable(b, t.Jumpable)
	CharacterExcelAddJumpMotionFrame(b, fbsutils.Convert(t.JumpMotionFrame, t.FlatBuffer.TableKey))
	CharacterExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	CharacterExcelAddMainCombatStyleId(b, fbsutils.Convert(t.MainCombatStyleId, t.FlatBuffer.TableKey))
	CharacterExcelAddMaxStarGrade(b, fbsutils.Convert(t.MaxStarGrade, t.FlatBuffer.TableKey))
	CharacterExcelAddMoveEndFrame(b, fbsutils.Convert(t.MoveEndFrame, t.FlatBuffer.TableKey))
	CharacterExcelAddMoveStartFrame(b, fbsutils.Convert(t.MoveStartFrame, t.FlatBuffer.TableKey))
	CharacterExcelAddPersonalityId(b, fbsutils.Convert(t.PersonalityId, t.FlatBuffer.TableKey))
	CharacterExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	CharacterExcelAddRandomEffectRadius(b, fbsutils.Convert(t.RandomEffectRadius, t.FlatBuffer.TableKey))
	CharacterExcelAddRarity(b, fbsutils.Convert(t.Rarity, t.FlatBuffer.TableKey))
	CharacterExcelAddReleaseDate(b, b.CreateString(fbsutils.Convert(t.ReleaseDate, t.FlatBuffer.TableKey)))
	CharacterExcelAddScenarioCharacter(b, b.CreateString(fbsutils.Convert(t.ScenarioCharacter, t.FlatBuffer.TableKey)))
	CharacterExcelAddSchool(b, fbsutils.Convert(t.School, t.FlatBuffer.TableKey))
	CharacterExcelAddSecretStoneItemAmount(b, fbsutils.Convert(t.SecretStoneItemAmount, t.FlatBuffer.TableKey))
	CharacterExcelAddSecretStoneItemId(b, fbsutils.Convert(t.SecretStoneItemId, t.FlatBuffer.TableKey))
	CharacterExcelAddSpawnTemplateId(b, fbsutils.Convert(t.SpawnTemplateId, t.FlatBuffer.TableKey))
	CharacterExcelAddSquadType(b, fbsutils.Convert(t.SquadType, t.FlatBuffer.TableKey))
	CharacterExcelAddStatLevelUpType(b, fbsutils.Convert(t.StatLevelUpType, t.FlatBuffer.TableKey))
	CharacterExcelAddSubPartsCount(b, fbsutils.Convert(t.SubPartsCount, t.FlatBuffer.TableKey))
	CharacterExcelAddTacticEntityType(b, fbsutils.Convert(t.TacticEntityType, t.FlatBuffer.TableKey))
	CharacterExcelAddTacticRange(b, fbsutils.Convert(t.TacticRange, t.FlatBuffer.TableKey))
	CharacterExcelAddTacticRole(b, fbsutils.Convert(t.TacticRole, t.FlatBuffer.TableKey))
	CharacterExcelStartTagsVector(b, len(t.Tags))
	for i := range len(t.Tags) {
		b.PrependInt32(fbsutils.Convert(int32(t.Tags[len(t.Tags)-i-1]), t.FlatBuffer.TableKey))
	}
	CharacterExcelAddTags(b, b.EndVector(len(t.Tags)))
	CharacterExcelAddWeaponLocalizeId(b, fbsutils.Convert(t.WeaponLocalizeId, t.FlatBuffer.TableKey))
	CharacterExcelAddWeaponType(b, fbsutils.Convert(t.WeaponType, t.FlatBuffer.TableKey))
	return CharacterExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterExcelDto) UnmarshalMessage(e *CharacterExcel) error {
	t.AimIkType = AimIKType(fbsutils.Convert(int32(e.AimIkType()), t.FlatBuffer.TableKey))
	t.AirUnitHeight = fbsutils.Convert(e.AirUnitHeight(), t.FlatBuffer.TableKey)
	t.AppearFrame = fbsutils.Convert(e.AppearFrame(), t.FlatBuffer.TableKey)
	t.ArmorType = ArmorType(fbsutils.Convert(int32(e.ArmorType()), t.FlatBuffer.TableKey))
	t.BodyRadius = fbsutils.Convert(e.BodyRadius(), t.FlatBuffer.TableKey)
	t.BulletType = BulletType(fbsutils.Convert(int32(e.BulletType()), t.FlatBuffer.TableKey))
	t.CanBattleItemMove = e.CanBattleItemMove()
	t.CanCrowdControl = e.CanCrowdControl()
	t.CanFix = e.CanFix()
	t.CanMove = e.CanMove()
	t.CanSurvive = e.CanSurvive()
	t.CharacterAiId = fbsutils.Convert(e.CharacterAiId(), t.FlatBuffer.TableKey)
	t.CharacterPieceItemAmount = fbsutils.Convert(e.CharacterPieceItemAmount(), t.FlatBuffer.TableKey)
	t.CharacterPieceItemId = fbsutils.Convert(e.CharacterPieceItemId(), t.FlatBuffer.TableKey)
	t.Club = Club(fbsutils.Convert(int32(e.Club()), t.FlatBuffer.TableKey))
	t.CollectionVisible = e.CollectionVisible()
	t.CollectionVisibleEndDate = fbsutils.Convert(string(e.CollectionVisibleEndDate()), t.FlatBuffer.TableKey)
	t.CollectionVisibleStartDate = fbsutils.Convert(string(e.CollectionVisibleStartDate()), t.FlatBuffer.TableKey)
	t.CombatStyleIndex = fbsutils.Convert(e.CombatStyleIndex(), t.FlatBuffer.TableKey)
	t.CombineRecipeId = fbsutils.Convert(e.CombineRecipeId(), t.FlatBuffer.TableKey)
	t.CostumeGroupId = fbsutils.Convert(e.CostumeGroupId(), t.FlatBuffer.TableKey)
	t.DefaultStarGrade = fbsutils.Convert(e.DefaultStarGrade(), t.FlatBuffer.TableKey)
	t.DevName = fbsutils.Convert(string(e.DevName()), t.FlatBuffer.TableKey)
	t.DisplayEnemyInfo = e.DisplayEnemyInfo()
	t.EmojiOffsetX = fbsutils.Convert(e.EmojiOffsetX(), t.FlatBuffer.TableKey)
	t.EmojiOffsetY = fbsutils.Convert(e.EmojiOffsetY(), t.FlatBuffer.TableKey)
	t.EquipmentSlot = make([]EquipmentCategory, e.EquipmentSlotLength())
	for i := range e.EquipmentSlotLength() {
		t.EquipmentSlot[i] = EquipmentCategory(fbsutils.Convert(int32(e.EquipmentSlot(i)), t.FlatBuffer.TableKey))
	}
	t.ExternalBtId = fbsutils.Convert(e.ExternalBtId(), t.FlatBuffer.TableKey)
	t.FavorLevelupType = fbsutils.Convert(e.FavorLevelupType(), t.FlatBuffer.TableKey)
	t.HighlightFloaterHeight = fbsutils.Convert(e.HighlightFloaterHeight(), t.FlatBuffer.TableKey)
	t.HpBarHeight = fbsutils.Convert(e.HpBarHeight(), t.FlatBuffer.TableKey)
	t.HpBarHide = e.HpBarHide()
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.IgnoreObstacle = e.IgnoreObstacle()
	t.IsAirUnit = e.IsAirUnit()
	t.IsDummy = e.IsDummy()
	t.IsNpc = e.IsNpc()
	t.IsPlayable = e.IsPlayable()
	t.IsPlayableCharacter = e.IsPlayableCharacter()
	t.Jumpable = e.Jumpable()
	t.JumpMotionFrame = fbsutils.Convert(e.JumpMotionFrame(), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.MainCombatStyleId = fbsutils.Convert(e.MainCombatStyleId(), t.FlatBuffer.TableKey)
	t.MaxStarGrade = fbsutils.Convert(e.MaxStarGrade(), t.FlatBuffer.TableKey)
	t.MoveEndFrame = fbsutils.Convert(e.MoveEndFrame(), t.FlatBuffer.TableKey)
	t.MoveStartFrame = fbsutils.Convert(e.MoveStartFrame(), t.FlatBuffer.TableKey)
	t.PersonalityId = fbsutils.Convert(e.PersonalityId(), t.FlatBuffer.TableKey)
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.RandomEffectRadius = fbsutils.Convert(e.RandomEffectRadius(), t.FlatBuffer.TableKey)
	t.Rarity = Rarity(fbsutils.Convert(int32(e.Rarity()), t.FlatBuffer.TableKey))
	t.ReleaseDate = fbsutils.Convert(string(e.ReleaseDate()), t.FlatBuffer.TableKey)
	t.ScenarioCharacter = fbsutils.Convert(string(e.ScenarioCharacter()), t.FlatBuffer.TableKey)
	t.School = School(fbsutils.Convert(int32(e.School()), t.FlatBuffer.TableKey))
	t.SecretStoneItemAmount = fbsutils.Convert(e.SecretStoneItemAmount(), t.FlatBuffer.TableKey)
	t.SecretStoneItemId = fbsutils.Convert(e.SecretStoneItemId(), t.FlatBuffer.TableKey)
	t.SpawnTemplateId = fbsutils.Convert(e.SpawnTemplateId(), t.FlatBuffer.TableKey)
	t.SquadType = SquadType(fbsutils.Convert(int32(e.SquadType()), t.FlatBuffer.TableKey))
	t.StatLevelUpType = StatLevelUpType(fbsutils.Convert(int32(e.StatLevelUpType()), t.FlatBuffer.TableKey))
	t.SubPartsCount = fbsutils.Convert(e.SubPartsCount(), t.FlatBuffer.TableKey)
	t.TacticEntityType = TacticEntityType(fbsutils.Convert(int32(e.TacticEntityType()), t.FlatBuffer.TableKey))
	t.TacticRange = TacticRange(fbsutils.Convert(int32(e.TacticRange()), t.FlatBuffer.TableKey))
	t.TacticRole = TacticRole(fbsutils.Convert(int32(e.TacticRole()), t.FlatBuffer.TableKey))
	t.Tags = make([]Tag, e.TagsLength())
	for i := range e.TagsLength() {
		t.Tags[i] = Tag(fbsutils.Convert(int32(e.Tags(i)), t.FlatBuffer.TableKey))
	}
	t.WeaponLocalizeId = fbsutils.Convert(e.WeaponLocalizeId(), t.FlatBuffer.TableKey)
	t.WeaponType = WeaponType(fbsutils.Convert(int32(e.WeaponType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterExcelDto) FlatDataName() string {
	return "CharacterExcel"
}
