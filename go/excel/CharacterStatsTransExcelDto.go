// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterStatsTransExcelDto represents a FlatBuffers table
type CharacterStatsTransExcelDto struct {
	fbsutils.FlatBuffer
	EchelonExtensionType    EchelonExtensionType `json:"echelon_extension_type"`
	StatTransType           StatTransType        `json:"stat_trans_type"`
	TransSupportStats       StatType             `json:"trans_support_stats"`
	TransSupportStatsFactor int32                `json:"trans_support_stats_factor"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterStatsTransExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterStatsTransExcelStart(b)
	CharacterStatsTransExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	CharacterStatsTransExcelAddStatTransType(b, fbsutils.Convert(t.StatTransType, t.FlatBuffer.TableKey))
	CharacterStatsTransExcelAddTransSupportStats(b, fbsutils.Convert(t.TransSupportStats, t.FlatBuffer.TableKey))
	CharacterStatsTransExcelAddTransSupportStatsFactor(b, fbsutils.Convert(t.TransSupportStatsFactor, t.FlatBuffer.TableKey))
	return CharacterStatsTransExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterStatsTransExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatsTransExcelDto) UnmarshalMessage(e *CharacterStatsTransExcel) error {
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	t.StatTransType = StatTransType(fbsutils.Convert(int32(e.StatTransType()), t.FlatBuffer.TableKey))
	t.TransSupportStats = StatType(fbsutils.Convert(int32(e.TransSupportStats()), t.FlatBuffer.TableKey))
	t.TransSupportStatsFactor = fbsutils.Convert(e.TransSupportStatsFactor(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterStatsTransExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterStatsTransExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterStatsTransExcelDto) FlatDataName() string {
	return "CharacterStatsTransExcel"
}
