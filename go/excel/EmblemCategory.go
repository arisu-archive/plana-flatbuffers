// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import "strconv"

type EmblemCategory int32

const (
	EmblemCategoryNone            EmblemCategory = 0
	EmblemCategoryDefault         EmblemCategory = 1
	EmblemCategoryMission         EmblemCategory = 2
	EmblemCategoryGroupStory      EmblemCategory = 3
	EmblemCategoryEvent           EmblemCategory = 4
	EmblemCategoryMainStory       EmblemCategory = 5
	EmblemCategoryFavor           EmblemCategory = 6
	EmblemCategoryBoss            EmblemCategory = 7
	EmblemCategoryEtc             EmblemCategory = 8
	EmblemCategoryEtc_Anniversary EmblemCategory = 9
	EmblemCategoryMultiFloorRaid  EmblemCategory = 10
	EmblemCategoryPotential       EmblemCategory = 11
)

var EnumNamesEmblemCategory = map[EmblemCategory]string{
	EmblemCategoryNone:            "None",
	EmblemCategoryDefault:         "Default",
	EmblemCategoryMission:         "Mission",
	EmblemCategoryGroupStory:      "GroupStory",
	EmblemCategoryEvent:           "Event",
	EmblemCategoryMainStory:       "MainStory",
	EmblemCategoryFavor:           "Favor",
	EmblemCategoryBoss:            "Boss",
	EmblemCategoryEtc:             "Etc",
	EmblemCategoryEtc_Anniversary: "Etc_Anniversary",
	EmblemCategoryMultiFloorRaid:  "MultiFloorRaid",
	EmblemCategoryPotential:       "Potential",
}

var EnumValuesEmblemCategory = map[string]EmblemCategory{
	"None":            EmblemCategoryNone,
	"Default":         EmblemCategoryDefault,
	"Mission":         EmblemCategoryMission,
	"GroupStory":      EmblemCategoryGroupStory,
	"Event":           EmblemCategoryEvent,
	"MainStory":       EmblemCategoryMainStory,
	"Favor":           EmblemCategoryFavor,
	"Boss":            EmblemCategoryBoss,
	"Etc":             EmblemCategoryEtc,
	"Etc_Anniversary": EmblemCategoryEtc_Anniversary,
	"MultiFloorRaid":  EmblemCategoryMultiFloorRaid,
	"Potential":       EmblemCategoryPotential,
}

func (v EmblemCategory) String() string {
	if s, ok := EnumNamesEmblemCategory[v]; ok {
		return s
	}
	return "EmblemCategory(" + strconv.FormatInt(int64(v), 10) + ")"
}
