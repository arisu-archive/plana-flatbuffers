// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BGMUIExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBGMUIExcel(buf []byte, offset flatbuffers.UOffsetT) *BGMUIExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BGMUIExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBGMUIExcel(buf []byte, offset flatbuffers.UOffsetT) *BGMUIExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BGMUIExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BGMUIExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BGMUIExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BGMUIExcel) BgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMUIExcel) MutateBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BGMUIExcel) BgmId2nd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMUIExcel) MutateBgmId2nd(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *BGMUIExcel) BgmId3rd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMUIExcel) MutateBgmId3rd(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *BGMUIExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMUIExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *BGMUIExcel) UiPrefab() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BGMUIExcel) MutateUiPrefab(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func BGMUIExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BGMUIExcelAddBgmId(builder *flatbuffers.Builder, bgmId int64) {
	builder.PrependInt64Slot(0, bgmId, 0)
}
func BGMUIExcelAddBgmId2nd(builder *flatbuffers.Builder, bgmId2nd int64) {
	builder.PrependInt64Slot(1, bgmId2nd, 0)
}
func BGMUIExcelAddBgmId3rd(builder *flatbuffers.Builder, bgmId3rd int64) {
	builder.PrependInt64Slot(2, bgmId3rd, 0)
}
func BGMUIExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func BGMUIExcelAddUiPrefab(builder *flatbuffers.Builder, uiPrefab uint32) {
	builder.PrependUint32Slot(4, uiPrefab, 0)
}
func BGMUIExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
