// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// GachaCombinedCostExcelDto represents a FlatBuffers table
type GachaCombinedCostExcelDto struct {
	fbsutils.FlatBuffer
	GroupId                      int64           `json:"group_id"`
	Priority                     int64           `json:"priority"`
	ConsumeGachaTicketType       GachaTicketType `json:"consume_gacha_ticket_type"`
	ConsumeGachaTicketTypeAmount int64           `json:"consume_gacha_ticket_type_amount"`
	ConsumeParcelType            ParcelType      `json:"consume_parcel_type"`
	ConsumeParcelId              int64           `json:"consume_parcel_id"`
	ConsumeParcelAmount          int64           `json:"consume_parcel_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *GachaCombinedCostExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	GachaCombinedCostExcelStart(b)
	GachaCombinedCostExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	GachaCombinedCostExcelAddPriority(b, fbsutils.Convert(t.Priority, t.FlatBuffer.TableKey))
	GachaCombinedCostExcelAddConsumeGachaTicketType(b, fbsutils.Convert(t.ConsumeGachaTicketType, t.FlatBuffer.TableKey))
	GachaCombinedCostExcelAddConsumeGachaTicketTypeAmount(b, fbsutils.Convert(t.ConsumeGachaTicketTypeAmount, t.FlatBuffer.TableKey))
	GachaCombinedCostExcelAddConsumeParcelType(b, fbsutils.Convert(t.ConsumeParcelType, t.FlatBuffer.TableKey))
	GachaCombinedCostExcelAddConsumeParcelId(b, fbsutils.Convert(t.ConsumeParcelId, t.FlatBuffer.TableKey))
	GachaCombinedCostExcelAddConsumeParcelAmount(b, fbsutils.Convert(t.ConsumeParcelAmount, t.FlatBuffer.TableKey))
	return GachaCombinedCostExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *GachaCombinedCostExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *GachaCombinedCostExcelDto) UnmarshalMessage(e *GachaCombinedCostExcel) error {
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Priority = fbsutils.Convert(e.Priority(), t.FlatBuffer.TableKey)
	t.ConsumeGachaTicketType = GachaTicketType(fbsutils.Convert(int32(e.ConsumeGachaTicketType()), t.FlatBuffer.TableKey))
	t.ConsumeGachaTicketTypeAmount = fbsutils.Convert(e.ConsumeGachaTicketTypeAmount(), t.FlatBuffer.TableKey)
	t.ConsumeParcelType = ParcelType(fbsutils.Convert(int32(e.ConsumeParcelType()), t.FlatBuffer.TableKey))
	t.ConsumeParcelId = fbsutils.Convert(e.ConsumeParcelId(), t.FlatBuffer.TableKey)
	t.ConsumeParcelAmount = fbsutils.Convert(e.ConsumeParcelAmount(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *GachaCombinedCostExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsGachaCombinedCostExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (GachaCombinedCostExcelDto) FlatDataName() string {
	return "GachaCombinedCostExcel"
}
