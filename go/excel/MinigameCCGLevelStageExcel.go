// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGLevelStageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGLevelStageExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGLevelStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGLevelStageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGLevelStageExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGLevelStageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGLevelStageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGLevelStageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGLevelStageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGLevelStageExcel) OutroScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateOutroScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MinigameCCGLevelStageExcel) IsSkipOutroScenario() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MinigameCCGLevelStageExcel) MutateIsSkipOutroScenario(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *MinigameCCGLevelStageExcel) IntroScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateIntroScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MinigameCCGLevelStageExcel) IsSkipIntroScenario() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MinigameCCGLevelStageExcel) MutateIsSkipIntroScenario(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *MinigameCCGLevelStageExcel) CardRarityGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateCardRarityGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MinigameCCGLevelStageExcel) RewardCardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateRewardCardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *MinigameCCGLevelStageExcel) RewardCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateRewardCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *MinigameCCGLevelStageExcel) RewardType() CCGStageRewardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return CCGStageRewardType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateRewardType(n CCGStageRewardType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *MinigameCCGLevelStageExcel) CampBackgroundPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGLevelStageExcel) CampSprPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGLevelStageExcel) CampDiscardCardCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateCampDiscardCardCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *MinigameCCGLevelStageExcel) StageType() CCGStageType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return CCGStageType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateStageType(n CCGStageType) bool {
	return rcv._tab.MutateInt32Slot(26, int32(n))
}

func (rcv *MinigameCCGLevelStageExcel) EnemyGroupId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) EnemyGroupIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateEnemyGroupId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameCCGLevelStageExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *MinigameCCGLevelStageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGLevelStageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func MinigameCCGLevelStageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func MinigameCCGLevelStageExcelAddOutroScenarioGroupId(builder *flatbuffers.Builder, outroScenarioGroupId int64) {
	builder.PrependInt64Slot(0, outroScenarioGroupId, 0)
}
func MinigameCCGLevelStageExcelAddIsSkipOutroScenario(builder *flatbuffers.Builder, isSkipOutroScenario bool) {
	builder.PrependBoolSlot(1, isSkipOutroScenario, false)
}
func MinigameCCGLevelStageExcelAddIntroScenarioGroupId(builder *flatbuffers.Builder, introScenarioGroupId int64) {
	builder.PrependInt64Slot(2, introScenarioGroupId, 0)
}
func MinigameCCGLevelStageExcelAddIsSkipIntroScenario(builder *flatbuffers.Builder, isSkipIntroScenario bool) {
	builder.PrependBoolSlot(3, isSkipIntroScenario, false)
}
func MinigameCCGLevelStageExcelAddCardRarityGroupId(builder *flatbuffers.Builder, cardRarityGroupId int64) {
	builder.PrependInt64Slot(4, cardRarityGroupId, 0)
}
func MinigameCCGLevelStageExcelAddRewardCardGroupId(builder *flatbuffers.Builder, rewardCardGroupId int64) {
	builder.PrependInt64Slot(5, rewardCardGroupId, 0)
}
func MinigameCCGLevelStageExcelAddRewardCount(builder *flatbuffers.Builder, rewardCount int32) {
	builder.PrependInt32Slot(6, rewardCount, 0)
}
func MinigameCCGLevelStageExcelAddRewardType(builder *flatbuffers.Builder, rewardType CCGStageRewardType) {
	builder.PrependInt32Slot(7, int32(rewardType), 0)
}
func MinigameCCGLevelStageExcelAddCampBackgroundPath(builder *flatbuffers.Builder, campBackgroundPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(campBackgroundPath), 0)
}
func MinigameCCGLevelStageExcelAddCampSprPath(builder *flatbuffers.Builder, campSprPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(campSprPath), 0)
}
func MinigameCCGLevelStageExcelAddCampDiscardCardCount(builder *flatbuffers.Builder, campDiscardCardCount int32) {
	builder.PrependInt32Slot(10, campDiscardCardCount, 0)
}
func MinigameCCGLevelStageExcelAddStageType(builder *flatbuffers.Builder, stageType CCGStageType) {
	builder.PrependInt32Slot(11, int32(stageType), 0)
}
func MinigameCCGLevelStageExcelAddEnemyGroupId(builder *flatbuffers.Builder, enemyGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(enemyGroupId), 0)
}
func MinigameCCGLevelStageExcelStartEnemyGroupIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameCCGLevelStageExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(13, groupId, 0)
}
func MinigameCCGLevelStageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(14, id, 0)
}
func MinigameCCGLevelStageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
