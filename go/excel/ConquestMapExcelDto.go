// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ConquestMapExcelDto represents a FlatBuffers table
type ConquestMapExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId             int64                   `json:"event_content_id"`
	DevName                    string                  `json:"dev_name"`
	MapDifficulty              StageDifficulty         `json:"map_difficulty"`
	StepIndex                  int32                   `json:"step_index"`
	ConquestMap                string                  `json:"conquest_map"`
	StepEnterScenarioGroupId   int64                   `json:"step_enter_scenario_group_id"`
	StepOpenConditionType      []ConquestConditionType `json:"step_open_condition_type"`
	StepOpenConditionParameter []string                `json:"step_open_condition_parameter"`
	MapGoalLocalize            string                  `json:"map_goal_localize"`
	StepGoalLocalize           string                  `json:"step_goal_localize"`
	StepNameLocalize           string                  `json:"step_name_localize"`
	ConquestMapBg              string                  `json:"conquest_map_bg"`
	CameraSettingId            int64                   `json:"camera_setting_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ConquestMapExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_dev_name := b.CreateString(fbsutils.Convert(t.DevName, t.FlatBuffer.TableKey))
	__offset_conquest_map := b.CreateString(fbsutils.Convert(t.ConquestMap, t.FlatBuffer.TableKey))
	var __offset_step_open_condition_parameter flatbuffers.UOffsetT
	__stringOffsets_step_open_condition_parameter := make([]flatbuffers.UOffsetT, len(t.StepOpenConditionParameter))
	for i := range len(t.StepOpenConditionParameter) {
		__stringOffsets_step_open_condition_parameter[i] = b.CreateString(fbsutils.Convert(t.StepOpenConditionParameter[i], t.FlatBuffer.TableKey))
	}
	ConquestMapExcelStartStepOpenConditionParameterVector(b, len(t.StepOpenConditionParameter))
	for i := range len(t.StepOpenConditionParameter) {
		b.PrependUOffsetT(__stringOffsets_step_open_condition_parameter[len(t.StepOpenConditionParameter)-i-1])
	}
	__offset_step_open_condition_parameter = b.EndVector(len(t.StepOpenConditionParameter))
	__offset_map_goal_localize := b.CreateString(fbsutils.Convert(t.MapGoalLocalize, t.FlatBuffer.TableKey))
	__offset_step_goal_localize := b.CreateString(fbsutils.Convert(t.StepGoalLocalize, t.FlatBuffer.TableKey))
	__offset_step_name_localize := b.CreateString(fbsutils.Convert(t.StepNameLocalize, t.FlatBuffer.TableKey))
	__offset_conquest_map_bg := b.CreateString(fbsutils.Convert(t.ConquestMapBg, t.FlatBuffer.TableKey))
	ConquestMapExcelStart(b)
	ConquestMapExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	ConquestMapExcelAddDevName(b, __offset_dev_name)
	ConquestMapExcelAddMapDifficulty(b, fbsutils.Convert(t.MapDifficulty, t.FlatBuffer.TableKey))
	ConquestMapExcelAddStepIndex(b, fbsutils.Convert(t.StepIndex, t.FlatBuffer.TableKey))
	ConquestMapExcelAddConquestMap(b, __offset_conquest_map)
	ConquestMapExcelAddStepEnterScenarioGroupId(b, fbsutils.Convert(t.StepEnterScenarioGroupId, t.FlatBuffer.TableKey))
	ConquestMapExcelStartStepOpenConditionTypeVector(b, len(t.StepOpenConditionType))
	for i := range len(t.StepOpenConditionType) {
		b.PrependInt32(fbsutils.Convert(int32(t.StepOpenConditionType[len(t.StepOpenConditionType)-i-1]), t.FlatBuffer.TableKey))
	}
	ConquestMapExcelAddStepOpenConditionType(b, b.EndVector(len(t.StepOpenConditionType)))
	ConquestMapExcelAddStepOpenConditionParameter(b, __offset_step_open_condition_parameter)
	ConquestMapExcelAddMapGoalLocalize(b, __offset_map_goal_localize)
	ConquestMapExcelAddStepGoalLocalize(b, __offset_step_goal_localize)
	ConquestMapExcelAddStepNameLocalize(b, __offset_step_name_localize)
	ConquestMapExcelAddConquestMapBg(b, __offset_conquest_map_bg)
	ConquestMapExcelAddCameraSettingId(b, fbsutils.Convert(t.CameraSettingId, t.FlatBuffer.TableKey))
	return ConquestMapExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ConquestMapExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ConquestMapExcelDto) UnmarshalMessage(e *ConquestMapExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.DevName = fbsutils.Convert(string(e.DevName()), t.FlatBuffer.TableKey)
	t.MapDifficulty = StageDifficulty(fbsutils.Convert(int32(e.MapDifficulty()), t.FlatBuffer.TableKey))
	t.StepIndex = fbsutils.Convert(e.StepIndex(), t.FlatBuffer.TableKey)
	t.ConquestMap = fbsutils.Convert(string(e.ConquestMap()), t.FlatBuffer.TableKey)
	t.StepEnterScenarioGroupId = fbsutils.Convert(e.StepEnterScenarioGroupId(), t.FlatBuffer.TableKey)
	t.StepOpenConditionType = make([]ConquestConditionType, e.StepOpenConditionTypeLength())
	for i := range e.StepOpenConditionTypeLength() {
		t.StepOpenConditionType[i] = ConquestConditionType(fbsutils.Convert(int32(e.StepOpenConditionType(i)), t.FlatBuffer.TableKey))
	}
	t.StepOpenConditionParameter = make([]string, e.StepOpenConditionParameterLength())
	for i := range e.StepOpenConditionParameterLength() {
		t.StepOpenConditionParameter[i] = fbsutils.Convert(string(e.StepOpenConditionParameter(i)), t.FlatBuffer.TableKey)
	}
	t.MapGoalLocalize = fbsutils.Convert(string(e.MapGoalLocalize()), t.FlatBuffer.TableKey)
	t.StepGoalLocalize = fbsutils.Convert(string(e.StepGoalLocalize()), t.FlatBuffer.TableKey)
	t.StepNameLocalize = fbsutils.Convert(string(e.StepNameLocalize()), t.FlatBuffer.TableKey)
	t.ConquestMapBg = fbsutils.Convert(string(e.ConquestMapBg()), t.FlatBuffer.TableKey)
	t.CameraSettingId = fbsutils.Convert(e.CameraSettingId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ConquestMapExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsConquestMapExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ConquestMapExcelDto) FlatDataName() string {
	return "ConquestMapExcel"
}
