// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// PresetCharacterGroupExcelDto represents a FlatBuffers table
type PresetCharacterGroupExcelDto struct {
	fbsutils.FlatBuffer
	CommonSkillLevel          int32                      `json:"common_skill_level"`
	EquipCharacterGear        bool                       `json:"equip_character_gear"`
	EquipCharacterGearLevel   int32                      `json:"equip_character_gear_level"`
	EquipCharacterGearTier    int32                      `json:"equip_character_gear_tier"`
	EquipCharacterWeapon      bool                       `json:"equip_character_weapon"`
	EquipCharacterWeaponLevel int32                      `json:"equip_character_weapon_level"`
	EquipCharacterWeaponTier  int32                      `json:"equip_character_weapon_tier"`
	EquipSlot01               bool                       `json:"equip_slot01"`
	EquipSlot02               bool                       `json:"equip_slot02"`
	EquipSlot03               bool                       `json:"equip_slot03"`
	EquipSlotLevel01          int32                      `json:"equip_slot_level01"`
	EquipSlotLevel02          int32                      `json:"equip_slot_level02"`
	EquipSlotLevel03          int32                      `json:"equip_slot_level03"`
	EquipSlotTier01           int32                      `json:"equip_slot_tier01"`
	EquipSlotTier02           int32                      `json:"equip_slot_tier02"`
	EquipSlotTier03           int32                      `json:"equip_slot_tier03"`
	Exp                       int32                      `json:"exp"`
	ExSkillLevel              int32                      `json:"ex_skill_level"`
	ExtraPassiveSkillLevel    int32                      `json:"extra_passive_skill_level"`
	FavorExp                  int32                      `json:"favor_exp"`
	FavorRank                 int32                      `json:"favor_rank"`
	GetPresetType             string                     `json:"get_preset_type"`
	LeaderSkillLevel          int32                      `json:"leader_skill_level"`
	Level                     int32                      `json:"level"`
	PassiveSkillLevel         int32                      `json:"passive_skill_level"`
	PotentialLevel01          int32                      `json:"potential_level01"`
	PotentialLevel02          int32                      `json:"potential_level02"`
	PotentialLevel03          int32                      `json:"potential_level03"`
	PotentialType01           PotentialStatBonusRateType `json:"potential_type01"`
	PotentialType02           PotentialStatBonusRateType `json:"potential_type02"`
	PotentialType03           PotentialStatBonusRateType `json:"potential_type03"`
	PresetCharacterGroupId    int64                      `json:"preset_character_group_id"`
	StarGrade                 int32                      `json:"star_grade"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *PresetCharacterGroupExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	PresetCharacterGroupExcelStart(b)
	PresetCharacterGroupExcelAddCommonSkillLevel(b, fbsutils.Convert(t.CommonSkillLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipCharacterGear(b, t.EquipCharacterGear)
	PresetCharacterGroupExcelAddEquipCharacterGearLevel(b, fbsutils.Convert(t.EquipCharacterGearLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipCharacterGearTier(b, fbsutils.Convert(t.EquipCharacterGearTier, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipCharacterWeapon(b, t.EquipCharacterWeapon)
	PresetCharacterGroupExcelAddEquipCharacterWeaponLevel(b, fbsutils.Convert(t.EquipCharacterWeaponLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipCharacterWeaponTier(b, fbsutils.Convert(t.EquipCharacterWeaponTier, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipSlot01(b, t.EquipSlot01)
	PresetCharacterGroupExcelAddEquipSlot02(b, t.EquipSlot02)
	PresetCharacterGroupExcelAddEquipSlot03(b, t.EquipSlot03)
	PresetCharacterGroupExcelAddEquipSlotLevel01(b, fbsutils.Convert(t.EquipSlotLevel01, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipSlotLevel02(b, fbsutils.Convert(t.EquipSlotLevel02, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipSlotLevel03(b, fbsutils.Convert(t.EquipSlotLevel03, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipSlotTier01(b, fbsutils.Convert(t.EquipSlotTier01, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipSlotTier02(b, fbsutils.Convert(t.EquipSlotTier02, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddEquipSlotTier03(b, fbsutils.Convert(t.EquipSlotTier03, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddExp(b, fbsutils.Convert(t.Exp, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddExSkillLevel(b, fbsutils.Convert(t.ExSkillLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddExtraPassiveSkillLevel(b, fbsutils.Convert(t.ExtraPassiveSkillLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddFavorExp(b, fbsutils.Convert(t.FavorExp, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddFavorRank(b, fbsutils.Convert(t.FavorRank, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddGetPresetType(b, b.CreateString(fbsutils.Convert(t.GetPresetType, t.FlatBuffer.TableKey)))
	PresetCharacterGroupExcelAddLeaderSkillLevel(b, fbsutils.Convert(t.LeaderSkillLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPassiveSkillLevel(b, fbsutils.Convert(t.PassiveSkillLevel, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPotentialLevel01(b, fbsutils.Convert(t.PotentialLevel01, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPotentialLevel02(b, fbsutils.Convert(t.PotentialLevel02, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPotentialLevel03(b, fbsutils.Convert(t.PotentialLevel03, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPotentialType01(b, fbsutils.Convert(t.PotentialType01, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPotentialType02(b, fbsutils.Convert(t.PotentialType02, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPotentialType03(b, fbsutils.Convert(t.PotentialType03, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddPresetCharacterGroupId(b, fbsutils.Convert(t.PresetCharacterGroupId, t.FlatBuffer.TableKey))
	PresetCharacterGroupExcelAddStarGrade(b, fbsutils.Convert(t.StarGrade, t.FlatBuffer.TableKey))
	return PresetCharacterGroupExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *PresetCharacterGroupExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *PresetCharacterGroupExcelDto) UnmarshalMessage(e *PresetCharacterGroupExcel) error {
	t.CommonSkillLevel = fbsutils.Convert(e.CommonSkillLevel(), t.FlatBuffer.TableKey)
	t.EquipCharacterGear = e.EquipCharacterGear()
	t.EquipCharacterGearLevel = fbsutils.Convert(e.EquipCharacterGearLevel(), t.FlatBuffer.TableKey)
	t.EquipCharacterGearTier = fbsutils.Convert(e.EquipCharacterGearTier(), t.FlatBuffer.TableKey)
	t.EquipCharacterWeapon = e.EquipCharacterWeapon()
	t.EquipCharacterWeaponLevel = fbsutils.Convert(e.EquipCharacterWeaponLevel(), t.FlatBuffer.TableKey)
	t.EquipCharacterWeaponTier = fbsutils.Convert(e.EquipCharacterWeaponTier(), t.FlatBuffer.TableKey)
	t.EquipSlot01 = e.EquipSlot01()
	t.EquipSlot02 = e.EquipSlot02()
	t.EquipSlot03 = e.EquipSlot03()
	t.EquipSlotLevel01 = fbsutils.Convert(e.EquipSlotLevel01(), t.FlatBuffer.TableKey)
	t.EquipSlotLevel02 = fbsutils.Convert(e.EquipSlotLevel02(), t.FlatBuffer.TableKey)
	t.EquipSlotLevel03 = fbsutils.Convert(e.EquipSlotLevel03(), t.FlatBuffer.TableKey)
	t.EquipSlotTier01 = fbsutils.Convert(e.EquipSlotTier01(), t.FlatBuffer.TableKey)
	t.EquipSlotTier02 = fbsutils.Convert(e.EquipSlotTier02(), t.FlatBuffer.TableKey)
	t.EquipSlotTier03 = fbsutils.Convert(e.EquipSlotTier03(), t.FlatBuffer.TableKey)
	t.Exp = fbsutils.Convert(e.Exp(), t.FlatBuffer.TableKey)
	t.ExSkillLevel = fbsutils.Convert(e.ExSkillLevel(), t.FlatBuffer.TableKey)
	t.ExtraPassiveSkillLevel = fbsutils.Convert(e.ExtraPassiveSkillLevel(), t.FlatBuffer.TableKey)
	t.FavorExp = fbsutils.Convert(e.FavorExp(), t.FlatBuffer.TableKey)
	t.FavorRank = fbsutils.Convert(e.FavorRank(), t.FlatBuffer.TableKey)
	t.GetPresetType = fbsutils.Convert(string(e.GetPresetType()), t.FlatBuffer.TableKey)
	t.LeaderSkillLevel = fbsutils.Convert(e.LeaderSkillLevel(), t.FlatBuffer.TableKey)
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.PassiveSkillLevel = fbsutils.Convert(e.PassiveSkillLevel(), t.FlatBuffer.TableKey)
	t.PotentialLevel01 = fbsutils.Convert(e.PotentialLevel01(), t.FlatBuffer.TableKey)
	t.PotentialLevel02 = fbsutils.Convert(e.PotentialLevel02(), t.FlatBuffer.TableKey)
	t.PotentialLevel03 = fbsutils.Convert(e.PotentialLevel03(), t.FlatBuffer.TableKey)
	t.PotentialType01 = PotentialStatBonusRateType(fbsutils.Convert(int32(e.PotentialType01()), t.FlatBuffer.TableKey))
	t.PotentialType02 = PotentialStatBonusRateType(fbsutils.Convert(int32(e.PotentialType02()), t.FlatBuffer.TableKey))
	t.PotentialType03 = PotentialStatBonusRateType(fbsutils.Convert(int32(e.PotentialType03()), t.FlatBuffer.TableKey))
	t.PresetCharacterGroupId = fbsutils.Convert(e.PresetCharacterGroupId(), t.FlatBuffer.TableKey)
	t.StarGrade = fbsutils.Convert(e.StarGrade(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *PresetCharacterGroupExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsPresetCharacterGroupExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (PresetCharacterGroupExcelDto) FlatDataName() string {
	return "PresetCharacterGroupExcel"
}
