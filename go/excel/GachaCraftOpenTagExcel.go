// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GachaCraftOpenTagExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsGachaCraftOpenTagExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaCraftOpenTagExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GachaCraftOpenTagExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGachaCraftOpenTagExcel(buf []byte, offset flatbuffers.UOffsetT) *GachaCraftOpenTagExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GachaCraftOpenTagExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GachaCraftOpenTagExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GachaCraftOpenTagExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GachaCraftOpenTagExcel) NodeTier() CraftNodeTier {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CraftNodeTier(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GachaCraftOpenTagExcel) MutateNodeTier(n CraftNodeTier) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *GachaCraftOpenTagExcel) Tag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *GachaCraftOpenTagExcel) TagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GachaCraftOpenTagExcel) MutateTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func GachaCraftOpenTagExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GachaCraftOpenTagExcelAddNodeTier(builder *flatbuffers.Builder, nodeTier CraftNodeTier) {
	builder.PrependInt32Slot(0, int32(nodeTier), 0)
}
func GachaCraftOpenTagExcelAddTag(builder *flatbuffers.Builder, tag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tag), 0)
}
func GachaCraftOpenTagExcelStartTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GachaCraftOpenTagExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
