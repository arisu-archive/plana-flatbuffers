// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TutorialExcelDto represents a FlatBuffers table
type TutorialExcelDto struct {
	fbsutils.FlatBuffer
	Id                        int64    `json:"id"`
	CompletionReportEventName string   `json:"completion_report_event_name"`
	CompulsoryTutorial        bool     `json:"compulsory_tutorial"`
	DescriptionTutorial       bool     `json:"description_tutorial"`
	TutorialStageId           int64    `json:"tutorial_stage_id"`
	UiName                    []string `json:"ui_name"`
	TutorialParentName        []string `json:"tutorial_parent_name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TutorialExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	TutorialExcelStart(b)
	TutorialExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	TutorialExcelAddCompletionReportEventName(b, b.CreateString(fbsutils.Convert(t.CompletionReportEventName, t.FlatBuffer.TableKey)))
	TutorialExcelAddCompulsoryTutorial(b, t.CompulsoryTutorial)
	TutorialExcelAddDescriptionTutorial(b, t.DescriptionTutorial)
	TutorialExcelAddTutorialStageId(b, fbsutils.Convert(t.TutorialStageId, t.FlatBuffer.TableKey))
	TutorialExcelStartUiNameVector(b, len(t.UiName))
	for i := range len(t.UiName) {
		b.PrependUOffsetT(b.CreateString(t.UiName[len(t.UiName)-i-1]))
	}
	TutorialExcelAddUiName(b, b.EndVector(len(t.UiName)))
	TutorialExcelStartTutorialParentNameVector(b, len(t.TutorialParentName))
	for i := range len(t.TutorialParentName) {
		b.PrependUOffsetT(b.CreateString(t.TutorialParentName[len(t.TutorialParentName)-i-1]))
	}
	TutorialExcelAddTutorialParentName(b, b.EndVector(len(t.TutorialParentName)))
	return TutorialExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TutorialExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	FinishTutorialExcelBuffer(b, t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TutorialExcelDto) UnmarshalMessage(e *TutorialExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.CompletionReportEventName = fbsutils.Convert(string(e.CompletionReportEventName()), t.FlatBuffer.TableKey)
	t.CompulsoryTutorial = e.CompulsoryTutorial()
	t.DescriptionTutorial = e.DescriptionTutorial()
	t.TutorialStageId = fbsutils.Convert(e.TutorialStageId(), t.FlatBuffer.TableKey)
	t.UiName = make([]string, e.UiNameLength())
	for i := range e.UiNameLength() {
		t.UiName[i] = fbsutils.Convert(string(e.UiName(i)), t.FlatBuffer.TableKey)
	}
	t.TutorialParentName = make([]string, e.TutorialParentNameLength())
	for i := range e.TutorialParentNameLength() {
		t.TutorialParentName[i] = fbsutils.Convert(string(e.TutorialParentName(i)), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TutorialExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTutorialExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TutorialExcelDto) FlatDataName() string {
	return "TutorialExcel"
}
