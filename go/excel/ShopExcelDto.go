// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ShopExcelDto represents a FlatBuffers table
type ShopExcelDto struct {
	fbsutils.FlatBuffer
	ShopUpdateGroupId            int32                  `json:"shop_update_group_id"`
	DisplayTag                   ProductDisplayTag      `json:"display_tag"`
	RestrictBuyWhenInventoryFull bool                   `json:"restrict_buy_when_inventory_full"`
	BuyReportEventName           string                 `json:"buy_report_event_name"`
	PurchaseCountResetType       PurchaseCountResetType `json:"purchase_count_reset_type"`
	PurchaseCountLimit           int64                  `json:"purchase_count_limit"`
	PurchaseCooltimeMin          int64                  `json:"purchase_cooltime_min"`
	SalePeriodTo                 string                 `json:"sale_period_to"`
	SalePeriodFrom               string                 `json:"sale_period_from"`
	DisplayOrder                 int64                  `json:"display_order"`
	GoodsId                      []int64                `json:"goods_id"`
	UseBigPopup                  bool                   `json:"use_big_popup"`
	IsLegacy                     bool                   `json:"is_legacy"`
	CategoryType                 ShopCategoryType       `json:"category_type"`
	LocalizeEtcId                uint32                 `json:"localize_etc_id"`
	Id                           int64                  `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ShopExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ShopExcelStart(b)
	ShopExcelAddShopUpdateGroupId(b, fbsutils.Convert(t.ShopUpdateGroupId, t.FlatBuffer.TableKey))
	ShopExcelAddDisplayTag(b, fbsutils.Convert(t.DisplayTag, t.FlatBuffer.TableKey))
	ShopExcelAddRestrictBuyWhenInventoryFull(b, t.RestrictBuyWhenInventoryFull)
	ShopExcelAddBuyReportEventName(b, b.CreateString(fbsutils.Convert(t.BuyReportEventName, t.FlatBuffer.TableKey)))
	ShopExcelAddPurchaseCountResetType(b, fbsutils.Convert(t.PurchaseCountResetType, t.FlatBuffer.TableKey))
	ShopExcelAddPurchaseCountLimit(b, fbsutils.Convert(t.PurchaseCountLimit, t.FlatBuffer.TableKey))
	ShopExcelAddPurchaseCooltimeMin(b, fbsutils.Convert(t.PurchaseCooltimeMin, t.FlatBuffer.TableKey))
	ShopExcelAddSalePeriodTo(b, b.CreateString(fbsutils.Convert(t.SalePeriodTo, t.FlatBuffer.TableKey)))
	ShopExcelAddSalePeriodFrom(b, b.CreateString(fbsutils.Convert(t.SalePeriodFrom, t.FlatBuffer.TableKey)))
	ShopExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	ShopExcelStartGoodsIdVector(b, len(t.GoodsId))
	for i := range len(t.GoodsId) {
		b.PrependInt64(fbsutils.Convert(t.GoodsId[len(t.GoodsId)-i-1], t.FlatBuffer.TableKey))
	}
	ShopExcelAddGoodsId(b, b.EndVector(len(t.GoodsId)))
	ShopExcelAddUseBigPopup(b, t.UseBigPopup)
	ShopExcelAddIsLegacy(b, t.IsLegacy)
	ShopExcelAddCategoryType(b, fbsutils.Convert(t.CategoryType, t.FlatBuffer.TableKey))
	ShopExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	ShopExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return ShopExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ShopExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ShopExcelDto) UnmarshalMessage(e *ShopExcel) error {
	t.ShopUpdateGroupId = fbsutils.Convert(e.ShopUpdateGroupId(), t.FlatBuffer.TableKey)
	t.DisplayTag = ProductDisplayTag(fbsutils.Convert(int32(e.DisplayTag()), t.FlatBuffer.TableKey))
	t.RestrictBuyWhenInventoryFull = e.RestrictBuyWhenInventoryFull()
	t.BuyReportEventName = fbsutils.Convert(string(e.BuyReportEventName()), t.FlatBuffer.TableKey)
	t.PurchaseCountResetType = PurchaseCountResetType(fbsutils.Convert(int32(e.PurchaseCountResetType()), t.FlatBuffer.TableKey))
	t.PurchaseCountLimit = fbsutils.Convert(e.PurchaseCountLimit(), t.FlatBuffer.TableKey)
	t.PurchaseCooltimeMin = fbsutils.Convert(e.PurchaseCooltimeMin(), t.FlatBuffer.TableKey)
	t.SalePeriodTo = fbsutils.Convert(string(e.SalePeriodTo()), t.FlatBuffer.TableKey)
	t.SalePeriodFrom = fbsutils.Convert(string(e.SalePeriodFrom()), t.FlatBuffer.TableKey)
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.GoodsId = make([]int64, e.GoodsIdLength())
	for i := range e.GoodsIdLength() {
		t.GoodsId[i] = fbsutils.Convert(e.GoodsId(i), t.FlatBuffer.TableKey)
	}
	t.UseBigPopup = e.UseBigPopup()
	t.IsLegacy = e.IsLegacy()
	t.CategoryType = ShopCategoryType(fbsutils.Convert(int32(e.CategoryType()), t.FlatBuffer.TableKey))
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ShopExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsShopExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ShopExcelDto) FlatDataName() string {
	return "ShopExcel"
}
