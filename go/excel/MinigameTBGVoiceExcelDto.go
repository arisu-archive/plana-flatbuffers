// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGVoiceExcelDto represents a FlatBuffers table
type MinigameTBGVoiceExcelDto struct {
	fbsutils.FlatBuffer
	VoiceId        uint32            `json:"voice_id"`
	VoiceCondition TBGVoiceCondition `json:"voice_condition"`
	UniqueId       int64             `json:"unique_id"`
	EventContentId int64             `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGVoiceExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameTBGVoiceExcelStart(b)
	MinigameTBGVoiceExcelAddVoiceId(b, fbsutils.Convert(t.VoiceId, t.FlatBuffer.TableKey))
	MinigameTBGVoiceExcelAddVoiceCondition(b, fbsutils.Convert(t.VoiceCondition, t.FlatBuffer.TableKey))
	MinigameTBGVoiceExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	MinigameTBGVoiceExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return MinigameTBGVoiceExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGVoiceExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGVoiceExcelDto) UnmarshalMessage(e *MinigameTBGVoiceExcel) error {
	t.VoiceId = fbsutils.Convert(e.VoiceId(), t.FlatBuffer.TableKey)
	t.VoiceCondition = TBGVoiceCondition(fbsutils.Convert(int32(e.VoiceCondition()), t.FlatBuffer.TableKey))
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGVoiceExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGVoiceExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGVoiceExcelDto) FlatDataName() string {
	return "MinigameTBGVoiceExcel"
}
