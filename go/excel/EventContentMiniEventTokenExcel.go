// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentMiniEventTokenExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentMiniEventTokenExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMiniEventTokenExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentMiniEventTokenExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentMiniEventTokenExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMiniEventTokenExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentMiniEventTokenExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentMiniEventTokenExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentMiniEventTokenExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentMiniEventTokenExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMiniEventTokenExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentMiniEventTokenExcel) ItemUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMiniEventTokenExcel) MutateItemUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EventContentMiniEventTokenExcel) MaximumAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMiniEventTokenExcel) MutateMaximumAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func EventContentMiniEventTokenExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EventContentMiniEventTokenExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentMiniEventTokenExcelAddItemUniqueId(builder *flatbuffers.Builder, itemUniqueId int64) {
	builder.PrependInt64Slot(1, itemUniqueId, 0)
}
func EventContentMiniEventTokenExcelAddMaximumAmount(builder *flatbuffers.Builder, maximumAmount int64) {
	builder.PrependInt64Slot(2, maximumAmount, 0)
}
func EventContentMiniEventTokenExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
