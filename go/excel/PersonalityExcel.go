// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PersonalityExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsPersonalityExcel(buf []byte, offset flatbuffers.UOffsetT) *PersonalityExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersonalityExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPersonalityExcel(buf []byte, offset flatbuffers.UOffsetT) *PersonalityExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersonalityExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PersonalityExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersonalityExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PersonalityExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PersonalityExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PersonalityExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func PersonalityExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PersonalityExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PersonalityExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func PersonalityExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
