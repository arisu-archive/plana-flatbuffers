// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioBGEffectExcelDto represents a FlatBuffers table
type ScenarioBGEffectExcelDto struct {
	fbsutils.FlatBuffer
	Name       uint32           `json:"name"`
	Effect     string           `json:"effect"`
	Effect2    string           `json:"effect2"`
	Scroll     ScenarioBGScroll `json:"scroll"`
	ScrollTime int64            `json:"scroll_time"`
	ScrollFrom int64            `json:"scroll_from"`
	ScrollTo   int64            `json:"scroll_to"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioBGEffectExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_effect := b.CreateString(fbsutils.Convert(t.Effect, t.FlatBuffer.TableKey))
	__offset_effect2 := b.CreateString(fbsutils.Convert(t.Effect2, t.FlatBuffer.TableKey))
	ScenarioBGEffectExcelStart(b)
	ScenarioBGEffectExcelAddName(b, fbsutils.Convert(t.Name, t.FlatBuffer.TableKey))
	ScenarioBGEffectExcelAddEffect(b, __offset_effect)
	ScenarioBGEffectExcelAddEffect2(b, __offset_effect2)
	ScenarioBGEffectExcelAddScroll(b, fbsutils.Convert(t.Scroll, t.FlatBuffer.TableKey))
	ScenarioBGEffectExcelAddScrollTime(b, fbsutils.Convert(t.ScrollTime, t.FlatBuffer.TableKey))
	ScenarioBGEffectExcelAddScrollFrom(b, fbsutils.Convert(t.ScrollFrom, t.FlatBuffer.TableKey))
	ScenarioBGEffectExcelAddScrollTo(b, fbsutils.Convert(t.ScrollTo, t.FlatBuffer.TableKey))
	return ScenarioBGEffectExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioBGEffectExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioBGEffectExcelDto) UnmarshalMessage(e *ScenarioBGEffectExcel) error {
	t.Name = fbsutils.Convert(e.Name(), t.FlatBuffer.TableKey)
	t.Effect = fbsutils.Convert(string(e.Effect()), t.FlatBuffer.TableKey)
	t.Effect2 = fbsutils.Convert(string(e.Effect2()), t.FlatBuffer.TableKey)
	t.Scroll = ScenarioBGScroll(fbsutils.Convert(int32(e.Scroll()), t.FlatBuffer.TableKey))
	t.ScrollTime = fbsutils.Convert(e.ScrollTime(), t.FlatBuffer.TableKey)
	t.ScrollFrom = fbsutils.Convert(e.ScrollFrom(), t.FlatBuffer.TableKey)
	t.ScrollTo = fbsutils.Convert(e.ScrollTo(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioBGEffectExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioBGEffectExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioBGEffectExcelDto) FlatDataName() string {
	return "ScenarioBGEffectExcel"
}
