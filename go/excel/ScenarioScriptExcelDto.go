// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioScriptExcelDto represents a FlatBuffers table
type ScenarioScriptExcelDto struct {
	fbsutils.FlatBuffer
	GroupId        int64  `json:"group_id"`
	SelectionGroup int64  `json:"selection_group"`
	BgmId          int64  `json:"bgm_id"`
	Sound          string `json:"sound"`
	Transition     uint32 `json:"transition"`
	BgName         uint32 `json:"bg_name"`
	BgEffect       uint32 `json:"bg_effect"`
	PopupFileName  string `json:"popup_file_name"`
	ScriptKr       string `json:"script_kr"`
	TextJp         string `json:"text_jp"`
	VoiceId        uint32 `json:"voice_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioScriptExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ScenarioScriptExcelStart(b)
	ScenarioScriptExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	ScenarioScriptExcelAddSelectionGroup(b, fbsutils.Convert(t.SelectionGroup, t.FlatBuffer.TableKey))
	ScenarioScriptExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	ScenarioScriptExcelAddSound(b, b.CreateString(fbsutils.Convert(t.Sound, t.FlatBuffer.TableKey)))
	ScenarioScriptExcelAddTransition(b, fbsutils.Convert(t.Transition, t.FlatBuffer.TableKey))
	ScenarioScriptExcelAddBgName(b, fbsutils.Convert(t.BgName, t.FlatBuffer.TableKey))
	ScenarioScriptExcelAddBgEffect(b, fbsutils.Convert(t.BgEffect, t.FlatBuffer.TableKey))
	ScenarioScriptExcelAddPopupFileName(b, b.CreateString(fbsutils.Convert(t.PopupFileName, t.FlatBuffer.TableKey)))
	ScenarioScriptExcelAddScriptKr(b, b.CreateString(fbsutils.Convert(t.ScriptKr, t.FlatBuffer.TableKey)))
	ScenarioScriptExcelAddTextJp(b, b.CreateString(fbsutils.Convert(t.TextJp, t.FlatBuffer.TableKey)))
	ScenarioScriptExcelAddVoiceId(b, fbsutils.Convert(t.VoiceId, t.FlatBuffer.TableKey))
	return ScenarioScriptExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioScriptExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioScriptExcelDto) UnmarshalMessage(e *ScenarioScriptExcel) error {
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.SelectionGroup = fbsutils.Convert(e.SelectionGroup(), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.Sound = fbsutils.Convert(string(e.Sound()), t.FlatBuffer.TableKey)
	t.Transition = fbsutils.Convert(e.Transition(), t.FlatBuffer.TableKey)
	t.BgName = fbsutils.Convert(e.BgName(), t.FlatBuffer.TableKey)
	t.BgEffect = fbsutils.Convert(e.BgEffect(), t.FlatBuffer.TableKey)
	t.PopupFileName = fbsutils.Convert(string(e.PopupFileName()), t.FlatBuffer.TableKey)
	t.ScriptKr = fbsutils.Convert(string(e.ScriptKr()), t.FlatBuffer.TableKey)
	t.TextJp = fbsutils.Convert(string(e.TextJp()), t.FlatBuffer.TableKey)
	t.VoiceId = fbsutils.Convert(e.VoiceId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioScriptExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioScriptExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioScriptExcelDto) FlatDataName() string {
	return "ScenarioScriptExcel"
}
