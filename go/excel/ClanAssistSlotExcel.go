// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClanAssistSlotExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsClanAssistSlotExcel(buf []byte, offset flatbuffers.UOffsetT) *ClanAssistSlotExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClanAssistSlotExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishClanAssistSlotExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsClanAssistSlotExcel(buf []byte, offset flatbuffers.UOffsetT) *ClanAssistSlotExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ClanAssistSlotExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedClanAssistSlotExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ClanAssistSlotExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClanAssistSlotExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ClanAssistSlotExcel) SlotId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateSlotId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ClanAssistSlotExcel) EchelonType() EchelonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EchelonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateEchelonType(n EchelonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ClanAssistSlotExcel) SlotNumber() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateSlotNumber(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ClanAssistSlotExcel) AssistTermRewardPeriodFromSec() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateAssistTermRewardPeriodFromSec(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ClanAssistSlotExcel) AssistRewardLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateAssistRewardLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *ClanAssistSlotExcel) AssistRentRewardDailyMaxCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateAssistRentRewardDailyMaxCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ClanAssistSlotExcel) AssistRentalFeeAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateAssistRentalFeeAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ClanAssistSlotExcel) AssistRentalFeeAmountStranger() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClanAssistSlotExcel) MutateAssistRentalFeeAmountStranger(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func ClanAssistSlotExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ClanAssistSlotExcelAddSlotId(builder *flatbuffers.Builder, slotId int64) {
	builder.PrependInt64Slot(0, slotId, 0)
}
func ClanAssistSlotExcelAddEchelonType(builder *flatbuffers.Builder, echelonType EchelonType) {
	builder.PrependInt32Slot(1, int32(echelonType), 0)
}
func ClanAssistSlotExcelAddSlotNumber(builder *flatbuffers.Builder, slotNumber int64) {
	builder.PrependInt64Slot(2, slotNumber, 0)
}
func ClanAssistSlotExcelAddAssistTermRewardPeriodFromSec(builder *flatbuffers.Builder, assistTermRewardPeriodFromSec int64) {
	builder.PrependInt64Slot(3, assistTermRewardPeriodFromSec, 0)
}
func ClanAssistSlotExcelAddAssistRewardLimit(builder *flatbuffers.Builder, assistRewardLimit int64) {
	builder.PrependInt64Slot(4, assistRewardLimit, 0)
}
func ClanAssistSlotExcelAddAssistRentRewardDailyMaxCount(builder *flatbuffers.Builder, assistRentRewardDailyMaxCount int64) {
	builder.PrependInt64Slot(5, assistRentRewardDailyMaxCount, 0)
}
func ClanAssistSlotExcelAddAssistRentalFeeAmount(builder *flatbuffers.Builder, assistRentalFeeAmount int64) {
	builder.PrependInt64Slot(6, assistRentalFeeAmount, 0)
}
func ClanAssistSlotExcelAddAssistRentalFeeAmountStranger(builder *flatbuffers.Builder, assistRentalFeeAmountStranger int64) {
	builder.PrependInt64Slot(7, assistRentalFeeAmountStranger, 0)
}
func ClanAssistSlotExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
