// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ScenarioEffectExcelDto represents a FlatBuffers table
type ScenarioEffectExcelDto struct {
	fbsutils.FlatBuffer
	Name       uint32 `json:"name"`
	EffectName string `json:"effect_name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ScenarioEffectExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ScenarioEffectExcelStart(b)
	ScenarioEffectExcelAddName(b, fbsutils.Convert(t.Name, t.FlatBuffer.TableKey))
	ScenarioEffectExcelAddEffectName(b, b.CreateString(fbsutils.Convert(t.EffectName, t.FlatBuffer.TableKey)))
	return ScenarioEffectExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ScenarioEffectExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioEffectExcelDto) UnmarshalMessage(e *ScenarioEffectExcel) error {
	t.Name = fbsutils.Convert(e.Name(), t.FlatBuffer.TableKey)
	t.EffectName = fbsutils.Convert(string(e.EffectName()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ScenarioEffectExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsScenarioEffectExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ScenarioEffectExcelDto) FlatDataName() string {
	return "ScenarioEffectExcel"
}
