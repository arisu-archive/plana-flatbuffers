// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AssistSlotExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAssistSlotExcel(buf []byte, offset flatbuffers.UOffsetT) *AssistSlotExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AssistSlotExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishAssistSlotExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAssistSlotExcel(buf []byte, offset flatbuffers.UOffsetT) *AssistSlotExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AssistSlotExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAssistSlotExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AssistSlotExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AssistSlotExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AssistSlotExcel) SlotId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateSlotId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AssistSlotExcel) EchelonType() EchelonType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EchelonType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateEchelonType(n EchelonType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *AssistSlotExcel) SlotNumber() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateSlotNumber(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *AssistSlotExcel) AssistTermRewardPeriodFromSec() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateAssistTermRewardPeriodFromSec(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *AssistSlotExcel) AssistRewardLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateAssistRewardLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *AssistSlotExcel) AssistRentRewardDailyMaxCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateAssistRentRewardDailyMaxCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *AssistSlotExcel) AssistRentalFeeAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateAssistRentalFeeAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *AssistSlotExcel) AssistRentalFeeAmountStranger() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AssistSlotExcel) MutateAssistRentalFeeAmountStranger(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func AssistSlotExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func AssistSlotExcelAddSlotId(builder *flatbuffers.Builder, slotId int64) {
	builder.PrependInt64Slot(0, slotId, 0)
}
func AssistSlotExcelAddEchelonType(builder *flatbuffers.Builder, echelonType EchelonType) {
	builder.PrependInt32Slot(1, int32(echelonType), 0)
}
func AssistSlotExcelAddSlotNumber(builder *flatbuffers.Builder, slotNumber int64) {
	builder.PrependInt64Slot(2, slotNumber, 0)
}
func AssistSlotExcelAddAssistTermRewardPeriodFromSec(builder *flatbuffers.Builder, assistTermRewardPeriodFromSec int64) {
	builder.PrependInt64Slot(3, assistTermRewardPeriodFromSec, 0)
}
func AssistSlotExcelAddAssistRewardLimit(builder *flatbuffers.Builder, assistRewardLimit int64) {
	builder.PrependInt64Slot(4, assistRewardLimit, 0)
}
func AssistSlotExcelAddAssistRentRewardDailyMaxCount(builder *flatbuffers.Builder, assistRentRewardDailyMaxCount int64) {
	builder.PrependInt64Slot(5, assistRentRewardDailyMaxCount, 0)
}
func AssistSlotExcelAddAssistRentalFeeAmount(builder *flatbuffers.Builder, assistRentalFeeAmount int64) {
	builder.PrependInt64Slot(6, assistRentalFeeAmount, 0)
}
func AssistSlotExcelAddAssistRentalFeeAmountStranger(builder *flatbuffers.Builder, assistRentalFeeAmountStranger int64) {
	builder.PrependInt64Slot(7, assistRentalFeeAmountStranger, 0)
}
func AssistSlotExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
