// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EliminateRaidStageSeasonRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEliminateRaidStageSeasonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidStageSeasonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EliminateRaidStageSeasonRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEliminateRaidStageSeasonRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EliminateRaidStageSeasonRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EliminateRaidStageSeasonRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EliminateRaidStageSeasonRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EliminateRaidStageSeasonRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) MutateSeasonRewardAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) MutateSeasonRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) MutateSeasonRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardParcelUniqueId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) SeasonRewardParcelUniqueIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EliminateRaidStageSeasonRewardExcel) MutateSeasonRewardParcelUniqueId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func EliminateRaidStageSeasonRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EliminateRaidStageSeasonRewardExcelAddSeasonRewardAmount(builder *flatbuffers.Builder, seasonRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(seasonRewardAmount), 0)
}
func EliminateRaidStageSeasonRewardExcelStartSeasonRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EliminateRaidStageSeasonRewardExcelAddSeasonRewardId(builder *flatbuffers.Builder, seasonRewardId int64) {
	builder.PrependInt64Slot(1, seasonRewardId, 0)
}
func EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelType(builder *flatbuffers.Builder, seasonRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(seasonRewardParcelType), 0)
}
func EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelUniqueId(builder *flatbuffers.Builder, seasonRewardParcelUniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(seasonRewardParcelUniqueId), 0)
}
func EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelUniqueIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EliminateRaidStageSeasonRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
