// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterWeaponExpBonusExcelDto represents a FlatBuffers table
type CharacterWeaponExpBonusExcelDto struct {
	fbsutils.FlatBuffer
	WeaponExpGrowthA int32      `json:"weapon_exp_growth_a"`
	WeaponExpGrowthB int32      `json:"weapon_exp_growth_b"`
	WeaponExpGrowthC int32      `json:"weapon_exp_growth_c"`
	WeaponExpGrowthZ int32      `json:"weapon_exp_growth_z"`
	WeaponType       WeaponType `json:"weapon_type"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterWeaponExpBonusExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterWeaponExpBonusExcelStart(b)
	CharacterWeaponExpBonusExcelAddWeaponExpGrowthA(b, fbsutils.Convert(t.WeaponExpGrowthA, t.FlatBuffer.TableKey))
	CharacterWeaponExpBonusExcelAddWeaponExpGrowthB(b, fbsutils.Convert(t.WeaponExpGrowthB, t.FlatBuffer.TableKey))
	CharacterWeaponExpBonusExcelAddWeaponExpGrowthC(b, fbsutils.Convert(t.WeaponExpGrowthC, t.FlatBuffer.TableKey))
	CharacterWeaponExpBonusExcelAddWeaponExpGrowthZ(b, fbsutils.Convert(t.WeaponExpGrowthZ, t.FlatBuffer.TableKey))
	CharacterWeaponExpBonusExcelAddWeaponType(b, fbsutils.Convert(t.WeaponType, t.FlatBuffer.TableKey))
	return CharacterWeaponExpBonusExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterWeaponExpBonusExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterWeaponExpBonusExcelDto) UnmarshalMessage(e *CharacterWeaponExpBonusExcel) error {
	t.WeaponExpGrowthA = fbsutils.Convert(e.WeaponExpGrowthA(), t.FlatBuffer.TableKey)
	t.WeaponExpGrowthB = fbsutils.Convert(e.WeaponExpGrowthB(), t.FlatBuffer.TableKey)
	t.WeaponExpGrowthC = fbsutils.Convert(e.WeaponExpGrowthC(), t.FlatBuffer.TableKey)
	t.WeaponExpGrowthZ = fbsutils.Convert(e.WeaponExpGrowthZ(), t.FlatBuffer.TableKey)
	t.WeaponType = WeaponType(fbsutils.Convert(int32(e.WeaponType()), t.FlatBuffer.TableKey))
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterWeaponExpBonusExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterWeaponExpBonusExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterWeaponExpBonusExcelDto) FlatDataName() string {
	return "CharacterWeaponExpBonusExcel"
}
