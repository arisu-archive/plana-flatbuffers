// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentChangeScenarioExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentChangeScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentChangeScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentChangeScenarioExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentChangeScenarioExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentChangeScenarioExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentChangeScenarioExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentChangeScenarioExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentChangeScenarioExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentChangeScenarioExcel) ChangeCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentChangeScenarioExcel) MutateChangeCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentChangeScenarioExcel) ChangeType() EventChangeType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EventChangeType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentChangeScenarioExcel) MutateChangeType(n EventChangeType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentChangeScenarioExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentChangeScenarioExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentChangeScenarioExcel) ScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentChangeScenarioExcel) MutateScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func EventContentChangeScenarioExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventContentChangeScenarioExcelAddChangeCount(builder *flatbuffers.Builder, changeCount int64) {
	builder.PrependInt64Slot(0, changeCount, 0)
}
func EventContentChangeScenarioExcelAddChangeType(builder *flatbuffers.Builder, changeType EventChangeType) {
	builder.PrependInt32Slot(1, int32(changeType), 0)
}
func EventContentChangeScenarioExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(2, eventContentId, 0)
}
func EventContentChangeScenarioExcelAddScenarioGroupId(builder *flatbuffers.Builder, scenarioGroupId int64) {
	builder.PrependInt64Slot(3, scenarioGroupId, 0)
}
func EventContentChangeScenarioExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
