// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDreamScheduleExcelDto represents a FlatBuffers table
type MiniGameDreamScheduleExcelDto struct {
	fbsutils.FlatBuffer
	AnimationName             string `json:"animation_name"`
	LoadingResource02         string `json:"loading_resource02"`
	LoadingResource01         string `json:"loading_resource01"`
	IconPath                  string `json:"icon_path"`
	LocalizeEtcId             uint32 `json:"localize_etc_id"`
	DisplayOrder              int64  `json:"display_order"`
	DreamMakerScheduleGroupId int64  `json:"dream_maker_schedule_group_id"`
	EventContentId            int64  `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDreamScheduleExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDreamScheduleExcelStart(b)
	MiniGameDreamScheduleExcelAddAnimationName(b, b.CreateString(fbsutils.Convert(t.AnimationName, t.FlatBuffer.TableKey)))
	MiniGameDreamScheduleExcelAddLoadingResource02(b, b.CreateString(fbsutils.Convert(t.LoadingResource02, t.FlatBuffer.TableKey)))
	MiniGameDreamScheduleExcelAddLoadingResource01(b, b.CreateString(fbsutils.Convert(t.LoadingResource01, t.FlatBuffer.TableKey)))
	MiniGameDreamScheduleExcelAddIconPath(b, b.CreateString(fbsutils.Convert(t.IconPath, t.FlatBuffer.TableKey)))
	MiniGameDreamScheduleExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	MiniGameDreamScheduleExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	MiniGameDreamScheduleExcelAddDreamMakerScheduleGroupId(b, fbsutils.Convert(t.DreamMakerScheduleGroupId, t.FlatBuffer.TableKey))
	MiniGameDreamScheduleExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return MiniGameDreamScheduleExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDreamScheduleExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamScheduleExcelDto) UnmarshalMessage(e *MiniGameDreamScheduleExcel) error {
	t.AnimationName = fbsutils.Convert(string(e.AnimationName()), t.FlatBuffer.TableKey)
	t.LoadingResource02 = fbsutils.Convert(string(e.LoadingResource02()), t.FlatBuffer.TableKey)
	t.LoadingResource01 = fbsutils.Convert(string(e.LoadingResource01()), t.FlatBuffer.TableKey)
	t.IconPath = fbsutils.Convert(string(e.IconPath()), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.DreamMakerScheduleGroupId = fbsutils.Convert(e.DreamMakerScheduleGroupId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamScheduleExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDreamScheduleExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDreamScheduleExcelDto) FlatDataName() string {
	return "MiniGameDreamScheduleExcel"
}
