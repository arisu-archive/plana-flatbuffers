// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGThemaExcelDto represents a FlatBuffers table
type MinigameTBGThemaExcelDto struct {
	fbsutils.FlatBuffer
	EventContentId           int64                `json:"event_content_id"`
	InstantClearCostAmount   int64                `json:"instant_clear_cost_amount"`
	IsTutorial               bool                 `json:"is_tutorial"`
	PortalCondition          []TBGPortalCondition `json:"portal_condition"`
	PortalConditionParameter []string             `json:"portal_condition_parameter"`
	ThemaGoalLocalize        string               `json:"thema_goal_localize"`
	ThemaIndex               int32                `json:"thema_index"`
	ThemaLeaderId            int64                `json:"thema_leader_id"`
	ThemaLoadingImage        string               `json:"thema_loading_image"`
	ThemaMap                 string               `json:"thema_map"`
	ThemaMapBg               string               `json:"thema_map_bg"`
	ThemaNameLocalize        string               `json:"thema_name_localize"`
	ThemaPlayerPrefab        string               `json:"thema_player_prefab"`
	ThemaType                TBGThemaType         `json:"thema_type"`
	UniqueId                 int64                `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGThemaExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameTBGThemaExcelStart(b)
	MinigameTBGThemaExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	MinigameTBGThemaExcelAddInstantClearCostAmount(b, fbsutils.Convert(t.InstantClearCostAmount, t.FlatBuffer.TableKey))
	MinigameTBGThemaExcelAddIsTutorial(b, t.IsTutorial)
	MinigameTBGThemaExcelStartPortalConditionVector(b, len(t.PortalCondition))
	for i := range len(t.PortalCondition) {
		b.PrependInt32(fbsutils.Convert(int32(t.PortalCondition[len(t.PortalCondition)-i-1]), t.FlatBuffer.TableKey))
	}
	MinigameTBGThemaExcelAddPortalCondition(b, b.EndVector(len(t.PortalCondition)))
	MinigameTBGThemaExcelStartPortalConditionParameterVector(b, len(t.PortalConditionParameter))
	for i := range len(t.PortalConditionParameter) {
		b.PrependUOffsetT(b.CreateString(t.PortalConditionParameter[len(t.PortalConditionParameter)-i-1]))
	}
	MinigameTBGThemaExcelAddPortalConditionParameter(b, b.EndVector(len(t.PortalConditionParameter)))
	MinigameTBGThemaExcelAddThemaGoalLocalize(b, b.CreateString(fbsutils.Convert(t.ThemaGoalLocalize, t.FlatBuffer.TableKey)))
	MinigameTBGThemaExcelAddThemaIndex(b, fbsutils.Convert(t.ThemaIndex, t.FlatBuffer.TableKey))
	MinigameTBGThemaExcelAddThemaLeaderId(b, fbsutils.Convert(t.ThemaLeaderId, t.FlatBuffer.TableKey))
	MinigameTBGThemaExcelAddThemaLoadingImage(b, b.CreateString(fbsutils.Convert(t.ThemaLoadingImage, t.FlatBuffer.TableKey)))
	MinigameTBGThemaExcelAddThemaMap(b, b.CreateString(fbsutils.Convert(t.ThemaMap, t.FlatBuffer.TableKey)))
	MinigameTBGThemaExcelAddThemaMapBg(b, b.CreateString(fbsutils.Convert(t.ThemaMapBg, t.FlatBuffer.TableKey)))
	MinigameTBGThemaExcelAddThemaNameLocalize(b, b.CreateString(fbsutils.Convert(t.ThemaNameLocalize, t.FlatBuffer.TableKey)))
	MinigameTBGThemaExcelAddThemaPlayerPrefab(b, b.CreateString(fbsutils.Convert(t.ThemaPlayerPrefab, t.FlatBuffer.TableKey)))
	MinigameTBGThemaExcelAddThemaType(b, fbsutils.Convert(t.ThemaType, t.FlatBuffer.TableKey))
	MinigameTBGThemaExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return MinigameTBGThemaExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGThemaExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGThemaExcelDto) UnmarshalMessage(e *MinigameTBGThemaExcel) error {
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.InstantClearCostAmount = fbsutils.Convert(e.InstantClearCostAmount(), t.FlatBuffer.TableKey)
	t.IsTutorial = e.IsTutorial()
	t.PortalCondition = make([]TBGPortalCondition, e.PortalConditionLength())
	for i := range e.PortalConditionLength() {
		t.PortalCondition[i] = TBGPortalCondition(fbsutils.Convert(int32(e.PortalCondition(i)), t.FlatBuffer.TableKey))
	}
	t.PortalConditionParameter = make([]string, e.PortalConditionParameterLength())
	for i := range e.PortalConditionParameterLength() {
		t.PortalConditionParameter[i] = fbsutils.Convert(string(e.PortalConditionParameter(i)), t.FlatBuffer.TableKey)
	}
	t.ThemaGoalLocalize = fbsutils.Convert(string(e.ThemaGoalLocalize()), t.FlatBuffer.TableKey)
	t.ThemaIndex = fbsutils.Convert(e.ThemaIndex(), t.FlatBuffer.TableKey)
	t.ThemaLeaderId = fbsutils.Convert(e.ThemaLeaderId(), t.FlatBuffer.TableKey)
	t.ThemaLoadingImage = fbsutils.Convert(string(e.ThemaLoadingImage()), t.FlatBuffer.TableKey)
	t.ThemaMap = fbsutils.Convert(string(e.ThemaMap()), t.FlatBuffer.TableKey)
	t.ThemaMapBg = fbsutils.Convert(string(e.ThemaMapBg()), t.FlatBuffer.TableKey)
	t.ThemaNameLocalize = fbsutils.Convert(string(e.ThemaNameLocalize()), t.FlatBuffer.TableKey)
	t.ThemaPlayerPrefab = fbsutils.Convert(string(e.ThemaPlayerPrefab()), t.FlatBuffer.TableKey)
	t.ThemaType = TBGThemaType(fbsutils.Convert(int32(e.ThemaType()), t.FlatBuffer.TableKey))
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGThemaExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGThemaExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGThemaExcelDto) FlatDataName() string {
	return "MinigameTBGThemaExcel"
}
