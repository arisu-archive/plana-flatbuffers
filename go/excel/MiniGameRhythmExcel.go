// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameRhythmExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameRhythmExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameRhythmExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameRhythmExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameRhythmExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameRhythmExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameRhythmExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameRhythmExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameRhythmExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameRhythmExcel) ComboImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameRhythmExcel) ArtLevelSceneName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameRhythmExcel) RhythmFileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameRhythmExcel) MaxHpScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateMaxHpScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameRhythmExcel) FeverAttackRate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MiniGameRhythmExcel) MutateFeverAttackRate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *MiniGameRhythmExcel) FeverCriticalRate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MiniGameRhythmExcel) MutateFeverCriticalRate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *MiniGameRhythmExcel) AttackScoreRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateAttackScoreRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MiniGameRhythmExcel) ComboScoreRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateComboScoreRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *MiniGameRhythmExcel) NoteScoreRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateNoteScoreRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *MiniGameRhythmExcel) FeverScoreRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateFeverScoreRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *MiniGameRhythmExcel) MaxScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateMaxScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *MiniGameRhythmExcel) CriticalHpRestoreValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateCriticalHpRestoreValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *MiniGameRhythmExcel) MissDamage() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateMissDamage(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *MiniGameRhythmExcel) MaxHp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateMaxHp(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *MiniGameRhythmExcel) OpenStageScoreAmount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateOpenStageScoreAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *MiniGameRhythmExcel) IsSpecial() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameRhythmExcel) MutateIsSpecial(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *MiniGameRhythmExcel) StageDifficulty() Difficulty {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return Difficulty(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateStageDifficulty(n Difficulty) bool {
	return rcv._tab.MutateInt32Slot(36, int32(n))
}

func (rcv *MiniGameRhythmExcel) PresetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameRhythmExcel) RhythmBgmId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateRhythmBgmId(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *MiniGameRhythmExcel) UniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameRhythmExcel) MutateUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func MiniGameRhythmExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func MiniGameRhythmExcelAddComboImagePath(builder *flatbuffers.Builder, comboImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(comboImagePath), 0)
}
func MiniGameRhythmExcelAddArtLevelSceneName(builder *flatbuffers.Builder, artLevelSceneName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(artLevelSceneName), 0)
}
func MiniGameRhythmExcelAddRhythmFileName(builder *flatbuffers.Builder, rhythmFileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rhythmFileName), 0)
}
func MiniGameRhythmExcelAddMaxHpScore(builder *flatbuffers.Builder, maxHpScore int64) {
	builder.PrependInt64Slot(3, maxHpScore, 0)
}
func MiniGameRhythmExcelAddFeverAttackRate(builder *flatbuffers.Builder, feverAttackRate float32) {
	builder.PrependFloat32Slot(4, feverAttackRate, 0.0)
}
func MiniGameRhythmExcelAddFeverCriticalRate(builder *flatbuffers.Builder, feverCriticalRate float32) {
	builder.PrependFloat32Slot(5, feverCriticalRate, 0.0)
}
func MiniGameRhythmExcelAddAttackScoreRate(builder *flatbuffers.Builder, attackScoreRate int64) {
	builder.PrependInt64Slot(6, attackScoreRate, 0)
}
func MiniGameRhythmExcelAddComboScoreRate(builder *flatbuffers.Builder, comboScoreRate int64) {
	builder.PrependInt64Slot(7, comboScoreRate, 0)
}
func MiniGameRhythmExcelAddNoteScoreRate(builder *flatbuffers.Builder, noteScoreRate int64) {
	builder.PrependInt64Slot(8, noteScoreRate, 0)
}
func MiniGameRhythmExcelAddFeverScoreRate(builder *flatbuffers.Builder, feverScoreRate int64) {
	builder.PrependInt64Slot(9, feverScoreRate, 0)
}
func MiniGameRhythmExcelAddMaxScore(builder *flatbuffers.Builder, maxScore int64) {
	builder.PrependInt64Slot(10, maxScore, 0)
}
func MiniGameRhythmExcelAddCriticalHpRestoreValue(builder *flatbuffers.Builder, criticalHpRestoreValue int64) {
	builder.PrependInt64Slot(11, criticalHpRestoreValue, 0)
}
func MiniGameRhythmExcelAddMissDamage(builder *flatbuffers.Builder, missDamage int64) {
	builder.PrependInt64Slot(12, missDamage, 0)
}
func MiniGameRhythmExcelAddMaxHp(builder *flatbuffers.Builder, maxHp int64) {
	builder.PrependInt64Slot(13, maxHp, 0)
}
func MiniGameRhythmExcelAddOpenStageScoreAmount(builder *flatbuffers.Builder, openStageScoreAmount int64) {
	builder.PrependInt64Slot(14, openStageScoreAmount, 0)
}
func MiniGameRhythmExcelAddIsSpecial(builder *flatbuffers.Builder, isSpecial bool) {
	builder.PrependBoolSlot(15, isSpecial, false)
}
func MiniGameRhythmExcelAddStageDifficulty(builder *flatbuffers.Builder, stageDifficulty Difficulty) {
	builder.PrependInt32Slot(16, int32(stageDifficulty), 0)
}
func MiniGameRhythmExcelAddPresetName(builder *flatbuffers.Builder, presetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(presetName), 0)
}
func MiniGameRhythmExcelAddRhythmBgmId(builder *flatbuffers.Builder, rhythmBgmId int64) {
	builder.PrependInt64Slot(18, rhythmBgmId, 0)
}
func MiniGameRhythmExcelAddUniqueId(builder *flatbuffers.Builder, uniqueId int64) {
	builder.PrependInt64Slot(19, uniqueId, 0)
}
func MiniGameRhythmExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
