// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentMeetupExcelDto represents a FlatBuffers table
type EventContentMeetupExcelDto struct {
	fbsutils.FlatBuffer
	CharacterId              int64                    `json:"character_id"`
	ConditionParameter       []int64                  `json:"condition_parameter"`
	ConditionPrintType       MeetupConditionPrintType `json:"condition_print_type"`
	ConditionScenarioGroupId int64                    `json:"condition_scenario_group_id"`
	ConditionType            MeetupConditionType      `json:"condition_type"`
	EventContentId           int64                    `json:"event_content_id"`
	Id                       int64                    `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentMeetupExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentMeetupExcelStart(b)
	EventContentMeetupExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	EventContentMeetupExcelStartConditionParameterVector(b, len(t.ConditionParameter))
	for i := range len(t.ConditionParameter) {
		b.PrependInt64(fbsutils.Convert(t.ConditionParameter[len(t.ConditionParameter)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentMeetupExcelAddConditionParameter(b, b.EndVector(len(t.ConditionParameter)))
	EventContentMeetupExcelAddConditionPrintType(b, fbsutils.Convert(t.ConditionPrintType, t.FlatBuffer.TableKey))
	EventContentMeetupExcelAddConditionScenarioGroupId(b, fbsutils.Convert(t.ConditionScenarioGroupId, t.FlatBuffer.TableKey))
	EventContentMeetupExcelAddConditionType(b, fbsutils.Convert(t.ConditionType, t.FlatBuffer.TableKey))
	EventContentMeetupExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentMeetupExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return EventContentMeetupExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentMeetupExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentMeetupExcelDto) UnmarshalMessage(e *EventContentMeetupExcel) error {
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.ConditionParameter = make([]int64, e.ConditionParameterLength())
	for i := range e.ConditionParameterLength() {
		t.ConditionParameter[i] = fbsutils.Convert(e.ConditionParameter(i), t.FlatBuffer.TableKey)
	}
	t.ConditionPrintType = MeetupConditionPrintType(fbsutils.Convert(int32(e.ConditionPrintType()), t.FlatBuffer.TableKey))
	t.ConditionScenarioGroupId = fbsutils.Convert(e.ConditionScenarioGroupId(), t.FlatBuffer.TableKey)
	t.ConditionType = MeetupConditionType(fbsutils.Convert(int32(e.ConditionType()), t.FlatBuffer.TableKey))
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentMeetupExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentMeetupExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentMeetupExcelDto) FlatDataName() string {
	return "EventContentMeetupExcel"
}
