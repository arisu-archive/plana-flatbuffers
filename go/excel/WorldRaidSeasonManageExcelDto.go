// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// WorldRaidSeasonManageExcelDto represents a FlatBuffers table
type WorldRaidSeasonManageExcelDto struct {
	fbsutils.FlatBuffer
	BossSpawnTime                     []string      `json:"boss_spawn_time"`
	CanPlayNotSeasonTime              bool          `json:"can_play_not_season_time"`
	CanWorldRaidGemEnter              bool          `json:"can_world_raid_gem_enter"`
	ConditionScenarioGroupid          []int64       `json:"condition_scenario_groupid"`
	EliminateTime                     []string      `json:"eliminate_time"`
	EnterTicket                       CurrencyTypes `json:"enter_ticket"`
	EventContentId                    int64         `json:"event_content_id"`
	HideWorldRaidBossCompleteRewardUi bool          `json:"hide_world_raid_boss_complete_reward_ui"`
	HideWorldRaidTicketUi             bool          `json:"hide_world_raid_ticket_ui"`
	OpenRaidBossGroupId               []int64       `json:"open_raid_boss_group_id"`
	ScenarioOutputConditionId         []int64       `json:"scenario_output_condition_id"`
	SeasonId                          int64         `json:"season_id"`
	SeasonOpenCondition               int64         `json:"season_open_condition"`
	UseFavorRankBuff                  bool          `json:"use_favor_rank_buff"`
	UseWorldRaidCommonToast           bool          `json:"use_world_raid_common_toast"`
	WorldRaidLobbyBanner              string        `json:"world_raid_lobby_banner"`
	WorldRaidLobbyBannerShow          bool          `json:"world_raid_lobby_banner_show"`
	WorldRaidLobbyBg                  string        `json:"world_raid_lobby_bg"`
	WorldRaidLobbyEnterScenario       int64         `json:"world_raid_lobby_enter_scenario"`
	WorldRaidLobbyScene               string        `json:"world_raid_lobby_scene"`
	WorldRaidMapEnterOperator         string        `json:"world_raid_map_enter_operator"`
	WorldRaidUniqueThemeLobbyUi       bool          `json:"world_raid_unique_theme_lobby_ui"`
	WorldRaidUniqueThemeName          string        `json:"world_raid_unique_theme_name"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *WorldRaidSeasonManageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	WorldRaidSeasonManageExcelStart(b)
	WorldRaidSeasonManageExcelStartBossSpawnTimeVector(b, len(t.BossSpawnTime))
	for i := range len(t.BossSpawnTime) {
		b.PrependUOffsetT(b.CreateString(t.BossSpawnTime[len(t.BossSpawnTime)-i-1]))
	}
	WorldRaidSeasonManageExcelAddBossSpawnTime(b, b.EndVector(len(t.BossSpawnTime)))
	WorldRaidSeasonManageExcelAddCanPlayNotSeasonTime(b, t.CanPlayNotSeasonTime)
	WorldRaidSeasonManageExcelAddCanWorldRaidGemEnter(b, t.CanWorldRaidGemEnter)
	WorldRaidSeasonManageExcelStartConditionScenarioGroupidVector(b, len(t.ConditionScenarioGroupid))
	for i := range len(t.ConditionScenarioGroupid) {
		b.PrependInt64(fbsutils.Convert(t.ConditionScenarioGroupid[len(t.ConditionScenarioGroupid)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidSeasonManageExcelAddConditionScenarioGroupid(b, b.EndVector(len(t.ConditionScenarioGroupid)))
	WorldRaidSeasonManageExcelStartEliminateTimeVector(b, len(t.EliminateTime))
	for i := range len(t.EliminateTime) {
		b.PrependUOffsetT(b.CreateString(t.EliminateTime[len(t.EliminateTime)-i-1]))
	}
	WorldRaidSeasonManageExcelAddEliminateTime(b, b.EndVector(len(t.EliminateTime)))
	WorldRaidSeasonManageExcelAddEnterTicket(b, fbsutils.Convert(t.EnterTicket, t.FlatBuffer.TableKey))
	WorldRaidSeasonManageExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	WorldRaidSeasonManageExcelAddHideWorldRaidBossCompleteRewardUi(b, t.HideWorldRaidBossCompleteRewardUi)
	WorldRaidSeasonManageExcelAddHideWorldRaidTicketUi(b, t.HideWorldRaidTicketUi)
	WorldRaidSeasonManageExcelStartOpenRaidBossGroupIdVector(b, len(t.OpenRaidBossGroupId))
	for i := range len(t.OpenRaidBossGroupId) {
		b.PrependInt64(fbsutils.Convert(t.OpenRaidBossGroupId[len(t.OpenRaidBossGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidSeasonManageExcelAddOpenRaidBossGroupId(b, b.EndVector(len(t.OpenRaidBossGroupId)))
	WorldRaidSeasonManageExcelStartScenarioOutputConditionIdVector(b, len(t.ScenarioOutputConditionId))
	for i := range len(t.ScenarioOutputConditionId) {
		b.PrependInt64(fbsutils.Convert(t.ScenarioOutputConditionId[len(t.ScenarioOutputConditionId)-i-1], t.FlatBuffer.TableKey))
	}
	WorldRaidSeasonManageExcelAddScenarioOutputConditionId(b, b.EndVector(len(t.ScenarioOutputConditionId)))
	WorldRaidSeasonManageExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	WorldRaidSeasonManageExcelAddSeasonOpenCondition(b, fbsutils.Convert(t.SeasonOpenCondition, t.FlatBuffer.TableKey))
	WorldRaidSeasonManageExcelAddUseFavorRankBuff(b, t.UseFavorRankBuff)
	WorldRaidSeasonManageExcelAddUseWorldRaidCommonToast(b, t.UseWorldRaidCommonToast)
	WorldRaidSeasonManageExcelAddWorldRaidLobbyBanner(b, b.CreateString(fbsutils.Convert(t.WorldRaidLobbyBanner, t.FlatBuffer.TableKey)))
	WorldRaidSeasonManageExcelAddWorldRaidLobbyBannerShow(b, t.WorldRaidLobbyBannerShow)
	WorldRaidSeasonManageExcelAddWorldRaidLobbyBg(b, b.CreateString(fbsutils.Convert(t.WorldRaidLobbyBg, t.FlatBuffer.TableKey)))
	WorldRaidSeasonManageExcelAddWorldRaidLobbyEnterScenario(b, fbsutils.Convert(t.WorldRaidLobbyEnterScenario, t.FlatBuffer.TableKey))
	WorldRaidSeasonManageExcelAddWorldRaidLobbyScene(b, b.CreateString(fbsutils.Convert(t.WorldRaidLobbyScene, t.FlatBuffer.TableKey)))
	WorldRaidSeasonManageExcelAddWorldRaidMapEnterOperator(b, b.CreateString(fbsutils.Convert(t.WorldRaidMapEnterOperator, t.FlatBuffer.TableKey)))
	WorldRaidSeasonManageExcelAddWorldRaidUniqueThemeLobbyUi(b, t.WorldRaidUniqueThemeLobbyUi)
	WorldRaidSeasonManageExcelAddWorldRaidUniqueThemeName(b, b.CreateString(fbsutils.Convert(t.WorldRaidUniqueThemeName, t.FlatBuffer.TableKey)))
	return WorldRaidSeasonManageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *WorldRaidSeasonManageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidSeasonManageExcelDto) UnmarshalMessage(e *WorldRaidSeasonManageExcel) error {
	t.BossSpawnTime = make([]string, e.BossSpawnTimeLength())
	for i := range e.BossSpawnTimeLength() {
		t.BossSpawnTime[i] = fbsutils.Convert(string(e.BossSpawnTime(i)), t.FlatBuffer.TableKey)
	}
	t.CanPlayNotSeasonTime = e.CanPlayNotSeasonTime()
	t.CanWorldRaidGemEnter = e.CanWorldRaidGemEnter()
	t.ConditionScenarioGroupid = make([]int64, e.ConditionScenarioGroupidLength())
	for i := range e.ConditionScenarioGroupidLength() {
		t.ConditionScenarioGroupid[i] = fbsutils.Convert(e.ConditionScenarioGroupid(i), t.FlatBuffer.TableKey)
	}
	t.EliminateTime = make([]string, e.EliminateTimeLength())
	for i := range e.EliminateTimeLength() {
		t.EliminateTime[i] = fbsutils.Convert(string(e.EliminateTime(i)), t.FlatBuffer.TableKey)
	}
	t.EnterTicket = CurrencyTypes(fbsutils.Convert(int32(e.EnterTicket()), t.FlatBuffer.TableKey))
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.HideWorldRaidBossCompleteRewardUi = e.HideWorldRaidBossCompleteRewardUi()
	t.HideWorldRaidTicketUi = e.HideWorldRaidTicketUi()
	t.OpenRaidBossGroupId = make([]int64, e.OpenRaidBossGroupIdLength())
	for i := range e.OpenRaidBossGroupIdLength() {
		t.OpenRaidBossGroupId[i] = fbsutils.Convert(e.OpenRaidBossGroupId(i), t.FlatBuffer.TableKey)
	}
	t.ScenarioOutputConditionId = make([]int64, e.ScenarioOutputConditionIdLength())
	for i := range e.ScenarioOutputConditionIdLength() {
		t.ScenarioOutputConditionId[i] = fbsutils.Convert(e.ScenarioOutputConditionId(i), t.FlatBuffer.TableKey)
	}
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	t.SeasonOpenCondition = fbsutils.Convert(e.SeasonOpenCondition(), t.FlatBuffer.TableKey)
	t.UseFavorRankBuff = e.UseFavorRankBuff()
	t.UseWorldRaidCommonToast = e.UseWorldRaidCommonToast()
	t.WorldRaidLobbyBanner = fbsutils.Convert(string(e.WorldRaidLobbyBanner()), t.FlatBuffer.TableKey)
	t.WorldRaidLobbyBannerShow = e.WorldRaidLobbyBannerShow()
	t.WorldRaidLobbyBg = fbsutils.Convert(string(e.WorldRaidLobbyBg()), t.FlatBuffer.TableKey)
	t.WorldRaidLobbyEnterScenario = fbsutils.Convert(e.WorldRaidLobbyEnterScenario(), t.FlatBuffer.TableKey)
	t.WorldRaidLobbyScene = fbsutils.Convert(string(e.WorldRaidLobbyScene()), t.FlatBuffer.TableKey)
	t.WorldRaidMapEnterOperator = fbsutils.Convert(string(e.WorldRaidMapEnterOperator()), t.FlatBuffer.TableKey)
	t.WorldRaidUniqueThemeLobbyUi = e.WorldRaidUniqueThemeLobbyUi()
	t.WorldRaidUniqueThemeName = fbsutils.Convert(string(e.WorldRaidUniqueThemeName()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *WorldRaidSeasonManageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsWorldRaidSeasonManageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (WorldRaidSeasonManageExcelDto) FlatDataName() string {
	return "WorldRaidSeasonManageExcel"
}
