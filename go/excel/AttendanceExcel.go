// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AttendanceExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsAttendanceExcel(buf []byte, offset flatbuffers.UOffsetT) *AttendanceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AttendanceExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAttendanceExcel(buf []byte, offset flatbuffers.UOffsetT) *AttendanceExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AttendanceExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AttendanceExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AttendanceExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AttendanceExcel) DecorationGarlandImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) DecorationImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) TitleImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) DialogCategory() DialogCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return DialogCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AttendanceExcel) MutateDialogCategory(n DialogCategory) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *AttendanceExcel) MailType() MailType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return MailType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AttendanceExcel) MutateMailType(n MailType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *AttendanceExcel) ExpiryDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AttendanceExcel) MutateExpiryDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *AttendanceExcel) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) StartableEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) BookSize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AttendanceExcel) MutateBookSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *AttendanceExcel) CountReset() AttendanceResetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return AttendanceResetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AttendanceExcel) MutateCountReset(n AttendanceResetType) bool {
	return rcv._tab.MutateInt32Slot(24, int32(n))
}

func (rcv *AttendanceExcel) CountRule() AttendanceCountRule {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return AttendanceCountRule(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AttendanceExcel) MutateCountRule(n AttendanceCountRule) bool {
	return rcv._tab.MutateInt32Slot(26, int32(n))
}

func (rcv *AttendanceExcel) InfomationLocalizeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) AccountLevelLimit() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AttendanceExcel) MutateAccountLevelLimit(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *AttendanceExcel) AccountType() AccountState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return AccountState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AttendanceExcel) MutateAccountType(n AccountState) bool {
	return rcv._tab.MutateInt32Slot(34, int32(n))
}

func (rcv *AttendanceExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AttendanceExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func (rcv *AttendanceExcel) CountdownPrefab() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AttendanceExcel) Type() AttendanceType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return AttendanceType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AttendanceExcel) MutateType(n AttendanceType) bool {
	return rcv._tab.MutateInt32Slot(40, int32(n))
}

func (rcv *AttendanceExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AttendanceExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func AttendanceExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func AttendanceExcelAddDecorationGarlandImagePath(builder *flatbuffers.Builder, decorationGarlandImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(decorationGarlandImagePath), 0)
}
func AttendanceExcelAddDecorationImagePath(builder *flatbuffers.Builder, decorationImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(decorationImagePath), 0)
}
func AttendanceExcelAddTitleImagePath(builder *flatbuffers.Builder, titleImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(titleImagePath), 0)
}
func AttendanceExcelAddDialogCategory(builder *flatbuffers.Builder, dialogCategory DialogCategory) {
	builder.PrependInt32Slot(3, int32(dialogCategory), 0)
}
func AttendanceExcelAddMailType(builder *flatbuffers.Builder, mailType MailType) {
	builder.PrependInt32Slot(4, int32(mailType), 0)
}
func AttendanceExcelAddExpiryDate(builder *flatbuffers.Builder, expiryDate int64) {
	builder.PrependInt64Slot(5, expiryDate, 0)
}
func AttendanceExcelAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(endDate), 0)
}
func AttendanceExcelAddStartableEndDate(builder *flatbuffers.Builder, startableEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(startableEndDate), 0)
}
func AttendanceExcelAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(startDate), 0)
}
func AttendanceExcelAddBookSize(builder *flatbuffers.Builder, bookSize int64) {
	builder.PrependInt64Slot(9, bookSize, 0)
}
func AttendanceExcelAddCountReset(builder *flatbuffers.Builder, countReset AttendanceResetType) {
	builder.PrependInt32Slot(10, int32(countReset), 0)
}
func AttendanceExcelAddCountRule(builder *flatbuffers.Builder, countRule AttendanceCountRule) {
	builder.PrependInt32Slot(11, int32(countRule), 0)
}
func AttendanceExcelAddInfomationLocalizeCode(builder *flatbuffers.Builder, infomationLocalizeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(infomationLocalizeCode), 0)
}
func AttendanceExcelAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(title), 0)
}
func AttendanceExcelAddAccountLevelLimit(builder *flatbuffers.Builder, accountLevelLimit int64) {
	builder.PrependInt64Slot(14, accountLevelLimit, 0)
}
func AttendanceExcelAddAccountType(builder *flatbuffers.Builder, accountType AccountState) {
	builder.PrependInt32Slot(15, int32(accountType), 0)
}
func AttendanceExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(16, displayOrder, 0)
}
func AttendanceExcelAddCountdownPrefab(builder *flatbuffers.Builder, countdownPrefab flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(countdownPrefab), 0)
}
func AttendanceExcelAddType(builder *flatbuffers.Builder, type_ AttendanceType) {
	builder.PrependInt32Slot(18, int32(type_), 0)
}
func AttendanceExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(19, id, 0)
}
func AttendanceExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
