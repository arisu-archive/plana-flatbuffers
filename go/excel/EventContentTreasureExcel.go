// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentTreasureExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentTreasureExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentTreasureExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentTreasureExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentTreasureExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentTreasureExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentTreasureExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentTreasureExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentTreasureExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentTreasureExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentTreasureExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentTreasureExcel) TitleLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentTreasureExcel) LoopRound() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentTreasureExcel) MutateLoopRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *EventContentTreasureExcel) UsePrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventContentTreasureExcel) TreasureBgImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventContentTreasureExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EventContentTreasureExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func EventContentTreasureExcelAddTitleLocalize(builder *flatbuffers.Builder, titleLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(titleLocalize), 0)
}
func EventContentTreasureExcelAddLoopRound(builder *flatbuffers.Builder, loopRound int32) {
	builder.PrependInt32Slot(2, loopRound, 0)
}
func EventContentTreasureExcelAddUsePrefabName(builder *flatbuffers.Builder, usePrefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(usePrefabName), 0)
}
func EventContentTreasureExcelAddTreasureBgImagePath(builder *flatbuffers.Builder, treasureBgImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(treasureBgImagePath), 0)
}
func EventContentTreasureExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
