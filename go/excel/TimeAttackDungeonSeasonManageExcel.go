// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeAttackDungeonSeasonManageExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeAttackDungeonSeasonManageExcel(buf []byte, offset flatbuffers.UOffsetT) *TimeAttackDungeonSeasonManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeAttackDungeonSeasonManageExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeAttackDungeonSeasonManageExcel(buf []byte, offset flatbuffers.UOffsetT) *TimeAttackDungeonSeasonManageExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeAttackDungeonSeasonManageExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeAttackDungeonSeasonManageExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeAttackDungeonSeasonManageExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeAttackDungeonSeasonManageExcel) DifficultyGeas(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) DifficultyGeasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) MutateDifficultyGeas(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *TimeAttackDungeonSeasonManageExcel) DungeonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) MutateDungeonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *TimeAttackDungeonSeasonManageExcel) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimeAttackDungeonSeasonManageExcel) EndNoteLabelStartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimeAttackDungeonSeasonManageExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *TimeAttackDungeonSeasonManageExcel) RoomLifeTimeInSeconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) MutateRoomLifeTimeInSeconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *TimeAttackDungeonSeasonManageExcel) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimeAttackDungeonSeasonManageExcel) TimeAttackDungeonRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) MutateTimeAttackDungeonRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *TimeAttackDungeonSeasonManageExcel) UiSlot() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeAttackDungeonSeasonManageExcel) MutateUiSlot(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func TimeAttackDungeonSeasonManageExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func TimeAttackDungeonSeasonManageExcelAddDifficultyGeas(builder *flatbuffers.Builder, difficultyGeas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(difficultyGeas), 0)
}
func TimeAttackDungeonSeasonManageExcelStartDifficultyGeasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TimeAttackDungeonSeasonManageExcelAddDungeonId(builder *flatbuffers.Builder, dungeonId int64) {
	builder.PrependInt64Slot(1, dungeonId, 0)
}
func TimeAttackDungeonSeasonManageExcelAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(endDate), 0)
}
func TimeAttackDungeonSeasonManageExcelAddEndNoteLabelStartDate(builder *flatbuffers.Builder, endNoteLabelStartDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(endNoteLabelStartDate), 0)
}
func TimeAttackDungeonSeasonManageExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(4, id, 0)
}
func TimeAttackDungeonSeasonManageExcelAddRoomLifeTimeInSeconds(builder *flatbuffers.Builder, roomLifeTimeInSeconds int64) {
	builder.PrependInt64Slot(5, roomLifeTimeInSeconds, 0)
}
func TimeAttackDungeonSeasonManageExcelAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(startDate), 0)
}
func TimeAttackDungeonSeasonManageExcelAddTimeAttackDungeonRewardId(builder *flatbuffers.Builder, timeAttackDungeonRewardId int64) {
	builder.PrependInt64Slot(7, timeAttackDungeonRewardId, 0)
}
func TimeAttackDungeonSeasonManageExcelAddUiSlot(builder *flatbuffers.Builder, uiSlot int64) {
	builder.PrependInt64Slot(8, uiSlot, 0)
}
func TimeAttackDungeonSeasonManageExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
