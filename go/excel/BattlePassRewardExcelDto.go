// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BattlePassRewardExcelDto represents a FlatBuffers table
type BattlePassRewardExcelDto struct {
	fbsutils.FlatBuffer
	Id                   int64      `json:"id"`
	Level                int64      `json:"level"`
	RewardGroupId        int64      `json:"reward_group_id"`
	RewardParcelAmount   int64      `json:"reward_parcel_amount"`
	RewardParcelType     ParcelType `json:"reward_parcel_type"`
	RewardParcelUniqueId int64      `json:"reward_parcel_unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BattlePassRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	BattlePassRewardExcelStart(b)
	BattlePassRewardExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	BattlePassRewardExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	BattlePassRewardExcelAddRewardGroupId(b, fbsutils.Convert(t.RewardGroupId, t.FlatBuffer.TableKey))
	BattlePassRewardExcelAddRewardParcelAmount(b, fbsutils.Convert(t.RewardParcelAmount, t.FlatBuffer.TableKey))
	BattlePassRewardExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	BattlePassRewardExcelAddRewardParcelUniqueId(b, fbsutils.Convert(t.RewardParcelUniqueId, t.FlatBuffer.TableKey))
	return BattlePassRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BattlePassRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassRewardExcelDto) UnmarshalMessage(e *BattlePassRewardExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.RewardGroupId = fbsutils.Convert(e.RewardGroupId(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = fbsutils.Convert(e.RewardParcelAmount(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	t.RewardParcelUniqueId = fbsutils.Convert(e.RewardParcelUniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBattlePassRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BattlePassRewardExcelDto) FlatDataName() string {
	return "BattlePassRewardExcel"
}
