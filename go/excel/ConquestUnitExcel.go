// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConquestUnitExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsConquestUnitExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestUnitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConquestUnitExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConquestUnitExcel(buf []byte, offset flatbuffers.UOffsetT) *ConquestUnitExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConquestUnitExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConquestUnitExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConquestUnitExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConquestUnitExcel) BattleDuration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateBattleDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ConquestUnitExcel) ClearScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateClearScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ConquestUnitExcel) ConquestRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateConquestRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ConquestUnitExcel) EchelonExtensionType() EchelonExtensionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EchelonExtensionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateEchelonExtensionType(n EchelonExtensionType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *ConquestUnitExcel) EnemyType() ConquestEnemyType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return ConquestEnemyType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateEnemyType(n ConquestEnemyType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *ConquestUnitExcel) EnterScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateEnterScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ConquestUnitExcel) FixedEchelonId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateFixedEchelonId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *ConquestUnitExcel) GroundId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateGroundId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *ConquestUnitExcel) GroupBuffId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateGroupBuffId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *ConquestUnitExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *ConquestUnitExcel) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

func (rcv *ConquestUnitExcel) ManageEchelonStageEnterCostAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateManageEchelonStageEnterCostAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *ConquestUnitExcel) ManageEchelonStageEnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateManageEchelonStageEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *ConquestUnitExcel) ManageEchelonStageEnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateManageEchelonStageEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(30, int32(n))
}

func (rcv *ConquestUnitExcel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestUnitExcel) PointAnimation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestUnitExcel) PrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestUnitExcel) PrevUnitGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutatePrevUnitGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *ConquestUnitExcel) RecommandLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateRecommandLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

func (rcv *ConquestUnitExcel) Scale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConquestUnitExcel) MutateScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(42, n)
}

func (rcv *ConquestUnitExcel) ShieldEffectScale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ConquestUnitExcel) MutateShieldEffectScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(44, n)
}

func (rcv *ConquestUnitExcel) StageEnterCostAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateStageEnterCostAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

func (rcv *ConquestUnitExcel) StageEnterCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateStageEnterCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(48, n)
}

func (rcv *ConquestUnitExcel) StageEnterCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateStageEnterCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(50, int32(n))
}

func (rcv *ConquestUnitExcel) StageTopography() StageTopography {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return StageTopography(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateStageTopography(n StageTopography) bool {
	return rcv._tab.MutateInt32Slot(52, int32(n))
}

func (rcv *ConquestUnitExcel) StarGoalAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ConquestUnitExcel) StarGoalAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateStarGoalAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *ConquestUnitExcel) StarGoal(j int) StarGoalType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StarGoalType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ConquestUnitExcel) StarGoalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateStarGoal(j int, n StarGoalType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ConquestUnitExcel) StrategyPrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestUnitExcel) TacticRewardExp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateTacticRewardExp(n int64) bool {
	return rcv._tab.MutateInt64Slot(60, n)
}

func (rcv *ConquestUnitExcel) Team() ConquestTeamType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return ConquestTeamType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateTeam(n ConquestTeamType) bool {
	return rcv._tab.MutateInt32Slot(62, int32(n))
}

func (rcv *ConquestUnitExcel) UnitFxPrefabName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConquestUnitExcel) UnitGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConquestUnitExcel) MutateUnitGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(66, n)
}

func ConquestUnitExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(32)
}
func ConquestUnitExcelAddBattleDuration(builder *flatbuffers.Builder, battleDuration int64) {
	builder.PrependInt64Slot(0, battleDuration, 0)
}
func ConquestUnitExcelAddClearScenarioGroupId(builder *flatbuffers.Builder, clearScenarioGroupId int64) {
	builder.PrependInt64Slot(1, clearScenarioGroupId, 0)
}
func ConquestUnitExcelAddConquestRewardId(builder *flatbuffers.Builder, conquestRewardId int64) {
	builder.PrependInt64Slot(2, conquestRewardId, 0)
}
func ConquestUnitExcelAddEchelonExtensionType(builder *flatbuffers.Builder, echelonExtensionType EchelonExtensionType) {
	builder.PrependInt32Slot(3, int32(echelonExtensionType), 0)
}
func ConquestUnitExcelAddEnemyType(builder *flatbuffers.Builder, enemyType ConquestEnemyType) {
	builder.PrependInt32Slot(4, int32(enemyType), 0)
}
func ConquestUnitExcelAddEnterScenarioGroupId(builder *flatbuffers.Builder, enterScenarioGroupId int64) {
	builder.PrependInt64Slot(5, enterScenarioGroupId, 0)
}
func ConquestUnitExcelAddFixedEchelonId(builder *flatbuffers.Builder, fixedEchelonId int64) {
	builder.PrependInt64Slot(6, fixedEchelonId, 0)
}
func ConquestUnitExcelAddGroundId(builder *flatbuffers.Builder, groundId int64) {
	builder.PrependInt64Slot(7, groundId, 0)
}
func ConquestUnitExcelAddGroupBuffId(builder *flatbuffers.Builder, groupBuffId int64) {
	builder.PrependInt64Slot(8, groupBuffId, 0)
}
func ConquestUnitExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(9, id, 0)
}
func ConquestUnitExcelAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(10, key, 0)
}
func ConquestUnitExcelAddManageEchelonStageEnterCostAmount(builder *flatbuffers.Builder, manageEchelonStageEnterCostAmount int32) {
	builder.PrependInt32Slot(11, manageEchelonStageEnterCostAmount, 0)
}
func ConquestUnitExcelAddManageEchelonStageEnterCostId(builder *flatbuffers.Builder, manageEchelonStageEnterCostId int64) {
	builder.PrependInt64Slot(12, manageEchelonStageEnterCostId, 0)
}
func ConquestUnitExcelAddManageEchelonStageEnterCostType(builder *flatbuffers.Builder, manageEchelonStageEnterCostType ParcelType) {
	builder.PrependInt32Slot(13, int32(manageEchelonStageEnterCostType), 0)
}
func ConquestUnitExcelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(name), 0)
}
func ConquestUnitExcelAddPointAnimation(builder *flatbuffers.Builder, pointAnimation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(pointAnimation), 0)
}
func ConquestUnitExcelAddPrefabName(builder *flatbuffers.Builder, prefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(prefabName), 0)
}
func ConquestUnitExcelAddPrevUnitGroup(builder *flatbuffers.Builder, prevUnitGroup int64) {
	builder.PrependInt64Slot(17, prevUnitGroup, 0)
}
func ConquestUnitExcelAddRecommandLevel(builder *flatbuffers.Builder, recommandLevel int32) {
	builder.PrependInt32Slot(18, recommandLevel, 0)
}
func ConquestUnitExcelAddScale(builder *flatbuffers.Builder, scale float32) {
	builder.PrependFloat32Slot(19, scale, 0.0)
}
func ConquestUnitExcelAddShieldEffectScale(builder *flatbuffers.Builder, shieldEffectScale float32) {
	builder.PrependFloat32Slot(20, shieldEffectScale, 0.0)
}
func ConquestUnitExcelAddStageEnterCostAmount(builder *flatbuffers.Builder, stageEnterCostAmount int32) {
	builder.PrependInt32Slot(21, stageEnterCostAmount, 0)
}
func ConquestUnitExcelAddStageEnterCostId(builder *flatbuffers.Builder, stageEnterCostId int64) {
	builder.PrependInt64Slot(22, stageEnterCostId, 0)
}
func ConquestUnitExcelAddStageEnterCostType(builder *flatbuffers.Builder, stageEnterCostType ParcelType) {
	builder.PrependInt32Slot(23, int32(stageEnterCostType), 0)
}
func ConquestUnitExcelAddStageTopography(builder *flatbuffers.Builder, stageTopography StageTopography) {
	builder.PrependInt32Slot(24, int32(stageTopography), 0)
}
func ConquestUnitExcelAddStarGoalAmount(builder *flatbuffers.Builder, starGoalAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(starGoalAmount), 0)
}
func ConquestUnitExcelStartStarGoalAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestUnitExcelAddStarGoal(builder *flatbuffers.Builder, starGoal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(starGoal), 0)
}
func ConquestUnitExcelStartStarGoalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConquestUnitExcelAddStrategyPrefabName(builder *flatbuffers.Builder, strategyPrefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(strategyPrefabName), 0)
}
func ConquestUnitExcelAddTacticRewardExp(builder *flatbuffers.Builder, tacticRewardExp int64) {
	builder.PrependInt64Slot(28, tacticRewardExp, 0)
}
func ConquestUnitExcelAddTeam(builder *flatbuffers.Builder, team ConquestTeamType) {
	builder.PrependInt32Slot(29, int32(team), 0)
}
func ConquestUnitExcelAddUnitFxPrefabName(builder *flatbuffers.Builder, unitFxPrefabName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(unitFxPrefabName), 0)
}
func ConquestUnitExcelAddUnitGroup(builder *flatbuffers.Builder, unitGroup int64) {
	builder.PrependInt64Slot(31, unitGroup, 0)
}
func ConquestUnitExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
