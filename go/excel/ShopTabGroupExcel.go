// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShopTabGroupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsShopTabGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopTabGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShopTabGroupExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShopTabGroupExcel(buf []byte, offset flatbuffers.UOffsetT) *ShopTabGroupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShopTabGroupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShopTabGroupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShopTabGroupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShopTabGroupExcel) ShopCategoryTypes(j int) ShopCategoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ShopCategoryType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *ShopTabGroupExcel) ShopCategoryTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ShopTabGroupExcel) MutateShopCategoryTypes(j int, n ShopCategoryType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *ShopTabGroupExcel) DisplayOrder() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopTabGroupExcel) MutateDisplayOrder(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ShopTabGroupExcel) ShopGroupType() ShopGroupType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ShopGroupType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShopTabGroupExcel) MutateShopGroupType(n ShopGroupType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *ShopTabGroupExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShopTabGroupExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func ShopTabGroupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ShopTabGroupExcelAddShopCategoryTypes(builder *flatbuffers.Builder, shopCategoryTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(shopCategoryTypes), 0)
}
func ShopTabGroupExcelStartShopCategoryTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ShopTabGroupExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int32) {
	builder.PrependInt32Slot(1, displayOrder, 0)
}
func ShopTabGroupExcelAddShopGroupType(builder *flatbuffers.Builder, shopGroupType ShopGroupType) {
	builder.PrependInt32Slot(2, int32(shopGroupType), 0)
}
func ShopTabGroupExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(3, id, 0)
}
func ShopTabGroupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
