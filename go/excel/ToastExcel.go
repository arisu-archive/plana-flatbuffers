// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ToastExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsToastExcel(buf []byte, offset flatbuffers.UOffsetT) *ToastExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ToastExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsToastExcel(buf []byte, offset flatbuffers.UOffsetT) *ToastExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ToastExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ToastExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ToastExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ToastExcel) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ToastExcel) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ToastExcel) ToastType() ToastType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ToastType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ToastExcel) MutateToastType(n ToastType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *ToastExcel) MissionId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ToastExcel) MutateMissionId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ToastExcel) TextId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ToastExcel) MutateTextId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ToastExcel) LifeTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ToastExcel) MutateLifeTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func ToastExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ToastExcelAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func ToastExcelAddToastType(builder *flatbuffers.Builder, toastType ToastType) {
	builder.PrependInt32Slot(1, int32(toastType), 0)
}
func ToastExcelAddMissionId(builder *flatbuffers.Builder, missionId uint32) {
	builder.PrependUint32Slot(2, missionId, 0)
}
func ToastExcelAddTextId(builder *flatbuffers.Builder, textId uint32) {
	builder.PrependUint32Slot(3, textId, 0)
}
func ToastExcelAddLifeTime(builder *flatbuffers.Builder, lifeTime int64) {
	builder.PrependInt64Slot(4, lifeTime, 0)
}
func ToastExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
