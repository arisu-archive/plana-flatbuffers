// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterDialogBattlePassExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterDialogBattlePassExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogBattlePassExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterDialogBattlePassExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterDialogBattlePassExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterDialogBattlePassExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterDialogBattlePassExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterDialogBattlePassExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterDialogBattlePassExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterDialogBattlePassExcel) AnimationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogBattlePassExcel) BattlePassId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateBattlePassId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *CharacterDialogBattlePassExcel) CollectionVisible() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CharacterDialogBattlePassExcel) MutateCollectionVisible(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *CharacterDialogBattlePassExcel) CostumeUniqueId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateCostumeUniqueId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CharacterDialogBattlePassExcel) CvCollectionType() CVCollectionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return CVCollectionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateCvCollectionType(n CVCollectionType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *CharacterDialogBattlePassExcel) DialogCategory() DialogCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return DialogCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDialogCategory(n DialogCategory) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *CharacterDialogBattlePassExcel) DialogCondition() DialogCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return DialogCondition(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDialogCondition(n DialogCondition) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *CharacterDialogBattlePassExcel) DialogConditionDetail() DialogConditionDetail {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return DialogConditionDetail(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDialogConditionDetail(n DialogConditionDetail) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *CharacterDialogBattlePassExcel) DialogConditionDetailValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDialogConditionDetailValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *CharacterDialogBattlePassExcel) DialogType() DialogType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return DialogType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDialogType(n DialogType) bool {
	return rcv._tab.MutateInt32Slot(22, int32(n))
}

func (rcv *CharacterDialogBattlePassExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *CharacterDialogBattlePassExcel) Duration() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateDuration(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *CharacterDialogBattlePassExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *CharacterDialogBattlePassExcel) LocalizeCvGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogBattlePassExcel) LocalizeJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogBattlePassExcel) LocalizeKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CharacterDialogBattlePassExcel) OriginalCharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateOriginalCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func (rcv *CharacterDialogBattlePassExcel) ProductionStep() ProductionStep {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return ProductionStep(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateProductionStep(n ProductionStep) bool {
	return rcv._tab.MutateInt32Slot(38, int32(n))
}

func (rcv *CharacterDialogBattlePassExcel) UnlockBattlePassId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateUnlockBattlePassId(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *CharacterDialogBattlePassExcel) VoiceId(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) VoiceIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CharacterDialogBattlePassExcel) MutateVoiceId(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func CharacterDialogBattlePassExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func CharacterDialogBattlePassExcelAddAnimationName(builder *flatbuffers.Builder, animationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(animationName), 0)
}
func CharacterDialogBattlePassExcelAddBattlePassId(builder *flatbuffers.Builder, battlePassId int64) {
	builder.PrependInt64Slot(1, battlePassId, 0)
}
func CharacterDialogBattlePassExcelAddCollectionVisible(builder *flatbuffers.Builder, collectionVisible bool) {
	builder.PrependBoolSlot(2, collectionVisible, false)
}
func CharacterDialogBattlePassExcelAddCostumeUniqueId(builder *flatbuffers.Builder, costumeUniqueId int64) {
	builder.PrependInt64Slot(3, costumeUniqueId, 0)
}
func CharacterDialogBattlePassExcelAddCvCollectionType(builder *flatbuffers.Builder, cvCollectionType CVCollectionType) {
	builder.PrependInt32Slot(4, int32(cvCollectionType), 0)
}
func CharacterDialogBattlePassExcelAddDialogCategory(builder *flatbuffers.Builder, dialogCategory DialogCategory) {
	builder.PrependInt32Slot(5, int32(dialogCategory), 0)
}
func CharacterDialogBattlePassExcelAddDialogCondition(builder *flatbuffers.Builder, dialogCondition DialogCondition) {
	builder.PrependInt32Slot(6, int32(dialogCondition), 0)
}
func CharacterDialogBattlePassExcelAddDialogConditionDetail(builder *flatbuffers.Builder, dialogConditionDetail DialogConditionDetail) {
	builder.PrependInt32Slot(7, int32(dialogConditionDetail), 0)
}
func CharacterDialogBattlePassExcelAddDialogConditionDetailValue(builder *flatbuffers.Builder, dialogConditionDetailValue int64) {
	builder.PrependInt64Slot(8, dialogConditionDetailValue, 0)
}
func CharacterDialogBattlePassExcelAddDialogType(builder *flatbuffers.Builder, dialogType DialogType) {
	builder.PrependInt32Slot(9, int32(dialogType), 0)
}
func CharacterDialogBattlePassExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(10, displayOrder, 0)
}
func CharacterDialogBattlePassExcelAddDuration(builder *flatbuffers.Builder, duration int64) {
	builder.PrependInt64Slot(11, duration, 0)
}
func CharacterDialogBattlePassExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(12, groupId, 0)
}
func CharacterDialogBattlePassExcelAddLocalizeCvGroup(builder *flatbuffers.Builder, localizeCvGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(localizeCvGroup), 0)
}
func CharacterDialogBattlePassExcelAddLocalizeJp(builder *flatbuffers.Builder, localizeJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(localizeJp), 0)
}
func CharacterDialogBattlePassExcelAddLocalizeKr(builder *flatbuffers.Builder, localizeKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(localizeKr), 0)
}
func CharacterDialogBattlePassExcelAddOriginalCharacterId(builder *flatbuffers.Builder, originalCharacterId int64) {
	builder.PrependInt64Slot(16, originalCharacterId, 0)
}
func CharacterDialogBattlePassExcelAddProductionStep(builder *flatbuffers.Builder, productionStep ProductionStep) {
	builder.PrependInt32Slot(17, int32(productionStep), 0)
}
func CharacterDialogBattlePassExcelAddUnlockBattlePassId(builder *flatbuffers.Builder, unlockBattlePassId int64) {
	builder.PrependInt64Slot(18, unlockBattlePassId, 0)
}
func CharacterDialogBattlePassExcelAddVoiceId(builder *flatbuffers.Builder, voiceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(voiceId), 0)
}
func CharacterDialogBattlePassExcelStartVoiceIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CharacterDialogBattlePassExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
