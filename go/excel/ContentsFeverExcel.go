// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ContentsFeverExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsContentsFeverExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentsFeverExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ContentsFeverExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsContentsFeverExcel(buf []byte, offset flatbuffers.UOffsetT) *ContentsFeverExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ContentsFeverExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ContentsFeverExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ContentsFeverExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ContentsFeverExcel) ConditionContent() FeverBattleType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return FeverBattleType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ContentsFeverExcel) MutateConditionContent(n FeverBattleType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *ContentsFeverExcel) FeverDurationTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentsFeverExcel) MutateFeverDurationTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ContentsFeverExcel) FeverStartTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentsFeverExcel) MutateFeverStartTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ContentsFeverExcel) SkillCostFever() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ContentsFeverExcel) MutateSkillCostFever(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ContentsFeverExcel) SkillFeverCheckCondition() SkillPriorityCheckTarget {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return SkillPriorityCheckTarget(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ContentsFeverExcel) MutateSkillFeverCheckCondition(n SkillPriorityCheckTarget) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func ContentsFeverExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ContentsFeverExcelAddConditionContent(builder *flatbuffers.Builder, conditionContent FeverBattleType) {
	builder.PrependInt32Slot(0, int32(conditionContent), 0)
}
func ContentsFeverExcelAddFeverDurationTime(builder *flatbuffers.Builder, feverDurationTime int64) {
	builder.PrependInt64Slot(1, feverDurationTime, 0)
}
func ContentsFeverExcelAddFeverStartTime(builder *flatbuffers.Builder, feverStartTime int64) {
	builder.PrependInt64Slot(2, feverStartTime, 0)
}
func ContentsFeverExcelAddSkillCostFever(builder *flatbuffers.Builder, skillCostFever int64) {
	builder.PrependInt64Slot(3, skillCostFever, 0)
}
func ContentsFeverExcelAddSkillFeverCheckCondition(builder *flatbuffers.Builder, skillFeverCheckCondition SkillPriorityCheckTarget) {
	builder.PrependInt32Slot(4, int32(skillFeverCheckCondition), 0)
}
func ContentsFeverExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
