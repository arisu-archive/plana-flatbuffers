// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentShopInfoExcelDto represents a FlatBuffers table
type EventContentShopInfoExcelDto struct {
	fbsutils.FlatBuffer
	ShopProductUpdateDate string           `json:"shop_product_update_date"`
	OpenPeriodTo          string           `json:"open_period_to"`
	OpenPeriodFrom        string           `json:"open_period_from"`
	GoodsId               []int64          `json:"goods_id"`
	RefreshAbleCount      int64            `json:"refresh_able_count"`
	AutoRefreshCoolTime   int64            `json:"auto_refresh_cool_time"`
	IsSoldOutDimmed       bool             `json:"is_sold_out_dimmed"`
	IsRefresh             bool             `json:"is_refresh"`
	CostParcelId          []int64          `json:"cost_parcel_id"`
	CostParcelType        []ParcelType     `json:"cost_parcel_type"`
	LocalizeCode          uint32           `json:"localize_code"`
	CategoryType          ShopCategoryType `json:"category_type"`
	EventContentId        int64            `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentShopInfoExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentShopInfoExcelStart(b)
	EventContentShopInfoExcelAddShopProductUpdateDate(b, b.CreateString(fbsutils.Convert(t.ShopProductUpdateDate, t.FlatBuffer.TableKey)))
	EventContentShopInfoExcelAddOpenPeriodTo(b, b.CreateString(fbsutils.Convert(t.OpenPeriodTo, t.FlatBuffer.TableKey)))
	EventContentShopInfoExcelAddOpenPeriodFrom(b, b.CreateString(fbsutils.Convert(t.OpenPeriodFrom, t.FlatBuffer.TableKey)))
	EventContentShopInfoExcelStartGoodsIdVector(b, len(t.GoodsId))
	for i := range len(t.GoodsId) {
		b.PrependInt64(fbsutils.Convert(t.GoodsId[len(t.GoodsId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentShopInfoExcelAddGoodsId(b, b.EndVector(len(t.GoodsId)))
	EventContentShopInfoExcelAddRefreshAbleCount(b, fbsutils.Convert(t.RefreshAbleCount, t.FlatBuffer.TableKey))
	EventContentShopInfoExcelAddAutoRefreshCoolTime(b, fbsutils.Convert(t.AutoRefreshCoolTime, t.FlatBuffer.TableKey))
	EventContentShopInfoExcelAddIsSoldOutDimmed(b, t.IsSoldOutDimmed)
	EventContentShopInfoExcelAddIsRefresh(b, t.IsRefresh)
	EventContentShopInfoExcelStartCostParcelIdVector(b, len(t.CostParcelId))
	for i := range len(t.CostParcelId) {
		b.PrependInt64(fbsutils.Convert(t.CostParcelId[len(t.CostParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentShopInfoExcelAddCostParcelId(b, b.EndVector(len(t.CostParcelId)))
	EventContentShopInfoExcelStartCostParcelTypeVector(b, len(t.CostParcelType))
	for i := range len(t.CostParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.CostParcelType[len(t.CostParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentShopInfoExcelAddCostParcelType(b, b.EndVector(len(t.CostParcelType)))
	EventContentShopInfoExcelAddLocalizeCode(b, fbsutils.Convert(t.LocalizeCode, t.FlatBuffer.TableKey))
	EventContentShopInfoExcelAddCategoryType(b, fbsutils.Convert(t.CategoryType, t.FlatBuffer.TableKey))
	EventContentShopInfoExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return EventContentShopInfoExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentShopInfoExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentShopInfoExcelDto) UnmarshalMessage(e *EventContentShopInfoExcel) error {
	t.ShopProductUpdateDate = fbsutils.Convert(string(e.ShopProductUpdateDate()), t.FlatBuffer.TableKey)
	t.OpenPeriodTo = fbsutils.Convert(string(e.OpenPeriodTo()), t.FlatBuffer.TableKey)
	t.OpenPeriodFrom = fbsutils.Convert(string(e.OpenPeriodFrom()), t.FlatBuffer.TableKey)
	t.GoodsId = make([]int64, e.GoodsIdLength())
	for i := range e.GoodsIdLength() {
		t.GoodsId[i] = fbsutils.Convert(e.GoodsId(i), t.FlatBuffer.TableKey)
	}
	t.RefreshAbleCount = fbsutils.Convert(e.RefreshAbleCount(), t.FlatBuffer.TableKey)
	t.AutoRefreshCoolTime = fbsutils.Convert(e.AutoRefreshCoolTime(), t.FlatBuffer.TableKey)
	t.IsSoldOutDimmed = e.IsSoldOutDimmed()
	t.IsRefresh = e.IsRefresh()
	t.CostParcelId = make([]int64, e.CostParcelIdLength())
	for i := range e.CostParcelIdLength() {
		t.CostParcelId[i] = fbsutils.Convert(e.CostParcelId(i), t.FlatBuffer.TableKey)
	}
	t.CostParcelType = make([]ParcelType, e.CostParcelTypeLength())
	for i := range e.CostParcelTypeLength() {
		t.CostParcelType[i] = ParcelType(fbsutils.Convert(int32(e.CostParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.LocalizeCode = fbsutils.Convert(e.LocalizeCode(), t.FlatBuffer.TableKey)
	t.CategoryType = ShopCategoryType(fbsutils.Convert(int32(e.CategoryType()), t.FlatBuffer.TableKey))
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentShopInfoExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentShopInfoExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentShopInfoExcelDto) FlatDataName() string {
	return "EventContentShopInfoExcel"
}
