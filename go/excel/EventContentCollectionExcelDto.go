// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentCollectionExcelDto represents a FlatBuffers table
type EventContentCollectionExcelDto struct {
	fbsutils.FlatBuffer
	SubNameLocalizeCodeId      string                     `json:"sub_name_localize_code_id"`
	LocalizeEtcId              uint32                     `json:"localize_etc_id"`
	Decoration                 string                     `json:"decoration"`
	FullResource               string                     `json:"full_resource"`
	ThumbResource              string                     `json:"thumb_resource"`
	EmblemResource             string                     `json:"emblem_resource"`
	IsHorizon                  bool                       `json:"is_horizon"`
	IsObjectOnFullResource     bool                       `json:"is_object_on_full_resource"`
	IsObject                   bool                       `json:"is_object"`
	UnlockConditionCount       int64                      `json:"unlock_condition_count"`
	MultipleConditionCheckType MultipleConditionCheckType `json:"multiple_condition_check_type"`
	UnlockConditionParameter   []int64                    `json:"unlock_condition_parameter"`
	UnlockConditionType        CollectionUnlockType       `json:"unlock_condition_type"`
	GroupId                    int64                      `json:"group_id"`
	EventContentId             int64                      `json:"event_content_id"`
	Id                         int64                      `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentCollectionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	EventContentCollectionExcelStart(b)
	EventContentCollectionExcelAddSubNameLocalizeCodeId(b, b.CreateString(fbsutils.Convert(t.SubNameLocalizeCodeId, t.FlatBuffer.TableKey)))
	EventContentCollectionExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	EventContentCollectionExcelAddDecoration(b, b.CreateString(fbsutils.Convert(t.Decoration, t.FlatBuffer.TableKey)))
	EventContentCollectionExcelAddFullResource(b, b.CreateString(fbsutils.Convert(t.FullResource, t.FlatBuffer.TableKey)))
	EventContentCollectionExcelAddThumbResource(b, b.CreateString(fbsutils.Convert(t.ThumbResource, t.FlatBuffer.TableKey)))
	EventContentCollectionExcelAddEmblemResource(b, b.CreateString(fbsutils.Convert(t.EmblemResource, t.FlatBuffer.TableKey)))
	EventContentCollectionExcelAddIsHorizon(b, t.IsHorizon)
	EventContentCollectionExcelAddIsObjectOnFullResource(b, t.IsObjectOnFullResource)
	EventContentCollectionExcelAddIsObject(b, t.IsObject)
	EventContentCollectionExcelAddUnlockConditionCount(b, fbsutils.Convert(t.UnlockConditionCount, t.FlatBuffer.TableKey))
	EventContentCollectionExcelAddMultipleConditionCheckType(b, fbsutils.Convert(t.MultipleConditionCheckType, t.FlatBuffer.TableKey))
	EventContentCollectionExcelStartUnlockConditionParameterVector(b, len(t.UnlockConditionParameter))
	for i := range len(t.UnlockConditionParameter) {
		b.PrependInt64(fbsutils.Convert(t.UnlockConditionParameter[len(t.UnlockConditionParameter)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentCollectionExcelAddUnlockConditionParameter(b, b.EndVector(len(t.UnlockConditionParameter)))
	EventContentCollectionExcelAddUnlockConditionType(b, fbsutils.Convert(t.UnlockConditionType, t.FlatBuffer.TableKey))
	EventContentCollectionExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	EventContentCollectionExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	EventContentCollectionExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return EventContentCollectionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentCollectionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCollectionExcelDto) UnmarshalMessage(e *EventContentCollectionExcel) error {
	t.SubNameLocalizeCodeId = fbsutils.Convert(string(e.SubNameLocalizeCodeId()), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.Decoration = fbsutils.Convert(string(e.Decoration()), t.FlatBuffer.TableKey)
	t.FullResource = fbsutils.Convert(string(e.FullResource()), t.FlatBuffer.TableKey)
	t.ThumbResource = fbsutils.Convert(string(e.ThumbResource()), t.FlatBuffer.TableKey)
	t.EmblemResource = fbsutils.Convert(string(e.EmblemResource()), t.FlatBuffer.TableKey)
	t.IsHorizon = e.IsHorizon()
	t.IsObjectOnFullResource = e.IsObjectOnFullResource()
	t.IsObject = e.IsObject()
	t.UnlockConditionCount = fbsutils.Convert(e.UnlockConditionCount(), t.FlatBuffer.TableKey)
	t.MultipleConditionCheckType = MultipleConditionCheckType(fbsutils.Convert(int32(e.MultipleConditionCheckType()), t.FlatBuffer.TableKey))
	t.UnlockConditionParameter = make([]int64, e.UnlockConditionParameterLength())
	for i := range e.UnlockConditionParameterLength() {
		t.UnlockConditionParameter[i] = fbsutils.Convert(e.UnlockConditionParameter(i), t.FlatBuffer.TableKey)
	}
	t.UnlockConditionType = CollectionUnlockType(fbsutils.Convert(int32(e.UnlockConditionType()), t.FlatBuffer.TableKey))
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentCollectionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentCollectionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentCollectionExcelDto) FlatDataName() string {
	return "EventContentCollectionExcel"
}
