// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameMissionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameMissionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMiniGameMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameMissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameMissionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MiniGameMissionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameMissionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameMissionExcel) AccountLevel() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateAccountLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameMissionExcel) AccountType() AccountState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return AccountState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateAccountType(n AccountState) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *MiniGameMissionExcel) Category() MissionCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return MissionCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCategory(n MissionCategory) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *MiniGameMissionExcel) CompleteConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCompleteConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameMissionExcel) CompleteConditionMissionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCompleteConditionMissionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MiniGameMissionExcel) CompleteConditionMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) CompleteConditionMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCompleteConditionMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) CompleteConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) CompleteConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCompleteConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) CompleteConditionParameterTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) CompleteConditionParameterTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCompleteConditionParameterTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameMissionExcel) CompleteConditionType() MissionCompleteConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return MissionCompleteConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateCompleteConditionType(n MissionCompleteConditionType) bool {
	return rcv._tab.MutateInt32Slot(20, int32(n))
}

func (rcv *MiniGameMissionExcel) ConditionRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) ConditionRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateConditionRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) ConditionRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) ConditionRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateConditionRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) ConditionRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) ConditionRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateConditionRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameMissionExcel) Description() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateDescription(n uint32) bool {
	return rcv._tab.MutateUint32Slot(28, n)
}

func (rcv *MiniGameMissionExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *MiniGameMissionExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *MiniGameMissionExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *MiniGameMissionExcel) GroupName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameMissionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *MiniGameMissionExcel) IsCompleteExtensionTime() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameMissionExcel) MutateIsCompleteExtensionTime(n bool) bool {
	return rcv._tab.MutateBoolSlot(40, n)
}

func (rcv *MiniGameMissionExcel) MissionRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MissionRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateMissionRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) MissionRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MissionRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateMissionRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) MissionRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MissionRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateMissionRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MiniGameMissionExcel) PreMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) PreMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutatePreMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MiniGameMissionExcel) ResetType() MissionResetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return MissionResetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateResetType(n MissionResetType) bool {
	return rcv._tab.MutateInt32Slot(50, int32(n))
}

func (rcv *MiniGameMissionExcel) RewardIcon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameMissionExcel) ShortcutUi(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MiniGameMissionExcel) ShortcutUiLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MiniGameMissionExcel) ToastDisplayType() MissionToastDisplayConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return MissionToastDisplayConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameMissionExcel) MutateToastDisplayType(n MissionToastDisplayConditionType) bool {
	return rcv._tab.MutateInt32Slot(56, int32(n))
}

func (rcv *MiniGameMissionExcel) ToastImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiniGameMissionExcel) ViewFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameMissionExcel) MutateViewFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(60, n)
}

func MiniGameMissionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(29)
}
func MiniGameMissionExcelAddAccountLevel(builder *flatbuffers.Builder, accountLevel int64) {
	builder.PrependInt64Slot(0, accountLevel, 0)
}
func MiniGameMissionExcelAddAccountType(builder *flatbuffers.Builder, accountType AccountState) {
	builder.PrependInt32Slot(1, int32(accountType), 0)
}
func MiniGameMissionExcelAddCategory(builder *flatbuffers.Builder, category MissionCategory) {
	builder.PrependInt32Slot(2, int32(category), 0)
}
func MiniGameMissionExcelAddCompleteConditionCount(builder *flatbuffers.Builder, completeConditionCount int64) {
	builder.PrependInt64Slot(3, completeConditionCount, 0)
}
func MiniGameMissionExcelAddCompleteConditionMissionCount(builder *flatbuffers.Builder, completeConditionMissionCount int64) {
	builder.PrependInt64Slot(4, completeConditionMissionCount, 0)
}
func MiniGameMissionExcelAddCompleteConditionMissionId(builder *flatbuffers.Builder, completeConditionMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(completeConditionMissionId), 0)
}
func MiniGameMissionExcelStartCompleteConditionMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameMissionExcelAddCompleteConditionParameter(builder *flatbuffers.Builder, completeConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(completeConditionParameter), 0)
}
func MiniGameMissionExcelStartCompleteConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameMissionExcelAddCompleteConditionParameterTag(builder *flatbuffers.Builder, completeConditionParameterTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(completeConditionParameterTag), 0)
}
func MiniGameMissionExcelStartCompleteConditionParameterTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameMissionExcelAddCompleteConditionType(builder *flatbuffers.Builder, completeConditionType MissionCompleteConditionType) {
	builder.PrependInt32Slot(8, int32(completeConditionType), 0)
}
func MiniGameMissionExcelAddConditionRewardAmount(builder *flatbuffers.Builder, conditionRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(conditionRewardAmount), 0)
}
func MiniGameMissionExcelStartConditionRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameMissionExcelAddConditionRewardParcelId(builder *flatbuffers.Builder, conditionRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(conditionRewardParcelId), 0)
}
func MiniGameMissionExcelStartConditionRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameMissionExcelAddConditionRewardParcelType(builder *flatbuffers.Builder, conditionRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(conditionRewardParcelType), 0)
}
func MiniGameMissionExcelStartConditionRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameMissionExcelAddDescription(builder *flatbuffers.Builder, description uint32) {
	builder.PrependUint32Slot(12, description, 0)
}
func MiniGameMissionExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(13, displayOrder, 0)
}
func MiniGameMissionExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(14, eventContentId, 0)
}
func MiniGameMissionExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(15, groupId, 0)
}
func MiniGameMissionExcelAddGroupName(builder *flatbuffers.Builder, groupName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(groupName), 0)
}
func MiniGameMissionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(17, id, 0)
}
func MiniGameMissionExcelAddIsCompleteExtensionTime(builder *flatbuffers.Builder, isCompleteExtensionTime bool) {
	builder.PrependBoolSlot(18, isCompleteExtensionTime, false)
}
func MiniGameMissionExcelAddMissionRewardAmount(builder *flatbuffers.Builder, missionRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(missionRewardAmount), 0)
}
func MiniGameMissionExcelStartMissionRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameMissionExcelAddMissionRewardParcelId(builder *flatbuffers.Builder, missionRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(missionRewardParcelId), 0)
}
func MiniGameMissionExcelStartMissionRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameMissionExcelAddMissionRewardParcelType(builder *flatbuffers.Builder, missionRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(missionRewardParcelType), 0)
}
func MiniGameMissionExcelStartMissionRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameMissionExcelAddPreMissionId(builder *flatbuffers.Builder, preMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(preMissionId), 0)
}
func MiniGameMissionExcelStartPreMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MiniGameMissionExcelAddResetType(builder *flatbuffers.Builder, resetType MissionResetType) {
	builder.PrependInt32Slot(23, int32(resetType), 0)
}
func MiniGameMissionExcelAddRewardIcon(builder *flatbuffers.Builder, rewardIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(rewardIcon), 0)
}
func MiniGameMissionExcelAddShortcutUi(builder *flatbuffers.Builder, shortcutUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(shortcutUi), 0)
}
func MiniGameMissionExcelStartShortcutUiVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MiniGameMissionExcelAddToastDisplayType(builder *flatbuffers.Builder, toastDisplayType MissionToastDisplayConditionType) {
	builder.PrependInt32Slot(26, int32(toastDisplayType), 0)
}
func MiniGameMissionExcelAddToastImagePath(builder *flatbuffers.Builder, toastImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(toastImagePath), 0)
}
func MiniGameMissionExcelAddViewFlag(builder *flatbuffers.Builder, viewFlag bool) {
	builder.PrependBoolSlot(28, viewFlag, false)
}
func MiniGameMissionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
