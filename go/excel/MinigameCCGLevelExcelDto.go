// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGLevelExcelDto represents a FlatBuffers table
type MinigameCCGLevelExcelDto struct {
	fbsutils.FlatBuffer
	BgmId          int64  `json:"bgm_id"`
	BackgroundPath string `json:"background_path"`
	FloorIndex     int32  `json:"floor_index"`
	CcgId          int64  `json:"ccg_id"`
	LevelId        int64  `json:"level_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGLevelExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameCCGLevelExcelStart(b)
	MinigameCCGLevelExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	MinigameCCGLevelExcelAddBackgroundPath(b, b.CreateString(fbsutils.Convert(t.BackgroundPath, t.FlatBuffer.TableKey)))
	MinigameCCGLevelExcelAddFloorIndex(b, fbsutils.Convert(t.FloorIndex, t.FlatBuffer.TableKey))
	MinigameCCGLevelExcelAddCcgId(b, fbsutils.Convert(t.CcgId, t.FlatBuffer.TableKey))
	MinigameCCGLevelExcelAddLevelId(b, fbsutils.Convert(t.LevelId, t.FlatBuffer.TableKey))
	return MinigameCCGLevelExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGLevelExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGLevelExcelDto) UnmarshalMessage(e *MinigameCCGLevelExcel) error {
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.BackgroundPath = fbsutils.Convert(string(e.BackgroundPath()), t.FlatBuffer.TableKey)
	t.FloorIndex = fbsutils.Convert(e.FloorIndex(), t.FlatBuffer.TableKey)
	t.CcgId = fbsutils.Convert(e.CcgId(), t.FlatBuffer.TableKey)
	t.LevelId = fbsutils.Convert(e.LevelId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGLevelExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGLevelExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGLevelExcelDto) FlatDataName() string {
	return "MinigameCCGLevelExcel"
}
