// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGCharacterExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGCharacterExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGCharacterExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGCharacterExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGCharacterExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGCharacterExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGCharacterExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGCharacterExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGCharacterExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGCharacterExcel) Tags(j int) CCGTagType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return CCGTagType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateTags(j int, n CCGTagType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MinigameCCGCharacterExcel) UiImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGCharacterExcel) ImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGCharacterExcel) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameCCGCharacterExcel) Name() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateName(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *MinigameCCGCharacterExcel) PassiveSkillId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) PassiveSkillIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutatePassiveSkillId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MinigameCCGCharacterExcel) MaxHealth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateMaxHealth(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *MinigameCCGCharacterExcel) ActiveSkillCooldown() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateActiveSkillCooldown(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *MinigameCCGCharacterExcel) ActiveSkilleCostVisible() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MinigameCCGCharacterExcel) MutateActiveSkilleCostVisible(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *MinigameCCGCharacterExcel) ActiveSkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateActiveSkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *MinigameCCGCharacterExcel) ActiveSkillId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateActiveSkillId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *MinigameCCGCharacterExcel) Type() CCGCharacterType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return CCGCharacterType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateType(n CCGCharacterType) bool {
	return rcv._tab.MutateInt32Slot(26, int32(n))
}

func (rcv *MinigameCCGCharacterExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGCharacterExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func MinigameCCGCharacterExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func MinigameCCGCharacterExcelAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tags), 0)
}
func MinigameCCGCharacterExcelStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MinigameCCGCharacterExcelAddUiImagePath(builder *flatbuffers.Builder, uiImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uiImagePath), 0)
}
func MinigameCCGCharacterExcelAddImagePath(builder *flatbuffers.Builder, imagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(imagePath), 0)
}
func MinigameCCGCharacterExcelAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func MinigameCCGCharacterExcelAddName(builder *flatbuffers.Builder, name uint32) {
	builder.PrependUint32Slot(4, name, 0)
}
func MinigameCCGCharacterExcelAddPassiveSkillId(builder *flatbuffers.Builder, passiveSkillId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(passiveSkillId), 0)
}
func MinigameCCGCharacterExcelStartPassiveSkillIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MinigameCCGCharacterExcelAddMaxHealth(builder *flatbuffers.Builder, maxHealth int32) {
	builder.PrependInt32Slot(6, maxHealth, 0)
}
func MinigameCCGCharacterExcelAddActiveSkillCooldown(builder *flatbuffers.Builder, activeSkillCooldown int32) {
	builder.PrependInt32Slot(7, activeSkillCooldown, 0)
}
func MinigameCCGCharacterExcelAddActiveSkilleCostVisible(builder *flatbuffers.Builder, activeSkilleCostVisible bool) {
	builder.PrependBoolSlot(8, activeSkilleCostVisible, false)
}
func MinigameCCGCharacterExcelAddActiveSkillCost(builder *flatbuffers.Builder, activeSkillCost int32) {
	builder.PrependInt32Slot(9, activeSkillCost, 0)
}
func MinigameCCGCharacterExcelAddActiveSkillId(builder *flatbuffers.Builder, activeSkillId int64) {
	builder.PrependInt64Slot(10, activeSkillId, 0)
}
func MinigameCCGCharacterExcelAddType(builder *flatbuffers.Builder, type_ CCGCharacterType) {
	builder.PrependInt32Slot(11, int32(type_), 0)
}
func MinigameCCGCharacterExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(12, id, 0)
}
func MinigameCCGCharacterExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
