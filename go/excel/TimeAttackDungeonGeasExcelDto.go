// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// TimeAttackDungeonGeasExcelDto represents a FlatBuffers table
type TimeAttackDungeonGeasExcelDto struct {
	fbsutils.FlatBuffer
	Id                     int64                 `json:"id"`
	TimeAttackDungeonType  TimeAttackDungeonType `json:"time_attack_dungeon_type"`
	LocalizeEtcKey         uint32                `json:"localize_etc_key"`
	BattleDuration         int64                 `json:"battle_duration"`
	ClearDefaultPoint      int64                 `json:"clear_default_point"`
	ClearTimeWeightPoint   int64                 `json:"clear_time_weight_point"`
	TimeWeightConst        int64                 `json:"time_weight_const"`
	Difficulty             int32                 `json:"difficulty"`
	RecommandLevel         int32                 `json:"recommand_level"`
	GroundId               int64                 `json:"ground_id"`
	AllyPassiveSkillId     []string              `json:"ally_passive_skill_id"`
	AllyPassiveSkillLevel  []int32               `json:"ally_passive_skill_level"`
	EnemyPassiveSkillId    []string              `json:"enemy_passive_skill_id"`
	EnemyPassiveSkillLevel []int32               `json:"enemy_passive_skill_level"`
	GeasIconPath           []string              `json:"geas_icon_path"`
	GeasLocalizeEtcKey     []uint32              `json:"geas_localize_etc_key"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *TimeAttackDungeonGeasExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	var __offset_ally_passive_skill_id flatbuffers.UOffsetT
	__stringOffsets_ally_passive_skill_id := make([]flatbuffers.UOffsetT, len(t.AllyPassiveSkillId))
	for i := range len(t.AllyPassiveSkillId) {
		__stringOffsets_ally_passive_skill_id[i] = b.CreateString(fbsutils.Convert(t.AllyPassiveSkillId[i], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonGeasExcelStartAllyPassiveSkillIdVector(b, len(t.AllyPassiveSkillId))
	for i := range len(t.AllyPassiveSkillId) {
		b.PrependUOffsetT(__stringOffsets_ally_passive_skill_id[len(t.AllyPassiveSkillId)-i-1])
	}
	__offset_ally_passive_skill_id = b.EndVector(len(t.AllyPassiveSkillId))
	var __offset_enemy_passive_skill_id flatbuffers.UOffsetT
	__stringOffsets_enemy_passive_skill_id := make([]flatbuffers.UOffsetT, len(t.EnemyPassiveSkillId))
	for i := range len(t.EnemyPassiveSkillId) {
		__stringOffsets_enemy_passive_skill_id[i] = b.CreateString(fbsutils.Convert(t.EnemyPassiveSkillId[i], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonGeasExcelStartEnemyPassiveSkillIdVector(b, len(t.EnemyPassiveSkillId))
	for i := range len(t.EnemyPassiveSkillId) {
		b.PrependUOffsetT(__stringOffsets_enemy_passive_skill_id[len(t.EnemyPassiveSkillId)-i-1])
	}
	__offset_enemy_passive_skill_id = b.EndVector(len(t.EnemyPassiveSkillId))
	var __offset_geas_icon_path flatbuffers.UOffsetT
	__stringOffsets_geas_icon_path := make([]flatbuffers.UOffsetT, len(t.GeasIconPath))
	for i := range len(t.GeasIconPath) {
		__stringOffsets_geas_icon_path[i] = b.CreateString(fbsutils.Convert(t.GeasIconPath[i], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonGeasExcelStartGeasIconPathVector(b, len(t.GeasIconPath))
	for i := range len(t.GeasIconPath) {
		b.PrependUOffsetT(__stringOffsets_geas_icon_path[len(t.GeasIconPath)-i-1])
	}
	__offset_geas_icon_path = b.EndVector(len(t.GeasIconPath))
	TimeAttackDungeonGeasExcelStart(b)
	TimeAttackDungeonGeasExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddTimeAttackDungeonType(b, fbsutils.Convert(t.TimeAttackDungeonType, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddLocalizeEtcKey(b, fbsutils.Convert(t.LocalizeEtcKey, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddClearDefaultPoint(b, fbsutils.Convert(t.ClearDefaultPoint, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddClearTimeWeightPoint(b, fbsutils.Convert(t.ClearTimeWeightPoint, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddTimeWeightConst(b, fbsutils.Convert(t.TimeWeightConst, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddDifficulty(b, fbsutils.Convert(t.Difficulty, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddRecommandLevel(b, fbsutils.Convert(t.RecommandLevel, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	TimeAttackDungeonGeasExcelAddAllyPassiveSkillId(b, __offset_ally_passive_skill_id)
	TimeAttackDungeonGeasExcelStartAllyPassiveSkillLevelVector(b, len(t.AllyPassiveSkillLevel))
	for i := range len(t.AllyPassiveSkillLevel) {
		b.PrependInt32(fbsutils.Convert(t.AllyPassiveSkillLevel[len(t.AllyPassiveSkillLevel)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonGeasExcelAddAllyPassiveSkillLevel(b, b.EndVector(len(t.AllyPassiveSkillLevel)))
	TimeAttackDungeonGeasExcelAddEnemyPassiveSkillId(b, __offset_enemy_passive_skill_id)
	TimeAttackDungeonGeasExcelStartEnemyPassiveSkillLevelVector(b, len(t.EnemyPassiveSkillLevel))
	for i := range len(t.EnemyPassiveSkillLevel) {
		b.PrependInt32(fbsutils.Convert(t.EnemyPassiveSkillLevel[len(t.EnemyPassiveSkillLevel)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonGeasExcelAddEnemyPassiveSkillLevel(b, b.EndVector(len(t.EnemyPassiveSkillLevel)))
	TimeAttackDungeonGeasExcelAddGeasIconPath(b, __offset_geas_icon_path)
	TimeAttackDungeonGeasExcelStartGeasLocalizeEtcKeyVector(b, len(t.GeasLocalizeEtcKey))
	for i := range len(t.GeasLocalizeEtcKey) {
		b.PrependUint32(fbsutils.Convert(t.GeasLocalizeEtcKey[len(t.GeasLocalizeEtcKey)-i-1], t.FlatBuffer.TableKey))
	}
	TimeAttackDungeonGeasExcelAddGeasLocalizeEtcKey(b, b.EndVector(len(t.GeasLocalizeEtcKey)))
	return TimeAttackDungeonGeasExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *TimeAttackDungeonGeasExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *TimeAttackDungeonGeasExcelDto) UnmarshalMessage(e *TimeAttackDungeonGeasExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.TimeAttackDungeonType = TimeAttackDungeonType(fbsutils.Convert(int32(e.TimeAttackDungeonType()), t.FlatBuffer.TableKey))
	t.LocalizeEtcKey = fbsutils.Convert(e.LocalizeEtcKey(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.ClearDefaultPoint = fbsutils.Convert(e.ClearDefaultPoint(), t.FlatBuffer.TableKey)
	t.ClearTimeWeightPoint = fbsutils.Convert(e.ClearTimeWeightPoint(), t.FlatBuffer.TableKey)
	t.TimeWeightConst = fbsutils.Convert(e.TimeWeightConst(), t.FlatBuffer.TableKey)
	t.Difficulty = fbsutils.Convert(e.Difficulty(), t.FlatBuffer.TableKey)
	t.RecommandLevel = fbsutils.Convert(e.RecommandLevel(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.AllyPassiveSkillId = make([]string, e.AllyPassiveSkillIdLength())
	for i := range e.AllyPassiveSkillIdLength() {
		t.AllyPassiveSkillId[i] = fbsutils.Convert(string(e.AllyPassiveSkillId(i)), t.FlatBuffer.TableKey)
	}
	t.AllyPassiveSkillLevel = make([]int32, e.AllyPassiveSkillLevelLength())
	for i := range e.AllyPassiveSkillLevelLength() {
		t.AllyPassiveSkillLevel[i] = fbsutils.Convert(e.AllyPassiveSkillLevel(i), t.FlatBuffer.TableKey)
	}
	t.EnemyPassiveSkillId = make([]string, e.EnemyPassiveSkillIdLength())
	for i := range e.EnemyPassiveSkillIdLength() {
		t.EnemyPassiveSkillId[i] = fbsutils.Convert(string(e.EnemyPassiveSkillId(i)), t.FlatBuffer.TableKey)
	}
	t.EnemyPassiveSkillLevel = make([]int32, e.EnemyPassiveSkillLevelLength())
	for i := range e.EnemyPassiveSkillLevelLength() {
		t.EnemyPassiveSkillLevel[i] = fbsutils.Convert(e.EnemyPassiveSkillLevel(i), t.FlatBuffer.TableKey)
	}
	t.GeasIconPath = make([]string, e.GeasIconPathLength())
	for i := range e.GeasIconPathLength() {
		t.GeasIconPath[i] = fbsutils.Convert(string(e.GeasIconPath(i)), t.FlatBuffer.TableKey)
	}
	t.GeasLocalizeEtcKey = make([]uint32, e.GeasLocalizeEtcKeyLength())
	for i := range e.GeasLocalizeEtcKeyLength() {
		t.GeasLocalizeEtcKey[i] = fbsutils.Convert(e.GeasLocalizeEtcKey(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *TimeAttackDungeonGeasExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsTimeAttackDungeonGeasExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (TimeAttackDungeonGeasExcelDto) FlatDataName() string {
	return "TimeAttackDungeonGeasExcel"
}
