// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGRewardItemExcelDto represents a FlatBuffers table
type MinigameCCGRewardItemExcelDto struct {
	fbsutils.FlatBuffer
	DisplayOrder       int64      `json:"display_order"`
	RewardParcelAmount int32      `json:"reward_parcel_amount"`
	RewardParcelId     int64      `json:"reward_parcel_id"`
	RewardParcelType   ParcelType `json:"reward_parcel_type"`
	MinPoint           int32      `json:"min_point"`
	CcgId              int64      `json:"ccg_id"`
	Id                 int64      `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGRewardItemExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameCCGRewardItemExcelStart(b)
	MinigameCCGRewardItemExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	MinigameCCGRewardItemExcelAddRewardParcelAmount(b, fbsutils.Convert(t.RewardParcelAmount, t.FlatBuffer.TableKey))
	MinigameCCGRewardItemExcelAddRewardParcelId(b, fbsutils.Convert(t.RewardParcelId, t.FlatBuffer.TableKey))
	MinigameCCGRewardItemExcelAddRewardParcelType(b, fbsutils.Convert(t.RewardParcelType, t.FlatBuffer.TableKey))
	MinigameCCGRewardItemExcelAddMinPoint(b, fbsutils.Convert(t.MinPoint, t.FlatBuffer.TableKey))
	MinigameCCGRewardItemExcelAddCcgId(b, fbsutils.Convert(t.CcgId, t.FlatBuffer.TableKey))
	MinigameCCGRewardItemExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return MinigameCCGRewardItemExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGRewardItemExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGRewardItemExcelDto) UnmarshalMessage(e *MinigameCCGRewardItemExcel) error {
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = fbsutils.Convert(e.RewardParcelAmount(), t.FlatBuffer.TableKey)
	t.RewardParcelId = fbsutils.Convert(e.RewardParcelId(), t.FlatBuffer.TableKey)
	t.RewardParcelType = ParcelType(fbsutils.Convert(int32(e.RewardParcelType()), t.FlatBuffer.TableKey))
	t.MinPoint = fbsutils.Convert(e.MinPoint(), t.FlatBuffer.TableKey)
	t.CcgId = fbsutils.Convert(e.CcgId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGRewardItemExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGRewardItemExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGRewardItemExcelDto) FlatDataName() string {
	return "MinigameCCGRewardItemExcel"
}
