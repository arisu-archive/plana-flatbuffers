// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TutorialExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTutorialExcel(buf []byte, offset flatbuffers.UOffsetT) *TutorialExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TutorialExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishTutorialExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTutorialExcel(buf []byte, offset flatbuffers.UOffsetT) *TutorialExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TutorialExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTutorialExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TutorialExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TutorialExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TutorialExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TutorialExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *TutorialExcel) CompletionReportEventName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TutorialExcel) CompulsoryTutorial() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TutorialExcel) MutateCompulsoryTutorial(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *TutorialExcel) DescriptionTutorial() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TutorialExcel) MutateDescriptionTutorial(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *TutorialExcel) TutorialStageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TutorialExcel) MutateTutorialStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *TutorialExcel) UiName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TutorialExcel) UiNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TutorialExcel) TutorialParentName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TutorialExcel) TutorialParentNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TutorialExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TutorialExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func TutorialExcelAddCompletionReportEventName(builder *flatbuffers.Builder, completionReportEventName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(completionReportEventName), 0)
}
func TutorialExcelAddCompulsoryTutorial(builder *flatbuffers.Builder, compulsoryTutorial bool) {
	builder.PrependBoolSlot(2, compulsoryTutorial, false)
}
func TutorialExcelAddDescriptionTutorial(builder *flatbuffers.Builder, descriptionTutorial bool) {
	builder.PrependBoolSlot(3, descriptionTutorial, false)
}
func TutorialExcelAddTutorialStageId(builder *flatbuffers.Builder, tutorialStageId int64) {
	builder.PrependInt64Slot(4, tutorialStageId, 0)
}
func TutorialExcelAddUiName(builder *flatbuffers.Builder, uiName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(uiName), 0)
}
func TutorialExcelStartUiNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TutorialExcelAddTutorialParentName(builder *flatbuffers.Builder, tutorialParentName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(tutorialParentName), 0)
}
func TutorialExcelStartTutorialParentNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TutorialExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
