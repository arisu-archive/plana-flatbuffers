// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AttendanceRewardExcelDto represents a FlatBuffers table
type AttendanceRewardExcelDto struct {
	fbsutils.FlatBuffer
	AttendanceId     int64        `json:"attendance_id"`
	Day              int64        `json:"day"`
	RewardIcon       string       `json:"reward_icon"`
	RewardParcelType []ParcelType `json:"reward_parcel_type"`
	RewardId         []int64      `json:"reward_id"`
	RewardAmount     []int64      `json:"reward_amount"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AttendanceRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_reward_icon := b.CreateString(fbsutils.Convert(t.RewardIcon, t.FlatBuffer.TableKey))
	AttendanceRewardExcelStart(b)
	AttendanceRewardExcelAddAttendanceId(b, fbsutils.Convert(t.AttendanceId, t.FlatBuffer.TableKey))
	AttendanceRewardExcelAddDay(b, fbsutils.Convert(t.Day, t.FlatBuffer.TableKey))
	AttendanceRewardExcelAddRewardIcon(b, __offset_reward_icon)
	AttendanceRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	AttendanceRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	AttendanceRewardExcelStartRewardIdVector(b, len(t.RewardId))
	for i := range len(t.RewardId) {
		b.PrependInt64(fbsutils.Convert(t.RewardId[len(t.RewardId)-i-1], t.FlatBuffer.TableKey))
	}
	AttendanceRewardExcelAddRewardId(b, b.EndVector(len(t.RewardId)))
	AttendanceRewardExcelStartRewardAmountVector(b, len(t.RewardAmount))
	for i := range len(t.RewardAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardAmount[len(t.RewardAmount)-i-1], t.FlatBuffer.TableKey))
	}
	AttendanceRewardExcelAddRewardAmount(b, b.EndVector(len(t.RewardAmount)))
	return AttendanceRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AttendanceRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AttendanceRewardExcelDto) UnmarshalMessage(e *AttendanceRewardExcel) error {
	t.AttendanceId = fbsutils.Convert(e.AttendanceId(), t.FlatBuffer.TableKey)
	t.Day = fbsutils.Convert(e.Day(), t.FlatBuffer.TableKey)
	t.RewardIcon = fbsutils.Convert(string(e.RewardIcon()), t.FlatBuffer.TableKey)
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardId = make([]int64, e.RewardIdLength())
	for i := range e.RewardIdLength() {
		t.RewardId[i] = fbsutils.Convert(e.RewardId(i), t.FlatBuffer.TableKey)
	}
	t.RewardAmount = make([]int64, e.RewardAmountLength())
	for i := range e.RewardAmountLength() {
		t.RewardAmount[i] = fbsutils.Convert(e.RewardAmount(i), t.FlatBuffer.TableKey)
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AttendanceRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAttendanceRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AttendanceRewardExcelDto) FlatDataName() string {
	return "AttendanceRewardExcel"
}
