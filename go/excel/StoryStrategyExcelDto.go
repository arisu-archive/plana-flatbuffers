// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// StoryStrategyExcelDto represents a FlatBuffers table
type StoryStrategyExcelDto struct {
	fbsutils.FlatBuffer
	BattleDuration            int64               `json:"battle_duration"`
	BgmId                     int64               `json:"bgm_id"`
	ContentType               ContentType         `json:"content_type"`
	FirstClearReportEventName string              `json:"first_clear_report_event_name"`
	Id                        int64               `json:"id"`
	Localize                  string              `json:"localize"`
	MaxTurn                   int32               `json:"max_turn"`
	Name                      string              `json:"name"`
	StageEnterEchelonCount    int32               `json:"stage_enter_echelon_count"`
	StageTopography           StageTopography     `json:"stage_topography"`
	StrategyEnvironment       StrategyEnvironment `json:"strategy_environment"`
	StrategyMap               string              `json:"strategy_map"`
	StrategyMapBg             string              `json:"strategy_map_bg"`
	WhiteListId               int64               `json:"white_list_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *StoryStrategyExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	StoryStrategyExcelStart(b)
	StoryStrategyExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddContentType(b, fbsutils.Convert(t.ContentType, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddFirstClearReportEventName(b, b.CreateString(fbsutils.Convert(t.FirstClearReportEventName, t.FlatBuffer.TableKey)))
	StoryStrategyExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddLocalize(b, b.CreateString(fbsutils.Convert(t.Localize, t.FlatBuffer.TableKey)))
	StoryStrategyExcelAddMaxTurn(b, fbsutils.Convert(t.MaxTurn, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddName(b, b.CreateString(fbsutils.Convert(t.Name, t.FlatBuffer.TableKey)))
	StoryStrategyExcelAddStageEnterEchelonCount(b, fbsutils.Convert(t.StageEnterEchelonCount, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddStageTopography(b, fbsutils.Convert(t.StageTopography, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddStrategyEnvironment(b, fbsutils.Convert(t.StrategyEnvironment, t.FlatBuffer.TableKey))
	StoryStrategyExcelAddStrategyMap(b, b.CreateString(fbsutils.Convert(t.StrategyMap, t.FlatBuffer.TableKey)))
	StoryStrategyExcelAddStrategyMapBg(b, b.CreateString(fbsutils.Convert(t.StrategyMapBg, t.FlatBuffer.TableKey)))
	StoryStrategyExcelAddWhiteListId(b, fbsutils.Convert(t.WhiteListId, t.FlatBuffer.TableKey))
	return StoryStrategyExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *StoryStrategyExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *StoryStrategyExcelDto) UnmarshalMessage(e *StoryStrategyExcel) error {
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.ContentType = ContentType(fbsutils.Convert(int32(e.ContentType()), t.FlatBuffer.TableKey))
	t.FirstClearReportEventName = fbsutils.Convert(string(e.FirstClearReportEventName()), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Localize = fbsutils.Convert(string(e.Localize()), t.FlatBuffer.TableKey)
	t.MaxTurn = fbsutils.Convert(e.MaxTurn(), t.FlatBuffer.TableKey)
	t.Name = fbsutils.Convert(string(e.Name()), t.FlatBuffer.TableKey)
	t.StageEnterEchelonCount = fbsutils.Convert(e.StageEnterEchelonCount(), t.FlatBuffer.TableKey)
	t.StageTopography = StageTopography(fbsutils.Convert(int32(e.StageTopography()), t.FlatBuffer.TableKey))
	t.StrategyEnvironment = StrategyEnvironment(fbsutils.Convert(int32(e.StrategyEnvironment()), t.FlatBuffer.TableKey))
	t.StrategyMap = fbsutils.Convert(string(e.StrategyMap()), t.FlatBuffer.TableKey)
	t.StrategyMapBg = fbsutils.Convert(string(e.StrategyMapBg()), t.FlatBuffer.TableKey)
	t.WhiteListId = fbsutils.Convert(e.WhiteListId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *StoryStrategyExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsStoryStrategyExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (StoryStrategyExcelDto) FlatDataName() string {
	return "StoryStrategyExcel"
}
