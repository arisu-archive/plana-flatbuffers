// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MemoryLobbyExcelDto represents a FlatBuffers table
type MemoryLobbyExcelDto struct {
	fbsutils.FlatBuffer
	Id                  int64               `json:"id"`
	ProductionStep      ProductionStep      `json:"production_step"`
	LocalizeEtcId       uint32              `json:"localize_etc_id"`
	CharacterId         int64               `json:"character_id"`
	PrefabName          string              `json:"prefab_name"`
	MemoryLobbyCategory MemoryLobbyCategory `json:"memory_lobby_category"`
	SlotTextureName     string              `json:"slot_texture_name"`
	RewardTextureName   string              `json:"reward_texture_name"`
	BgmId               int64               `json:"bgm_id"`
	AudioClipJp         string              `json:"audio_clip_jp"`
	AudioClipKr         string              `json:"audio_clip_kr"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MemoryLobbyExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_prefab_name := b.CreateString(fbsutils.Convert(t.PrefabName, t.FlatBuffer.TableKey))
	__offset_slot_texture_name := b.CreateString(fbsutils.Convert(t.SlotTextureName, t.FlatBuffer.TableKey))
	__offset_reward_texture_name := b.CreateString(fbsutils.Convert(t.RewardTextureName, t.FlatBuffer.TableKey))
	__offset_audio_clip_jp := b.CreateString(fbsutils.Convert(t.AudioClipJp, t.FlatBuffer.TableKey))
	__offset_audio_clip_kr := b.CreateString(fbsutils.Convert(t.AudioClipKr, t.FlatBuffer.TableKey))
	MemoryLobbyExcelStart(b)
	MemoryLobbyExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	MemoryLobbyExcelAddProductionStep(b, fbsutils.Convert(t.ProductionStep, t.FlatBuffer.TableKey))
	MemoryLobbyExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	MemoryLobbyExcelAddCharacterId(b, fbsutils.Convert(t.CharacterId, t.FlatBuffer.TableKey))
	MemoryLobbyExcelAddPrefabName(b, __offset_prefab_name)
	MemoryLobbyExcelAddMemoryLobbyCategory(b, fbsutils.Convert(t.MemoryLobbyCategory, t.FlatBuffer.TableKey))
	MemoryLobbyExcelAddSlotTextureName(b, __offset_slot_texture_name)
	MemoryLobbyExcelAddRewardTextureName(b, __offset_reward_texture_name)
	MemoryLobbyExcelAddBgmId(b, fbsutils.Convert(t.BgmId, t.FlatBuffer.TableKey))
	MemoryLobbyExcelAddAudioClipJp(b, __offset_audio_clip_jp)
	MemoryLobbyExcelAddAudioClipKr(b, __offset_audio_clip_kr)
	return MemoryLobbyExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MemoryLobbyExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MemoryLobbyExcelDto) UnmarshalMessage(e *MemoryLobbyExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.ProductionStep = ProductionStep(fbsutils.Convert(int32(e.ProductionStep()), t.FlatBuffer.TableKey))
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.CharacterId = fbsutils.Convert(e.CharacterId(), t.FlatBuffer.TableKey)
	t.PrefabName = fbsutils.Convert(string(e.PrefabName()), t.FlatBuffer.TableKey)
	t.MemoryLobbyCategory = MemoryLobbyCategory(fbsutils.Convert(int32(e.MemoryLobbyCategory()), t.FlatBuffer.TableKey))
	t.SlotTextureName = fbsutils.Convert(string(e.SlotTextureName()), t.FlatBuffer.TableKey)
	t.RewardTextureName = fbsutils.Convert(string(e.RewardTextureName()), t.FlatBuffer.TableKey)
	t.BgmId = fbsutils.Convert(e.BgmId(), t.FlatBuffer.TableKey)
	t.AudioClipJp = fbsutils.Convert(string(e.AudioClipJp()), t.FlatBuffer.TableKey)
	t.AudioClipKr = fbsutils.Convert(string(e.AudioClipKr()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MemoryLobbyExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMemoryLobbyExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MemoryLobbyExcelDto) FlatDataName() string {
	return "MemoryLobbyExcel"
}
