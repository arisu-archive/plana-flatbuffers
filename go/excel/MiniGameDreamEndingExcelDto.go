// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDreamEndingExcelDto represents a FlatBuffers table
type MiniGameDreamEndingExcelDto struct {
	fbsutils.FlatBuffer
	EndingConditionValue []int64                     `json:"ending_condition_value"`
	EndingCondition      []DreamMakerEndingCondition `json:"ending_condition"`
	ScenarioGroupId      int64                       `json:"scenario_group_id"`
	Order                int32                       `json:"order"`
	DreamMakerEndingType DreamMakerEndingType        `json:"dream_maker_ending_type"`
	EndingId             int64                       `json:"ending_id"`
	EventContentId       int64                       `json:"event_content_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDreamEndingExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDreamEndingExcelStart(b)
	MiniGameDreamEndingExcelStartEndingConditionValueVector(b, len(t.EndingConditionValue))
	for i := range len(t.EndingConditionValue) {
		b.PrependInt64(fbsutils.Convert(t.EndingConditionValue[len(t.EndingConditionValue)-i-1], t.FlatBuffer.TableKey))
	}
	MiniGameDreamEndingExcelAddEndingConditionValue(b, b.EndVector(len(t.EndingConditionValue)))
	MiniGameDreamEndingExcelStartEndingConditionVector(b, len(t.EndingCondition))
	for i := range len(t.EndingCondition) {
		b.PrependInt32(fbsutils.Convert(int32(t.EndingCondition[len(t.EndingCondition)-i-1]), t.FlatBuffer.TableKey))
	}
	MiniGameDreamEndingExcelAddEndingCondition(b, b.EndVector(len(t.EndingCondition)))
	MiniGameDreamEndingExcelAddScenarioGroupId(b, fbsutils.Convert(t.ScenarioGroupId, t.FlatBuffer.TableKey))
	MiniGameDreamEndingExcelAddOrder(b, fbsutils.Convert(t.Order, t.FlatBuffer.TableKey))
	MiniGameDreamEndingExcelAddDreamMakerEndingType(b, fbsutils.Convert(t.DreamMakerEndingType, t.FlatBuffer.TableKey))
	MiniGameDreamEndingExcelAddEndingId(b, fbsutils.Convert(t.EndingId, t.FlatBuffer.TableKey))
	MiniGameDreamEndingExcelAddEventContentId(b, fbsutils.Convert(t.EventContentId, t.FlatBuffer.TableKey))
	return MiniGameDreamEndingExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDreamEndingExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamEndingExcelDto) UnmarshalMessage(e *MiniGameDreamEndingExcel) error {
	t.EndingConditionValue = make([]int64, e.EndingConditionValueLength())
	for i := range e.EndingConditionValueLength() {
		t.EndingConditionValue[i] = fbsutils.Convert(e.EndingConditionValue(i), t.FlatBuffer.TableKey)
	}
	t.EndingCondition = make([]DreamMakerEndingCondition, e.EndingConditionLength())
	for i := range e.EndingConditionLength() {
		t.EndingCondition[i] = DreamMakerEndingCondition(fbsutils.Convert(int32(e.EndingCondition(i)), t.FlatBuffer.TableKey))
	}
	t.ScenarioGroupId = fbsutils.Convert(e.ScenarioGroupId(), t.FlatBuffer.TableKey)
	t.Order = fbsutils.Convert(e.Order(), t.FlatBuffer.TableKey)
	t.DreamMakerEndingType = DreamMakerEndingType(fbsutils.Convert(int32(e.DreamMakerEndingType()), t.FlatBuffer.TableKey))
	t.EndingId = fbsutils.Convert(e.EndingId(), t.FlatBuffer.TableKey)
	t.EventContentId = fbsutils.Convert(e.EventContentId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDreamEndingExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDreamEndingExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDreamEndingExcelDto) FlatDataName() string {
	return "MiniGameDreamEndingExcel"
}
