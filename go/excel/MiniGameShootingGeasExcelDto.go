// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameShootingGeasExcelDto represents a FlatBuffers table
type MiniGameShootingGeasExcelDto struct {
	fbsutils.FlatBuffer
	GeasData         string `json:"geas_data"`
	GeasType         Geas   `json:"geas_type"`
	HideInPausePopup bool   `json:"hide_in_pause_popup"`
	Icon             string `json:"icon"`
	MaxOverlapCount  int32  `json:"max_overlap_count"`
	NeedGeasId       int64  `json:"need_geas_id"`
	Probability      int64  `json:"probability"`
	UniqueId         int64  `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameShootingGeasExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameShootingGeasExcelStart(b)
	MiniGameShootingGeasExcelAddGeasData(b, b.CreateString(fbsutils.Convert(t.GeasData, t.FlatBuffer.TableKey)))
	MiniGameShootingGeasExcelAddGeasType(b, fbsutils.Convert(t.GeasType, t.FlatBuffer.TableKey))
	MiniGameShootingGeasExcelAddHideInPausePopup(b, t.HideInPausePopup)
	MiniGameShootingGeasExcelAddIcon(b, b.CreateString(fbsutils.Convert(t.Icon, t.FlatBuffer.TableKey)))
	MiniGameShootingGeasExcelAddMaxOverlapCount(b, fbsutils.Convert(t.MaxOverlapCount, t.FlatBuffer.TableKey))
	MiniGameShootingGeasExcelAddNeedGeasId(b, fbsutils.Convert(t.NeedGeasId, t.FlatBuffer.TableKey))
	MiniGameShootingGeasExcelAddProbability(b, fbsutils.Convert(t.Probability, t.FlatBuffer.TableKey))
	MiniGameShootingGeasExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return MiniGameShootingGeasExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameShootingGeasExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameShootingGeasExcelDto) UnmarshalMessage(e *MiniGameShootingGeasExcel) error {
	t.GeasData = fbsutils.Convert(string(e.GeasData()), t.FlatBuffer.TableKey)
	t.GeasType = Geas(fbsutils.Convert(int32(e.GeasType()), t.FlatBuffer.TableKey))
	t.HideInPausePopup = e.HideInPausePopup()
	t.Icon = fbsutils.Convert(string(e.Icon()), t.FlatBuffer.TableKey)
	t.MaxOverlapCount = fbsutils.Convert(e.MaxOverlapCount(), t.FlatBuffer.TableKey)
	t.NeedGeasId = fbsutils.Convert(e.NeedGeasId(), t.FlatBuffer.TableKey)
	t.Probability = fbsutils.Convert(e.Probability(), t.FlatBuffer.TableKey)
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameShootingGeasExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameShootingGeasExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameShootingGeasExcelDto) FlatDataName() string {
	return "MiniGameShootingGeasExcel"
}
