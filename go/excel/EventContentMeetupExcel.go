// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentMeetupExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentMeetupExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMeetupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentMeetupExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentMeetupExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMeetupExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentMeetupExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentMeetupExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentMeetupExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentMeetupExcel) ConditionPrintType() MeetupConditionPrintType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MeetupConditionPrintType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateConditionPrintType(n MeetupConditionPrintType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *EventContentMeetupExcel) ConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentMeetupExcel) ConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentMeetupExcel) ConditionType() MeetupConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return MeetupConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateConditionType(n MeetupConditionType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EventContentMeetupExcel) ConditionScenarioGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateConditionScenarioGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *EventContentMeetupExcel) CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateCharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *EventContentMeetupExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *EventContentMeetupExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMeetupExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func EventContentMeetupExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func EventContentMeetupExcelAddConditionPrintType(builder *flatbuffers.Builder, conditionPrintType MeetupConditionPrintType) {
	builder.PrependInt32Slot(0, int32(conditionPrintType), 0)
}
func EventContentMeetupExcelAddConditionParameter(builder *flatbuffers.Builder, conditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(conditionParameter), 0)
}
func EventContentMeetupExcelStartConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentMeetupExcelAddConditionType(builder *flatbuffers.Builder, conditionType MeetupConditionType) {
	builder.PrependInt32Slot(2, int32(conditionType), 0)
}
func EventContentMeetupExcelAddConditionScenarioGroupId(builder *flatbuffers.Builder, conditionScenarioGroupId int64) {
	builder.PrependInt64Slot(3, conditionScenarioGroupId, 0)
}
func EventContentMeetupExcelAddCharacterId(builder *flatbuffers.Builder, characterId int64) {
	builder.PrependInt64Slot(4, characterId, 0)
}
func EventContentMeetupExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(5, eventContentId, 0)
}
func EventContentMeetupExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(6, id, 0)
}
func EventContentMeetupExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
