// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ArenaSeasonCloseRewardExcelDto represents a FlatBuffers table
type ArenaSeasonCloseRewardExcelDto struct {
	fbsutils.FlatBuffer
	RankEnd              int64        `json:"rank_end"`
	RankStart            int64        `json:"rank_start"`
	RewardParcelAmount   []int64      `json:"reward_parcel_amount"`
	RewardParcelType     []ParcelType `json:"reward_parcel_type"`
	RewardParcelUniqueId []int64      `json:"reward_parcel_unique_id"`
	SeasonId             int64        `json:"season_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ArenaSeasonCloseRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ArenaSeasonCloseRewardExcelStart(b)
	ArenaSeasonCloseRewardExcelAddRankEnd(b, fbsutils.Convert(t.RankEnd, t.FlatBuffer.TableKey))
	ArenaSeasonCloseRewardExcelAddRankStart(b, fbsutils.Convert(t.RankStart, t.FlatBuffer.TableKey))
	ArenaSeasonCloseRewardExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	ArenaSeasonCloseRewardExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	ArenaSeasonCloseRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	ArenaSeasonCloseRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	ArenaSeasonCloseRewardExcelStartRewardParcelUniqueIdVector(b, len(t.RewardParcelUniqueId))
	for i := range len(t.RewardParcelUniqueId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelUniqueId[len(t.RewardParcelUniqueId)-i-1], t.FlatBuffer.TableKey))
	}
	ArenaSeasonCloseRewardExcelAddRewardParcelUniqueId(b, b.EndVector(len(t.RewardParcelUniqueId)))
	ArenaSeasonCloseRewardExcelAddSeasonId(b, fbsutils.Convert(t.SeasonId, t.FlatBuffer.TableKey))
	return ArenaSeasonCloseRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ArenaSeasonCloseRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ArenaSeasonCloseRewardExcelDto) UnmarshalMessage(e *ArenaSeasonCloseRewardExcel) error {
	t.RankEnd = fbsutils.Convert(e.RankEnd(), t.FlatBuffer.TableKey)
	t.RankStart = fbsutils.Convert(e.RankStart(), t.FlatBuffer.TableKey)
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelUniqueId = make([]int64, e.RewardParcelUniqueIdLength())
	for i := range e.RewardParcelUniqueIdLength() {
		t.RewardParcelUniqueId[i] = fbsutils.Convert(e.RewardParcelUniqueId(i), t.FlatBuffer.TableKey)
	}
	t.SeasonId = fbsutils.Convert(e.SeasonId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ArenaSeasonCloseRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsArenaSeasonCloseRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ArenaSeasonCloseRewardExcelDto) FlatDataName() string {
	return "ArenaSeasonCloseRewardExcel"
}
