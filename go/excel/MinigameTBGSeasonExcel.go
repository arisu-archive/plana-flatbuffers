// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameTBGSeasonExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameTBGSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameTBGSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameTBGSeasonExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameTBGSeasonExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameTBGSeasonExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameTBGSeasonExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameTBGSeasonExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameTBGSeasonExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameTBGSeasonExcel) AttackDamage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateAttackDamage(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *MinigameTBGSeasonExcel) CriticalAttackDamage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateCriticalAttackDamage(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *MinigameTBGSeasonExcel) DefaultEchelonHp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateDefaultEchelonHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *MinigameTBGSeasonExcel) DefaultItemDiceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateDefaultItemDiceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonRevivalCostAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonRevivalCostAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonRevivalCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonRevivalCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonRevivalCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonRevivalCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot1CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonSlot1CharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot1Portrait() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot2CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonSlot2CharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot2Portrait() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot3CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonSlot3CharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot3Portrait() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot4CharacterId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEchelonSlot4CharacterId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *MinigameTBGSeasonExcel) EchelonSlot4Portrait() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameTBGSeasonExcel) EnemyBossHp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEnemyBossHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *MinigameTBGSeasonExcel) EnemyMinionHp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEnemyMinionHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *MinigameTBGSeasonExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *MinigameTBGSeasonExcel) EventUseCostId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEventUseCostId(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *MinigameTBGSeasonExcel) EventUseCostType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateEventUseCostType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(42, int32(n))
}

func (rcv *MinigameTBGSeasonExcel) InstantClearRound() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateInstantClearRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

func (rcv *MinigameTBGSeasonExcel) ItemSlot() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateItemSlot(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

func (rcv *MinigameTBGSeasonExcel) LoopThemaIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateLoopThemaIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

func (rcv *MinigameTBGSeasonExcel) MapImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameTBGSeasonExcel) MapNameLocalize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MinigameTBGSeasonExcel) MaxDicePlus() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateMaxDicePlus(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

func (rcv *MinigameTBGSeasonExcel) MaxHp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateMaxHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

func (rcv *MinigameTBGSeasonExcel) RoundItemSelectLimit() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateRoundItemSelectLimit(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

func (rcv *MinigameTBGSeasonExcel) StartThemaIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameTBGSeasonExcel) MutateStartThemaIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

func MinigameTBGSeasonExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(29)
}
func MinigameTBGSeasonExcelAddAttackDamage(builder *flatbuffers.Builder, attackDamage int32) {
	builder.PrependInt32Slot(0, attackDamage, 0)
}
func MinigameTBGSeasonExcelAddCriticalAttackDamage(builder *flatbuffers.Builder, criticalAttackDamage int32) {
	builder.PrependInt32Slot(1, criticalAttackDamage, 0)
}
func MinigameTBGSeasonExcelAddDefaultEchelonHp(builder *flatbuffers.Builder, defaultEchelonHp int32) {
	builder.PrependInt32Slot(2, defaultEchelonHp, 0)
}
func MinigameTBGSeasonExcelAddDefaultItemDiceId(builder *flatbuffers.Builder, defaultItemDiceId int64) {
	builder.PrependInt64Slot(3, defaultItemDiceId, 0)
}
func MinigameTBGSeasonExcelAddEchelonRevivalCostAmount(builder *flatbuffers.Builder, echelonRevivalCostAmount int32) {
	builder.PrependInt32Slot(4, echelonRevivalCostAmount, 0)
}
func MinigameTBGSeasonExcelAddEchelonRevivalCostId(builder *flatbuffers.Builder, echelonRevivalCostId int64) {
	builder.PrependInt64Slot(5, echelonRevivalCostId, 0)
}
func MinigameTBGSeasonExcelAddEchelonRevivalCostType(builder *flatbuffers.Builder, echelonRevivalCostType ParcelType) {
	builder.PrependInt32Slot(6, int32(echelonRevivalCostType), 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot1CharacterId(builder *flatbuffers.Builder, echelonSlot1CharacterId int64) {
	builder.PrependInt64Slot(7, echelonSlot1CharacterId, 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot1Portrait(builder *flatbuffers.Builder, echelonSlot1Portrait flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(echelonSlot1Portrait), 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot2CharacterId(builder *flatbuffers.Builder, echelonSlot2CharacterId int64) {
	builder.PrependInt64Slot(9, echelonSlot2CharacterId, 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot2Portrait(builder *flatbuffers.Builder, echelonSlot2Portrait flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(echelonSlot2Portrait), 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot3CharacterId(builder *flatbuffers.Builder, echelonSlot3CharacterId int64) {
	builder.PrependInt64Slot(11, echelonSlot3CharacterId, 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot3Portrait(builder *flatbuffers.Builder, echelonSlot3Portrait flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(echelonSlot3Portrait), 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot4CharacterId(builder *flatbuffers.Builder, echelonSlot4CharacterId int64) {
	builder.PrependInt64Slot(13, echelonSlot4CharacterId, 0)
}
func MinigameTBGSeasonExcelAddEchelonSlot4Portrait(builder *flatbuffers.Builder, echelonSlot4Portrait flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(echelonSlot4Portrait), 0)
}
func MinigameTBGSeasonExcelAddEnemyBossHp(builder *flatbuffers.Builder, enemyBossHp int32) {
	builder.PrependInt32Slot(15, enemyBossHp, 0)
}
func MinigameTBGSeasonExcelAddEnemyMinionHp(builder *flatbuffers.Builder, enemyMinionHp int32) {
	builder.PrependInt32Slot(16, enemyMinionHp, 0)
}
func MinigameTBGSeasonExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(17, eventContentId, 0)
}
func MinigameTBGSeasonExcelAddEventUseCostId(builder *flatbuffers.Builder, eventUseCostId int64) {
	builder.PrependInt64Slot(18, eventUseCostId, 0)
}
func MinigameTBGSeasonExcelAddEventUseCostType(builder *flatbuffers.Builder, eventUseCostType ParcelType) {
	builder.PrependInt32Slot(19, int32(eventUseCostType), 0)
}
func MinigameTBGSeasonExcelAddInstantClearRound(builder *flatbuffers.Builder, instantClearRound int32) {
	builder.PrependInt32Slot(20, instantClearRound, 0)
}
func MinigameTBGSeasonExcelAddItemSlot(builder *flatbuffers.Builder, itemSlot int32) {
	builder.PrependInt32Slot(21, itemSlot, 0)
}
func MinigameTBGSeasonExcelAddLoopThemaIndex(builder *flatbuffers.Builder, loopThemaIndex int32) {
	builder.PrependInt32Slot(22, loopThemaIndex, 0)
}
func MinigameTBGSeasonExcelAddMapImagePath(builder *flatbuffers.Builder, mapImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(mapImagePath), 0)
}
func MinigameTBGSeasonExcelAddMapNameLocalize(builder *flatbuffers.Builder, mapNameLocalize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(mapNameLocalize), 0)
}
func MinigameTBGSeasonExcelAddMaxDicePlus(builder *flatbuffers.Builder, maxDicePlus int32) {
	builder.PrependInt32Slot(25, maxDicePlus, 0)
}
func MinigameTBGSeasonExcelAddMaxHp(builder *flatbuffers.Builder, maxHp int32) {
	builder.PrependInt32Slot(26, maxHp, 0)
}
func MinigameTBGSeasonExcelAddRoundItemSelectLimit(builder *flatbuffers.Builder, roundItemSelectLimit int32) {
	builder.PrependInt32Slot(27, roundItemSelectLimit, 0)
}
func MinigameTBGSeasonExcelAddStartThemaIndex(builder *flatbuffers.Builder, startThemaIndex int32) {
	builder.PrependInt32Slot(28, startThemaIndex, 0)
}
func MinigameTBGSeasonExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
