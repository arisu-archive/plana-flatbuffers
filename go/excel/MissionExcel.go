// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MissionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *MissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MissionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMissionExcel(buf []byte, offset flatbuffers.UOffsetT) *MissionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MissionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MissionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MissionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MissionExcel) MissionRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MissionExcel) MissionRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutateMissionRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *MissionExcel) MissionRewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MissionExcel) MissionRewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutateMissionRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MissionExcel) MissionRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MissionExcel) MissionRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutateMissionRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MissionExcel) RewardIcon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MissionExcel) CompleteConditionParameterTag(j int) Tag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Tag(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MissionExcel) CompleteConditionParameterTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutateCompleteConditionParameterTag(j int, n Tag) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MissionExcel) CompleteConditionParameter(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MissionExcel) CompleteConditionParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutateCompleteConditionParameter(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MissionExcel) CompleteConditionCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateCompleteConditionCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *MissionExcel) CompleteConditionType() MissionCompleteConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return MissionCompleteConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MissionExcel) MutateCompleteConditionType(n MissionCompleteConditionType) bool {
	return rcv._tab.MutateInt32Slot(18, int32(n))
}

func (rcv *MissionExcel) ChallengeStageShortcut() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateChallengeStageShortcut(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *MissionExcel) ShortcutUi(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissionExcel) ShortcutUiLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) ContentTags(j int) SuddenMissionContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return SuddenMissionContentType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *MissionExcel) ContentTagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutateContentTags(j int, n SuddenMissionContentType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *MissionExcel) AccountLevel() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateAccountLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *MissionExcel) AccountType() AccountState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return AccountState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MissionExcel) MutateAccountType(n AccountState) bool {
	return rcv._tab.MutateInt32Slot(28, int32(n))
}

func (rcv *MissionExcel) PreMissionId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MissionExcel) PreMissionIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MissionExcel) MutatePreMissionId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MissionExcel) DisplayOrder() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateDisplayOrder(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *MissionExcel) DateAutoRefer() ContentType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return ContentType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MissionExcel) MutateDateAutoRefer(n ContentType) bool {
	return rcv._tab.MutateInt32Slot(34, int32(n))
}

func (rcv *MissionExcel) StartableEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MissionExcel) EndDay() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateEndDay(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *MissionExcel) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MissionExcel) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MissionExcel) Limit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MissionExcel) MutateLimit(n bool) bool {
	return rcv._tab.MutateBoolSlot(44, n)
}

func (rcv *MissionExcel) ViewFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MissionExcel) MutateViewFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(46, n)
}

func (rcv *MissionExcel) ToastImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MissionExcel) ToastDisplayType() MissionToastDisplayConditionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return MissionToastDisplayConditionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MissionExcel) MutateToastDisplayType(n MissionToastDisplayConditionType) bool {
	return rcv._tab.MutateInt32Slot(50, int32(n))
}

func (rcv *MissionExcel) ResetType() MissionResetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return MissionResetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MissionExcel) MutateResetType(n MissionResetType) bool {
	return rcv._tab.MutateInt32Slot(52, int32(n))
}

func (rcv *MissionExcel) Description() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateDescription(n uint32) bool {
	return rcv._tab.MutateUint32Slot(54, n)
}

func (rcv *MissionExcel) Category() MissionCategory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return MissionCategory(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MissionExcel) MutateCategory(n MissionCategory) bool {
	return rcv._tab.MutateInt32Slot(56, int32(n))
}

func (rcv *MissionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MissionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(58, n)
}

func MissionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(28)
}
func MissionExcelAddMissionRewardAmount(builder *flatbuffers.Builder, missionRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(missionRewardAmount), 0)
}
func MissionExcelStartMissionRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissionExcelAddMissionRewardParcelId(builder *flatbuffers.Builder, missionRewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(missionRewardParcelId), 0)
}
func MissionExcelStartMissionRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MissionExcelAddMissionRewardParcelType(builder *flatbuffers.Builder, missionRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(missionRewardParcelType), 0)
}
func MissionExcelStartMissionRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissionExcelAddRewardIcon(builder *flatbuffers.Builder, rewardIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rewardIcon), 0)
}
func MissionExcelAddCompleteConditionParameterTag(builder *flatbuffers.Builder, completeConditionParameterTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(completeConditionParameterTag), 0)
}
func MissionExcelStartCompleteConditionParameterTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissionExcelAddCompleteConditionParameter(builder *flatbuffers.Builder, completeConditionParameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(completeConditionParameter), 0)
}
func MissionExcelStartCompleteConditionParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MissionExcelAddCompleteConditionCount(builder *flatbuffers.Builder, completeConditionCount int64) {
	builder.PrependInt64Slot(6, completeConditionCount, 0)
}
func MissionExcelAddCompleteConditionType(builder *flatbuffers.Builder, completeConditionType MissionCompleteConditionType) {
	builder.PrependInt32Slot(7, int32(completeConditionType), 0)
}
func MissionExcelAddChallengeStageShortcut(builder *flatbuffers.Builder, challengeStageShortcut int64) {
	builder.PrependInt64Slot(8, challengeStageShortcut, 0)
}
func MissionExcelAddShortcutUi(builder *flatbuffers.Builder, shortcutUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(shortcutUi), 0)
}
func MissionExcelStartShortcutUiVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissionExcelAddContentTags(builder *flatbuffers.Builder, contentTags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(contentTags), 0)
}
func MissionExcelStartContentTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissionExcelAddAccountLevel(builder *flatbuffers.Builder, accountLevel int64) {
	builder.PrependInt64Slot(11, accountLevel, 0)
}
func MissionExcelAddAccountType(builder *flatbuffers.Builder, accountType AccountState) {
	builder.PrependInt32Slot(12, int32(accountType), 0)
}
func MissionExcelAddPreMissionId(builder *flatbuffers.Builder, preMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(preMissionId), 0)
}
func MissionExcelStartPreMissionIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MissionExcelAddDisplayOrder(builder *flatbuffers.Builder, displayOrder int64) {
	builder.PrependInt64Slot(14, displayOrder, 0)
}
func MissionExcelAddDateAutoRefer(builder *flatbuffers.Builder, dateAutoRefer ContentType) {
	builder.PrependInt32Slot(15, int32(dateAutoRefer), 0)
}
func MissionExcelAddStartableEndDate(builder *flatbuffers.Builder, startableEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(startableEndDate), 0)
}
func MissionExcelAddEndDay(builder *flatbuffers.Builder, endDay int64) {
	builder.PrependInt64Slot(17, endDay, 0)
}
func MissionExcelAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(endDate), 0)
}
func MissionExcelAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(startDate), 0)
}
func MissionExcelAddLimit(builder *flatbuffers.Builder, limit bool) {
	builder.PrependBoolSlot(20, limit, false)
}
func MissionExcelAddViewFlag(builder *flatbuffers.Builder, viewFlag bool) {
	builder.PrependBoolSlot(21, viewFlag, false)
}
func MissionExcelAddToastImagePath(builder *flatbuffers.Builder, toastImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(toastImagePath), 0)
}
func MissionExcelAddToastDisplayType(builder *flatbuffers.Builder, toastDisplayType MissionToastDisplayConditionType) {
	builder.PrependInt32Slot(23, int32(toastDisplayType), 0)
}
func MissionExcelAddResetType(builder *flatbuffers.Builder, resetType MissionResetType) {
	builder.PrependInt32Slot(24, int32(resetType), 0)
}
func MissionExcelAddDescription(builder *flatbuffers.Builder, description uint32) {
	builder.PrependUint32Slot(25, description, 0)
}
func MissionExcelAddCategory(builder *flatbuffers.Builder, category MissionCategory) {
	builder.PrependInt32Slot(26, int32(category), 0)
}
func MissionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(27, id, 0)
}
func MissionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
