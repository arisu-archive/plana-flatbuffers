// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinigameCCGRewardCardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMinigameCCGRewardCardExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGRewardCardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MinigameCCGRewardCardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMinigameCCGRewardCardExcel(buf []byte, offset flatbuffers.UOffsetT) *MinigameCCGRewardCardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MinigameCCGRewardCardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MinigameCCGRewardCardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinigameCCGRewardCardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MinigameCCGRewardCardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MinigameCCGRewardCardExcel) GroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardExcel) MutateGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MinigameCCGRewardCardExcel) EntityType() CCGEntityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CCGEntityType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MinigameCCGRewardCardExcel) MutateEntityType(n CCGEntityType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *MinigameCCGRewardCardExcel) CardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardExcel) MutateCardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MinigameCCGRewardCardExcel) CardRarity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MinigameCCGRewardCardExcel) MutateCardRarity(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func MinigameCCGRewardCardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MinigameCCGRewardCardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func MinigameCCGRewardCardExcelAddGroupId(builder *flatbuffers.Builder, groupId int64) {
	builder.PrependInt64Slot(1, groupId, 0)
}
func MinigameCCGRewardCardExcelAddEntityType(builder *flatbuffers.Builder, entityType CCGEntityType) {
	builder.PrependInt32Slot(2, int32(entityType), 0)
}
func MinigameCCGRewardCardExcelAddCardId(builder *flatbuffers.Builder, cardId int64) {
	builder.PrependInt64Slot(3, cardId, 0)
}
func MinigameCCGRewardCardExcelAddCardRarity(builder *flatbuffers.Builder, cardRarity int32) {
	builder.PrependInt32Slot(4, cardRarity, 0)
}
func MinigameCCGRewardCardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
