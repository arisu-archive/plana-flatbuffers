// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BattlePassInfoExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsBattlePassInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BattlePassInfoExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBattlePassInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *BattlePassInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BattlePassInfoExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BattlePassInfoExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BattlePassInfoExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BattlePassInfoExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BattlePassInfoExcel) FreeRewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateFreeRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *BattlePassInfoExcel) PurchaseRewardGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutatePurchaseRewardGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *BattlePassInfoExcel) NormalProductGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateNormalProductGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *BattlePassInfoExcel) PremiumProductGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutatePremiumProductGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *BattlePassInfoExcel) DiscountPremiumProductGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateDiscountPremiumProductGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *BattlePassInfoExcel) NextLvNeedExp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateNextLvNeedExp(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *BattlePassInfoExcel) PassLvUpGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutatePassLvUpGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *BattlePassInfoExcel) BuyPremiumLvUpAmount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateBuyPremiumLvUpAmount(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *BattlePassInfoExcel) SalePeriodFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassInfoExcel) SalePeriodTo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassInfoExcel) VideoId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *BattlePassInfoExcel) VideoIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateVideoId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *BattlePassInfoExcel) FlavorTextGroupId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateFlavorTextGroupId(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *BattlePassInfoExcel) ExclusiveRewardId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateExclusiveRewardId(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *BattlePassInfoExcel) ExclusiveEmblemId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutateExclusiveEmblemId(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *BattlePassInfoExcel) PassExpLocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BattlePassInfoExcel) MutatePassExpLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(34, n)
}

func (rcv *BattlePassInfoExcel) LobbyBannerPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassInfoExcel) MainIconParcelPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassInfoExcel) PurchaseStepProductImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BattlePassInfoExcel) PurchaseStepBgImagePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func BattlePassInfoExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func BattlePassInfoExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func BattlePassInfoExcelAddFreeRewardGroupId(builder *flatbuffers.Builder, freeRewardGroupId int64) {
	builder.PrependInt64Slot(1, freeRewardGroupId, 0)
}
func BattlePassInfoExcelAddPurchaseRewardGroupId(builder *flatbuffers.Builder, purchaseRewardGroupId int64) {
	builder.PrependInt64Slot(2, purchaseRewardGroupId, 0)
}
func BattlePassInfoExcelAddNormalProductGroupId(builder *flatbuffers.Builder, normalProductGroupId int64) {
	builder.PrependInt64Slot(3, normalProductGroupId, 0)
}
func BattlePassInfoExcelAddPremiumProductGroupId(builder *flatbuffers.Builder, premiumProductGroupId int64) {
	builder.PrependInt64Slot(4, premiumProductGroupId, 0)
}
func BattlePassInfoExcelAddDiscountPremiumProductGroupId(builder *flatbuffers.Builder, discountPremiumProductGroupId int64) {
	builder.PrependInt64Slot(5, discountPremiumProductGroupId, 0)
}
func BattlePassInfoExcelAddNextLvNeedExp(builder *flatbuffers.Builder, nextLvNeedExp int32) {
	builder.PrependInt32Slot(6, nextLvNeedExp, 0)
}
func BattlePassInfoExcelAddPassLvUpGoodsId(builder *flatbuffers.Builder, passLvUpGoodsId int64) {
	builder.PrependInt64Slot(7, passLvUpGoodsId, 0)
}
func BattlePassInfoExcelAddBuyPremiumLvUpAmount(builder *flatbuffers.Builder, buyPremiumLvUpAmount int32) {
	builder.PrependInt32Slot(8, buyPremiumLvUpAmount, 0)
}
func BattlePassInfoExcelAddSalePeriodFrom(builder *flatbuffers.Builder, salePeriodFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(salePeriodFrom), 0)
}
func BattlePassInfoExcelAddSalePeriodTo(builder *flatbuffers.Builder, salePeriodTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(salePeriodTo), 0)
}
func BattlePassInfoExcelAddVideoId(builder *flatbuffers.Builder, videoId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(videoId), 0)
}
func BattlePassInfoExcelStartVideoIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func BattlePassInfoExcelAddFlavorTextGroupId(builder *flatbuffers.Builder, flavorTextGroupId int64) {
	builder.PrependInt64Slot(12, flavorTextGroupId, 0)
}
func BattlePassInfoExcelAddExclusiveRewardId(builder *flatbuffers.Builder, exclusiveRewardId int64) {
	builder.PrependInt64Slot(13, exclusiveRewardId, 0)
}
func BattlePassInfoExcelAddExclusiveEmblemId(builder *flatbuffers.Builder, exclusiveEmblemId int64) {
	builder.PrependInt64Slot(14, exclusiveEmblemId, 0)
}
func BattlePassInfoExcelAddPassExpLocalizeEtcId(builder *flatbuffers.Builder, passExpLocalizeEtcId uint32) {
	builder.PrependUint32Slot(15, passExpLocalizeEtcId, 0)
}
func BattlePassInfoExcelAddLobbyBannerPath(builder *flatbuffers.Builder, lobbyBannerPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(lobbyBannerPath), 0)
}
func BattlePassInfoExcelAddMainIconParcelPath(builder *flatbuffers.Builder, mainIconParcelPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(mainIconParcelPath), 0)
}
func BattlePassInfoExcelAddPurchaseStepProductImagePath(builder *flatbuffers.Builder, purchaseStepProductImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(purchaseStepProductImagePath), 0)
}
func BattlePassInfoExcelAddPurchaseStepBgImagePath(builder *flatbuffers.Builder, purchaseStepBgImagePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(purchaseStepBgImagePath), 0)
}
func BattlePassInfoExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
