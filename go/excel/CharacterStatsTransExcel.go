// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CharacterStatsTransExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCharacterStatsTransExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterStatsTransExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CharacterStatsTransExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCharacterStatsTransExcel(buf []byte, offset flatbuffers.UOffsetT) *CharacterStatsTransExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CharacterStatsTransExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CharacterStatsTransExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CharacterStatsTransExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CharacterStatsTransExcel) StatTransType() StatTransType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return StatTransType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatsTransExcel) MutateStatTransType(n StatTransType) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *CharacterStatsTransExcel) TransSupportStatsFactor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CharacterStatsTransExcel) MutateTransSupportStatsFactor(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *CharacterStatsTransExcel) EchelonExtensionType() EchelonExtensionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return EchelonExtensionType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatsTransExcel) MutateEchelonExtensionType(n EchelonExtensionType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *CharacterStatsTransExcel) TransSupportStats() StatType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return StatType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CharacterStatsTransExcel) MutateTransSupportStats(n StatType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func CharacterStatsTransExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CharacterStatsTransExcelAddStatTransType(builder *flatbuffers.Builder, statTransType StatTransType) {
	builder.PrependInt32Slot(0, int32(statTransType), 0)
}
func CharacterStatsTransExcelAddTransSupportStatsFactor(builder *flatbuffers.Builder, transSupportStatsFactor int32) {
	builder.PrependInt32Slot(1, transSupportStatsFactor, 0)
}
func CharacterStatsTransExcelAddEchelonExtensionType(builder *flatbuffers.Builder, echelonExtensionType EchelonExtensionType) {
	builder.PrependInt32Slot(2, int32(echelonExtensionType), 0)
}
func CharacterStatsTransExcelAddTransSupportStats(builder *flatbuffers.Builder, transSupportStats StatType) {
	builder.PrependInt32Slot(3, int32(transSupportStats), 0)
}
func CharacterStatsTransExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
