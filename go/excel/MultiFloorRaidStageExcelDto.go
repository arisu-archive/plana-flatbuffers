// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MultiFloorRaidStageExcelDto represents a FlatBuffers table
type MultiFloorRaidStageExcelDto struct {
	fbsutils.FlatBuffer
	ShowSkillCard                 bool                 `json:"show_skill_card"`
	VictoryTimelinePath           string               `json:"victory_timeline_path"`
	BattleReadyTimelinePhaseEnd   []int32              `json:"battle_ready_timeline_phase_end"`
	BattleReadyTimelinePhaseStart []int32              `json:"battle_ready_timeline_phase_start"`
	BattleReadyTimelinePath       []string             `json:"battle_ready_timeline_path"`
	RewardGroupId                 int64                `json:"reward_group_id"`
	RecommendLevel                int64                `json:"recommend_level"`
	GroundId                      int64                `json:"ground_id"`
	BattleDuration                int64                `json:"battle_duration"`
	StatChangeId                  []int64              `json:"stat_change_id"`
	BossCharacterId               []int64              `json:"boss_character_id"`
	RaidCharacterId               int64                `json:"raid_character_id"`
	FloorImgPath                  string               `json:"floor_img_path"`
	FloorListImgPath              string               `json:"floor_list_img_path"`
	UseBossAiPhaseSync            bool                 `json:"use_boss_ai_phase_sync"`
	UseBossIndex                  bool                 `json:"use_boss_index"`
	Difficulty                    int32                `json:"difficulty"`
	FloorListSectionLabel         uint32               `json:"floor_list_section_label"`
	FloorListSectionOpenCondition int64                `json:"floor_list_section_open_condition"`
	FloorListSection              bool                 `json:"floor_list_section"`
	StageOpenCondition            int64                `json:"stage_open_condition"`
	AssistSlot                    int32                `json:"assist_slot"`
	BossGroupId                   string               `json:"boss_group_id"`
	EchelonExtensionType          EchelonExtensionType `json:"echelon_extension_type"`
	Id                            int64                `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MultiFloorRaidStageExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MultiFloorRaidStageExcelStart(b)
	MultiFloorRaidStageExcelAddShowSkillCard(b, t.ShowSkillCard)
	MultiFloorRaidStageExcelAddVictoryTimelinePath(b, b.CreateString(fbsutils.Convert(t.VictoryTimelinePath, t.FlatBuffer.TableKey)))
	MultiFloorRaidStageExcelStartBattleReadyTimelinePhaseEndVector(b, len(t.BattleReadyTimelinePhaseEnd))
	for i := range len(t.BattleReadyTimelinePhaseEnd) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseEnd[len(t.BattleReadyTimelinePhaseEnd)-i-1], t.FlatBuffer.TableKey))
	}
	MultiFloorRaidStageExcelAddBattleReadyTimelinePhaseEnd(b, b.EndVector(len(t.BattleReadyTimelinePhaseEnd)))
	MultiFloorRaidStageExcelStartBattleReadyTimelinePhaseStartVector(b, len(t.BattleReadyTimelinePhaseStart))
	for i := range len(t.BattleReadyTimelinePhaseStart) {
		b.PrependInt32(fbsutils.Convert(t.BattleReadyTimelinePhaseStart[len(t.BattleReadyTimelinePhaseStart)-i-1], t.FlatBuffer.TableKey))
	}
	MultiFloorRaidStageExcelAddBattleReadyTimelinePhaseStart(b, b.EndVector(len(t.BattleReadyTimelinePhaseStart)))
	MultiFloorRaidStageExcelStartBattleReadyTimelinePathVector(b, len(t.BattleReadyTimelinePath))
	for i := range len(t.BattleReadyTimelinePath) {
		b.PrependUOffsetT(b.CreateString(t.BattleReadyTimelinePath[len(t.BattleReadyTimelinePath)-i-1]))
	}
	MultiFloorRaidStageExcelAddBattleReadyTimelinePath(b, b.EndVector(len(t.BattleReadyTimelinePath)))
	MultiFloorRaidStageExcelAddRewardGroupId(b, fbsutils.Convert(t.RewardGroupId, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddRecommendLevel(b, fbsutils.Convert(t.RecommendLevel, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddGroundId(b, fbsutils.Convert(t.GroundId, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddBattleDuration(b, fbsutils.Convert(t.BattleDuration, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelStartStatChangeIdVector(b, len(t.StatChangeId))
	for i := range len(t.StatChangeId) {
		b.PrependInt64(fbsutils.Convert(t.StatChangeId[len(t.StatChangeId)-i-1], t.FlatBuffer.TableKey))
	}
	MultiFloorRaidStageExcelAddStatChangeId(b, b.EndVector(len(t.StatChangeId)))
	MultiFloorRaidStageExcelStartBossCharacterIdVector(b, len(t.BossCharacterId))
	for i := range len(t.BossCharacterId) {
		b.PrependInt64(fbsutils.Convert(t.BossCharacterId[len(t.BossCharacterId)-i-1], t.FlatBuffer.TableKey))
	}
	MultiFloorRaidStageExcelAddBossCharacterId(b, b.EndVector(len(t.BossCharacterId)))
	MultiFloorRaidStageExcelAddRaidCharacterId(b, fbsutils.Convert(t.RaidCharacterId, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddFloorImgPath(b, b.CreateString(fbsutils.Convert(t.FloorImgPath, t.FlatBuffer.TableKey)))
	MultiFloorRaidStageExcelAddFloorListImgPath(b, b.CreateString(fbsutils.Convert(t.FloorListImgPath, t.FlatBuffer.TableKey)))
	MultiFloorRaidStageExcelAddUseBossAiPhaseSync(b, t.UseBossAiPhaseSync)
	MultiFloorRaidStageExcelAddUseBossIndex(b, t.UseBossIndex)
	MultiFloorRaidStageExcelAddDifficulty(b, fbsutils.Convert(t.Difficulty, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddFloorListSectionLabel(b, fbsutils.Convert(t.FloorListSectionLabel, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddFloorListSectionOpenCondition(b, fbsutils.Convert(t.FloorListSectionOpenCondition, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddFloorListSection(b, t.FloorListSection)
	MultiFloorRaidStageExcelAddStageOpenCondition(b, fbsutils.Convert(t.StageOpenCondition, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddAssistSlot(b, fbsutils.Convert(t.AssistSlot, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddBossGroupId(b, b.CreateString(fbsutils.Convert(t.BossGroupId, t.FlatBuffer.TableKey)))
	MultiFloorRaidStageExcelAddEchelonExtensionType(b, fbsutils.Convert(t.EchelonExtensionType, t.FlatBuffer.TableKey))
	MultiFloorRaidStageExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return MultiFloorRaidStageExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MultiFloorRaidStageExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MultiFloorRaidStageExcelDto) UnmarshalMessage(e *MultiFloorRaidStageExcel) error {
	t.ShowSkillCard = e.ShowSkillCard()
	t.VictoryTimelinePath = fbsutils.Convert(string(e.VictoryTimelinePath()), t.FlatBuffer.TableKey)
	t.BattleReadyTimelinePhaseEnd = make([]int32, e.BattleReadyTimelinePhaseEndLength())
	for i := range e.BattleReadyTimelinePhaseEndLength() {
		t.BattleReadyTimelinePhaseEnd[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseEnd(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePhaseStart = make([]int32, e.BattleReadyTimelinePhaseStartLength())
	for i := range e.BattleReadyTimelinePhaseStartLength() {
		t.BattleReadyTimelinePhaseStart[i] = fbsutils.Convert(e.BattleReadyTimelinePhaseStart(i), t.FlatBuffer.TableKey)
	}
	t.BattleReadyTimelinePath = make([]string, e.BattleReadyTimelinePathLength())
	for i := range e.BattleReadyTimelinePathLength() {
		t.BattleReadyTimelinePath[i] = fbsutils.Convert(string(e.BattleReadyTimelinePath(i)), t.FlatBuffer.TableKey)
	}
	t.RewardGroupId = fbsutils.Convert(e.RewardGroupId(), t.FlatBuffer.TableKey)
	t.RecommendLevel = fbsutils.Convert(e.RecommendLevel(), t.FlatBuffer.TableKey)
	t.GroundId = fbsutils.Convert(e.GroundId(), t.FlatBuffer.TableKey)
	t.BattleDuration = fbsutils.Convert(e.BattleDuration(), t.FlatBuffer.TableKey)
	t.StatChangeId = make([]int64, e.StatChangeIdLength())
	for i := range e.StatChangeIdLength() {
		t.StatChangeId[i] = fbsutils.Convert(e.StatChangeId(i), t.FlatBuffer.TableKey)
	}
	t.BossCharacterId = make([]int64, e.BossCharacterIdLength())
	for i := range e.BossCharacterIdLength() {
		t.BossCharacterId[i] = fbsutils.Convert(e.BossCharacterId(i), t.FlatBuffer.TableKey)
	}
	t.RaidCharacterId = fbsutils.Convert(e.RaidCharacterId(), t.FlatBuffer.TableKey)
	t.FloorImgPath = fbsutils.Convert(string(e.FloorImgPath()), t.FlatBuffer.TableKey)
	t.FloorListImgPath = fbsutils.Convert(string(e.FloorListImgPath()), t.FlatBuffer.TableKey)
	t.UseBossAiPhaseSync = e.UseBossAiPhaseSync()
	t.UseBossIndex = e.UseBossIndex()
	t.Difficulty = fbsutils.Convert(e.Difficulty(), t.FlatBuffer.TableKey)
	t.FloorListSectionLabel = fbsutils.Convert(e.FloorListSectionLabel(), t.FlatBuffer.TableKey)
	t.FloorListSectionOpenCondition = fbsutils.Convert(e.FloorListSectionOpenCondition(), t.FlatBuffer.TableKey)
	t.FloorListSection = e.FloorListSection()
	t.StageOpenCondition = fbsutils.Convert(e.StageOpenCondition(), t.FlatBuffer.TableKey)
	t.AssistSlot = fbsutils.Convert(e.AssistSlot(), t.FlatBuffer.TableKey)
	t.BossGroupId = fbsutils.Convert(string(e.BossGroupId()), t.FlatBuffer.TableKey)
	t.EchelonExtensionType = EchelonExtensionType(fbsutils.Convert(int32(e.EchelonExtensionType()), t.FlatBuffer.TableKey))
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MultiFloorRaidStageExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMultiFloorRaidStageExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MultiFloorRaidStageExcelDto) FlatDataName() string {
	return "MultiFloorRaidStageExcel"
}
