// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// ContentsScenarioExcelDto represents a FlatBuffers table
type ContentsScenarioExcelDto struct {
	fbsutils.FlatBuffer
	ScenarioGroupId     []int64             `json:"scenario_group_id"`
	ScenarioContentType ScenarioContentType `json:"scenario_content_type"`
	DisplayOrder        int32               `json:"display_order"`
	LocalizeId          uint32              `json:"localize_id"`
	Id                  uint32              `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *ContentsScenarioExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	ContentsScenarioExcelStart(b)
	ContentsScenarioExcelStartScenarioGroupIdVector(b, len(t.ScenarioGroupId))
	for i := range len(t.ScenarioGroupId) {
		b.PrependInt64(fbsutils.Convert(t.ScenarioGroupId[len(t.ScenarioGroupId)-i-1], t.FlatBuffer.TableKey))
	}
	ContentsScenarioExcelAddScenarioGroupId(b, b.EndVector(len(t.ScenarioGroupId)))
	ContentsScenarioExcelAddScenarioContentType(b, fbsutils.Convert(t.ScenarioContentType, t.FlatBuffer.TableKey))
	ContentsScenarioExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	ContentsScenarioExcelAddLocalizeId(b, fbsutils.Convert(t.LocalizeId, t.FlatBuffer.TableKey))
	ContentsScenarioExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return ContentsScenarioExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *ContentsScenarioExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *ContentsScenarioExcelDto) UnmarshalMessage(e *ContentsScenarioExcel) error {
	t.ScenarioGroupId = make([]int64, e.ScenarioGroupIdLength())
	for i := range e.ScenarioGroupIdLength() {
		t.ScenarioGroupId[i] = fbsutils.Convert(e.ScenarioGroupId(i), t.FlatBuffer.TableKey)
	}
	t.ScenarioContentType = ScenarioContentType(fbsutils.Convert(int32(e.ScenarioContentType()), t.FlatBuffer.TableKey))
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.LocalizeId = fbsutils.Convert(e.LocalizeId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *ContentsScenarioExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsContentsScenarioExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (ContentsScenarioExcelDto) FlatDataName() string {
	return "ContentsScenarioExcel"
}
