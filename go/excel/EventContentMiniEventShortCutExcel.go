// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentMiniEventShortCutExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentMiniEventShortCutExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMiniEventShortCutExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentMiniEventShortCutExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventContentMiniEventShortCutExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventContentMiniEventShortCutExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentMiniEventShortCutExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentMiniEventShortCutExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventContentMiniEventShortCutExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventContentMiniEventShortCutExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentMiniEventShortCutExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentMiniEventShortCutExcel) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMiniEventShortCutExcel) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *EventContentMiniEventShortCutExcel) LocalizeEtcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentMiniEventShortCutExcel) MutateLocalizeEtcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *EventContentMiniEventShortCutExcel) ShorcutContentType() EventTargetType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return EventTargetType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentMiniEventShortCutExcel) MutateShorcutContentType(n EventTargetType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EventContentMiniEventShortCutExcel) ShortcutUi() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventContentMiniEventShortCutExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventContentMiniEventShortCutExcelAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func EventContentMiniEventShortCutExcelAddLocalizeEtcId(builder *flatbuffers.Builder, localizeEtcId uint32) {
	builder.PrependUint32Slot(1, localizeEtcId, 0)
}
func EventContentMiniEventShortCutExcelAddShorcutContentType(builder *flatbuffers.Builder, shorcutContentType EventTargetType) {
	builder.PrependInt32Slot(2, int32(shorcutContentType), 0)
}
func EventContentMiniEventShortCutExcelAddShortcutUi(builder *flatbuffers.Builder, shortcutUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(shortcutUi), 0)
}
func EventContentMiniEventShortCutExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
