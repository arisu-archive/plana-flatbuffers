// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WorldRaidConditionExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsWorldRaidConditionExcel(buf []byte, offset flatbuffers.UOffsetT) *WorldRaidConditionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorldRaidConditionExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWorldRaidConditionExcel(buf []byte, offset flatbuffers.UOffsetT) *WorldRaidConditionExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WorldRaidConditionExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WorldRaidConditionExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorldRaidConditionExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WorldRaidConditionExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *WorldRaidConditionExcel) LockUi(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WorldRaidConditionExcel) LockUiLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) HideWhenLocked() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WorldRaidConditionExcel) MutateHideWhenLocked(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *WorldRaidConditionExcel) AccountLevel() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) MutateAccountLevel(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *WorldRaidConditionExcel) ScenarioModeId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) ScenarioModeIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) MutateScenarioModeId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *WorldRaidConditionExcel) CampaignStageId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) CampaignStageIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) MutateCampaignStageId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *WorldRaidConditionExcel) MultipleConditionCheckType() MultipleConditionCheckType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return MultipleConditionCheckType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) MutateMultipleConditionCheckType(n MultipleConditionCheckType) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *WorldRaidConditionExcel) AfterWhenDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldRaidConditionExcel) WorldRaidBossKill(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) WorldRaidBossKillLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorldRaidConditionExcel) MutateWorldRaidBossKill(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func WorldRaidConditionExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func WorldRaidConditionExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func WorldRaidConditionExcelAddLockUi(builder *flatbuffers.Builder, lockUi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(lockUi), 0)
}
func WorldRaidConditionExcelStartLockUiVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WorldRaidConditionExcelAddHideWhenLocked(builder *flatbuffers.Builder, hideWhenLocked bool) {
	builder.PrependBoolSlot(2, hideWhenLocked, false)
}
func WorldRaidConditionExcelAddAccountLevel(builder *flatbuffers.Builder, accountLevel int64) {
	builder.PrependInt64Slot(3, accountLevel, 0)
}
func WorldRaidConditionExcelAddScenarioModeId(builder *flatbuffers.Builder, scenarioModeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(scenarioModeId), 0)
}
func WorldRaidConditionExcelStartScenarioModeIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func WorldRaidConditionExcelAddCampaignStageId(builder *flatbuffers.Builder, campaignStageId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(campaignStageId), 0)
}
func WorldRaidConditionExcelStartCampaignStageIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func WorldRaidConditionExcelAddMultipleConditionCheckType(builder *flatbuffers.Builder, multipleConditionCheckType MultipleConditionCheckType) {
	builder.PrependInt32Slot(6, int32(multipleConditionCheckType), 0)
}
func WorldRaidConditionExcelAddAfterWhenDate(builder *flatbuffers.Builder, afterWhenDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(afterWhenDate), 0)
}
func WorldRaidConditionExcelAddWorldRaidBossKill(builder *flatbuffers.Builder, worldRaidBossKill flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(worldRaidBossKill), 0)
}
func WorldRaidConditionExcelStartWorldRaidBossKillVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func WorldRaidConditionExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
