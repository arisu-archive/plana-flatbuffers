// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentFortuneGachaShopExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentFortuneGachaShopExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentFortuneGachaShopExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentFortuneGachaShopExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentFortuneGachaShopExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentFortuneGachaShopExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentFortuneGachaShopExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentFortuneGachaShopExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentFortuneGachaShopExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentFortuneGachaShopExcel) RewardParcelAmount(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) RewardParcelAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateRewardParcelAmount(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentFortuneGachaShopExcel) RewardParcelId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) RewardParcelIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateRewardParcelId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *EventContentFortuneGachaShopExcel) RewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) RewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *EventContentFortuneGachaShopExcel) ProbModifyLimit() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateProbModifyLimit(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *EventContentFortuneGachaShopExcel) ProbModifyValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateProbModifyValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *EventContentFortuneGachaShopExcel) Prob() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateProb(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *EventContentFortuneGachaShopExcel) FortuneGachaGroupId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateFortuneGachaGroupId(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *EventContentFortuneGachaShopExcel) IsLegacy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventContentFortuneGachaShopExcel) MutateIsLegacy(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *EventContentFortuneGachaShopExcel) CostGoodsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateCostGoodsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *EventContentFortuneGachaShopExcel) Grade() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateGrade(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *EventContentFortuneGachaShopExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(24, n)
}

func (rcv *EventContentFortuneGachaShopExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentFortuneGachaShopExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func EventContentFortuneGachaShopExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func EventContentFortuneGachaShopExcelAddRewardParcelAmount(builder *flatbuffers.Builder, rewardParcelAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rewardParcelAmount), 0)
}
func EventContentFortuneGachaShopExcelStartRewardParcelAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentFortuneGachaShopExcelAddRewardParcelId(builder *flatbuffers.Builder, rewardParcelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rewardParcelId), 0)
}
func EventContentFortuneGachaShopExcelStartRewardParcelIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func EventContentFortuneGachaShopExcelAddRewardParcelType(builder *flatbuffers.Builder, rewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rewardParcelType), 0)
}
func EventContentFortuneGachaShopExcelStartRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventContentFortuneGachaShopExcelAddProbModifyLimit(builder *flatbuffers.Builder, probModifyLimit int32) {
	builder.PrependInt32Slot(3, probModifyLimit, 0)
}
func EventContentFortuneGachaShopExcelAddProbModifyValue(builder *flatbuffers.Builder, probModifyValue int32) {
	builder.PrependInt32Slot(4, probModifyValue, 0)
}
func EventContentFortuneGachaShopExcelAddProb(builder *flatbuffers.Builder, prob int32) {
	builder.PrependInt32Slot(5, prob, 0)
}
func EventContentFortuneGachaShopExcelAddFortuneGachaGroupId(builder *flatbuffers.Builder, fortuneGachaGroupId int32) {
	builder.PrependInt32Slot(6, fortuneGachaGroupId, 0)
}
func EventContentFortuneGachaShopExcelAddIsLegacy(builder *flatbuffers.Builder, isLegacy bool) {
	builder.PrependBoolSlot(7, isLegacy, false)
}
func EventContentFortuneGachaShopExcelAddCostGoodsId(builder *flatbuffers.Builder, costGoodsId int64) {
	builder.PrependInt64Slot(8, costGoodsId, 0)
}
func EventContentFortuneGachaShopExcelAddGrade(builder *flatbuffers.Builder, grade int32) {
	builder.PrependInt32Slot(9, grade, 0)
}
func EventContentFortuneGachaShopExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(10, id, 0)
}
func EventContentFortuneGachaShopExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(11, eventContentId, 0)
}
func EventContentFortuneGachaShopExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
