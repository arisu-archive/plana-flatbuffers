// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// EventContentTreasureRewardExcelDto represents a FlatBuffers table
type EventContentTreasureRewardExcelDto struct {
	fbsutils.FlatBuffer
	Id                     int64        `json:"id"`
	LocalizeCodeId         string       `json:"localize_code_id"`
	CellUnderImageWidth    int32        `json:"cell_under_image_width"`
	CellUnderImageHeight   int32        `json:"cell_under_image_height"`
	HiddenImage            bool         `json:"hidden_image"`
	RewardParcelType       []ParcelType `json:"reward_parcel_type"`
	RewardParcelId         []int64      `json:"reward_parcel_id"`
	RewardParcelAmount     []int64      `json:"reward_parcel_amount"`
	CellUnderImagePath     string       `json:"cell_under_image_path"`
	TreasureSmallImagePath string       `json:"treasure_small_image_path"`
	TreasureSizeIconPath   string       `json:"treasure_size_icon_path"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *EventContentTreasureRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_localize_code_id := b.CreateString(fbsutils.Convert(t.LocalizeCodeId, t.FlatBuffer.TableKey))
	__offset_cell_under_image_path := b.CreateString(fbsutils.Convert(t.CellUnderImagePath, t.FlatBuffer.TableKey))
	__offset_treasure_small_image_path := b.CreateString(fbsutils.Convert(t.TreasureSmallImagePath, t.FlatBuffer.TableKey))
	__offset_treasure_size_icon_path := b.CreateString(fbsutils.Convert(t.TreasureSizeIconPath, t.FlatBuffer.TableKey))
	EventContentTreasureRewardExcelStart(b)
	EventContentTreasureRewardExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	EventContentTreasureRewardExcelAddLocalizeCodeId(b, __offset_localize_code_id)
	EventContentTreasureRewardExcelAddCellUnderImageWidth(b, fbsutils.Convert(t.CellUnderImageWidth, t.FlatBuffer.TableKey))
	EventContentTreasureRewardExcelAddCellUnderImageHeight(b, fbsutils.Convert(t.CellUnderImageHeight, t.FlatBuffer.TableKey))
	EventContentTreasureRewardExcelAddHiddenImage(b, t.HiddenImage)
	EventContentTreasureRewardExcelStartRewardParcelTypeVector(b, len(t.RewardParcelType))
	for i := range len(t.RewardParcelType) {
		b.PrependInt32(fbsutils.Convert(int32(t.RewardParcelType[len(t.RewardParcelType)-i-1]), t.FlatBuffer.TableKey))
	}
	EventContentTreasureRewardExcelAddRewardParcelType(b, b.EndVector(len(t.RewardParcelType)))
	EventContentTreasureRewardExcelStartRewardParcelIdVector(b, len(t.RewardParcelId))
	for i := range len(t.RewardParcelId) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelId[len(t.RewardParcelId)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentTreasureRewardExcelAddRewardParcelId(b, b.EndVector(len(t.RewardParcelId)))
	EventContentTreasureRewardExcelStartRewardParcelAmountVector(b, len(t.RewardParcelAmount))
	for i := range len(t.RewardParcelAmount) {
		b.PrependInt64(fbsutils.Convert(t.RewardParcelAmount[len(t.RewardParcelAmount)-i-1], t.FlatBuffer.TableKey))
	}
	EventContentTreasureRewardExcelAddRewardParcelAmount(b, b.EndVector(len(t.RewardParcelAmount)))
	EventContentTreasureRewardExcelAddCellUnderImagePath(b, __offset_cell_under_image_path)
	EventContentTreasureRewardExcelAddTreasureSmallImagePath(b, __offset_treasure_small_image_path)
	EventContentTreasureRewardExcelAddTreasureSizeIconPath(b, __offset_treasure_size_icon_path)
	return EventContentTreasureRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *EventContentTreasureRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *EventContentTreasureRewardExcelDto) UnmarshalMessage(e *EventContentTreasureRewardExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.LocalizeCodeId = fbsutils.Convert(string(e.LocalizeCodeId()), t.FlatBuffer.TableKey)
	t.CellUnderImageWidth = fbsutils.Convert(e.CellUnderImageWidth(), t.FlatBuffer.TableKey)
	t.CellUnderImageHeight = fbsutils.Convert(e.CellUnderImageHeight(), t.FlatBuffer.TableKey)
	t.HiddenImage = e.HiddenImage()
	t.RewardParcelType = make([]ParcelType, e.RewardParcelTypeLength())
	for i := range e.RewardParcelTypeLength() {
		t.RewardParcelType[i] = ParcelType(fbsutils.Convert(int32(e.RewardParcelType(i)), t.FlatBuffer.TableKey))
	}
	t.RewardParcelId = make([]int64, e.RewardParcelIdLength())
	for i := range e.RewardParcelIdLength() {
		t.RewardParcelId[i] = fbsutils.Convert(e.RewardParcelId(i), t.FlatBuffer.TableKey)
	}
	t.RewardParcelAmount = make([]int64, e.RewardParcelAmountLength())
	for i := range e.RewardParcelAmountLength() {
		t.RewardParcelAmount[i] = fbsutils.Convert(e.RewardParcelAmount(i), t.FlatBuffer.TableKey)
	}
	t.CellUnderImagePath = fbsutils.Convert(string(e.CellUnderImagePath()), t.FlatBuffer.TableKey)
	t.TreasureSmallImagePath = fbsutils.Convert(string(e.TreasureSmallImagePath()), t.FlatBuffer.TableKey)
	t.TreasureSizeIconPath = fbsutils.Convert(string(e.TreasureSizeIconPath()), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *EventContentTreasureRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsEventContentTreasureRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (EventContentTreasureRewardExcelDto) FlatDataName() string {
	return "EventContentTreasureRewardExcel"
}
