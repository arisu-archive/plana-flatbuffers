// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventContentDebuffRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsEventContentDebuffRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDebuffRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventContentDebuffRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventContentDebuffRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *EventContentDebuffRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventContentDebuffRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventContentDebuffRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventContentDebuffRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventContentDebuffRewardExcel) RewardPercentage() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDebuffRewardExcel) MutateRewardPercentage(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *EventContentDebuffRewardExcel) EventContentItemType() EventContentItemType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EventContentItemType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventContentDebuffRewardExcel) MutateEventContentItemType(n EventContentItemType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *EventContentDebuffRewardExcel) EventStageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDebuffRewardExcel) MutateEventStageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *EventContentDebuffRewardExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventContentDebuffRewardExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func EventContentDebuffRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventContentDebuffRewardExcelAddRewardPercentage(builder *flatbuffers.Builder, rewardPercentage int64) {
	builder.PrependInt64Slot(0, rewardPercentage, 0)
}
func EventContentDebuffRewardExcelAddEventContentItemType(builder *flatbuffers.Builder, eventContentItemType EventContentItemType) {
	builder.PrependInt32Slot(1, int32(eventContentItemType), 0)
}
func EventContentDebuffRewardExcelAddEventStageId(builder *flatbuffers.Builder, eventStageId int64) {
	builder.PrependInt64Slot(2, eventStageId, 0)
}
func EventContentDebuffRewardExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(3, eventContentId, 0)
}
func EventContentDebuffRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
