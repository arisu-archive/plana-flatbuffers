// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// AcademyZoneExcelDto represents a FlatBuffers table
type AcademyZoneExcelDto struct {
	fbsutils.FlatBuffer
	Id                    int64   `json:"id"`
	LocalizeEtcId         uint32  `json:"localize_etc_id"`
	LocationId            int64   `json:"location_id"`
	LocationRankForUnlock int64   `json:"location_rank_for_unlock"`
	RewardGroupId         int64   `json:"reward_group_id"`
	StudentVisitProb      []int64 `json:"student_visit_prob"`
	Tags                  []Tag   `json:"tags"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *AcademyZoneExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	AcademyZoneExcelStart(b)
	AcademyZoneExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	AcademyZoneExcelAddLocalizeEtcId(b, fbsutils.Convert(t.LocalizeEtcId, t.FlatBuffer.TableKey))
	AcademyZoneExcelAddLocationId(b, fbsutils.Convert(t.LocationId, t.FlatBuffer.TableKey))
	AcademyZoneExcelAddLocationRankForUnlock(b, fbsutils.Convert(t.LocationRankForUnlock, t.FlatBuffer.TableKey))
	AcademyZoneExcelAddRewardGroupId(b, fbsutils.Convert(t.RewardGroupId, t.FlatBuffer.TableKey))
	AcademyZoneExcelStartStudentVisitProbVector(b, len(t.StudentVisitProb))
	for i := range len(t.StudentVisitProb) {
		b.PrependInt64(fbsutils.Convert(t.StudentVisitProb[len(t.StudentVisitProb)-i-1], t.FlatBuffer.TableKey))
	}
	AcademyZoneExcelAddStudentVisitProb(b, b.EndVector(len(t.StudentVisitProb)))
	AcademyZoneExcelStartTagsVector(b, len(t.Tags))
	for i := range len(t.Tags) {
		b.PrependInt32(fbsutils.Convert(int32(t.Tags[len(t.Tags)-i-1]), t.FlatBuffer.TableKey))
	}
	AcademyZoneExcelAddTags(b, b.EndVector(len(t.Tags)))
	return AcademyZoneExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *AcademyZoneExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *AcademyZoneExcelDto) UnmarshalMessage(e *AcademyZoneExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.LocalizeEtcId = fbsutils.Convert(e.LocalizeEtcId(), t.FlatBuffer.TableKey)
	t.LocationId = fbsutils.Convert(e.LocationId(), t.FlatBuffer.TableKey)
	t.LocationRankForUnlock = fbsutils.Convert(e.LocationRankForUnlock(), t.FlatBuffer.TableKey)
	t.RewardGroupId = fbsutils.Convert(e.RewardGroupId(), t.FlatBuffer.TableKey)
	t.StudentVisitProb = make([]int64, e.StudentVisitProbLength())
	for i := range e.StudentVisitProbLength() {
		t.StudentVisitProb[i] = fbsutils.Convert(e.StudentVisitProb(i), t.FlatBuffer.TableKey)
	}
	t.Tags = make([]Tag, e.TagsLength())
	for i := range e.TagsLength() {
		t.Tags[i] = Tag(fbsutils.Convert(int32(e.Tags(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *AcademyZoneExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsAcademyZoneExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (AcademyZoneExcelDto) FlatDataName() string {
	return "AcademyZoneExcel"
}
