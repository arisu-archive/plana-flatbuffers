// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// BattlePassMissionExcelDto represents a FlatBuffers table
type BattlePassMissionExcelDto struct {
	fbsutils.FlatBuffer
	BattlePassExpAmount           int32                            `json:"battle_pass_exp_amount"`
	BattlePassId                  int64                            `json:"battle_pass_id"`
	Category                      MissionCategory                  `json:"category"`
	ChallengeStageShortcut        int64                            `json:"challenge_stage_shortcut"`
	CompleteConditionCount        int64                            `json:"complete_condition_count"`
	CompleteConditionParameter    []int64                          `json:"complete_condition_parameter"`
	CompleteConditionParameterTag []Tag                            `json:"complete_condition_parameter_tag"`
	CompleteConditionType         MissionCompleteConditionType     `json:"complete_condition_type"`
	Description                   uint32                           `json:"description"`
	DisplayOrder                  int64                            `json:"display_order"`
	Id                            int64                            `json:"id"`
	PreMissionId                  []int64                          `json:"pre_mission_id"`
	ResetType                     MissionResetType                 `json:"reset_type"`
	ShortcutUi                    []string                         `json:"shortcut_ui"`
	ToastDisplayType              MissionToastDisplayConditionType `json:"toast_display_type"`
	ToastImagePath                string                           `json:"toast_image_path"`
	ViewFlag                      bool                             `json:"view_flag"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *BattlePassMissionExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	BattlePassMissionExcelStart(b)
	BattlePassMissionExcelAddBattlePassExpAmount(b, fbsutils.Convert(t.BattlePassExpAmount, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddBattlePassId(b, fbsutils.Convert(t.BattlePassId, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddCategory(b, fbsutils.Convert(t.Category, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddChallengeStageShortcut(b, fbsutils.Convert(t.ChallengeStageShortcut, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddCompleteConditionCount(b, fbsutils.Convert(t.CompleteConditionCount, t.FlatBuffer.TableKey))
	BattlePassMissionExcelStartCompleteConditionParameterVector(b, len(t.CompleteConditionParameter))
	for i := range len(t.CompleteConditionParameter) {
		b.PrependInt64(fbsutils.Convert(t.CompleteConditionParameter[len(t.CompleteConditionParameter)-i-1], t.FlatBuffer.TableKey))
	}
	BattlePassMissionExcelAddCompleteConditionParameter(b, b.EndVector(len(t.CompleteConditionParameter)))
	BattlePassMissionExcelStartCompleteConditionParameterTagVector(b, len(t.CompleteConditionParameterTag))
	for i := range len(t.CompleteConditionParameterTag) {
		b.PrependInt32(fbsutils.Convert(int32(t.CompleteConditionParameterTag[len(t.CompleteConditionParameterTag)-i-1]), t.FlatBuffer.TableKey))
	}
	BattlePassMissionExcelAddCompleteConditionParameterTag(b, b.EndVector(len(t.CompleteConditionParameterTag)))
	BattlePassMissionExcelAddCompleteConditionType(b, fbsutils.Convert(t.CompleteConditionType, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddDescription(b, fbsutils.Convert(t.Description, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddDisplayOrder(b, fbsutils.Convert(t.DisplayOrder, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	BattlePassMissionExcelStartPreMissionIdVector(b, len(t.PreMissionId))
	for i := range len(t.PreMissionId) {
		b.PrependInt64(fbsutils.Convert(t.PreMissionId[len(t.PreMissionId)-i-1], t.FlatBuffer.TableKey))
	}
	BattlePassMissionExcelAddPreMissionId(b, b.EndVector(len(t.PreMissionId)))
	BattlePassMissionExcelAddResetType(b, fbsutils.Convert(t.ResetType, t.FlatBuffer.TableKey))
	BattlePassMissionExcelStartShortcutUiVector(b, len(t.ShortcutUi))
	for i := range len(t.ShortcutUi) {
		b.PrependUOffsetT(b.CreateString(t.ShortcutUi[len(t.ShortcutUi)-i-1]))
	}
	BattlePassMissionExcelAddShortcutUi(b, b.EndVector(len(t.ShortcutUi)))
	BattlePassMissionExcelAddToastDisplayType(b, fbsutils.Convert(t.ToastDisplayType, t.FlatBuffer.TableKey))
	BattlePassMissionExcelAddToastImagePath(b, b.CreateString(fbsutils.Convert(t.ToastImagePath, t.FlatBuffer.TableKey)))
	BattlePassMissionExcelAddViewFlag(b, t.ViewFlag)
	return BattlePassMissionExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *BattlePassMissionExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassMissionExcelDto) UnmarshalMessage(e *BattlePassMissionExcel) error {
	t.BattlePassExpAmount = fbsutils.Convert(e.BattlePassExpAmount(), t.FlatBuffer.TableKey)
	t.BattlePassId = fbsutils.Convert(e.BattlePassId(), t.FlatBuffer.TableKey)
	t.Category = MissionCategory(fbsutils.Convert(int32(e.Category()), t.FlatBuffer.TableKey))
	t.ChallengeStageShortcut = fbsutils.Convert(e.ChallengeStageShortcut(), t.FlatBuffer.TableKey)
	t.CompleteConditionCount = fbsutils.Convert(e.CompleteConditionCount(), t.FlatBuffer.TableKey)
	t.CompleteConditionParameter = make([]int64, e.CompleteConditionParameterLength())
	for i := range e.CompleteConditionParameterLength() {
		t.CompleteConditionParameter[i] = fbsutils.Convert(e.CompleteConditionParameter(i), t.FlatBuffer.TableKey)
	}
	t.CompleteConditionParameterTag = make([]Tag, e.CompleteConditionParameterTagLength())
	for i := range e.CompleteConditionParameterTagLength() {
		t.CompleteConditionParameterTag[i] = Tag(fbsutils.Convert(int32(e.CompleteConditionParameterTag(i)), t.FlatBuffer.TableKey))
	}
	t.CompleteConditionType = MissionCompleteConditionType(fbsutils.Convert(int32(e.CompleteConditionType()), t.FlatBuffer.TableKey))
	t.Description = fbsutils.Convert(e.Description(), t.FlatBuffer.TableKey)
	t.DisplayOrder = fbsutils.Convert(e.DisplayOrder(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.PreMissionId = make([]int64, e.PreMissionIdLength())
	for i := range e.PreMissionIdLength() {
		t.PreMissionId[i] = fbsutils.Convert(e.PreMissionId(i), t.FlatBuffer.TableKey)
	}
	t.ResetType = MissionResetType(fbsutils.Convert(int32(e.ResetType()), t.FlatBuffer.TableKey))
	t.ShortcutUi = make([]string, e.ShortcutUiLength())
	for i := range e.ShortcutUiLength() {
		t.ShortcutUi[i] = fbsutils.Convert(string(e.ShortcutUi(i)), t.FlatBuffer.TableKey)
	}
	t.ToastDisplayType = MissionToastDisplayConditionType(fbsutils.Convert(int32(e.ToastDisplayType()), t.FlatBuffer.TableKey))
	t.ToastImagePath = fbsutils.Convert(string(e.ToastImagePath()), t.FlatBuffer.TableKey)
	t.ViewFlag = e.ViewFlag()
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *BattlePassMissionExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsBattlePassMissionExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (BattlePassMissionExcelDto) FlatDataName() string {
	return "BattlePassMissionExcel"
}
