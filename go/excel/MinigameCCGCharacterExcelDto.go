// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGCharacterExcelDto represents a FlatBuffers table
type MinigameCCGCharacterExcelDto struct {
	fbsutils.FlatBuffer
	Id                      int64            `json:"id"`
	Type                    CCGCharacterType `json:"type"`
	ActiveSkillId           int64            `json:"active_skill_id"`
	ActiveSkillCost         int32            `json:"active_skill_cost"`
	ActiveSkilleCostVisible bool             `json:"active_skille_cost_visible"`
	ActiveSkillCooldown     int32            `json:"active_skill_cooldown"`
	MaxHealth               int32            `json:"max_health"`
	PassiveSkillId          []int64          `json:"passive_skill_id"`
	Name                    uint32           `json:"name"`
	Description             string           `json:"description"`
	ImagePath               string           `json:"image_path"`
	UiImagePath             string           `json:"ui_image_path"`
	Tags                    []CCGTagType     `json:"tags"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGCharacterExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	__offset_description := b.CreateString(fbsutils.Convert(t.Description, t.FlatBuffer.TableKey))
	__offset_image_path := b.CreateString(fbsutils.Convert(t.ImagePath, t.FlatBuffer.TableKey))
	__offset_ui_image_path := b.CreateString(fbsutils.Convert(t.UiImagePath, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelStart(b)
	MinigameCCGCharacterExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelAddType(b, fbsutils.Convert(t.Type, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelAddActiveSkillId(b, fbsutils.Convert(t.ActiveSkillId, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelAddActiveSkillCost(b, fbsutils.Convert(t.ActiveSkillCost, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelAddActiveSkilleCostVisible(b, t.ActiveSkilleCostVisible)
	MinigameCCGCharacterExcelAddActiveSkillCooldown(b, fbsutils.Convert(t.ActiveSkillCooldown, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelAddMaxHealth(b, fbsutils.Convert(t.MaxHealth, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelStartPassiveSkillIdVector(b, len(t.PassiveSkillId))
	for i := range len(t.PassiveSkillId) {
		b.PrependInt64(fbsutils.Convert(t.PassiveSkillId[len(t.PassiveSkillId)-i-1], t.FlatBuffer.TableKey))
	}
	MinigameCCGCharacterExcelAddPassiveSkillId(b, b.EndVector(len(t.PassiveSkillId)))
	MinigameCCGCharacterExcelAddName(b, fbsutils.Convert(t.Name, t.FlatBuffer.TableKey))
	MinigameCCGCharacterExcelAddDescription(b, __offset_description)
	MinigameCCGCharacterExcelAddImagePath(b, __offset_image_path)
	MinigameCCGCharacterExcelAddUiImagePath(b, __offset_ui_image_path)
	MinigameCCGCharacterExcelStartTagsVector(b, len(t.Tags))
	for i := range len(t.Tags) {
		b.PrependInt32(fbsutils.Convert(int32(t.Tags[len(t.Tags)-i-1]), t.FlatBuffer.TableKey))
	}
	MinigameCCGCharacterExcelAddTags(b, b.EndVector(len(t.Tags)))
	return MinigameCCGCharacterExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGCharacterExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGCharacterExcelDto) UnmarshalMessage(e *MinigameCCGCharacterExcel) error {
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	t.Type = CCGCharacterType(fbsutils.Convert(int32(e.Type()), t.FlatBuffer.TableKey))
	t.ActiveSkillId = fbsutils.Convert(e.ActiveSkillId(), t.FlatBuffer.TableKey)
	t.ActiveSkillCost = fbsutils.Convert(e.ActiveSkillCost(), t.FlatBuffer.TableKey)
	t.ActiveSkilleCostVisible = e.ActiveSkilleCostVisible()
	t.ActiveSkillCooldown = fbsutils.Convert(e.ActiveSkillCooldown(), t.FlatBuffer.TableKey)
	t.MaxHealth = fbsutils.Convert(e.MaxHealth(), t.FlatBuffer.TableKey)
	t.PassiveSkillId = make([]int64, e.PassiveSkillIdLength())
	for i := range e.PassiveSkillIdLength() {
		t.PassiveSkillId[i] = fbsutils.Convert(e.PassiveSkillId(i), t.FlatBuffer.TableKey)
	}
	t.Name = fbsutils.Convert(e.Name(), t.FlatBuffer.TableKey)
	t.Description = fbsutils.Convert(string(e.Description()), t.FlatBuffer.TableKey)
	t.ImagePath = fbsutils.Convert(string(e.ImagePath()), t.FlatBuffer.TableKey)
	t.UiImagePath = fbsutils.Convert(string(e.UiImagePath()), t.FlatBuffer.TableKey)
	t.Tags = make([]CCGTagType, e.TagsLength())
	for i := range e.TagsLength() {
		t.Tags[i] = CCGTagType(fbsutils.Convert(int32(e.Tags(i)), t.FlatBuffer.TableKey))
	}
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGCharacterExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGCharacterExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGCharacterExcelDto) FlatDataName() string {
	return "MinigameCCGCharacterExcel"
}
