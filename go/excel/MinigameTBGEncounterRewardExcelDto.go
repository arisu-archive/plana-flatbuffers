// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameTBGEncounterRewardExcelDto represents a FlatBuffers table
type MinigameTBGEncounterRewardExcelDto struct {
	fbsutils.FlatBuffer
	Amount               int64                `json:"amount"`
	GroupId              int64                `json:"group_id"`
	ParcelId             int64                `json:"parcel_id"`
	ParcelType           ParcelType           `json:"parcel_type"`
	Paremeter            int64                `json:"paremeter"`
	Prob                 int32                `json:"prob"`
	TbgOptionSuccessType TBGOptionSuccessType `json:"tbg_option_success_type"`
	UniqueId             int64                `json:"unique_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameTBGEncounterRewardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameTBGEncounterRewardExcelStart(b)
	MinigameTBGEncounterRewardExcelAddAmount(b, fbsutils.Convert(t.Amount, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddParcelId(b, fbsutils.Convert(t.ParcelId, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddParcelType(b, fbsutils.Convert(t.ParcelType, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddParemeter(b, fbsutils.Convert(t.Paremeter, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddProb(b, fbsutils.Convert(t.Prob, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddTbgOptionSuccessType(b, fbsutils.Convert(t.TbgOptionSuccessType, t.FlatBuffer.TableKey))
	MinigameTBGEncounterRewardExcelAddUniqueId(b, fbsutils.Convert(t.UniqueId, t.FlatBuffer.TableKey))
	return MinigameTBGEncounterRewardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameTBGEncounterRewardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGEncounterRewardExcelDto) UnmarshalMessage(e *MinigameTBGEncounterRewardExcel) error {
	t.Amount = fbsutils.Convert(e.Amount(), t.FlatBuffer.TableKey)
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.ParcelId = fbsutils.Convert(e.ParcelId(), t.FlatBuffer.TableKey)
	t.ParcelType = ParcelType(fbsutils.Convert(int32(e.ParcelType()), t.FlatBuffer.TableKey))
	t.Paremeter = fbsutils.Convert(e.Paremeter(), t.FlatBuffer.TableKey)
	t.Prob = fbsutils.Convert(e.Prob(), t.FlatBuffer.TableKey)
	t.TbgOptionSuccessType = TBGOptionSuccessType(fbsutils.Convert(int32(e.TbgOptionSuccessType()), t.FlatBuffer.TableKey))
	t.UniqueId = fbsutils.Convert(e.UniqueId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameTBGEncounterRewardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameTBGEncounterRewardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameTBGEncounterRewardExcelDto) FlatDataName() string {
	return "MinigameTBGEncounterRewardExcel"
}
