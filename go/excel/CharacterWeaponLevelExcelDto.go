// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// CharacterWeaponLevelExcelDto represents a FlatBuffers table
type CharacterWeaponLevelExcelDto struct {
	fbsutils.FlatBuffer
	Exp      int64 `json:"exp"`
	Level    int32 `json:"level"`
	TotalExp int64 `json:"total_exp"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *CharacterWeaponLevelExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	CharacterWeaponLevelExcelStart(b)
	CharacterWeaponLevelExcelAddExp(b, fbsutils.Convert(t.Exp, t.FlatBuffer.TableKey))
	CharacterWeaponLevelExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	CharacterWeaponLevelExcelAddTotalExp(b, fbsutils.Convert(t.TotalExp, t.FlatBuffer.TableKey))
	return CharacterWeaponLevelExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *CharacterWeaponLevelExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *CharacterWeaponLevelExcelDto) UnmarshalMessage(e *CharacterWeaponLevelExcel) error {
	t.Exp = fbsutils.Convert(e.Exp(), t.FlatBuffer.TableKey)
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.TotalExp = fbsutils.Convert(e.TotalExp(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *CharacterWeaponLevelExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsCharacterWeaponLevelExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (CharacterWeaponLevelExcelDto) FlatDataName() string {
	return "CharacterWeaponLevelExcel"
}
