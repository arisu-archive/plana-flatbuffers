// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// FormationLocationExcelDto represents a FlatBuffers table
type FormationLocationExcelDto struct {
	fbsutils.FlatBuffer
	SlotX   []float32 `json:"slot_x"`
	SlotZ   []float32 `json:"slot_z"`
	GroupId int64     `json:"group_id"`
	Id      int64     `json:"id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *FormationLocationExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	FormationLocationExcelStart(b)
	FormationLocationExcelStartSlotXVector(b, len(t.SlotX))
	for i := range len(t.SlotX) {
		b.PrependFloat32(fbsutils.Convert(t.SlotX[len(t.SlotX)-i-1], t.FlatBuffer.TableKey))
	}
	FormationLocationExcelAddSlotX(b, b.EndVector(len(t.SlotX)))
	FormationLocationExcelStartSlotZVector(b, len(t.SlotZ))
	for i := range len(t.SlotZ) {
		b.PrependFloat32(fbsutils.Convert(t.SlotZ[len(t.SlotZ)-i-1], t.FlatBuffer.TableKey))
	}
	FormationLocationExcelAddSlotZ(b, b.EndVector(len(t.SlotZ)))
	FormationLocationExcelAddGroupId(b, fbsutils.Convert(t.GroupId, t.FlatBuffer.TableKey))
	FormationLocationExcelAddId(b, fbsutils.Convert(t.Id, t.FlatBuffer.TableKey))
	return FormationLocationExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *FormationLocationExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *FormationLocationExcelDto) UnmarshalMessage(e *FormationLocationExcel) error {
	t.SlotX = make([]float32, e.SlotXLength())
	for i := range e.SlotXLength() {
		t.SlotX[i] = fbsutils.Convert(e.SlotX(i), t.FlatBuffer.TableKey)
	}
	t.SlotZ = make([]float32, e.SlotZLength())
	for i := range e.SlotZLength() {
		t.SlotZ[i] = fbsutils.Convert(e.SlotZ(i), t.FlatBuffer.TableKey)
	}
	t.GroupId = fbsutils.Convert(e.GroupId(), t.FlatBuffer.TableKey)
	t.Id = fbsutils.Convert(e.Id(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *FormationLocationExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsFormationLocationExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (FormationLocationExcelDto) FlatDataName() string {
	return "FormationLocationExcel"
}
