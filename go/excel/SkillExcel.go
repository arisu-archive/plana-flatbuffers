// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SkillExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsSkillExcel(buf []byte, offset flatbuffers.UOffsetT) *SkillExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SkillExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSkillExcel(buf []byte, offset flatbuffers.UOffsetT) *SkillExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SkillExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SkillExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SkillExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SkillExcel) SkillCardLabelPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillExcel) TextureSkillCardForFormConversion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillExcel) SelectExSkillToolTipId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateSelectExSkillToolTipId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *SkillExcel) AdditionalToolTipId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateAdditionalToolTipId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *SkillExcel) PublicSpeechDuration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutatePublicSpeechDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *SkillExcel) IsShowSpeechbubble() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SkillExcel) MutateIsShowSpeechbubble(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *SkillExcel) IsShowInfo() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SkillExcel) MutateIsShowInfo(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *SkillExcel) IconName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillExcel) RequireLevelUpMaterial() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateRequireLevelUpMaterial(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *SkillExcel) RequireCharacterLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateRequireCharacterLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *SkillExcel) UseAtg() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateUseAtg(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *SkillExcel) NpcCoolTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateNpcCoolTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *SkillExcel) NpcStartCoolTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateNpcStartCoolTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *SkillExcel) EnemyCoolTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateEnemyCoolTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *SkillExcel) EnemyStartCoolTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateEnemyStartCoolTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *SkillExcel) CoolTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateCoolTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *SkillExcel) StartCoolTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateStartCoolTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *SkillExcel) BulletType() BulletType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return BulletType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SkillExcel) MutateBulletType(n BulletType) bool {
	return rcv._tab.MutateInt32Slot(38, int32(n))
}

func (rcv *SkillExcel) ExtraNpcSkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateExtraNpcSkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

func (rcv *SkillExcel) NpcSkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateNpcSkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

func (rcv *SkillExcel) ExtraEnemySkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateExtraEnemySkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

func (rcv *SkillExcel) EnemySkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateEnemySkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

func (rcv *SkillExcel) ExtraSkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateExtraSkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

func (rcv *SkillExcel) SkillCost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateSkillCost(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

func (rcv *SkillExcel) Level() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

func (rcv *SkillExcel) VisualDataKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillExcel) SkillDataKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillExcel) GroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SkillExcel) LocalizeSkillId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateLocalizeSkillId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(60, n)
}

func (rcv *SkillExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SkillExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(62, n)
}

func SkillExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(30)
}
func SkillExcelAddSkillCardLabelPath(builder *flatbuffers.Builder, skillCardLabelPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(skillCardLabelPath), 0)
}
func SkillExcelAddTextureSkillCardForFormConversion(builder *flatbuffers.Builder, textureSkillCardForFormConversion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(textureSkillCardForFormConversion), 0)
}
func SkillExcelAddSelectExSkillToolTipId(builder *flatbuffers.Builder, selectExSkillToolTipId int64) {
	builder.PrependInt64Slot(2, selectExSkillToolTipId, 0)
}
func SkillExcelAddAdditionalToolTipId(builder *flatbuffers.Builder, additionalToolTipId int64) {
	builder.PrependInt64Slot(3, additionalToolTipId, 0)
}
func SkillExcelAddPublicSpeechDuration(builder *flatbuffers.Builder, publicSpeechDuration int32) {
	builder.PrependInt32Slot(4, publicSpeechDuration, 0)
}
func SkillExcelAddIsShowSpeechbubble(builder *flatbuffers.Builder, isShowSpeechbubble bool) {
	builder.PrependBoolSlot(5, isShowSpeechbubble, false)
}
func SkillExcelAddIsShowInfo(builder *flatbuffers.Builder, isShowInfo bool) {
	builder.PrependBoolSlot(6, isShowInfo, false)
}
func SkillExcelAddIconName(builder *flatbuffers.Builder, iconName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(iconName), 0)
}
func SkillExcelAddRequireLevelUpMaterial(builder *flatbuffers.Builder, requireLevelUpMaterial int64) {
	builder.PrependInt64Slot(8, requireLevelUpMaterial, 0)
}
func SkillExcelAddRequireCharacterLevel(builder *flatbuffers.Builder, requireCharacterLevel int32) {
	builder.PrependInt32Slot(9, requireCharacterLevel, 0)
}
func SkillExcelAddUseAtg(builder *flatbuffers.Builder, useAtg int32) {
	builder.PrependInt32Slot(10, useAtg, 0)
}
func SkillExcelAddNpcCoolTime(builder *flatbuffers.Builder, npcCoolTime int32) {
	builder.PrependInt32Slot(11, npcCoolTime, 0)
}
func SkillExcelAddNpcStartCoolTime(builder *flatbuffers.Builder, npcStartCoolTime int32) {
	builder.PrependInt32Slot(12, npcStartCoolTime, 0)
}
func SkillExcelAddEnemyCoolTime(builder *flatbuffers.Builder, enemyCoolTime int32) {
	builder.PrependInt32Slot(13, enemyCoolTime, 0)
}
func SkillExcelAddEnemyStartCoolTime(builder *flatbuffers.Builder, enemyStartCoolTime int32) {
	builder.PrependInt32Slot(14, enemyStartCoolTime, 0)
}
func SkillExcelAddCoolTime(builder *flatbuffers.Builder, coolTime int32) {
	builder.PrependInt32Slot(15, coolTime, 0)
}
func SkillExcelAddStartCoolTime(builder *flatbuffers.Builder, startCoolTime int32) {
	builder.PrependInt32Slot(16, startCoolTime, 0)
}
func SkillExcelAddBulletType(builder *flatbuffers.Builder, bulletType BulletType) {
	builder.PrependInt32Slot(17, int32(bulletType), 0)
}
func SkillExcelAddExtraNpcSkillCost(builder *flatbuffers.Builder, extraNpcSkillCost int32) {
	builder.PrependInt32Slot(18, extraNpcSkillCost, 0)
}
func SkillExcelAddNpcSkillCost(builder *flatbuffers.Builder, npcSkillCost int32) {
	builder.PrependInt32Slot(19, npcSkillCost, 0)
}
func SkillExcelAddExtraEnemySkillCost(builder *flatbuffers.Builder, extraEnemySkillCost int32) {
	builder.PrependInt32Slot(20, extraEnemySkillCost, 0)
}
func SkillExcelAddEnemySkillCost(builder *flatbuffers.Builder, enemySkillCost int32) {
	builder.PrependInt32Slot(21, enemySkillCost, 0)
}
func SkillExcelAddExtraSkillCost(builder *flatbuffers.Builder, extraSkillCost int32) {
	builder.PrependInt32Slot(22, extraSkillCost, 0)
}
func SkillExcelAddSkillCost(builder *flatbuffers.Builder, skillCost int32) {
	builder.PrependInt32Slot(23, skillCost, 0)
}
func SkillExcelAddLevel(builder *flatbuffers.Builder, level int32) {
	builder.PrependInt32Slot(24, level, 0)
}
func SkillExcelAddVisualDataKey(builder *flatbuffers.Builder, visualDataKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(visualDataKey), 0)
}
func SkillExcelAddSkillDataKey(builder *flatbuffers.Builder, skillDataKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(skillDataKey), 0)
}
func SkillExcelAddGroupId(builder *flatbuffers.Builder, groupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(groupId), 0)
}
func SkillExcelAddLocalizeSkillId(builder *flatbuffers.Builder, localizeSkillId uint32) {
	builder.PrependUint32Slot(28, localizeSkillId, 0)
}
func SkillExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(29, id, 0)
}
func SkillExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
