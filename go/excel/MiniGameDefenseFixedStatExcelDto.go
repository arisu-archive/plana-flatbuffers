// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MiniGameDefenseFixedStatExcelDto represents a FlatBuffers table
type MiniGameDefenseFixedStatExcelDto struct {
	fbsutils.FlatBuffer
	CharacterGearLevel         int32 `json:"character_gear_level"`
	CharacterGearTier          int32 `json:"character_gear_tier"`
	CharacterWeaponLevel       int32 `json:"character_weapon_level"`
	CharacterWeaponGrade       int32 `json:"character_weapon_grade"`
	Equipment3Level            int32 `json:"equipment3_level"`
	Equipment3Tier             int32 `json:"equipment3_tier"`
	Equipment2Level            int32 `json:"equipment2_level"`
	Equipment2Tier             int32 `json:"equipment2_tier"`
	Equipment1Level            int32 `json:"equipment1_level"`
	Equipment1Tier             int32 `json:"equipment1_tier"`
	NoneExSkillLevel           int32 `json:"none_ex_skill_level"`
	ExSkillLevel               int32 `json:"ex_skill_level"`
	Grade                      int32 `json:"grade"`
	Level                      int32 `json:"level"`
	MinigameDefenseFixedStatId int64 `json:"minigame_defense_fixed_stat_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MiniGameDefenseFixedStatExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MiniGameDefenseFixedStatExcelStart(b)
	MiniGameDefenseFixedStatExcelAddCharacterGearLevel(b, fbsutils.Convert(t.CharacterGearLevel, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddCharacterGearTier(b, fbsutils.Convert(t.CharacterGearTier, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddCharacterWeaponLevel(b, fbsutils.Convert(t.CharacterWeaponLevel, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddCharacterWeaponGrade(b, fbsutils.Convert(t.CharacterWeaponGrade, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddEquipment3Level(b, fbsutils.Convert(t.Equipment3Level, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddEquipment3Tier(b, fbsutils.Convert(t.Equipment3Tier, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddEquipment2Level(b, fbsutils.Convert(t.Equipment2Level, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddEquipment2Tier(b, fbsutils.Convert(t.Equipment2Tier, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddEquipment1Level(b, fbsutils.Convert(t.Equipment1Level, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddEquipment1Tier(b, fbsutils.Convert(t.Equipment1Tier, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddNoneExSkillLevel(b, fbsutils.Convert(t.NoneExSkillLevel, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddExSkillLevel(b, fbsutils.Convert(t.ExSkillLevel, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddGrade(b, fbsutils.Convert(t.Grade, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddLevel(b, fbsutils.Convert(t.Level, t.FlatBuffer.TableKey))
	MiniGameDefenseFixedStatExcelAddMinigameDefenseFixedStatId(b, fbsutils.Convert(t.MinigameDefenseFixedStatId, t.FlatBuffer.TableKey))
	return MiniGameDefenseFixedStatExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MiniGameDefenseFixedStatExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDefenseFixedStatExcelDto) UnmarshalMessage(e *MiniGameDefenseFixedStatExcel) error {
	t.CharacterGearLevel = fbsutils.Convert(e.CharacterGearLevel(), t.FlatBuffer.TableKey)
	t.CharacterGearTier = fbsutils.Convert(e.CharacterGearTier(), t.FlatBuffer.TableKey)
	t.CharacterWeaponLevel = fbsutils.Convert(e.CharacterWeaponLevel(), t.FlatBuffer.TableKey)
	t.CharacterWeaponGrade = fbsutils.Convert(e.CharacterWeaponGrade(), t.FlatBuffer.TableKey)
	t.Equipment3Level = fbsutils.Convert(e.Equipment3Level(), t.FlatBuffer.TableKey)
	t.Equipment3Tier = fbsutils.Convert(e.Equipment3Tier(), t.FlatBuffer.TableKey)
	t.Equipment2Level = fbsutils.Convert(e.Equipment2Level(), t.FlatBuffer.TableKey)
	t.Equipment2Tier = fbsutils.Convert(e.Equipment2Tier(), t.FlatBuffer.TableKey)
	t.Equipment1Level = fbsutils.Convert(e.Equipment1Level(), t.FlatBuffer.TableKey)
	t.Equipment1Tier = fbsutils.Convert(e.Equipment1Tier(), t.FlatBuffer.TableKey)
	t.NoneExSkillLevel = fbsutils.Convert(e.NoneExSkillLevel(), t.FlatBuffer.TableKey)
	t.ExSkillLevel = fbsutils.Convert(e.ExSkillLevel(), t.FlatBuffer.TableKey)
	t.Grade = fbsutils.Convert(e.Grade(), t.FlatBuffer.TableKey)
	t.Level = fbsutils.Convert(e.Level(), t.FlatBuffer.TableKey)
	t.MinigameDefenseFixedStatId = fbsutils.Convert(e.MinigameDefenseFixedStatId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MiniGameDefenseFixedStatExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMiniGameDefenseFixedStatExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MiniGameDefenseFixedStatExcelDto) FlatDataName() string {
	return "MiniGameDefenseFixedStatExcel"
}
