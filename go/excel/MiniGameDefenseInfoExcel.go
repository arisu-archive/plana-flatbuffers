// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiniGameDefenseInfoExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsMiniGameDefenseInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDefenseInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiniGameDefenseInfoExcel{}
	x.Init(buf, n+offset)
	return x
}

func FinishMiniGameDefenseInfoExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMiniGameDefenseInfoExcel(buf []byte, offset flatbuffers.UOffsetT) *MiniGameDefenseInfoExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MiniGameDefenseInfoExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMiniGameDefenseInfoExcelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MiniGameDefenseInfoExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiniGameDefenseInfoExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MiniGameDefenseInfoExcel) EventContentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseInfoExcel) MutateEventContentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MiniGameDefenseInfoExcel) DefenseBattleParcelType() ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParcelType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MiniGameDefenseInfoExcel) MutateDefenseBattleParcelType(n ParcelType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *MiniGameDefenseInfoExcel) DefenseBattleParcelId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseInfoExcel) MutateDefenseBattleParcelId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MiniGameDefenseInfoExcel) DefenseBattleMultiplierMax() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiniGameDefenseInfoExcel) MutateDefenseBattleMultiplierMax(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MiniGameDefenseInfoExcel) DisableRootMotion() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MiniGameDefenseInfoExcel) MutateDisableRootMotion(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func MiniGameDefenseInfoExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MiniGameDefenseInfoExcelAddEventContentId(builder *flatbuffers.Builder, eventContentId int64) {
	builder.PrependInt64Slot(0, eventContentId, 0)
}
func MiniGameDefenseInfoExcelAddDefenseBattleParcelType(builder *flatbuffers.Builder, defenseBattleParcelType ParcelType) {
	builder.PrependInt32Slot(1, int32(defenseBattleParcelType), 0)
}
func MiniGameDefenseInfoExcelAddDefenseBattleParcelId(builder *flatbuffers.Builder, defenseBattleParcelId int64) {
	builder.PrependInt64Slot(2, defenseBattleParcelId, 0)
}
func MiniGameDefenseInfoExcelAddDefenseBattleMultiplierMax(builder *flatbuffers.Builder, defenseBattleMultiplierMax int64) {
	builder.PrependInt64Slot(3, defenseBattleMultiplierMax, 0)
}
func MiniGameDefenseInfoExcelAddDisableRootMotion(builder *flatbuffers.Builder, disableRootMotion bool) {
	builder.PrependBoolSlot(4, disableRootMotion, false)
}
func MiniGameDefenseInfoExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
