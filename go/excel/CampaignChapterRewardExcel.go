// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CampaignChapterRewardExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsCampaignChapterRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *CampaignChapterRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CampaignChapterRewardExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCampaignChapterRewardExcel(buf []byte, offset flatbuffers.UOffsetT) *CampaignChapterRewardExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CampaignChapterRewardExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CampaignChapterRewardExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CampaignChapterRewardExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CampaignChapterRewardExcel) CampaignChapterStar() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) MutateCampaignChapterStar(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CampaignChapterRewardExcel) ChapterRewardAmount(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) ChapterRewardAmountLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) MutateChapterRewardAmount(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CampaignChapterRewardExcel) ChapterRewardId(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) ChapterRewardIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) MutateChapterRewardId(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CampaignChapterRewardExcel) ChapterRewardParcelType(j int) ParcelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return ParcelType(rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) ChapterRewardParcelTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) MutateChapterRewardParcelType(j int, n ParcelType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), int32(n))
	}
	return false
}

func (rcv *CampaignChapterRewardExcel) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CampaignChapterRewardExcel) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func CampaignChapterRewardExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CampaignChapterRewardExcelAddCampaignChapterStar(builder *flatbuffers.Builder, campaignChapterStar int64) {
	builder.PrependInt64Slot(0, campaignChapterStar, 0)
}
func CampaignChapterRewardExcelAddChapterRewardAmount(builder *flatbuffers.Builder, chapterRewardAmount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(chapterRewardAmount), 0)
}
func CampaignChapterRewardExcelStartChapterRewardAmountVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CampaignChapterRewardExcelAddChapterRewardId(builder *flatbuffers.Builder, chapterRewardId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(chapterRewardId), 0)
}
func CampaignChapterRewardExcelStartChapterRewardIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CampaignChapterRewardExcelAddChapterRewardParcelType(builder *flatbuffers.Builder, chapterRewardParcelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(chapterRewardParcelType), 0)
}
func CampaignChapterRewardExcelStartChapterRewardParcelTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CampaignChapterRewardExcelAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(4, id, 0)
}
func CampaignChapterRewardExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
