// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package excel

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TutorialCharacterDialogExcel struct {
	_tab flatbuffers.Table
}

func GetRootAsTutorialCharacterDialogExcel(buf []byte, offset flatbuffers.UOffsetT) *TutorialCharacterDialogExcel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TutorialCharacterDialogExcel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTutorialCharacterDialogExcel(buf []byte, offset flatbuffers.UOffsetT) *TutorialCharacterDialogExcel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TutorialCharacterDialogExcel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TutorialCharacterDialogExcel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TutorialCharacterDialogExcel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TutorialCharacterDialogExcel) VoiceId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TutorialCharacterDialogExcel) MutateVoiceId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *TutorialCharacterDialogExcel) LocalizeJp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TutorialCharacterDialogExcel) LocalizeKr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TutorialCharacterDialogExcel) AnimationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TutorialCharacterDialogExcel) TalkId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TutorialCharacterDialogExcel) MutateTalkId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func TutorialCharacterDialogExcelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func TutorialCharacterDialogExcelAddVoiceId(builder *flatbuffers.Builder, voiceId uint32) {
	builder.PrependUint32Slot(0, voiceId, 0)
}
func TutorialCharacterDialogExcelAddLocalizeJp(builder *flatbuffers.Builder, localizeJp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(localizeJp), 0)
}
func TutorialCharacterDialogExcelAddLocalizeKr(builder *flatbuffers.Builder, localizeKr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(localizeKr), 0)
}
func TutorialCharacterDialogExcelAddAnimationName(builder *flatbuffers.Builder, animationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(animationName), 0)
}
func TutorialCharacterDialogExcelAddTalkId(builder *flatbuffers.Builder, talkId int64) {
	builder.PrependInt64Slot(4, talkId, 0)
}
func TutorialCharacterDialogExcelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
