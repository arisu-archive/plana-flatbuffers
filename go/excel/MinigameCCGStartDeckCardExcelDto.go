// Code generated by fbsgen. DO NOT EDIT.
// Package excel contains generated code for FlatBuffers schema
package excel

import (
	fbsutils "github.com/arisu-archive/bluearchive-fbs-utils"
	flatbuffers "github.com/google/flatbuffers/go"
)

// MinigameCCGStartDeckCardExcelDto represents a FlatBuffers table
type MinigameCCGStartDeckCardExcelDto struct {
	fbsutils.FlatBuffer
	CardId int64 `json:"card_id"`
	CcgId  int64 `json:"ccg_id"`
}

// MarshalModel marshals the struct into flatbuffers offset
func (t *MinigameCCGStartDeckCardExcelDto) MarshalModel(b *flatbuffers.Builder) flatbuffers.UOffsetT {
	MinigameCCGStartDeckCardExcelStart(b)
	MinigameCCGStartDeckCardExcelAddCardId(b, fbsutils.Convert(t.CardId, t.FlatBuffer.TableKey))
	MinigameCCGStartDeckCardExcelAddCcgId(b, fbsutils.Convert(t.CcgId, t.FlatBuffer.TableKey))
	return MinigameCCGStartDeckCardExcelEnd(b)
}

// Marshal marshals the struct into a FlatBuffers buffer
func (t *MinigameCCGStartDeckCardExcelDto) Marshal() ([]byte, error) {
	b := flatbuffers.NewBuilder(0)
	b.Finish(t.MarshalModel(b))
	return b.FinishedBytes(), nil
}

// UnmarshalMessage unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGStartDeckCardExcelDto) UnmarshalMessage(e *MinigameCCGStartDeckCardExcel) error {
	t.CardId = fbsutils.Convert(e.CardId(), t.FlatBuffer.TableKey)
	t.CcgId = fbsutils.Convert(e.CcgId(), t.FlatBuffer.TableKey)
	return nil
}

// Unmarshal unmarshals the struct from a FlatBuffers buffer
func (t *MinigameCCGStartDeckCardExcelDto) Unmarshal(data []byte) error {
	root := GetRootAsMinigameCCGStartDeckCardExcel(data, 0)
	err := t.UnmarshalMessage(root)
	if err != nil {
		return err
	}
	return nil
}

// Name returns the name of the flatbuffer table name
func (MinigameCCGStartDeckCardExcelDto) FlatDataName() string {
	return "MinigameCCGStartDeckCardExcel"
}
