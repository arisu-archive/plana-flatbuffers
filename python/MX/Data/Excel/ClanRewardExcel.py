# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ClanRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClanRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClanRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ClanRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ClanRewardExcel
    def ClanRewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ClanRewardExcel
    def EchelonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ClanRewardExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ClanRewardExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ClanRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ClanRewardExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return ClanRewardExcelStart(builder)
def ClanRewardExcelAddClanRewardType(builder, clanRewardType): builder.PrependInt32Slot(0, clanRewardType, 0)
def AddClanRewardType(builder, clanRewardType):
    return ClanRewardExcelAddClanRewardType(builder, clanRewardType)
def ClanRewardExcelAddEchelonType(builder, echelonType): builder.PrependInt32Slot(1, echelonType, 0)
def AddEchelonType(builder, echelonType):
    return ClanRewardExcelAddEchelonType(builder, echelonType)
def ClanRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt64Slot(2, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return ClanRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def ClanRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependInt64Slot(3, rewardParcelId, 0)
def AddRewardParcelId(builder, rewardParcelId):
    return ClanRewardExcelAddRewardParcelId(builder, rewardParcelId)
def ClanRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(4, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return ClanRewardExcelAddRewardParcelType(builder, rewardParcelType)
def ClanRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ClanRewardExcelEnd(builder)