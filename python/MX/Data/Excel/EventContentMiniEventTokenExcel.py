# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentMiniEventTokenExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentMiniEventTokenExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentMiniEventTokenExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentMiniEventTokenExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentMiniEventTokenExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMiniEventTokenExcel
    def ItemUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMiniEventTokenExcel
    def MaximumAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentMiniEventTokenExcelStart(builder): builder.StartObject(3)
def Start(builder):
    return EventContentMiniEventTokenExcelStart(builder)
def EventContentMiniEventTokenExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentMiniEventTokenExcelAddEventContentId(builder, eventContentId)
def EventContentMiniEventTokenExcelAddItemUniqueId(builder, itemUniqueId): builder.PrependInt64Slot(1, itemUniqueId, 0)
def AddItemUniqueId(builder, itemUniqueId):
    return EventContentMiniEventTokenExcelAddItemUniqueId(builder, itemUniqueId)
def EventContentMiniEventTokenExcelAddMaximumAmount(builder, maximumAmount): builder.PrependInt64Slot(2, maximumAmount, 0)
def AddMaximumAmount(builder, maximumAmount):
    return EventContentMiniEventTokenExcelAddMaximumAmount(builder, maximumAmount)
def EventContentMiniEventTokenExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentMiniEventTokenExcelEnd(builder)