# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WeekDungeonOpenScheduleExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WeekDungeonOpenScheduleExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWeekDungeonOpenScheduleExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WeekDungeonOpenScheduleExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WeekDungeonOpenScheduleExcel
    def WeekDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonOpenScheduleExcel
    def Open(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # WeekDungeonOpenScheduleExcel
    def OpenAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # WeekDungeonOpenScheduleExcel
    def OpenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeekDungeonOpenScheduleExcel
    def OpenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def WeekDungeonOpenScheduleExcelStart(builder):
    builder.StartObject(2)

def Start(builder):
    WeekDungeonOpenScheduleExcelStart(builder)

def WeekDungeonOpenScheduleExcelAddWeekDay(builder, weekDay):
    builder.PrependInt32Slot(0, weekDay, 0)

def AddWeekDay(builder, weekDay):
    WeekDungeonOpenScheduleExcelAddWeekDay(builder, weekDay)

def WeekDungeonOpenScheduleExcelAddOpen(builder, open):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(open), 0)

def AddOpen(builder, open):
    WeekDungeonOpenScheduleExcelAddOpen(builder, open)

def WeekDungeonOpenScheduleExcelStartOpenVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOpenVector(builder, numElems):
    return WeekDungeonOpenScheduleExcelStartOpenVector(builder, numElems)

def WeekDungeonOpenScheduleExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return WeekDungeonOpenScheduleExcelEnd(builder)
