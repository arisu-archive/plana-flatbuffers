# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameShootingGeasExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameShootingGeasExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameShootingGeasExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameShootingGeasExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameShootingGeasExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def GeasType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingGeasExcel
    def Probability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def MaxOverlapCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def GeasData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingGeasExcel
    def NeedGeasId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def HideInPausePopup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MiniGameShootingGeasExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return MiniGameShootingGeasExcelStart(builder)
def MiniGameShootingGeasExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(0, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MiniGameShootingGeasExcelAddUniqueId(builder, uniqueId)
def MiniGameShootingGeasExcelAddGeasType(builder, geasType): builder.PrependInt32Slot(1, geasType, 0)
def AddGeasType(builder, geasType):
    return MiniGameShootingGeasExcelAddGeasType(builder, geasType)
def MiniGameShootingGeasExcelAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return MiniGameShootingGeasExcelAddIcon(builder, icon)
def MiniGameShootingGeasExcelAddProbability(builder, probability): builder.PrependInt64Slot(3, probability, 0)
def AddProbability(builder, probability):
    return MiniGameShootingGeasExcelAddProbability(builder, probability)
def MiniGameShootingGeasExcelAddMaxOverlapCount(builder, maxOverlapCount): builder.PrependInt32Slot(4, maxOverlapCount, 0)
def AddMaxOverlapCount(builder, maxOverlapCount):
    return MiniGameShootingGeasExcelAddMaxOverlapCount(builder, maxOverlapCount)
def MiniGameShootingGeasExcelAddGeasData(builder, geasData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(geasData), 0)
def AddGeasData(builder, geasData):
    return MiniGameShootingGeasExcelAddGeasData(builder, geasData)
def MiniGameShootingGeasExcelAddNeedGeasId(builder, needGeasId): builder.PrependInt64Slot(6, needGeasId, 0)
def AddNeedGeasId(builder, needGeasId):
    return MiniGameShootingGeasExcelAddNeedGeasId(builder, needGeasId)
def MiniGameShootingGeasExcelAddHideInPausePopup(builder, hideInPausePopup): builder.PrependBoolSlot(7, hideInPausePopup, 0)
def AddHideInPausePopup(builder, hideInPausePopup):
    return MiniGameShootingGeasExcelAddHideInPausePopup(builder, hideInPausePopup)
def MiniGameShootingGeasExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameShootingGeasExcelEnd(builder)