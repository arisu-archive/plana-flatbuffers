# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CostumeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CostumeExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCostumeExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CostumeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CostumeExcel
    def CostumeGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def CostumeUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def IsDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CostumeExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CostumeExcel
    def ReleaseDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def CollectionVisibleStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def CollectionVisibleEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def CharacterSkillListGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def SpineResourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def SpineResourceNameDiorama(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def SpineResourceNameDioramaForFormConversion(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CostumeExcel
    def SpineResourceNameDioramaForFormConversionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CostumeExcel
    def SpineResourceNameDioramaForFormConversionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # CostumeExcel
    def EntityMaterialType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def ModelPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def AnimatorName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def CafeModelPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def EchelonModelPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def StrategyModelPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def TextureDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def CollectionTexturePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def CollectionBgTexturePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def CombatStyleTexturePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def UseObjectHpbar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CostumeExcel
    def TextureBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def TextureSkillCard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CostumeExcel
    def TextureSkillCardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CostumeExcel
    def TextureSkillCardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # CostumeExcel
    def InformationPacel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def AnimationSsr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def EnterStrategyAnimationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CostumeExcel
    def AnimationValidator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CostumeExcel
    def CharacterVoiceGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CostumeExcel
    def ShowObjectHpStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CostumeExcelStart(builder): builder.StartObject(33)
def Start(builder):
    return CostumeExcelStart(builder)
def CostumeExcelAddCostumeGroupId(builder, costumeGroupId): builder.PrependInt64Slot(0, costumeGroupId, 0)
def AddCostumeGroupId(builder, costumeGroupId):
    return CostumeExcelAddCostumeGroupId(builder, costumeGroupId)
def CostumeExcelAddCostumeUniqueId(builder, costumeUniqueId): builder.PrependInt64Slot(1, costumeUniqueId, 0)
def AddCostumeUniqueId(builder, costumeUniqueId):
    return CostumeExcelAddCostumeUniqueId(builder, costumeUniqueId)
def CostumeExcelAddDevName(builder, devName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(devName), 0)
def AddDevName(builder, devName):
    return CostumeExcelAddDevName(builder, devName)
def CostumeExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(3, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return CostumeExcelAddProductionStep(builder, productionStep)
def CostumeExcelAddIsDefault(builder, isDefault): builder.PrependBoolSlot(4, isDefault, 0)
def AddIsDefault(builder, isDefault):
    return CostumeExcelAddIsDefault(builder, isDefault)
def CostumeExcelAddCollectionVisible(builder, collectionVisible): builder.PrependBoolSlot(5, collectionVisible, 0)
def AddCollectionVisible(builder, collectionVisible):
    return CostumeExcelAddCollectionVisible(builder, collectionVisible)
def CostumeExcelAddReleaseDate(builder, releaseDate): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(releaseDate), 0)
def AddReleaseDate(builder, releaseDate):
    return CostumeExcelAddReleaseDate(builder, releaseDate)
def CostumeExcelAddCollectionVisibleStartDate(builder, collectionVisibleStartDate): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(collectionVisibleStartDate), 0)
def AddCollectionVisibleStartDate(builder, collectionVisibleStartDate):
    return CostumeExcelAddCollectionVisibleStartDate(builder, collectionVisibleStartDate)
def CostumeExcelAddCollectionVisibleEndDate(builder, collectionVisibleEndDate): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(collectionVisibleEndDate), 0)
def AddCollectionVisibleEndDate(builder, collectionVisibleEndDate):
    return CostumeExcelAddCollectionVisibleEndDate(builder, collectionVisibleEndDate)
def CostumeExcelAddRarity(builder, rarity): builder.PrependInt32Slot(9, rarity, 0)
def AddRarity(builder, rarity):
    return CostumeExcelAddRarity(builder, rarity)
def CostumeExcelAddCharacterSkillListGroupId(builder, characterSkillListGroupId): builder.PrependInt64Slot(10, characterSkillListGroupId, 0)
def AddCharacterSkillListGroupId(builder, characterSkillListGroupId):
    return CostumeExcelAddCharacterSkillListGroupId(builder, characterSkillListGroupId)
def CostumeExcelAddSpineResourceName(builder, spineResourceName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(spineResourceName), 0)
def AddSpineResourceName(builder, spineResourceName):
    return CostumeExcelAddSpineResourceName(builder, spineResourceName)
def CostumeExcelAddSpineResourceNameDiorama(builder, spineResourceNameDiorama): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(spineResourceNameDiorama), 0)
def AddSpineResourceNameDiorama(builder, spineResourceNameDiorama):
    return CostumeExcelAddSpineResourceNameDiorama(builder, spineResourceNameDiorama)
def CostumeExcelAddSpineResourceNameDioramaForFormConversion(builder, spineResourceNameDioramaForFormConversion): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(spineResourceNameDioramaForFormConversion), 0)
def AddSpineResourceNameDioramaForFormConversion(builder, spineResourceNameDioramaForFormConversion):
    return CostumeExcelAddSpineResourceNameDioramaForFormConversion(builder, spineResourceNameDioramaForFormConversion)
def CostumeExcelStartSpineResourceNameDioramaForFormConversionVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSpineResourceNameDioramaForFormConversionVector(builder, numElems):
    return CostumeExcelStartSpineResourceNameDioramaForFormConversionVector(builder, numElems)
def CostumeExcelAddEntityMaterialType(builder, entityMaterialType): builder.PrependInt32Slot(14, entityMaterialType, 0)
def AddEntityMaterialType(builder, entityMaterialType):
    return CostumeExcelAddEntityMaterialType(builder, entityMaterialType)
def CostumeExcelAddModelPrefabName(builder, modelPrefabName): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(modelPrefabName), 0)
def AddModelPrefabName(builder, modelPrefabName):
    return CostumeExcelAddModelPrefabName(builder, modelPrefabName)
def CostumeExcelAddAnimatorName(builder, animatorName): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(animatorName), 0)
def AddAnimatorName(builder, animatorName):
    return CostumeExcelAddAnimatorName(builder, animatorName)
def CostumeExcelAddCafeModelPrefabName(builder, cafeModelPrefabName): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(cafeModelPrefabName), 0)
def AddCafeModelPrefabName(builder, cafeModelPrefabName):
    return CostumeExcelAddCafeModelPrefabName(builder, cafeModelPrefabName)
def CostumeExcelAddEchelonModelPrefabName(builder, echelonModelPrefabName): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(echelonModelPrefabName), 0)
def AddEchelonModelPrefabName(builder, echelonModelPrefabName):
    return CostumeExcelAddEchelonModelPrefabName(builder, echelonModelPrefabName)
def CostumeExcelAddStrategyModelPrefabName(builder, strategyModelPrefabName): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(strategyModelPrefabName), 0)
def AddStrategyModelPrefabName(builder, strategyModelPrefabName):
    return CostumeExcelAddStrategyModelPrefabName(builder, strategyModelPrefabName)
def CostumeExcelAddTextureDir(builder, textureDir): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(textureDir), 0)
def AddTextureDir(builder, textureDir):
    return CostumeExcelAddTextureDir(builder, textureDir)
def CostumeExcelAddCollectionTexturePath(builder, collectionTexturePath): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(collectionTexturePath), 0)
def AddCollectionTexturePath(builder, collectionTexturePath):
    return CostumeExcelAddCollectionTexturePath(builder, collectionTexturePath)
def CostumeExcelAddCollectionBgTexturePath(builder, collectionBgTexturePath): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(collectionBgTexturePath), 0)
def AddCollectionBgTexturePath(builder, collectionBgTexturePath):
    return CostumeExcelAddCollectionBgTexturePath(builder, collectionBgTexturePath)
def CostumeExcelAddCombatStyleTexturePath(builder, combatStyleTexturePath): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(combatStyleTexturePath), 0)
def AddCombatStyleTexturePath(builder, combatStyleTexturePath):
    return CostumeExcelAddCombatStyleTexturePath(builder, combatStyleTexturePath)
def CostumeExcelAddUseObjectHpbar(builder, useObjectHpbar): builder.PrependBoolSlot(24, useObjectHpbar, 0)
def AddUseObjectHpbar(builder, useObjectHpbar):
    return CostumeExcelAddUseObjectHpbar(builder, useObjectHpbar)
def CostumeExcelAddTextureBoss(builder, textureBoss): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(textureBoss), 0)
def AddTextureBoss(builder, textureBoss):
    return CostumeExcelAddTextureBoss(builder, textureBoss)
def CostumeExcelAddTextureSkillCard(builder, textureSkillCard): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(textureSkillCard), 0)
def AddTextureSkillCard(builder, textureSkillCard):
    return CostumeExcelAddTextureSkillCard(builder, textureSkillCard)
def CostumeExcelStartTextureSkillCardVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTextureSkillCardVector(builder, numElems):
    return CostumeExcelStartTextureSkillCardVector(builder, numElems)
def CostumeExcelAddInformationPacel(builder, informationPacel): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(informationPacel), 0)
def AddInformationPacel(builder, informationPacel):
    return CostumeExcelAddInformationPacel(builder, informationPacel)
def CostumeExcelAddAnimationSsr(builder, animationSsr): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(animationSsr), 0)
def AddAnimationSsr(builder, animationSsr):
    return CostumeExcelAddAnimationSsr(builder, animationSsr)
def CostumeExcelAddEnterStrategyAnimationName(builder, enterStrategyAnimationName): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(enterStrategyAnimationName), 0)
def AddEnterStrategyAnimationName(builder, enterStrategyAnimationName):
    return CostumeExcelAddEnterStrategyAnimationName(builder, enterStrategyAnimationName)
def CostumeExcelAddAnimationValidator(builder, animationValidator): builder.PrependBoolSlot(30, animationValidator, 0)
def AddAnimationValidator(builder, animationValidator):
    return CostumeExcelAddAnimationValidator(builder, animationValidator)
def CostumeExcelAddCharacterVoiceGroupId(builder, characterVoiceGroupId): builder.PrependInt64Slot(31, characterVoiceGroupId, 0)
def AddCharacterVoiceGroupId(builder, characterVoiceGroupId):
    return CostumeExcelAddCharacterVoiceGroupId(builder, characterVoiceGroupId)
def CostumeExcelAddShowObjectHpStatus(builder, showObjectHpStatus): builder.PrependBoolSlot(32, showObjectHpStatus, 0)
def AddShowObjectHpStatus(builder, showObjectHpStatus):
    return CostumeExcelAddShowObjectHpStatus(builder, showObjectHpStatus)
def CostumeExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CostumeExcelEnd(builder)