# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamScheduleResultExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamScheduleResultExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamScheduleResultExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamScheduleResultExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamScheduleResultExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterOperationType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterOperationTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterOperationTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterOperationTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamScheduleResultExcel
    def RewardParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MiniGameDreamScheduleResultExcel
    def Prob(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def DreamMakerScheduleGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def DreamMakerResult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamScheduleResultExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamScheduleResultExcelStart(builder): builder.StartObject(11)
def Start(builder):
    return MiniGameDreamScheduleResultExcelStart(builder)
def MiniGameDreamScheduleResultExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt64Slot(0, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return MiniGameDreamScheduleResultExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def MiniGameDreamScheduleResultExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependInt64Slot(1, rewardParcelId, 0)
def AddRewardParcelId(builder, rewardParcelId):
    return MiniGameDreamScheduleResultExcelAddRewardParcelId(builder, rewardParcelId)
def MiniGameDreamScheduleResultExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(2, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return MiniGameDreamScheduleResultExcelAddRewardParcelType(builder, rewardParcelType)
def MiniGameDreamScheduleResultExcelAddRewardParameterAmount(builder, rewardParameterAmount): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParameterAmount), 0)
def AddRewardParameterAmount(builder, rewardParameterAmount):
    return MiniGameDreamScheduleResultExcelAddRewardParameterAmount(builder, rewardParameterAmount)
def MiniGameDreamScheduleResultExcelStartRewardParameterAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParameterAmountVector(builder, numElems):
    return MiniGameDreamScheduleResultExcelStartRewardParameterAmountVector(builder, numElems)
def MiniGameDreamScheduleResultExcelAddRewardParameterOperationType(builder, rewardParameterOperationType): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParameterOperationType), 0)
def AddRewardParameterOperationType(builder, rewardParameterOperationType):
    return MiniGameDreamScheduleResultExcelAddRewardParameterOperationType(builder, rewardParameterOperationType)
def MiniGameDreamScheduleResultExcelStartRewardParameterOperationTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParameterOperationTypeVector(builder, numElems):
    return MiniGameDreamScheduleResultExcelStartRewardParameterOperationTypeVector(builder, numElems)
def MiniGameDreamScheduleResultExcelAddRewardParameter(builder, rewardParameter): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParameter), 0)
def AddRewardParameter(builder, rewardParameter):
    return MiniGameDreamScheduleResultExcelAddRewardParameter(builder, rewardParameter)
def MiniGameDreamScheduleResultExcelStartRewardParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParameterVector(builder, numElems):
    return MiniGameDreamScheduleResultExcelStartRewardParameterVector(builder, numElems)
def MiniGameDreamScheduleResultExcelAddProb(builder, prob): builder.PrependInt32Slot(6, prob, 0)
def AddProb(builder, prob):
    return MiniGameDreamScheduleResultExcelAddProb(builder, prob)
def MiniGameDreamScheduleResultExcelAddDreamMakerScheduleGroup(builder, dreamMakerScheduleGroup): builder.PrependInt64Slot(7, dreamMakerScheduleGroup, 0)
def AddDreamMakerScheduleGroup(builder, dreamMakerScheduleGroup):
    return MiniGameDreamScheduleResultExcelAddDreamMakerScheduleGroup(builder, dreamMakerScheduleGroup)
def MiniGameDreamScheduleResultExcelAddDreamMakerResult(builder, dreamMakerResult): builder.PrependInt32Slot(8, dreamMakerResult, 0)
def AddDreamMakerResult(builder, dreamMakerResult):
    return MiniGameDreamScheduleResultExcelAddDreamMakerResult(builder, dreamMakerResult)
def MiniGameDreamScheduleResultExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(9, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDreamScheduleResultExcelAddEventContentId(builder, eventContentId)
def MiniGameDreamScheduleResultExcelAddId(builder, id): builder.PrependInt64Slot(10, id, 0)
def AddId(builder, id):
    return MiniGameDreamScheduleResultExcelAddId(builder, id)
def MiniGameDreamScheduleResultExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDreamScheduleResultExcelEnd(builder)