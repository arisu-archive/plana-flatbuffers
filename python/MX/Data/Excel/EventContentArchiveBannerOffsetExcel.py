# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentArchiveBannerOffsetExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentArchiveBannerOffsetExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentArchiveBannerOffsetExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentArchiveBannerOffsetExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentArchiveBannerOffsetExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentArchiveBannerOffsetExcel
    def OffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # EventContentArchiveBannerOffsetExcel
    def OffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # EventContentArchiveBannerOffsetExcel
    def ScaleX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # EventContentArchiveBannerOffsetExcel
    def ScaleY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def EventContentArchiveBannerOffsetExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return EventContentArchiveBannerOffsetExcelStart(builder)
def EventContentArchiveBannerOffsetExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentArchiveBannerOffsetExcelAddEventContentId(builder, eventContentId)
def EventContentArchiveBannerOffsetExcelAddOffsetX(builder, offsetX): builder.PrependFloat32Slot(1, offsetX, 0.0)
def AddOffsetX(builder, offsetX):
    return EventContentArchiveBannerOffsetExcelAddOffsetX(builder, offsetX)
def EventContentArchiveBannerOffsetExcelAddOffsetY(builder, offsetY): builder.PrependFloat32Slot(2, offsetY, 0.0)
def AddOffsetY(builder, offsetY):
    return EventContentArchiveBannerOffsetExcelAddOffsetY(builder, offsetY)
def EventContentArchiveBannerOffsetExcelAddScaleX(builder, scaleX): builder.PrependFloat32Slot(3, scaleX, 0.0)
def AddScaleX(builder, scaleX):
    return EventContentArchiveBannerOffsetExcelAddScaleX(builder, scaleX)
def EventContentArchiveBannerOffsetExcelAddScaleY(builder, scaleY): builder.PrependFloat32Slot(4, scaleY, 0.0)
def AddScaleY(builder, scaleY):
    return EventContentArchiveBannerOffsetExcelAddScaleY(builder, scaleY)
def EventContentArchiveBannerOffsetExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentArchiveBannerOffsetExcelEnd(builder)