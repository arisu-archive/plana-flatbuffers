# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatLimitExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatLimitExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterStatLimitExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterStatLimitExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatLimitExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatMaxValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatMinValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatRatioMaxValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatRatioMinValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def TacticEntityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CharacterStatLimitExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return CharacterStatLimitExcelStart(builder)
def CharacterStatLimitExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return CharacterStatLimitExcelAddId(builder, id)
def CharacterStatLimitExcelAddStatMaxValue(builder, statMaxValue): builder.PrependInt64Slot(1, statMaxValue, 0)
def AddStatMaxValue(builder, statMaxValue):
    return CharacterStatLimitExcelAddStatMaxValue(builder, statMaxValue)
def CharacterStatLimitExcelAddStatMinValue(builder, statMinValue): builder.PrependInt64Slot(2, statMinValue, 0)
def AddStatMinValue(builder, statMinValue):
    return CharacterStatLimitExcelAddStatMinValue(builder, statMinValue)
def CharacterStatLimitExcelAddStatRatioMaxValue(builder, statRatioMaxValue): builder.PrependInt64Slot(3, statRatioMaxValue, 0)
def AddStatRatioMaxValue(builder, statRatioMaxValue):
    return CharacterStatLimitExcelAddStatRatioMaxValue(builder, statRatioMaxValue)
def CharacterStatLimitExcelAddStatRatioMinValue(builder, statRatioMinValue): builder.PrependInt64Slot(4, statRatioMinValue, 0)
def AddStatRatioMinValue(builder, statRatioMinValue):
    return CharacterStatLimitExcelAddStatRatioMinValue(builder, statRatioMinValue)
def CharacterStatLimitExcelAddStatType(builder, statType): builder.PrependInt32Slot(5, statType, 0)
def AddStatType(builder, statType):
    return CharacterStatLimitExcelAddStatType(builder, statType)
def CharacterStatLimitExcelAddTacticEntityType(builder, tacticEntityType): builder.PrependInt32Slot(6, tacticEntityType, 0)
def AddTacticEntityType(builder, tacticEntityType):
    return CharacterStatLimitExcelAddTacticEntityType(builder, tacticEntityType)
def CharacterStatLimitExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterStatLimitExcelEnd(builder)