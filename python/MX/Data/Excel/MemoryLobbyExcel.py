# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryLobbyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryLobbyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemoryLobbyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MemoryLobbyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MemoryLobbyExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MemoryLobbyExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MemoryLobbyExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MemoryLobbyExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MemoryLobbyExcel
    def PrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobbyExcel
    def MemoryLobbyCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MemoryLobbyExcel
    def SlotTextureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobbyExcel
    def RewardTextureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobbyExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MemoryLobbyExcel
    def AudioClipJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobbyExcel
    def AudioClipKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MemoryLobbyExcelStart(builder): builder.StartObject(11)
def Start(builder):
    return MemoryLobbyExcelStart(builder)
def MemoryLobbyExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return MemoryLobbyExcelAddId(builder, id)
def MemoryLobbyExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(1, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return MemoryLobbyExcelAddProductionStep(builder, productionStep)
def MemoryLobbyExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(2, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return MemoryLobbyExcelAddLocalizeEtcId(builder, localizeEtcId)
def MemoryLobbyExcelAddCharacterId(builder, characterId): builder.PrependInt64Slot(3, characterId, 0)
def AddCharacterId(builder, characterId):
    return MemoryLobbyExcelAddCharacterId(builder, characterId)
def MemoryLobbyExcelAddPrefabName(builder, prefabName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(prefabName), 0)
def AddPrefabName(builder, prefabName):
    return MemoryLobbyExcelAddPrefabName(builder, prefabName)
def MemoryLobbyExcelAddMemoryLobbyCategory(builder, memoryLobbyCategory): builder.PrependInt32Slot(5, memoryLobbyCategory, 0)
def AddMemoryLobbyCategory(builder, memoryLobbyCategory):
    return MemoryLobbyExcelAddMemoryLobbyCategory(builder, memoryLobbyCategory)
def MemoryLobbyExcelAddSlotTextureName(builder, slotTextureName): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(slotTextureName), 0)
def AddSlotTextureName(builder, slotTextureName):
    return MemoryLobbyExcelAddSlotTextureName(builder, slotTextureName)
def MemoryLobbyExcelAddRewardTextureName(builder, rewardTextureName): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewardTextureName), 0)
def AddRewardTextureName(builder, rewardTextureName):
    return MemoryLobbyExcelAddRewardTextureName(builder, rewardTextureName)
def MemoryLobbyExcelAddBgmId(builder, bgmId): builder.PrependInt64Slot(8, bgmId, 0)
def AddBgmId(builder, bgmId):
    return MemoryLobbyExcelAddBgmId(builder, bgmId)
def MemoryLobbyExcelAddAudioClipJp(builder, audioClipJp): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(audioClipJp), 0)
def AddAudioClipJp(builder, audioClipJp):
    return MemoryLobbyExcelAddAudioClipJp(builder, audioClipJp)
def MemoryLobbyExcelAddAudioClipKr(builder, audioClipKr): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(audioClipKr), 0)
def AddAudioClipKr(builder, audioClipKr):
    return MemoryLobbyExcelAddAudioClipKr(builder, audioClipKr)
def MemoryLobbyExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryLobbyExcelEnd(builder)