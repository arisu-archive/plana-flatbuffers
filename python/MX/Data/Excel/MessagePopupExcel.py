# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MessagePopupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MessagePopupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessagePopupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MessagePopupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MessagePopupExcel
    def StringId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MessagePopupExcel
    def MessagePopupLayout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MessagePopupExcel
    def OrderType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MessagePopupExcel
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MessagePopupExcel
    def TitleText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MessagePopupExcel
    def SubTitleText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MessagePopupExcel
    def MessageText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MessagePopupExcel
    def ConditionText(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MessagePopupExcel
    def ConditionTextAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # MessagePopupExcel
    def ConditionTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MessagePopupExcel
    def ConditionTextIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # MessagePopupExcel
    def DisplayXButton(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MessagePopupExcel
    def Button(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MessagePopupExcel
    def ButtonAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MessagePopupExcel
    def ButtonLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MessagePopupExcel
    def ButtonIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # MessagePopupExcel
    def ButtonText(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MessagePopupExcel
    def ButtonTextAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # MessagePopupExcel
    def ButtonTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MessagePopupExcel
    def ButtonTextIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # MessagePopupExcel
    def ButtonCommand(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MessagePopupExcel
    def ButtonCommandLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MessagePopupExcel
    def ButtonCommandIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # MessagePopupExcel
    def ButtonParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MessagePopupExcel
    def ButtonParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MessagePopupExcel
    def ButtonParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def MessagePopupExcelStart(builder): builder.StartObject(13)
def Start(builder):
    return MessagePopupExcelStart(builder)
def MessagePopupExcelAddStringId(builder, stringId): builder.PrependUint32Slot(0, stringId, 0)
def AddStringId(builder, stringId):
    return MessagePopupExcelAddStringId(builder, stringId)
def MessagePopupExcelAddMessagePopupLayout(builder, messagePopupLayout): builder.PrependInt32Slot(1, messagePopupLayout, 0)
def AddMessagePopupLayout(builder, messagePopupLayout):
    return MessagePopupExcelAddMessagePopupLayout(builder, messagePopupLayout)
def MessagePopupExcelAddOrderType(builder, orderType): builder.PrependInt32Slot(2, orderType, 0)
def AddOrderType(builder, orderType):
    return MessagePopupExcelAddOrderType(builder, orderType)
def MessagePopupExcelAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def AddImage(builder, image):
    return MessagePopupExcelAddImage(builder, image)
def MessagePopupExcelAddTitleText(builder, titleText): builder.PrependUint32Slot(4, titleText, 0)
def AddTitleText(builder, titleText):
    return MessagePopupExcelAddTitleText(builder, titleText)
def MessagePopupExcelAddSubTitleText(builder, subTitleText): builder.PrependUint32Slot(5, subTitleText, 0)
def AddSubTitleText(builder, subTitleText):
    return MessagePopupExcelAddSubTitleText(builder, subTitleText)
def MessagePopupExcelAddMessageText(builder, messageText): builder.PrependUint32Slot(6, messageText, 0)
def AddMessageText(builder, messageText):
    return MessagePopupExcelAddMessageText(builder, messageText)
def MessagePopupExcelAddConditionText(builder, conditionText): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(conditionText), 0)
def AddConditionText(builder, conditionText):
    return MessagePopupExcelAddConditionText(builder, conditionText)
def MessagePopupExcelStartConditionTextVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConditionTextVector(builder, numElems):
    return MessagePopupExcelStartConditionTextVector(builder, numElems)
def MessagePopupExcelAddDisplayXButton(builder, displayXButton): builder.PrependBoolSlot(8, displayXButton, 0)
def AddDisplayXButton(builder, displayXButton):
    return MessagePopupExcelAddDisplayXButton(builder, displayXButton)
def MessagePopupExcelAddButton(builder, button): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(button), 0)
def AddButton(builder, button):
    return MessagePopupExcelAddButton(builder, button)
def MessagePopupExcelStartButtonVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartButtonVector(builder, numElems):
    return MessagePopupExcelStartButtonVector(builder, numElems)
def MessagePopupExcelAddButtonText(builder, buttonText): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(buttonText), 0)
def AddButtonText(builder, buttonText):
    return MessagePopupExcelAddButtonText(builder, buttonText)
def MessagePopupExcelStartButtonTextVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartButtonTextVector(builder, numElems):
    return MessagePopupExcelStartButtonTextVector(builder, numElems)
def MessagePopupExcelAddButtonCommand(builder, buttonCommand): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(buttonCommand), 0)
def AddButtonCommand(builder, buttonCommand):
    return MessagePopupExcelAddButtonCommand(builder, buttonCommand)
def MessagePopupExcelStartButtonCommandVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartButtonCommandVector(builder, numElems):
    return MessagePopupExcelStartButtonCommandVector(builder, numElems)
def MessagePopupExcelAddButtonParameter(builder, buttonParameter): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(buttonParameter), 0)
def AddButtonParameter(builder, buttonParameter):
    return MessagePopupExcelAddButtonParameter(builder, buttonParameter)
def MessagePopupExcelStartButtonParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartButtonParameterVector(builder, numElems):
    return MessagePopupExcelStartButtonParameterVector(builder, numElems)
def MessagePopupExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MessagePopupExcelEnd(builder)