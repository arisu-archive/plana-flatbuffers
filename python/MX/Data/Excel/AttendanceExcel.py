# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AttendanceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AttendanceExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAttendanceExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AttendanceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AttendanceExcel
    def AccountLevelLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def AccountType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def BookSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def CountdownPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def CountReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def CountRule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def DecorationGarlandImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def DecorationImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def DialogCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def ExpiryDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def InfomationLocalizeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def MailType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AttendanceExcel
    def StartableEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def TitleImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttendanceExcel
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AttendanceExcelStart(builder): builder.StartObject(20)
def Start(builder):
    return AttendanceExcelStart(builder)
def AttendanceExcelAddAccountLevelLimit(builder, accountLevelLimit): builder.PrependInt64Slot(0, accountLevelLimit, 0)
def AddAccountLevelLimit(builder, accountLevelLimit):
    return AttendanceExcelAddAccountLevelLimit(builder, accountLevelLimit)
def AttendanceExcelAddAccountType(builder, accountType): builder.PrependInt32Slot(1, accountType, 0)
def AddAccountType(builder, accountType):
    return AttendanceExcelAddAccountType(builder, accountType)
def AttendanceExcelAddBookSize(builder, bookSize): builder.PrependInt64Slot(2, bookSize, 0)
def AddBookSize(builder, bookSize):
    return AttendanceExcelAddBookSize(builder, bookSize)
def AttendanceExcelAddCountdownPrefab(builder, countdownPrefab): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(countdownPrefab), 0)
def AddCountdownPrefab(builder, countdownPrefab):
    return AttendanceExcelAddCountdownPrefab(builder, countdownPrefab)
def AttendanceExcelAddCountReset(builder, countReset): builder.PrependInt32Slot(4, countReset, 0)
def AddCountReset(builder, countReset):
    return AttendanceExcelAddCountReset(builder, countReset)
def AttendanceExcelAddCountRule(builder, countRule): builder.PrependInt32Slot(5, countRule, 0)
def AddCountRule(builder, countRule):
    return AttendanceExcelAddCountRule(builder, countRule)
def AttendanceExcelAddDecorationGarlandImagePath(builder, decorationGarlandImagePath): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(decorationGarlandImagePath), 0)
def AddDecorationGarlandImagePath(builder, decorationGarlandImagePath):
    return AttendanceExcelAddDecorationGarlandImagePath(builder, decorationGarlandImagePath)
def AttendanceExcelAddDecorationImagePath(builder, decorationImagePath): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decorationImagePath), 0)
def AddDecorationImagePath(builder, decorationImagePath):
    return AttendanceExcelAddDecorationImagePath(builder, decorationImagePath)
def AttendanceExcelAddDialogCategory(builder, dialogCategory): builder.PrependInt32Slot(8, dialogCategory, 0)
def AddDialogCategory(builder, dialogCategory):
    return AttendanceExcelAddDialogCategory(builder, dialogCategory)
def AttendanceExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(9, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return AttendanceExcelAddDisplayOrder(builder, displayOrder)
def AttendanceExcelAddEndDate(builder, endDate): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)
def AddEndDate(builder, endDate):
    return AttendanceExcelAddEndDate(builder, endDate)
def AttendanceExcelAddExpiryDate(builder, expiryDate): builder.PrependInt64Slot(11, expiryDate, 0)
def AddExpiryDate(builder, expiryDate):
    return AttendanceExcelAddExpiryDate(builder, expiryDate)
def AttendanceExcelAddId(builder, id): builder.PrependInt64Slot(12, id, 0)
def AddId(builder, id):
    return AttendanceExcelAddId(builder, id)
def AttendanceExcelAddInfomationLocalizeCode(builder, infomationLocalizeCode): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(infomationLocalizeCode), 0)
def AddInfomationLocalizeCode(builder, infomationLocalizeCode):
    return AttendanceExcelAddInfomationLocalizeCode(builder, infomationLocalizeCode)
def AttendanceExcelAddMailType(builder, mailType): builder.PrependInt32Slot(14, mailType, 0)
def AddMailType(builder, mailType):
    return AttendanceExcelAddMailType(builder, mailType)
def AttendanceExcelAddStartableEndDate(builder, startableEndDate): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(startableEndDate), 0)
def AddStartableEndDate(builder, startableEndDate):
    return AttendanceExcelAddStartableEndDate(builder, startableEndDate)
def AttendanceExcelAddStartDate(builder, startDate): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)
def AddStartDate(builder, startDate):
    return AttendanceExcelAddStartDate(builder, startDate)
def AttendanceExcelAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return AttendanceExcelAddTitle(builder, title)
def AttendanceExcelAddTitleImagePath(builder, titleImagePath): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(titleImagePath), 0)
def AddTitleImagePath(builder, titleImagePath):
    return AttendanceExcelAddTitleImagePath(builder, titleImagePath)
def AttendanceExcelAddType(builder, type): builder.PrependInt32Slot(19, type, 0)
def AddType(builder, type):
    return AttendanceExcelAddType(builder, type)
def AttendanceExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AttendanceExcelEnd(builder)