# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGEnemyGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGEnemyGroupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGEnemyGroupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGEnemyGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGEnemyGroupExcel
    def LocalizeEnemyGroupDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGEnemyGroupExcel
    def LocalizeEnemyGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGEnemyGroupExcel
    def EnemyBgm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGEnemyGroupExcel
    def EnemyAi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameCCGEnemyGroupExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameCCGEnemyGroupExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return MinigameCCGEnemyGroupExcelStart(builder)
def MinigameCCGEnemyGroupExcelAddLocalizeEnemyGroupDesc(builder, localizeEnemyGroupDesc): builder.PrependUint32Slot(0, localizeEnemyGroupDesc, 0)
def AddLocalizeEnemyGroupDesc(builder, localizeEnemyGroupDesc):
    return MinigameCCGEnemyGroupExcelAddLocalizeEnemyGroupDesc(builder, localizeEnemyGroupDesc)
def MinigameCCGEnemyGroupExcelAddLocalizeEnemyGroupName(builder, localizeEnemyGroupName): builder.PrependUint32Slot(1, localizeEnemyGroupName, 0)
def AddLocalizeEnemyGroupName(builder, localizeEnemyGroupName):
    return MinigameCCGEnemyGroupExcelAddLocalizeEnemyGroupName(builder, localizeEnemyGroupName)
def MinigameCCGEnemyGroupExcelAddEnemyBgm(builder, enemyBgm): builder.PrependInt64Slot(2, enemyBgm, 0)
def AddEnemyBgm(builder, enemyBgm):
    return MinigameCCGEnemyGroupExcelAddEnemyBgm(builder, enemyBgm)
def MinigameCCGEnemyGroupExcelAddEnemyAi(builder, enemyAi): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enemyAi), 0)
def AddEnemyAi(builder, enemyAi):
    return MinigameCCGEnemyGroupExcelAddEnemyAi(builder, enemyAi)
def MinigameCCGEnemyGroupExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(4, groupId, 0)
def AddGroupId(builder, groupId):
    return MinigameCCGEnemyGroupExcelAddGroupId(builder, groupId)
def MinigameCCGEnemyGroupExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameCCGEnemyGroupExcelEnd(builder)