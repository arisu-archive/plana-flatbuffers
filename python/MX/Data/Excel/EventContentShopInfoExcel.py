# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentShopInfoExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentShopInfoExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentShopInfoExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentShopInfoExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentShopInfoExcel
    def ShopProductUpdateDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentShopInfoExcel
    def OpenPeriodTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentShopInfoExcel
    def OpenPeriodFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentShopInfoExcel
    def GoodsId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentShopInfoExcel
    def GoodsIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentShopInfoExcel
    def GoodsIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentShopInfoExcel
    def GoodsIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EventContentShopInfoExcel
    def RefreshAbleCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopInfoExcel
    def AutoRefreshCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopInfoExcel
    def IsSoldOutDimmed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentShopInfoExcel
    def IsRefresh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentShopInfoExcel
    def CostParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentShopInfoExcel
    def CostParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentShopInfoExcel
    def CostParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentShopInfoExcel
    def CostParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # EventContentShopInfoExcel
    def CostParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentShopInfoExcel
    def CostParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentShopInfoExcel
    def CostParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentShopInfoExcel
    def CostParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # EventContentShopInfoExcel
    def LocalizeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentShopInfoExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentShopInfoExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentShopInfoExcelStart(builder): builder.StartObject(13)
def Start(builder):
    return EventContentShopInfoExcelStart(builder)
def EventContentShopInfoExcelAddShopProductUpdateDate(builder, shopProductUpdateDate): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shopProductUpdateDate), 0)
def AddShopProductUpdateDate(builder, shopProductUpdateDate):
    return EventContentShopInfoExcelAddShopProductUpdateDate(builder, shopProductUpdateDate)
def EventContentShopInfoExcelAddOpenPeriodTo(builder, openPeriodTo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(openPeriodTo), 0)
def AddOpenPeriodTo(builder, openPeriodTo):
    return EventContentShopInfoExcelAddOpenPeriodTo(builder, openPeriodTo)
def EventContentShopInfoExcelAddOpenPeriodFrom(builder, openPeriodFrom): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(openPeriodFrom), 0)
def AddOpenPeriodFrom(builder, openPeriodFrom):
    return EventContentShopInfoExcelAddOpenPeriodFrom(builder, openPeriodFrom)
def EventContentShopInfoExcelAddGoodsId(builder, goodsId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(goodsId), 0)
def AddGoodsId(builder, goodsId):
    return EventContentShopInfoExcelAddGoodsId(builder, goodsId)
def EventContentShopInfoExcelStartGoodsIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartGoodsIdVector(builder, numElems):
    return EventContentShopInfoExcelStartGoodsIdVector(builder, numElems)
def EventContentShopInfoExcelAddRefreshAbleCount(builder, refreshAbleCount): builder.PrependInt64Slot(4, refreshAbleCount, 0)
def AddRefreshAbleCount(builder, refreshAbleCount):
    return EventContentShopInfoExcelAddRefreshAbleCount(builder, refreshAbleCount)
def EventContentShopInfoExcelAddAutoRefreshCoolTime(builder, autoRefreshCoolTime): builder.PrependInt64Slot(5, autoRefreshCoolTime, 0)
def AddAutoRefreshCoolTime(builder, autoRefreshCoolTime):
    return EventContentShopInfoExcelAddAutoRefreshCoolTime(builder, autoRefreshCoolTime)
def EventContentShopInfoExcelAddIsSoldOutDimmed(builder, isSoldOutDimmed): builder.PrependBoolSlot(6, isSoldOutDimmed, 0)
def AddIsSoldOutDimmed(builder, isSoldOutDimmed):
    return EventContentShopInfoExcelAddIsSoldOutDimmed(builder, isSoldOutDimmed)
def EventContentShopInfoExcelAddIsRefresh(builder, isRefresh): builder.PrependBoolSlot(7, isRefresh, 0)
def AddIsRefresh(builder, isRefresh):
    return EventContentShopInfoExcelAddIsRefresh(builder, isRefresh)
def EventContentShopInfoExcelAddCostParcelId(builder, costParcelId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(costParcelId), 0)
def AddCostParcelId(builder, costParcelId):
    return EventContentShopInfoExcelAddCostParcelId(builder, costParcelId)
def EventContentShopInfoExcelStartCostParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCostParcelIdVector(builder, numElems):
    return EventContentShopInfoExcelStartCostParcelIdVector(builder, numElems)
def EventContentShopInfoExcelAddCostParcelType(builder, costParcelType): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(costParcelType), 0)
def AddCostParcelType(builder, costParcelType):
    return EventContentShopInfoExcelAddCostParcelType(builder, costParcelType)
def EventContentShopInfoExcelStartCostParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCostParcelTypeVector(builder, numElems):
    return EventContentShopInfoExcelStartCostParcelTypeVector(builder, numElems)
def EventContentShopInfoExcelAddLocalizeCode(builder, localizeCode): builder.PrependUint32Slot(10, localizeCode, 0)
def AddLocalizeCode(builder, localizeCode):
    return EventContentShopInfoExcelAddLocalizeCode(builder, localizeCode)
def EventContentShopInfoExcelAddCategoryType(builder, categoryType): builder.PrependInt32Slot(11, categoryType, 0)
def AddCategoryType(builder, categoryType):
    return EventContentShopInfoExcelAddCategoryType(builder, categoryType)
def EventContentShopInfoExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(12, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentShopInfoExcelAddEventContentId(builder, eventContentId)
def EventContentShopInfoExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentShopInfoExcelEnd(builder)