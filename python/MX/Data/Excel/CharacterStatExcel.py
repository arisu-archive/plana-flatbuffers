# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHp1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHp100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DodgePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AccuracyPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalResistPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageResistRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealEffectivenessRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionResist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetrationResist1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetrationResist100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceExplosionRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhancePierceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceMysticRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceSonicRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceSiegeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceNormalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceStructureRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendBuffDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendDebuffDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendCrowdControlDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IgnoreDelayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def NormalAttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def InitialRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def SightPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActiveGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategyMobility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategySightRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio2Increase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio2Decrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio2Increase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio2Decrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExDamagedRatioIncrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExDamagedRatioDecrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceExDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ReduceExDamagedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedExplosionRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedPierceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedMysticRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedSonicRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedNormalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StreetBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OutdoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IndoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def RegenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterStatExcelStart(builder):
    builder.StartObject(79)

def Start(builder):
    CharacterStatExcelStart(builder)

def CharacterStatExcelAddCharacterId(builder, characterId):
    builder.PrependInt64Slot(0, characterId, 0)

def AddCharacterId(builder, characterId):
    CharacterStatExcelAddCharacterId(builder, characterId)

def CharacterStatExcelAddStabilityRate(builder, stabilityRate):
    builder.PrependInt64Slot(1, stabilityRate, 0)

def AddStabilityRate(builder, stabilityRate):
    CharacterStatExcelAddStabilityRate(builder, stabilityRate)

def CharacterStatExcelAddStabilityPoint(builder, stabilityPoint):
    builder.PrependInt64Slot(2, stabilityPoint, 0)

def AddStabilityPoint(builder, stabilityPoint):
    CharacterStatExcelAddStabilityPoint(builder, stabilityPoint)

def CharacterStatExcelAddAttackPower1(builder, attackPower1):
    builder.PrependInt64Slot(3, attackPower1, 0)

def AddAttackPower1(builder, attackPower1):
    CharacterStatExcelAddAttackPower1(builder, attackPower1)

def CharacterStatExcelAddAttackPower100(builder, attackPower100):
    builder.PrependInt64Slot(4, attackPower100, 0)

def AddAttackPower100(builder, attackPower100):
    CharacterStatExcelAddAttackPower100(builder, attackPower100)

def CharacterStatExcelAddMaxHp1(builder, maxHp1):
    builder.PrependInt64Slot(5, maxHp1, 0)

def AddMaxHp1(builder, maxHp1):
    CharacterStatExcelAddMaxHp1(builder, maxHp1)

def CharacterStatExcelAddMaxHp100(builder, maxHp100):
    builder.PrependInt64Slot(6, maxHp100, 0)

def AddMaxHp100(builder, maxHp100):
    CharacterStatExcelAddMaxHp100(builder, maxHp100)

def CharacterStatExcelAddDefensePower1(builder, defensePower1):
    builder.PrependInt64Slot(7, defensePower1, 0)

def AddDefensePower1(builder, defensePower1):
    CharacterStatExcelAddDefensePower1(builder, defensePower1)

def CharacterStatExcelAddDefensePower100(builder, defensePower100):
    builder.PrependInt64Slot(8, defensePower100, 0)

def AddDefensePower100(builder, defensePower100):
    CharacterStatExcelAddDefensePower100(builder, defensePower100)

def CharacterStatExcelAddHealPower1(builder, healPower1):
    builder.PrependInt64Slot(9, healPower1, 0)

def AddHealPower1(builder, healPower1):
    CharacterStatExcelAddHealPower1(builder, healPower1)

def CharacterStatExcelAddHealPower100(builder, healPower100):
    builder.PrependInt64Slot(10, healPower100, 0)

def AddHealPower100(builder, healPower100):
    CharacterStatExcelAddHealPower100(builder, healPower100)

def CharacterStatExcelAddDodgePoint(builder, dodgePoint):
    builder.PrependInt64Slot(11, dodgePoint, 0)

def AddDodgePoint(builder, dodgePoint):
    CharacterStatExcelAddDodgePoint(builder, dodgePoint)

def CharacterStatExcelAddAccuracyPoint(builder, accuracyPoint):
    builder.PrependInt64Slot(12, accuracyPoint, 0)

def AddAccuracyPoint(builder, accuracyPoint):
    CharacterStatExcelAddAccuracyPoint(builder, accuracyPoint)

def CharacterStatExcelAddCriticalPoint(builder, criticalPoint):
    builder.PrependInt64Slot(13, criticalPoint, 0)

def AddCriticalPoint(builder, criticalPoint):
    CharacterStatExcelAddCriticalPoint(builder, criticalPoint)

def CharacterStatExcelAddCriticalResistPoint(builder, criticalResistPoint):
    builder.PrependInt64Slot(14, criticalResistPoint, 0)

def AddCriticalResistPoint(builder, criticalResistPoint):
    CharacterStatExcelAddCriticalResistPoint(builder, criticalResistPoint)

def CharacterStatExcelAddCriticalDamageRate(builder, criticalDamageRate):
    builder.PrependInt64Slot(15, criticalDamageRate, 0)

def AddCriticalDamageRate(builder, criticalDamageRate):
    CharacterStatExcelAddCriticalDamageRate(builder, criticalDamageRate)

def CharacterStatExcelAddCriticalDamageResistRate(builder, criticalDamageResistRate):
    builder.PrependInt64Slot(16, criticalDamageResistRate, 0)

def AddCriticalDamageResistRate(builder, criticalDamageResistRate):
    CharacterStatExcelAddCriticalDamageResistRate(builder, criticalDamageResistRate)

def CharacterStatExcelAddBlockRate(builder, blockRate):
    builder.PrependInt64Slot(17, blockRate, 0)

def AddBlockRate(builder, blockRate):
    CharacterStatExcelAddBlockRate(builder, blockRate)

def CharacterStatExcelAddHealEffectivenessRate(builder, healEffectivenessRate):
    builder.PrependInt64Slot(18, healEffectivenessRate, 0)

def AddHealEffectivenessRate(builder, healEffectivenessRate):
    CharacterStatExcelAddHealEffectivenessRate(builder, healEffectivenessRate)

def CharacterStatExcelAddOppressionPower(builder, oppressionPower):
    builder.PrependInt64Slot(19, oppressionPower, 0)

def AddOppressionPower(builder, oppressionPower):
    CharacterStatExcelAddOppressionPower(builder, oppressionPower)

def CharacterStatExcelAddOppressionResist(builder, oppressionResist):
    builder.PrependInt64Slot(20, oppressionResist, 0)

def AddOppressionResist(builder, oppressionResist):
    CharacterStatExcelAddOppressionResist(builder, oppressionResist)

def CharacterStatExcelAddDefensePenetration1(builder, defensePenetration1):
    builder.PrependInt64Slot(21, defensePenetration1, 0)

def AddDefensePenetration1(builder, defensePenetration1):
    CharacterStatExcelAddDefensePenetration1(builder, defensePenetration1)

def CharacterStatExcelAddDefensePenetration100(builder, defensePenetration100):
    builder.PrependInt64Slot(22, defensePenetration100, 0)

def AddDefensePenetration100(builder, defensePenetration100):
    CharacterStatExcelAddDefensePenetration100(builder, defensePenetration100)

def CharacterStatExcelAddDefensePenetrationResist1(builder, defensePenetrationResist1):
    builder.PrependInt64Slot(23, defensePenetrationResist1, 0)

def AddDefensePenetrationResist1(builder, defensePenetrationResist1):
    CharacterStatExcelAddDefensePenetrationResist1(builder, defensePenetrationResist1)

def CharacterStatExcelAddDefensePenetrationResist100(builder, defensePenetrationResist100):
    builder.PrependInt64Slot(24, defensePenetrationResist100, 0)

def AddDefensePenetrationResist100(builder, defensePenetrationResist100):
    CharacterStatExcelAddDefensePenetrationResist100(builder, defensePenetrationResist100)

def CharacterStatExcelAddEnhanceExplosionRate(builder, enhanceExplosionRate):
    builder.PrependInt64Slot(25, enhanceExplosionRate, 0)

def AddEnhanceExplosionRate(builder, enhanceExplosionRate):
    CharacterStatExcelAddEnhanceExplosionRate(builder, enhanceExplosionRate)

def CharacterStatExcelAddEnhancePierceRate(builder, enhancePierceRate):
    builder.PrependInt64Slot(26, enhancePierceRate, 0)

def AddEnhancePierceRate(builder, enhancePierceRate):
    CharacterStatExcelAddEnhancePierceRate(builder, enhancePierceRate)

def CharacterStatExcelAddEnhanceMysticRate(builder, enhanceMysticRate):
    builder.PrependInt64Slot(27, enhanceMysticRate, 0)

def AddEnhanceMysticRate(builder, enhanceMysticRate):
    CharacterStatExcelAddEnhanceMysticRate(builder, enhanceMysticRate)

def CharacterStatExcelAddEnhanceSonicRate(builder, enhanceSonicRate):
    builder.PrependInt64Slot(28, enhanceSonicRate, 0)

def AddEnhanceSonicRate(builder, enhanceSonicRate):
    CharacterStatExcelAddEnhanceSonicRate(builder, enhanceSonicRate)

def CharacterStatExcelAddEnhanceSiegeRate(builder, enhanceSiegeRate):
    builder.PrependInt64Slot(29, enhanceSiegeRate, 0)

def AddEnhanceSiegeRate(builder, enhanceSiegeRate):
    CharacterStatExcelAddEnhanceSiegeRate(builder, enhanceSiegeRate)

def CharacterStatExcelAddEnhanceNormalRate(builder, enhanceNormalRate):
    builder.PrependInt64Slot(30, enhanceNormalRate, 0)

def AddEnhanceNormalRate(builder, enhanceNormalRate):
    CharacterStatExcelAddEnhanceNormalRate(builder, enhanceNormalRate)

def CharacterStatExcelAddEnhanceLightArmorRate(builder, enhanceLightArmorRate):
    builder.PrependInt64Slot(31, enhanceLightArmorRate, 0)

def AddEnhanceLightArmorRate(builder, enhanceLightArmorRate):
    CharacterStatExcelAddEnhanceLightArmorRate(builder, enhanceLightArmorRate)

def CharacterStatExcelAddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate):
    builder.PrependInt64Slot(32, enhanceHeavyArmorRate, 0)

def AddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate):
    CharacterStatExcelAddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate)

def CharacterStatExcelAddEnhanceUnarmedRate(builder, enhanceUnarmedRate):
    builder.PrependInt64Slot(33, enhanceUnarmedRate, 0)

def AddEnhanceUnarmedRate(builder, enhanceUnarmedRate):
    CharacterStatExcelAddEnhanceUnarmedRate(builder, enhanceUnarmedRate)

def CharacterStatExcelAddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate):
    builder.PrependInt64Slot(34, enhanceElasticArmorRate, 0)

def AddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate):
    CharacterStatExcelAddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate)

def CharacterStatExcelAddEnhanceStructureRate(builder, enhanceStructureRate):
    builder.PrependInt64Slot(35, enhanceStructureRate, 0)

def AddEnhanceStructureRate(builder, enhanceStructureRate):
    CharacterStatExcelAddEnhanceStructureRate(builder, enhanceStructureRate)

def CharacterStatExcelAddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate):
    builder.PrependInt64Slot(36, enhanceNormalArmorRate, 0)

def AddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate):
    CharacterStatExcelAddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate)

def CharacterStatExcelAddExtendBuffDuration(builder, extendBuffDuration):
    builder.PrependInt64Slot(37, extendBuffDuration, 0)

def AddExtendBuffDuration(builder, extendBuffDuration):
    CharacterStatExcelAddExtendBuffDuration(builder, extendBuffDuration)

def CharacterStatExcelAddExtendDebuffDuration(builder, extendDebuffDuration):
    builder.PrependInt64Slot(38, extendDebuffDuration, 0)

def AddExtendDebuffDuration(builder, extendDebuffDuration):
    CharacterStatExcelAddExtendDebuffDuration(builder, extendDebuffDuration)

def CharacterStatExcelAddExtendCrowdControlDuration(builder, extendCrowdControlDuration):
    builder.PrependInt64Slot(39, extendCrowdControlDuration, 0)

def AddExtendCrowdControlDuration(builder, extendCrowdControlDuration):
    CharacterStatExcelAddExtendCrowdControlDuration(builder, extendCrowdControlDuration)

def CharacterStatExcelAddAmmoCount(builder, ammoCount):
    builder.PrependInt64Slot(40, ammoCount, 0)

def AddAmmoCount(builder, ammoCount):
    CharacterStatExcelAddAmmoCount(builder, ammoCount)

def CharacterStatExcelAddAmmoCost(builder, ammoCost):
    builder.PrependInt64Slot(41, ammoCost, 0)

def AddAmmoCost(builder, ammoCost):
    CharacterStatExcelAddAmmoCost(builder, ammoCost)

def CharacterStatExcelAddIgnoreDelayCount(builder, ignoreDelayCount):
    builder.PrependInt64Slot(42, ignoreDelayCount, 0)

def AddIgnoreDelayCount(builder, ignoreDelayCount):
    CharacterStatExcelAddIgnoreDelayCount(builder, ignoreDelayCount)

def CharacterStatExcelAddNormalAttackSpeed(builder, normalAttackSpeed):
    builder.PrependInt64Slot(43, normalAttackSpeed, 0)

def AddNormalAttackSpeed(builder, normalAttackSpeed):
    CharacterStatExcelAddNormalAttackSpeed(builder, normalAttackSpeed)

def CharacterStatExcelAddRange(builder, range):
    builder.PrependInt64Slot(44, range, 0)

def AddRange(builder, range):
    CharacterStatExcelAddRange(builder, range)

def CharacterStatExcelAddInitialRangeRate(builder, initialRangeRate):
    builder.PrependInt64Slot(45, initialRangeRate, 0)

def AddInitialRangeRate(builder, initialRangeRate):
    CharacterStatExcelAddInitialRangeRate(builder, initialRangeRate)

def CharacterStatExcelAddMoveSpeed(builder, moveSpeed):
    builder.PrependInt64Slot(46, moveSpeed, 0)

def AddMoveSpeed(builder, moveSpeed):
    CharacterStatExcelAddMoveSpeed(builder, moveSpeed)

def CharacterStatExcelAddSightPoint(builder, sightPoint):
    builder.PrependInt64Slot(47, sightPoint, 0)

def AddSightPoint(builder, sightPoint):
    CharacterStatExcelAddSightPoint(builder, sightPoint)

def CharacterStatExcelAddActiveGauge(builder, activeGauge):
    builder.PrependInt64Slot(48, activeGauge, 0)

def AddActiveGauge(builder, activeGauge):
    CharacterStatExcelAddActiveGauge(builder, activeGauge)

def CharacterStatExcelAddGroggyGauge(builder, groggyGauge):
    builder.PrependInt32Slot(49, groggyGauge, 0)

def AddGroggyGauge(builder, groggyGauge):
    CharacterStatExcelAddGroggyGauge(builder, groggyGauge)

def CharacterStatExcelAddGroggyTime(builder, groggyTime):
    builder.PrependInt32Slot(50, groggyTime, 0)

def AddGroggyTime(builder, groggyTime):
    CharacterStatExcelAddGroggyTime(builder, groggyTime)

def CharacterStatExcelAddStrategyMobility(builder, strategyMobility):
    builder.PrependInt64Slot(51, strategyMobility, 0)

def AddStrategyMobility(builder, strategyMobility):
    CharacterStatExcelAddStrategyMobility(builder, strategyMobility)

def CharacterStatExcelAddActionCount(builder, actionCount):
    builder.PrependInt64Slot(52, actionCount, 0)

def AddActionCount(builder, actionCount):
    CharacterStatExcelAddActionCount(builder, actionCount)

def CharacterStatExcelAddStrategySightRange(builder, strategySightRange):
    builder.PrependInt64Slot(53, strategySightRange, 0)

def AddStrategySightRange(builder, strategySightRange):
    CharacterStatExcelAddStrategySightRange(builder, strategySightRange)

def CharacterStatExcelAddDamageRatio(builder, damageRatio):
    builder.PrependInt64Slot(54, damageRatio, 0)

def AddDamageRatio(builder, damageRatio):
    CharacterStatExcelAddDamageRatio(builder, damageRatio)

def CharacterStatExcelAddDamagedRatio(builder, damagedRatio):
    builder.PrependInt64Slot(55, damagedRatio, 0)

def AddDamagedRatio(builder, damagedRatio):
    CharacterStatExcelAddDamagedRatio(builder, damagedRatio)

def CharacterStatExcelAddDamageRatio2Increase(builder, damageRatio2Increase):
    builder.PrependInt64Slot(56, damageRatio2Increase, 0)

def AddDamageRatio2Increase(builder, damageRatio2Increase):
    CharacterStatExcelAddDamageRatio2Increase(builder, damageRatio2Increase)

def CharacterStatExcelAddDamageRatio2Decrease(builder, damageRatio2Decrease):
    builder.PrependInt64Slot(57, damageRatio2Decrease, 0)

def AddDamageRatio2Decrease(builder, damageRatio2Decrease):
    CharacterStatExcelAddDamageRatio2Decrease(builder, damageRatio2Decrease)

def CharacterStatExcelAddDamagedRatio2Increase(builder, damagedRatio2Increase):
    builder.PrependInt64Slot(58, damagedRatio2Increase, 0)

def AddDamagedRatio2Increase(builder, damagedRatio2Increase):
    CharacterStatExcelAddDamagedRatio2Increase(builder, damagedRatio2Increase)

def CharacterStatExcelAddDamagedRatio2Decrease(builder, damagedRatio2Decrease):
    builder.PrependInt64Slot(59, damagedRatio2Decrease, 0)

def AddDamagedRatio2Decrease(builder, damagedRatio2Decrease):
    CharacterStatExcelAddDamagedRatio2Decrease(builder, damagedRatio2Decrease)

def CharacterStatExcelAddExDamagedRatioIncrease(builder, exDamagedRatioIncrease):
    builder.PrependInt64Slot(60, exDamagedRatioIncrease, 0)

def AddExDamagedRatioIncrease(builder, exDamagedRatioIncrease):
    CharacterStatExcelAddExDamagedRatioIncrease(builder, exDamagedRatioIncrease)

def CharacterStatExcelAddExDamagedRatioDecrease(builder, exDamagedRatioDecrease):
    builder.PrependInt64Slot(61, exDamagedRatioDecrease, 0)

def AddExDamagedRatioDecrease(builder, exDamagedRatioDecrease):
    CharacterStatExcelAddExDamagedRatioDecrease(builder, exDamagedRatioDecrease)

def CharacterStatExcelAddEnhanceExDamageRate(builder, enhanceExDamageRate):
    builder.PrependInt64Slot(62, enhanceExDamageRate, 0)

def AddEnhanceExDamageRate(builder, enhanceExDamageRate):
    CharacterStatExcelAddEnhanceExDamageRate(builder, enhanceExDamageRate)

def CharacterStatExcelAddReduceExDamagedRate(builder, reduceExDamagedRate):
    builder.PrependInt64Slot(63, reduceExDamagedRate, 0)

def AddReduceExDamagedRate(builder, reduceExDamagedRate):
    CharacterStatExcelAddReduceExDamagedRate(builder, reduceExDamagedRate)

def CharacterStatExcelAddHealRate(builder, healRate):
    builder.PrependInt64Slot(64, healRate, 0)

def AddHealRate(builder, healRate):
    CharacterStatExcelAddHealRate(builder, healRate)

def CharacterStatExcelAddHealLightArmorRate(builder, healLightArmorRate):
    builder.PrependInt64Slot(65, healLightArmorRate, 0)

def AddHealLightArmorRate(builder, healLightArmorRate):
    CharacterStatExcelAddHealLightArmorRate(builder, healLightArmorRate)

def CharacterStatExcelAddHealHeavyArmorRate(builder, healHeavyArmorRate):
    builder.PrependInt64Slot(66, healHeavyArmorRate, 0)

def AddHealHeavyArmorRate(builder, healHeavyArmorRate):
    CharacterStatExcelAddHealHeavyArmorRate(builder, healHeavyArmorRate)

def CharacterStatExcelAddHealUnarmedRate(builder, healUnarmedRate):
    builder.PrependInt64Slot(67, healUnarmedRate, 0)

def AddHealUnarmedRate(builder, healUnarmedRate):
    CharacterStatExcelAddHealUnarmedRate(builder, healUnarmedRate)

def CharacterStatExcelAddHealElasticArmorRate(builder, healElasticArmorRate):
    builder.PrependInt64Slot(68, healElasticArmorRate, 0)

def AddHealElasticArmorRate(builder, healElasticArmorRate):
    CharacterStatExcelAddHealElasticArmorRate(builder, healElasticArmorRate)

def CharacterStatExcelAddHealNormalArmorRate(builder, healNormalArmorRate):
    builder.PrependInt64Slot(69, healNormalArmorRate, 0)

def AddHealNormalArmorRate(builder, healNormalArmorRate):
    CharacterStatExcelAddHealNormalArmorRate(builder, healNormalArmorRate)

def CharacterStatExcelAddHealedExplosionRate(builder, healedExplosionRate):
    builder.PrependInt64Slot(70, healedExplosionRate, 0)

def AddHealedExplosionRate(builder, healedExplosionRate):
    CharacterStatExcelAddHealedExplosionRate(builder, healedExplosionRate)

def CharacterStatExcelAddHealedPierceRate(builder, healedPierceRate):
    builder.PrependInt64Slot(71, healedPierceRate, 0)

def AddHealedPierceRate(builder, healedPierceRate):
    CharacterStatExcelAddHealedPierceRate(builder, healedPierceRate)

def CharacterStatExcelAddHealedMysticRate(builder, healedMysticRate):
    builder.PrependInt64Slot(72, healedMysticRate, 0)

def AddHealedMysticRate(builder, healedMysticRate):
    CharacterStatExcelAddHealedMysticRate(builder, healedMysticRate)

def CharacterStatExcelAddHealedSonicRate(builder, healedSonicRate):
    builder.PrependInt64Slot(73, healedSonicRate, 0)

def AddHealedSonicRate(builder, healedSonicRate):
    CharacterStatExcelAddHealedSonicRate(builder, healedSonicRate)

def CharacterStatExcelAddHealedNormalRate(builder, healedNormalRate):
    builder.PrependInt64Slot(74, healedNormalRate, 0)

def AddHealedNormalRate(builder, healedNormalRate):
    CharacterStatExcelAddHealedNormalRate(builder, healedNormalRate)

def CharacterStatExcelAddStreetBattleAdaptation(builder, streetBattleAdaptation):
    builder.PrependInt32Slot(75, streetBattleAdaptation, 0)

def AddStreetBattleAdaptation(builder, streetBattleAdaptation):
    CharacterStatExcelAddStreetBattleAdaptation(builder, streetBattleAdaptation)

def CharacterStatExcelAddOutdoorBattleAdaptation(builder, outdoorBattleAdaptation):
    builder.PrependInt32Slot(76, outdoorBattleAdaptation, 0)

def AddOutdoorBattleAdaptation(builder, outdoorBattleAdaptation):
    CharacterStatExcelAddOutdoorBattleAdaptation(builder, outdoorBattleAdaptation)

def CharacterStatExcelAddIndoorBattleAdaptation(builder, indoorBattleAdaptation):
    builder.PrependInt32Slot(77, indoorBattleAdaptation, 0)

def AddIndoorBattleAdaptation(builder, indoorBattleAdaptation):
    CharacterStatExcelAddIndoorBattleAdaptation(builder, indoorBattleAdaptation)

def CharacterStatExcelAddRegenCost(builder, regenCost):
    builder.PrependInt64Slot(78, regenCost, 0)

def AddRegenCost(builder, regenCost):
    CharacterStatExcelAddRegenCost(builder, regenCost)

def CharacterStatExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return CharacterStatExcelEnd(builder)
