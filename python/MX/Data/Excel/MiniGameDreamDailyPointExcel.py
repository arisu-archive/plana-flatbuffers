# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamDailyPointExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamDailyPointExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamDailyPointExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamDailyPointExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamDailyPointExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def TotalParameterMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def TotalParameterMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def DailyPointCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def DailyPointCorrectionValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamDailyPointExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return MiniGameDreamDailyPointExcelStart(builder)
def MiniGameDreamDailyPointExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(0, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MiniGameDreamDailyPointExcelAddUniqueId(builder, uniqueId)
def MiniGameDreamDailyPointExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(1, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDreamDailyPointExcelAddEventContentId(builder, eventContentId)
def MiniGameDreamDailyPointExcelAddTotalParameterMin(builder, totalParameterMin): builder.PrependInt64Slot(2, totalParameterMin, 0)
def AddTotalParameterMin(builder, totalParameterMin):
    return MiniGameDreamDailyPointExcelAddTotalParameterMin(builder, totalParameterMin)
def MiniGameDreamDailyPointExcelAddTotalParameterMax(builder, totalParameterMax): builder.PrependInt64Slot(3, totalParameterMax, 0)
def AddTotalParameterMax(builder, totalParameterMax):
    return MiniGameDreamDailyPointExcelAddTotalParameterMax(builder, totalParameterMax)
def MiniGameDreamDailyPointExcelAddDailyPointCoefficient(builder, dailyPointCoefficient): builder.PrependInt64Slot(4, dailyPointCoefficient, 0)
def AddDailyPointCoefficient(builder, dailyPointCoefficient):
    return MiniGameDreamDailyPointExcelAddDailyPointCoefficient(builder, dailyPointCoefficient)
def MiniGameDreamDailyPointExcelAddDailyPointCorrectionValue(builder, dailyPointCorrectionValue): builder.PrependInt64Slot(5, dailyPointCorrectionValue, 0)
def AddDailyPointCorrectionValue(builder, dailyPointCorrectionValue):
    return MiniGameDreamDailyPointExcelAddDailyPointCorrectionValue(builder, dailyPointCorrectionValue)
def MiniGameDreamDailyPointExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDreamDailyPointExcelEnd(builder)