# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ItemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ItemExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsItemExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ItemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ItemExcel
    def CanTierUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ItemExcel
    def CraftQualityTier0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def CraftQualityTier1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def CraftQualityTier2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpirationDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ItemExcel
    def ExpirationNotifyDateIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpiryChangeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpiryChangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpiryChangeParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def GachaTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ItemExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ImmediateUse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ItemExcel
    def ItemCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def MailType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def MaxGiftTags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Quality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ShiftingCraftQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ShopCategory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ItemExcel
    def ShopCategoryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ItemExcel
    def ShopCategoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ItemExcel
    def ShopCategoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # ItemExcel
    def ShortcutTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def SpriteName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ItemExcel
    def StackableFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def StackableMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ItemExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ItemExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ItemExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # ItemExcel
    def TierUpgradeRecipeCraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def UsingResultAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def UsingResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def UsingResultParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ItemExcelStart(builder): builder.StartObject(32)
def Start(builder):
    return ItemExcelStart(builder)
def ItemExcelAddCanTierUpgrade(builder, canTierUpgrade): builder.PrependBoolSlot(0, canTierUpgrade, 0)
def AddCanTierUpgrade(builder, canTierUpgrade):
    return ItemExcelAddCanTierUpgrade(builder, canTierUpgrade)
def ItemExcelAddCraftQualityTier0(builder, craftQualityTier0): builder.PrependInt64Slot(1, craftQualityTier0, 0)
def AddCraftQualityTier0(builder, craftQualityTier0):
    return ItemExcelAddCraftQualityTier0(builder, craftQualityTier0)
def ItemExcelAddCraftQualityTier1(builder, craftQualityTier1): builder.PrependInt64Slot(2, craftQualityTier1, 0)
def AddCraftQualityTier1(builder, craftQualityTier1):
    return ItemExcelAddCraftQualityTier1(builder, craftQualityTier1)
def ItemExcelAddCraftQualityTier2(builder, craftQualityTier2): builder.PrependInt64Slot(3, craftQualityTier2, 0)
def AddCraftQualityTier2(builder, craftQualityTier2):
    return ItemExcelAddCraftQualityTier2(builder, craftQualityTier2)
def ItemExcelAddExpirationDateTime(builder, expirationDateTime): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(expirationDateTime), 0)
def AddExpirationDateTime(builder, expirationDateTime):
    return ItemExcelAddExpirationDateTime(builder, expirationDateTime)
def ItemExcelAddExpirationNotifyDateIn(builder, expirationNotifyDateIn): builder.PrependInt32Slot(5, expirationNotifyDateIn, 0)
def AddExpirationNotifyDateIn(builder, expirationNotifyDateIn):
    return ItemExcelAddExpirationNotifyDateIn(builder, expirationNotifyDateIn)
def ItemExcelAddExpiryChangeAmount(builder, expiryChangeAmount): builder.PrependInt64Slot(6, expiryChangeAmount, 0)
def AddExpiryChangeAmount(builder, expiryChangeAmount):
    return ItemExcelAddExpiryChangeAmount(builder, expiryChangeAmount)
def ItemExcelAddExpiryChangeId(builder, expiryChangeId): builder.PrependInt64Slot(7, expiryChangeId, 0)
def AddExpiryChangeId(builder, expiryChangeId):
    return ItemExcelAddExpiryChangeId(builder, expiryChangeId)
def ItemExcelAddExpiryChangeParcelType(builder, expiryChangeParcelType): builder.PrependInt32Slot(8, expiryChangeParcelType, 0)
def AddExpiryChangeParcelType(builder, expiryChangeParcelType):
    return ItemExcelAddExpiryChangeParcelType(builder, expiryChangeParcelType)
def ItemExcelAddGachaTicket(builder, gachaTicket): builder.PrependInt32Slot(9, gachaTicket, 0)
def AddGachaTicket(builder, gachaTicket):
    return ItemExcelAddGachaTicket(builder, gachaTicket)
def ItemExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(10, groupId, 0)
def AddGroupId(builder, groupId):
    return ItemExcelAddGroupId(builder, groupId)
def ItemExcelAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return ItemExcelAddIcon(builder, icon)
def ItemExcelAddId(builder, id): builder.PrependInt64Slot(12, id, 0)
def AddId(builder, id):
    return ItemExcelAddId(builder, id)
def ItemExcelAddImmediateUse(builder, immediateUse): builder.PrependBoolSlot(13, immediateUse, 0)
def AddImmediateUse(builder, immediateUse):
    return ItemExcelAddImmediateUse(builder, immediateUse)
def ItemExcelAddItemCategory(builder, itemCategory): builder.PrependInt32Slot(14, itemCategory, 0)
def AddItemCategory(builder, itemCategory):
    return ItemExcelAddItemCategory(builder, itemCategory)
def ItemExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(15, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return ItemExcelAddLocalizeEtcId(builder, localizeEtcId)
def ItemExcelAddMailType(builder, mailType): builder.PrependInt32Slot(16, mailType, 0)
def AddMailType(builder, mailType):
    return ItemExcelAddMailType(builder, mailType)
def ItemExcelAddMaxGiftTags(builder, maxGiftTags): builder.PrependInt32Slot(17, maxGiftTags, 0)
def AddMaxGiftTags(builder, maxGiftTags):
    return ItemExcelAddMaxGiftTags(builder, maxGiftTags)
def ItemExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(18, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return ItemExcelAddProductionStep(builder, productionStep)
def ItemExcelAddQuality(builder, quality): builder.PrependInt64Slot(19, quality, 0)
def AddQuality(builder, quality):
    return ItemExcelAddQuality(builder, quality)
def ItemExcelAddRarity(builder, rarity): builder.PrependInt32Slot(20, rarity, 0)
def AddRarity(builder, rarity):
    return ItemExcelAddRarity(builder, rarity)
def ItemExcelAddShiftingCraftQuality(builder, shiftingCraftQuality): builder.PrependInt64Slot(21, shiftingCraftQuality, 0)
def AddShiftingCraftQuality(builder, shiftingCraftQuality):
    return ItemExcelAddShiftingCraftQuality(builder, shiftingCraftQuality)
def ItemExcelAddShopCategory(builder, shopCategory): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(shopCategory), 0)
def AddShopCategory(builder, shopCategory):
    return ItemExcelAddShopCategory(builder, shopCategory)
def ItemExcelStartShopCategoryVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartShopCategoryVector(builder, numElems):
    return ItemExcelStartShopCategoryVector(builder, numElems)
def ItemExcelAddShortcutTypeId(builder, shortcutTypeId): builder.PrependInt64Slot(23, shortcutTypeId, 0)
def AddShortcutTypeId(builder, shortcutTypeId):
    return ItemExcelAddShortcutTypeId(builder, shortcutTypeId)
def ItemExcelAddSpriteName(builder, spriteName): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(spriteName), 0)
def AddSpriteName(builder, spriteName):
    return ItemExcelAddSpriteName(builder, spriteName)
def ItemExcelAddStackableFunction(builder, stackableFunction): builder.PrependInt32Slot(25, stackableFunction, 0)
def AddStackableFunction(builder, stackableFunction):
    return ItemExcelAddStackableFunction(builder, stackableFunction)
def ItemExcelAddStackableMax(builder, stackableMax): builder.PrependInt32Slot(26, stackableMax, 0)
def AddStackableMax(builder, stackableMax):
    return ItemExcelAddStackableMax(builder, stackableMax)
def ItemExcelAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return ItemExcelAddTags(builder, tags)
def ItemExcelStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return ItemExcelStartTagsVector(builder, numElems)
def ItemExcelAddTierUpgradeRecipeCraftId(builder, tierUpgradeRecipeCraftId): builder.PrependInt64Slot(28, tierUpgradeRecipeCraftId, 0)
def AddTierUpgradeRecipeCraftId(builder, tierUpgradeRecipeCraftId):
    return ItemExcelAddTierUpgradeRecipeCraftId(builder, tierUpgradeRecipeCraftId)
def ItemExcelAddUsingResultAmount(builder, usingResultAmount): builder.PrependInt64Slot(29, usingResultAmount, 0)
def AddUsingResultAmount(builder, usingResultAmount):
    return ItemExcelAddUsingResultAmount(builder, usingResultAmount)
def ItemExcelAddUsingResultId(builder, usingResultId): builder.PrependInt64Slot(30, usingResultId, 0)
def AddUsingResultId(builder, usingResultId):
    return ItemExcelAddUsingResultId(builder, usingResultId)
def ItemExcelAddUsingResultParcelType(builder, usingResultParcelType): builder.PrependInt32Slot(31, usingResultParcelType, 0)
def AddUsingResultParcelType(builder, usingResultParcelType):
    return ItemExcelAddUsingResultParcelType(builder, usingResultParcelType)
def ItemExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ItemExcelEnd(builder)