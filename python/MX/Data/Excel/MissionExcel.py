# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MissionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MissionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMissionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MissionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MissionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def AccountType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def ChallengeStageShortcut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def CompleteConditionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def CompleteConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MissionExcel
    def CompleteConditionParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MissionExcel
    def CompleteConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def CompleteConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MissionExcel
    def CompleteConditionParameterTag(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MissionExcel
    def CompleteConditionParameterTagAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MissionExcel
    def CompleteConditionParameterTagLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def CompleteConditionParameterTagIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MissionExcel
    def CompleteConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def ContentTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MissionExcel
    def ContentTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MissionExcel
    def ContentTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def ContentTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # MissionExcel
    def DateAutoRefer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MissionExcel
    def EndDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def Limit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MissionExcel
    def MissionRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MissionExcel
    def MissionRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MissionExcel
    def MissionRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def MissionRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # MissionExcel
    def MissionRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MissionExcel
    def MissionRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MissionExcel
    def MissionRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def MissionRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # MissionExcel
    def MissionRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MissionExcel
    def MissionRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MissionExcel
    def MissionRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def MissionRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # MissionExcel
    def PreMissionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MissionExcel
    def PreMissionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MissionExcel
    def PreMissionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def PreMissionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # MissionExcel
    def ResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def RewardIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MissionExcel
    def ShortcutUi(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissionExcel
    def ShortcutUiLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissionExcel
    def ShortcutUiIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # MissionExcel
    def StartableEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MissionExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MissionExcel
    def ToastDisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MissionExcel
    def ToastImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MissionExcel
    def ViewFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MissionExcelStart(builder): builder.StartObject(28)
def Start(builder):
    return MissionExcelStart(builder)
def MissionExcelAddAccountLevel(builder, accountLevel): builder.PrependInt64Slot(0, accountLevel, 0)
def AddAccountLevel(builder, accountLevel):
    return MissionExcelAddAccountLevel(builder, accountLevel)
def MissionExcelAddAccountType(builder, accountType): builder.PrependInt32Slot(1, accountType, 0)
def AddAccountType(builder, accountType):
    return MissionExcelAddAccountType(builder, accountType)
def MissionExcelAddCategory(builder, category): builder.PrependInt32Slot(2, category, 0)
def AddCategory(builder, category):
    return MissionExcelAddCategory(builder, category)
def MissionExcelAddChallengeStageShortcut(builder, challengeStageShortcut): builder.PrependInt64Slot(3, challengeStageShortcut, 0)
def AddChallengeStageShortcut(builder, challengeStageShortcut):
    return MissionExcelAddChallengeStageShortcut(builder, challengeStageShortcut)
def MissionExcelAddCompleteConditionCount(builder, completeConditionCount): builder.PrependInt64Slot(4, completeConditionCount, 0)
def AddCompleteConditionCount(builder, completeConditionCount):
    return MissionExcelAddCompleteConditionCount(builder, completeConditionCount)
def MissionExcelAddCompleteConditionParameter(builder, completeConditionParameter): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(completeConditionParameter), 0)
def AddCompleteConditionParameter(builder, completeConditionParameter):
    return MissionExcelAddCompleteConditionParameter(builder, completeConditionParameter)
def MissionExcelStartCompleteConditionParameterVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCompleteConditionParameterVector(builder, numElems):
    return MissionExcelStartCompleteConditionParameterVector(builder, numElems)
def MissionExcelAddCompleteConditionParameterTag(builder, completeConditionParameterTag): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(completeConditionParameterTag), 0)
def AddCompleteConditionParameterTag(builder, completeConditionParameterTag):
    return MissionExcelAddCompleteConditionParameterTag(builder, completeConditionParameterTag)
def MissionExcelStartCompleteConditionParameterTagVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCompleteConditionParameterTagVector(builder, numElems):
    return MissionExcelStartCompleteConditionParameterTagVector(builder, numElems)
def MissionExcelAddCompleteConditionType(builder, completeConditionType): builder.PrependInt32Slot(7, completeConditionType, 0)
def AddCompleteConditionType(builder, completeConditionType):
    return MissionExcelAddCompleteConditionType(builder, completeConditionType)
def MissionExcelAddContentTags(builder, contentTags): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(contentTags), 0)
def AddContentTags(builder, contentTags):
    return MissionExcelAddContentTags(builder, contentTags)
def MissionExcelStartContentTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartContentTagsVector(builder, numElems):
    return MissionExcelStartContentTagsVector(builder, numElems)
def MissionExcelAddDateAutoRefer(builder, dateAutoRefer): builder.PrependInt32Slot(9, dateAutoRefer, 0)
def AddDateAutoRefer(builder, dateAutoRefer):
    return MissionExcelAddDateAutoRefer(builder, dateAutoRefer)
def MissionExcelAddDescription(builder, description): builder.PrependUint32Slot(10, description, 0)
def AddDescription(builder, description):
    return MissionExcelAddDescription(builder, description)
def MissionExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(11, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return MissionExcelAddDisplayOrder(builder, displayOrder)
def MissionExcelAddEndDate(builder, endDate): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)
def AddEndDate(builder, endDate):
    return MissionExcelAddEndDate(builder, endDate)
def MissionExcelAddEndDay(builder, endDay): builder.PrependInt64Slot(13, endDay, 0)
def AddEndDay(builder, endDay):
    return MissionExcelAddEndDay(builder, endDay)
def MissionExcelAddId(builder, id): builder.PrependInt64Slot(14, id, 0)
def AddId(builder, id):
    return MissionExcelAddId(builder, id)
def MissionExcelAddLimit(builder, limit): builder.PrependBoolSlot(15, limit, 0)
def AddLimit(builder, limit):
    return MissionExcelAddLimit(builder, limit)
def MissionExcelAddMissionRewardAmount(builder, missionRewardAmount): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(missionRewardAmount), 0)
def AddMissionRewardAmount(builder, missionRewardAmount):
    return MissionExcelAddMissionRewardAmount(builder, missionRewardAmount)
def MissionExcelStartMissionRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMissionRewardAmountVector(builder, numElems):
    return MissionExcelStartMissionRewardAmountVector(builder, numElems)
def MissionExcelAddMissionRewardParcelId(builder, missionRewardParcelId): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(missionRewardParcelId), 0)
def AddMissionRewardParcelId(builder, missionRewardParcelId):
    return MissionExcelAddMissionRewardParcelId(builder, missionRewardParcelId)
def MissionExcelStartMissionRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartMissionRewardParcelIdVector(builder, numElems):
    return MissionExcelStartMissionRewardParcelIdVector(builder, numElems)
def MissionExcelAddMissionRewardParcelType(builder, missionRewardParcelType): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(missionRewardParcelType), 0)
def AddMissionRewardParcelType(builder, missionRewardParcelType):
    return MissionExcelAddMissionRewardParcelType(builder, missionRewardParcelType)
def MissionExcelStartMissionRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMissionRewardParcelTypeVector(builder, numElems):
    return MissionExcelStartMissionRewardParcelTypeVector(builder, numElems)
def MissionExcelAddPreMissionId(builder, preMissionId): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionId), 0)
def AddPreMissionId(builder, preMissionId):
    return MissionExcelAddPreMissionId(builder, preMissionId)
def MissionExcelStartPreMissionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPreMissionIdVector(builder, numElems):
    return MissionExcelStartPreMissionIdVector(builder, numElems)
def MissionExcelAddResetType(builder, resetType): builder.PrependInt32Slot(20, resetType, 0)
def AddResetType(builder, resetType):
    return MissionExcelAddResetType(builder, resetType)
def MissionExcelAddRewardIcon(builder, rewardIcon): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(rewardIcon), 0)
def AddRewardIcon(builder, rewardIcon):
    return MissionExcelAddRewardIcon(builder, rewardIcon)
def MissionExcelAddShortcutUi(builder, shortcutUi): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(shortcutUi), 0)
def AddShortcutUi(builder, shortcutUi):
    return MissionExcelAddShortcutUi(builder, shortcutUi)
def MissionExcelStartShortcutUiVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartShortcutUiVector(builder, numElems):
    return MissionExcelStartShortcutUiVector(builder, numElems)
def MissionExcelAddStartableEndDate(builder, startableEndDate): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(startableEndDate), 0)
def AddStartableEndDate(builder, startableEndDate):
    return MissionExcelAddStartableEndDate(builder, startableEndDate)
def MissionExcelAddStartDate(builder, startDate): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)
def AddStartDate(builder, startDate):
    return MissionExcelAddStartDate(builder, startDate)
def MissionExcelAddToastDisplayType(builder, toastDisplayType): builder.PrependInt32Slot(25, toastDisplayType, 0)
def AddToastDisplayType(builder, toastDisplayType):
    return MissionExcelAddToastDisplayType(builder, toastDisplayType)
def MissionExcelAddToastImagePath(builder, toastImagePath): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(toastImagePath), 0)
def AddToastImagePath(builder, toastImagePath):
    return MissionExcelAddToastImagePath(builder, toastImagePath)
def MissionExcelAddViewFlag(builder, viewFlag): builder.PrependBoolSlot(27, viewFlag, 0)
def AddViewFlag(builder, viewFlag):
    return MissionExcelAddViewFlag(builder, viewFlag)
def MissionExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MissionExcelEnd(builder)