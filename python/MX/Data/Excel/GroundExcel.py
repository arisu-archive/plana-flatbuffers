# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GroundExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GroundExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGroundExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GroundExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GroundExcel
    def AllyPassiveSkillId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GroundExcel
    def AllyPassiveSkillIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundExcel
    def AllyPassiveSkillIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GroundExcel
    def AllyPassiveSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GroundExcel
    def AllyPassiveSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GroundExcel
    def AllyPassiveSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundExcel
    def AllyPassiveSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GroundExcel
    def BattleReadyTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GroundExcel
    def BeforeVictoryTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GroundExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def CoverPointOff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def EffectCountLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemyArmorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemyAttackRangeAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemyAttackRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemyBulletType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemyMinimumPositionGapRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemyPassiveSkillId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GroundExcel
    def EnemyPassiveSkillIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundExcel
    def EnemyPassiveSkillIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # GroundExcel
    def EnemyPassiveSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GroundExcel
    def EnemyPassiveSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GroundExcel
    def EnemyPassiveSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundExcel
    def EnemyPassiveSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # GroundExcel
    def EnemySightPointAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemySightPointRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemySightRangeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def EnemySkillRangeAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def EnemySkillRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def ForcedSkillUse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def ForcedTacticSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def FormationGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def GradeBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def GradeChampion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def GradeElite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def GradeMinion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def GradeNpc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def GroundSceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GroundExcel
    def HideNpcWhenBattleEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def ImmuneHitBeforeTimeOutEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def IsPhaseBgm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def LevelBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def LevelChampion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def LevelElite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def LevelMinion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def LevelNpc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def ObstacleLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerAttackRangeAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerAttackRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerMinimumPositionGapRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerSightPointAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerSightPointRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerSightRangeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def PlayerSkillRangeAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def PlayerSkillRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def ShowNpcSkillCutIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def SkipBattleEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def StageFileName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GroundExcel
    def StageFileNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundExcel
    def StageFileNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        return o == 0

    # GroundExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def TssAirUnitHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def TssHatchOpen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def UiBattleHideFromScratch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GroundExcel
    def UiEmojiScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundExcel
    def UiEnemyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundExcel
    def UiHpScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundExcel
    def UiSkillMainLogScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundExcel
    def WarningUi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def GroundExcelStart(builder): builder.StartObject(58)
def Start(builder):
    return GroundExcelStart(builder)
def GroundExcelAddAllyPassiveSkillId(builder, allyPassiveSkillId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(allyPassiveSkillId), 0)
def AddAllyPassiveSkillId(builder, allyPassiveSkillId):
    return GroundExcelAddAllyPassiveSkillId(builder, allyPassiveSkillId)
def GroundExcelStartAllyPassiveSkillIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAllyPassiveSkillIdVector(builder, numElems):
    return GroundExcelStartAllyPassiveSkillIdVector(builder, numElems)
def GroundExcelAddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(allyPassiveSkillLevel), 0)
def AddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel):
    return GroundExcelAddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel)
def GroundExcelStartAllyPassiveSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAllyPassiveSkillLevelVector(builder, numElems):
    return GroundExcelStartAllyPassiveSkillLevelVector(builder, numElems)
def GroundExcelAddBattleReadyTimelinePath(builder, battleReadyTimelinePath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(battleReadyTimelinePath), 0)
def AddBattleReadyTimelinePath(builder, battleReadyTimelinePath):
    return GroundExcelAddBattleReadyTimelinePath(builder, battleReadyTimelinePath)
def GroundExcelAddBeforeVictoryTimelinePath(builder, beforeVictoryTimelinePath): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(beforeVictoryTimelinePath), 0)
def AddBeforeVictoryTimelinePath(builder, beforeVictoryTimelinePath):
    return GroundExcelAddBeforeVictoryTimelinePath(builder, beforeVictoryTimelinePath)
def GroundExcelAddBgmId(builder, bgmId): builder.PrependInt64Slot(4, bgmId, 0)
def AddBgmId(builder, bgmId):
    return GroundExcelAddBgmId(builder, bgmId)
def GroundExcelAddCoverPointOff(builder, coverPointOff): builder.PrependBoolSlot(5, coverPointOff, 0)
def AddCoverPointOff(builder, coverPointOff):
    return GroundExcelAddCoverPointOff(builder, coverPointOff)
def GroundExcelAddEffectCountLimit(builder, effectCountLimit): builder.PrependInt32Slot(6, effectCountLimit, 0)
def AddEffectCountLimit(builder, effectCountLimit):
    return GroundExcelAddEffectCountLimit(builder, effectCountLimit)
def GroundExcelAddEnemyArmorType(builder, enemyArmorType): builder.PrependInt32Slot(7, enemyArmorType, 0)
def AddEnemyArmorType(builder, enemyArmorType):
    return GroundExcelAddEnemyArmorType(builder, enemyArmorType)
def GroundExcelAddEnemyAttackRangeAdd(builder, enemyAttackRangeAdd): builder.PrependInt64Slot(8, enemyAttackRangeAdd, 0)
def AddEnemyAttackRangeAdd(builder, enemyAttackRangeAdd):
    return GroundExcelAddEnemyAttackRangeAdd(builder, enemyAttackRangeAdd)
def GroundExcelAddEnemyAttackRangeRate(builder, enemyAttackRangeRate): builder.PrependInt64Slot(9, enemyAttackRangeRate, 0)
def AddEnemyAttackRangeRate(builder, enemyAttackRangeRate):
    return GroundExcelAddEnemyAttackRangeRate(builder, enemyAttackRangeRate)
def GroundExcelAddEnemyBulletType(builder, enemyBulletType): builder.PrependInt32Slot(10, enemyBulletType, 0)
def AddEnemyBulletType(builder, enemyBulletType):
    return GroundExcelAddEnemyBulletType(builder, enemyBulletType)
def GroundExcelAddEnemyMinimumPositionGapRate(builder, enemyMinimumPositionGapRate): builder.PrependInt64Slot(11, enemyMinimumPositionGapRate, 0)
def AddEnemyMinimumPositionGapRate(builder, enemyMinimumPositionGapRate):
    return GroundExcelAddEnemyMinimumPositionGapRate(builder, enemyMinimumPositionGapRate)
def GroundExcelAddEnemyPassiveSkillId(builder, enemyPassiveSkillId): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPassiveSkillId), 0)
def AddEnemyPassiveSkillId(builder, enemyPassiveSkillId):
    return GroundExcelAddEnemyPassiveSkillId(builder, enemyPassiveSkillId)
def GroundExcelStartEnemyPassiveSkillIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEnemyPassiveSkillIdVector(builder, numElems):
    return GroundExcelStartEnemyPassiveSkillIdVector(builder, numElems)
def GroundExcelAddEnemyPassiveSkillLevel(builder, enemyPassiveSkillLevel): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPassiveSkillLevel), 0)
def AddEnemyPassiveSkillLevel(builder, enemyPassiveSkillLevel):
    return GroundExcelAddEnemyPassiveSkillLevel(builder, enemyPassiveSkillLevel)
def GroundExcelStartEnemyPassiveSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEnemyPassiveSkillLevelVector(builder, numElems):
    return GroundExcelStartEnemyPassiveSkillLevelVector(builder, numElems)
def GroundExcelAddEnemySightPointAdd(builder, enemySightPointAdd): builder.PrependInt64Slot(14, enemySightPointAdd, 0)
def AddEnemySightPointAdd(builder, enemySightPointAdd):
    return GroundExcelAddEnemySightPointAdd(builder, enemySightPointAdd)
def GroundExcelAddEnemySightPointRate(builder, enemySightPointRate): builder.PrependInt64Slot(15, enemySightPointRate, 0)
def AddEnemySightPointRate(builder, enemySightPointRate):
    return GroundExcelAddEnemySightPointRate(builder, enemySightPointRate)
def GroundExcelAddEnemySightRangeMax(builder, enemySightRangeMax): builder.PrependBoolSlot(16, enemySightRangeMax, 0)
def AddEnemySightRangeMax(builder, enemySightRangeMax):
    return GroundExcelAddEnemySightRangeMax(builder, enemySightRangeMax)
def GroundExcelAddEnemySkillRangeAdd(builder, enemySkillRangeAdd): builder.PrependInt64Slot(17, enemySkillRangeAdd, 0)
def AddEnemySkillRangeAdd(builder, enemySkillRangeAdd):
    return GroundExcelAddEnemySkillRangeAdd(builder, enemySkillRangeAdd)
def GroundExcelAddEnemySkillRangeRate(builder, enemySkillRangeRate): builder.PrependInt64Slot(18, enemySkillRangeRate, 0)
def AddEnemySkillRangeRate(builder, enemySkillRangeRate):
    return GroundExcelAddEnemySkillRangeRate(builder, enemySkillRangeRate)
def GroundExcelAddForcedSkillUse(builder, forcedSkillUse): builder.PrependInt32Slot(19, forcedSkillUse, 0)
def AddForcedSkillUse(builder, forcedSkillUse):
    return GroundExcelAddForcedSkillUse(builder, forcedSkillUse)
def GroundExcelAddForcedTacticSpeed(builder, forcedTacticSpeed): builder.PrependInt32Slot(20, forcedTacticSpeed, 0)
def AddForcedTacticSpeed(builder, forcedTacticSpeed):
    return GroundExcelAddForcedTacticSpeed(builder, forcedTacticSpeed)
def GroundExcelAddFormationGroupId(builder, formationGroupId): builder.PrependInt64Slot(21, formationGroupId, 0)
def AddFormationGroupId(builder, formationGroupId):
    return GroundExcelAddFormationGroupId(builder, formationGroupId)
def GroundExcelAddGradeBoss(builder, gradeBoss): builder.PrependInt64Slot(22, gradeBoss, 0)
def AddGradeBoss(builder, gradeBoss):
    return GroundExcelAddGradeBoss(builder, gradeBoss)
def GroundExcelAddGradeChampion(builder, gradeChampion): builder.PrependInt64Slot(23, gradeChampion, 0)
def AddGradeChampion(builder, gradeChampion):
    return GroundExcelAddGradeChampion(builder, gradeChampion)
def GroundExcelAddGradeElite(builder, gradeElite): builder.PrependInt64Slot(24, gradeElite, 0)
def AddGradeElite(builder, gradeElite):
    return GroundExcelAddGradeElite(builder, gradeElite)
def GroundExcelAddGradeMinion(builder, gradeMinion): builder.PrependInt64Slot(25, gradeMinion, 0)
def AddGradeMinion(builder, gradeMinion):
    return GroundExcelAddGradeMinion(builder, gradeMinion)
def GroundExcelAddGradeNpc(builder, gradeNpc): builder.PrependInt64Slot(26, gradeNpc, 0)
def AddGradeNpc(builder, gradeNpc):
    return GroundExcelAddGradeNpc(builder, gradeNpc)
def GroundExcelAddGroundSceneName(builder, groundSceneName): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(groundSceneName), 0)
def AddGroundSceneName(builder, groundSceneName):
    return GroundExcelAddGroundSceneName(builder, groundSceneName)
def GroundExcelAddHideNpcWhenBattleEnd(builder, hideNpcWhenBattleEnd): builder.PrependBoolSlot(28, hideNpcWhenBattleEnd, 0)
def AddHideNpcWhenBattleEnd(builder, hideNpcWhenBattleEnd):
    return GroundExcelAddHideNpcWhenBattleEnd(builder, hideNpcWhenBattleEnd)
def GroundExcelAddId(builder, id): builder.PrependInt64Slot(29, id, 0)
def AddId(builder, id):
    return GroundExcelAddId(builder, id)
def GroundExcelAddImmuneHitBeforeTimeOutEnd(builder, immuneHitBeforeTimeOutEnd): builder.PrependBoolSlot(30, immuneHitBeforeTimeOutEnd, 0)
def AddImmuneHitBeforeTimeOutEnd(builder, immuneHitBeforeTimeOutEnd):
    return GroundExcelAddImmuneHitBeforeTimeOutEnd(builder, immuneHitBeforeTimeOutEnd)
def GroundExcelAddIsPhaseBgm(builder, isPhaseBgm): builder.PrependBoolSlot(31, isPhaseBgm, 0)
def AddIsPhaseBgm(builder, isPhaseBgm):
    return GroundExcelAddIsPhaseBgm(builder, isPhaseBgm)
def GroundExcelAddLevelBoss(builder, levelBoss): builder.PrependInt64Slot(32, levelBoss, 0)
def AddLevelBoss(builder, levelBoss):
    return GroundExcelAddLevelBoss(builder, levelBoss)
def GroundExcelAddLevelChampion(builder, levelChampion): builder.PrependInt64Slot(33, levelChampion, 0)
def AddLevelChampion(builder, levelChampion):
    return GroundExcelAddLevelChampion(builder, levelChampion)
def GroundExcelAddLevelElite(builder, levelElite): builder.PrependInt64Slot(34, levelElite, 0)
def AddLevelElite(builder, levelElite):
    return GroundExcelAddLevelElite(builder, levelElite)
def GroundExcelAddLevelMinion(builder, levelMinion): builder.PrependInt64Slot(35, levelMinion, 0)
def AddLevelMinion(builder, levelMinion):
    return GroundExcelAddLevelMinion(builder, levelMinion)
def GroundExcelAddLevelNpc(builder, levelNpc): builder.PrependInt64Slot(36, levelNpc, 0)
def AddLevelNpc(builder, levelNpc):
    return GroundExcelAddLevelNpc(builder, levelNpc)
def GroundExcelAddObstacleLevel(builder, obstacleLevel): builder.PrependInt64Slot(37, obstacleLevel, 0)
def AddObstacleLevel(builder, obstacleLevel):
    return GroundExcelAddObstacleLevel(builder, obstacleLevel)
def GroundExcelAddPlayerAttackRangeAdd(builder, playerAttackRangeAdd): builder.PrependInt64Slot(38, playerAttackRangeAdd, 0)
def AddPlayerAttackRangeAdd(builder, playerAttackRangeAdd):
    return GroundExcelAddPlayerAttackRangeAdd(builder, playerAttackRangeAdd)
def GroundExcelAddPlayerAttackRangeRate(builder, playerAttackRangeRate): builder.PrependInt64Slot(39, playerAttackRangeRate, 0)
def AddPlayerAttackRangeRate(builder, playerAttackRangeRate):
    return GroundExcelAddPlayerAttackRangeRate(builder, playerAttackRangeRate)
def GroundExcelAddPlayerMinimumPositionGapRate(builder, playerMinimumPositionGapRate): builder.PrependInt64Slot(40, playerMinimumPositionGapRate, 0)
def AddPlayerMinimumPositionGapRate(builder, playerMinimumPositionGapRate):
    return GroundExcelAddPlayerMinimumPositionGapRate(builder, playerMinimumPositionGapRate)
def GroundExcelAddPlayerSightPointAdd(builder, playerSightPointAdd): builder.PrependInt64Slot(41, playerSightPointAdd, 0)
def AddPlayerSightPointAdd(builder, playerSightPointAdd):
    return GroundExcelAddPlayerSightPointAdd(builder, playerSightPointAdd)
def GroundExcelAddPlayerSightPointRate(builder, playerSightPointRate): builder.PrependInt64Slot(42, playerSightPointRate, 0)
def AddPlayerSightPointRate(builder, playerSightPointRate):
    return GroundExcelAddPlayerSightPointRate(builder, playerSightPointRate)
def GroundExcelAddPlayerSightRangeMax(builder, playerSightRangeMax): builder.PrependBoolSlot(43, playerSightRangeMax, 0)
def AddPlayerSightRangeMax(builder, playerSightRangeMax):
    return GroundExcelAddPlayerSightRangeMax(builder, playerSightRangeMax)
def GroundExcelAddPlayerSkillRangeAdd(builder, playerSkillRangeAdd): builder.PrependInt64Slot(44, playerSkillRangeAdd, 0)
def AddPlayerSkillRangeAdd(builder, playerSkillRangeAdd):
    return GroundExcelAddPlayerSkillRangeAdd(builder, playerSkillRangeAdd)
def GroundExcelAddPlayerSkillRangeRate(builder, playerSkillRangeRate): builder.PrependInt64Slot(45, playerSkillRangeRate, 0)
def AddPlayerSkillRangeRate(builder, playerSkillRangeRate):
    return GroundExcelAddPlayerSkillRangeRate(builder, playerSkillRangeRate)
def GroundExcelAddShowNpcSkillCutIn(builder, showNpcSkillCutIn): builder.PrependInt32Slot(46, showNpcSkillCutIn, 0)
def AddShowNpcSkillCutIn(builder, showNpcSkillCutIn):
    return GroundExcelAddShowNpcSkillCutIn(builder, showNpcSkillCutIn)
def GroundExcelAddSkipBattleEnd(builder, skipBattleEnd): builder.PrependBoolSlot(47, skipBattleEnd, 0)
def AddSkipBattleEnd(builder, skipBattleEnd):
    return GroundExcelAddSkipBattleEnd(builder, skipBattleEnd)
def GroundExcelAddStageFileName(builder, stageFileName): builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(stageFileName), 0)
def AddStageFileName(builder, stageFileName):
    return GroundExcelAddStageFileName(builder, stageFileName)
def GroundExcelStartStageFileNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStageFileNameVector(builder, numElems):
    return GroundExcelStartStageFileNameVector(builder, numElems)
def GroundExcelAddStageTopography(builder, stageTopography): builder.PrependInt32Slot(49, stageTopography, 0)
def AddStageTopography(builder, stageTopography):
    return GroundExcelAddStageTopography(builder, stageTopography)
def GroundExcelAddTssAirUnitHeight(builder, tssAirUnitHeight): builder.PrependInt64Slot(50, tssAirUnitHeight, 0)
def AddTssAirUnitHeight(builder, tssAirUnitHeight):
    return GroundExcelAddTssAirUnitHeight(builder, tssAirUnitHeight)
def GroundExcelAddTssHatchOpen(builder, tssHatchOpen): builder.PrependBoolSlot(51, tssHatchOpen, 0)
def AddTssHatchOpen(builder, tssHatchOpen):
    return GroundExcelAddTssHatchOpen(builder, tssHatchOpen)
def GroundExcelAddUiBattleHideFromScratch(builder, uiBattleHideFromScratch): builder.PrependBoolSlot(52, uiBattleHideFromScratch, 0)
def AddUiBattleHideFromScratch(builder, uiBattleHideFromScratch):
    return GroundExcelAddUiBattleHideFromScratch(builder, uiBattleHideFromScratch)
def GroundExcelAddUiEmojiScale(builder, uiEmojiScale): builder.PrependFloat32Slot(53, uiEmojiScale, 0.0)
def AddUiEmojiScale(builder, uiEmojiScale):
    return GroundExcelAddUiEmojiScale(builder, uiEmojiScale)
def GroundExcelAddUiEnemyCount(builder, uiEnemyCount): builder.PrependInt32Slot(54, uiEnemyCount, 0)
def AddUiEnemyCount(builder, uiEnemyCount):
    return GroundExcelAddUiEnemyCount(builder, uiEnemyCount)
def GroundExcelAddUiHpScale(builder, uiHpScale): builder.PrependFloat32Slot(55, uiHpScale, 0.0)
def AddUiHpScale(builder, uiHpScale):
    return GroundExcelAddUiHpScale(builder, uiHpScale)
def GroundExcelAddUiSkillMainLogScale(builder, uiSkillMainLogScale): builder.PrependFloat32Slot(56, uiSkillMainLogScale, 0.0)
def AddUiSkillMainLogScale(builder, uiSkillMainLogScale):
    return GroundExcelAddUiSkillMainLogScale(builder, uiSkillMainLogScale)
def GroundExcelAddWarningUi(builder, warningUi): builder.PrependBoolSlot(57, warningUi, 0)
def AddWarningUi(builder, warningUi):
    return GroundExcelAddWarningUi(builder, warningUi)
def GroundExcelEnd(builder): return builder.EndObject()
def End(builder):
    return GroundExcelEnd(builder)