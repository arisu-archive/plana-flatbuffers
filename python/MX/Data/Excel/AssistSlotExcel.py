# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AssistSlotExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AssistSlotExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAssistSlotExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AssistSlotExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AssistSlotExcel
    def SlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def EchelonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def SlotNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def AssistTermRewardPeriodFromSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def AssistRewardLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def AssistRentRewardDailyMaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def AssistRentalFeeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistSlotExcel
    def AssistRentalFeeAmountStranger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def AssistSlotExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    AssistSlotExcelStart(builder)

def AssistSlotExcelAddSlotId(builder, slotId):
    builder.PrependInt64Slot(0, slotId, 0)

def AddSlotId(builder, slotId):
    AssistSlotExcelAddSlotId(builder, slotId)

def AssistSlotExcelAddEchelonType(builder, echelonType):
    builder.PrependInt32Slot(1, echelonType, 0)

def AddEchelonType(builder, echelonType):
    AssistSlotExcelAddEchelonType(builder, echelonType)

def AssistSlotExcelAddSlotNumber(builder, slotNumber):
    builder.PrependInt64Slot(2, slotNumber, 0)

def AddSlotNumber(builder, slotNumber):
    AssistSlotExcelAddSlotNumber(builder, slotNumber)

def AssistSlotExcelAddAssistTermRewardPeriodFromSec(builder, assistTermRewardPeriodFromSec):
    builder.PrependInt64Slot(3, assistTermRewardPeriodFromSec, 0)

def AddAssistTermRewardPeriodFromSec(builder, assistTermRewardPeriodFromSec):
    AssistSlotExcelAddAssistTermRewardPeriodFromSec(builder, assistTermRewardPeriodFromSec)

def AssistSlotExcelAddAssistRewardLimit(builder, assistRewardLimit):
    builder.PrependInt64Slot(4, assistRewardLimit, 0)

def AddAssistRewardLimit(builder, assistRewardLimit):
    AssistSlotExcelAddAssistRewardLimit(builder, assistRewardLimit)

def AssistSlotExcelAddAssistRentRewardDailyMaxCount(builder, assistRentRewardDailyMaxCount):
    builder.PrependInt64Slot(5, assistRentRewardDailyMaxCount, 0)

def AddAssistRentRewardDailyMaxCount(builder, assistRentRewardDailyMaxCount):
    AssistSlotExcelAddAssistRentRewardDailyMaxCount(builder, assistRentRewardDailyMaxCount)

def AssistSlotExcelAddAssistRentalFeeAmount(builder, assistRentalFeeAmount):
    builder.PrependInt64Slot(6, assistRentalFeeAmount, 0)

def AddAssistRentalFeeAmount(builder, assistRentalFeeAmount):
    AssistSlotExcelAddAssistRentalFeeAmount(builder, assistRentalFeeAmount)

def AssistSlotExcelAddAssistRentalFeeAmountStranger(builder, assistRentalFeeAmountStranger):
    builder.PrependInt64Slot(7, assistRentalFeeAmountStranger, 0)

def AddAssistRentalFeeAmountStranger(builder, assistRentalFeeAmountStranger):
    AssistSlotExcelAddAssistRentalFeeAmountStranger(builder, assistRentalFeeAmountStranger)

def AssistSlotExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return AssistSlotExcelEnd(builder)
