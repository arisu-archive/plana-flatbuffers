# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGPerkExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGPerkExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGPerkExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGPerkExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGPerkExcel
    def CcgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def CostParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def DiscardPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def EnvironmentLogicEffectId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MinigameCCGPerkExcel
    def EnvironmentLogicEffectIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MinigameCCGPerkExcel
    def EnvironmentLogicEffectIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameCCGPerkExcel
    def EnvironmentLogicEffectIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MinigameCCGPerkExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def RequiredPerkId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MinigameCCGPerkExcel
    def RequiredPerkIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MinigameCCGPerkExcel
    def RequiredPerkIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameCCGPerkExcel
    def RequiredPerkIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MinigameCCGPerkExcel
    def RerollPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def ShopIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameCCGPerkExcel
    def ShopLocalizeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def ShopLocalizeTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGPerkExcel
    def ShopOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MinigameCCGPerkExcelStart(builder): builder.StartObject(11)
def Start(builder):
    return MinigameCCGPerkExcelStart(builder)
def MinigameCCGPerkExcelAddCcgId(builder, ccgId): builder.PrependInt64Slot(0, ccgId, 0)
def AddCcgId(builder, ccgId):
    return MinigameCCGPerkExcelAddCcgId(builder, ccgId)
def MinigameCCGPerkExcelAddCostParcelAmount(builder, costParcelAmount): builder.PrependInt32Slot(1, costParcelAmount, 0)
def AddCostParcelAmount(builder, costParcelAmount):
    return MinigameCCGPerkExcelAddCostParcelAmount(builder, costParcelAmount)
def MinigameCCGPerkExcelAddDiscardPoint(builder, discardPoint): builder.PrependInt32Slot(2, discardPoint, 0)
def AddDiscardPoint(builder, discardPoint):
    return MinigameCCGPerkExcelAddDiscardPoint(builder, discardPoint)
def MinigameCCGPerkExcelAddEnvironmentLogicEffectId(builder, environmentLogicEffectId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(environmentLogicEffectId), 0)
def AddEnvironmentLogicEffectId(builder, environmentLogicEffectId):
    return MinigameCCGPerkExcelAddEnvironmentLogicEffectId(builder, environmentLogicEffectId)
def MinigameCCGPerkExcelStartEnvironmentLogicEffectIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEnvironmentLogicEffectIdVector(builder, numElems):
    return MinigameCCGPerkExcelStartEnvironmentLogicEffectIdVector(builder, numElems)
def MinigameCCGPerkExcelAddId(builder, id): builder.PrependInt64Slot(4, id, 0)
def AddId(builder, id):
    return MinigameCCGPerkExcelAddId(builder, id)
def MinigameCCGPerkExcelAddRequiredPerkId(builder, requiredPerkId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(requiredPerkId), 0)
def AddRequiredPerkId(builder, requiredPerkId):
    return MinigameCCGPerkExcelAddRequiredPerkId(builder, requiredPerkId)
def MinigameCCGPerkExcelStartRequiredPerkIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRequiredPerkIdVector(builder, numElems):
    return MinigameCCGPerkExcelStartRequiredPerkIdVector(builder, numElems)
def MinigameCCGPerkExcelAddRerollPoint(builder, rerollPoint): builder.PrependInt32Slot(6, rerollPoint, 0)
def AddRerollPoint(builder, rerollPoint):
    return MinigameCCGPerkExcelAddRerollPoint(builder, rerollPoint)
def MinigameCCGPerkExcelAddShopIcon(builder, shopIcon): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shopIcon), 0)
def AddShopIcon(builder, shopIcon):
    return MinigameCCGPerkExcelAddShopIcon(builder, shopIcon)
def MinigameCCGPerkExcelAddShopLocalizeDesc(builder, shopLocalizeDesc): builder.PrependUint32Slot(8, shopLocalizeDesc, 0)
def AddShopLocalizeDesc(builder, shopLocalizeDesc):
    return MinigameCCGPerkExcelAddShopLocalizeDesc(builder, shopLocalizeDesc)
def MinigameCCGPerkExcelAddShopLocalizeTitle(builder, shopLocalizeTitle): builder.PrependUint32Slot(9, shopLocalizeTitle, 0)
def AddShopLocalizeTitle(builder, shopLocalizeTitle):
    return MinigameCCGPerkExcelAddShopLocalizeTitle(builder, shopLocalizeTitle)
def MinigameCCGPerkExcelAddShopOrder(builder, shopOrder): builder.PrependInt32Slot(10, shopOrder, 0)
def AddShopOrder(builder, shopOrder):
    return MinigameCCGPerkExcelAddShopOrder(builder, shopOrder)
def MinigameCCGPerkExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameCCGPerkExcelEnd(builder)