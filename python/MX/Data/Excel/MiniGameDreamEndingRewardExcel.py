# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamEndingRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamEndingRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamEndingRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamEndingRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamEndingRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingRewardExcel
    def EndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingRewardExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingRewardExcel
    def DreamMakerEndingRewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingRewardExcel
    def DreamMakerEndingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingRewardExcel
    def RewardParcelAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def MiniGameDreamEndingRewardExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return MiniGameDreamEndingRewardExcelStart(builder)
def MiniGameDreamEndingRewardExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDreamEndingRewardExcelAddEventContentId(builder, eventContentId)
def MiniGameDreamEndingRewardExcelAddEndingId(builder, endingId): builder.PrependInt64Slot(1, endingId, 0)
def AddEndingId(builder, endingId):
    return MiniGameDreamEndingRewardExcelAddEndingId(builder, endingId)
def MiniGameDreamEndingRewardExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(2, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return MiniGameDreamEndingRewardExcelAddLocalizeEtcId(builder, localizeEtcId)
def MiniGameDreamEndingRewardExcelAddDreamMakerEndingRewardType(builder, dreamMakerEndingRewardType): builder.PrependInt32Slot(3, dreamMakerEndingRewardType, 0)
def AddDreamMakerEndingRewardType(builder, dreamMakerEndingRewardType):
    return MiniGameDreamEndingRewardExcelAddDreamMakerEndingRewardType(builder, dreamMakerEndingRewardType)
def MiniGameDreamEndingRewardExcelAddDreamMakerEndingType(builder, dreamMakerEndingType): builder.PrependInt32Slot(4, dreamMakerEndingType, 0)
def AddDreamMakerEndingType(builder, dreamMakerEndingType):
    return MiniGameDreamEndingRewardExcelAddDreamMakerEndingType(builder, dreamMakerEndingType)
def MiniGameDreamEndingRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)
def AddRewardParcelType(builder, rewardParcelType):
    return MiniGameDreamEndingRewardExcelAddRewardParcelType(builder, rewardParcelType)
def MiniGameDreamEndingRewardExcelStartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParcelTypeVector(builder, numElems):
    return MiniGameDreamEndingRewardExcelStartRewardParcelTypeVector(builder, numElems)
def MiniGameDreamEndingRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)
def AddRewardParcelId(builder, rewardParcelId):
    return MiniGameDreamEndingRewardExcelAddRewardParcelId(builder, rewardParcelId)
def MiniGameDreamEndingRewardExcelStartRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelIdVector(builder, numElems):
    return MiniGameDreamEndingRewardExcelStartRewardParcelIdVector(builder, numElems)
def MiniGameDreamEndingRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelAmount), 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return MiniGameDreamEndingRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def MiniGameDreamEndingRewardExcelStartRewardParcelAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelAmountVector(builder, numElems):
    return MiniGameDreamEndingRewardExcelStartRewardParcelAmountVector(builder, numElems)
def MiniGameDreamEndingRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDreamEndingRewardExcelEnd(builder)