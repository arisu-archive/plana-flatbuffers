# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FormationLocationExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FormationLocationExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFormationLocationExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FormationLocationExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FormationLocationExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FormationLocationExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FormationLocationExcel
    def SlotZ(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FormationLocationExcel
    def SlotZAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FormationLocationExcel
    def SlotZLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FormationLocationExcel
    def SlotZIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FormationLocationExcel
    def SlotX(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FormationLocationExcel
    def SlotXAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FormationLocationExcel
    def SlotXLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FormationLocationExcel
    def SlotXIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def FormationLocationExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return FormationLocationExcelStart(builder)
def FormationLocationExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return FormationLocationExcelAddId(builder, id)
def FormationLocationExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(1, groupId, 0)
def AddGroupId(builder, groupId):
    return FormationLocationExcelAddGroupId(builder, groupId)
def FormationLocationExcelAddSlotZ(builder, slotZ): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(slotZ), 0)
def AddSlotZ(builder, slotZ):
    return FormationLocationExcelAddSlotZ(builder, slotZ)
def FormationLocationExcelStartSlotZVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSlotZVector(builder, numElems):
    return FormationLocationExcelStartSlotZVector(builder, numElems)
def FormationLocationExcelAddSlotX(builder, slotX): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(slotX), 0)
def AddSlotX(builder, slotX):
    return FormationLocationExcelAddSlotX(builder, slotX)
def FormationLocationExcelStartSlotXVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSlotXVector(builder, numElems):
    return FormationLocationExcelStartSlotXVector(builder, numElems)
def FormationLocationExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FormationLocationExcelEnd(builder)