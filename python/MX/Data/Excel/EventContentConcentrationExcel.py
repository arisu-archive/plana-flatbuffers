# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentConcentrationExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentConcentrationExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentConcentrationExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentConcentrationExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentConcentrationExcel
    def CardBoardPrefabs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentConcentrationExcel
    def CostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationExcel
    def InstantClearRound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationExcel
    def MaxCardOpenCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationExcel
    def MaxCardPairCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EventContentConcentrationExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return EventContentConcentrationExcelStart(builder)
def EventContentConcentrationExcelAddCardBoardPrefabs(builder, cardBoardPrefabs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cardBoardPrefabs), 0)
def AddCardBoardPrefabs(builder, cardBoardPrefabs):
    return EventContentConcentrationExcelAddCardBoardPrefabs(builder, cardBoardPrefabs)
def EventContentConcentrationExcelAddCostGoodsId(builder, costGoodsId): builder.PrependInt64Slot(1, costGoodsId, 0)
def AddCostGoodsId(builder, costGoodsId):
    return EventContentConcentrationExcelAddCostGoodsId(builder, costGoodsId)
def EventContentConcentrationExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(2, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentConcentrationExcelAddEventContentId(builder, eventContentId)
def EventContentConcentrationExcelAddInstantClearRound(builder, instantClearRound): builder.PrependInt32Slot(3, instantClearRound, 0)
def AddInstantClearRound(builder, instantClearRound):
    return EventContentConcentrationExcelAddInstantClearRound(builder, instantClearRound)
def EventContentConcentrationExcelAddMaxCardOpenCount(builder, maxCardOpenCount): builder.PrependInt32Slot(4, maxCardOpenCount, 0)
def AddMaxCardOpenCount(builder, maxCardOpenCount):
    return EventContentConcentrationExcelAddMaxCardOpenCount(builder, maxCardOpenCount)
def EventContentConcentrationExcelAddMaxCardPairCount(builder, maxCardPairCount): builder.PrependInt32Slot(5, maxCardPairCount, 0)
def AddMaxCardPairCount(builder, maxCardPairCount):
    return EventContentConcentrationExcelAddMaxCardPairCount(builder, maxCardPairCount)
def EventContentConcentrationExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentConcentrationExcelEnd(builder)