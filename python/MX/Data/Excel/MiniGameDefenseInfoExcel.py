# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDefenseInfoExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDefenseInfoExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDefenseInfoExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDefenseInfoExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDefenseInfoExcel
    def DisableRootMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameDefenseInfoExcel
    def DefenseBattleMultiplierMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseInfoExcel
    def DefenseBattleParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseInfoExcel
    def DefenseBattleParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseInfoExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDefenseInfoExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return MiniGameDefenseInfoExcelStart(builder)
def MiniGameDefenseInfoExcelAddDisableRootMotion(builder, disableRootMotion): builder.PrependBoolSlot(0, disableRootMotion, 0)
def AddDisableRootMotion(builder, disableRootMotion):
    return MiniGameDefenseInfoExcelAddDisableRootMotion(builder, disableRootMotion)
def MiniGameDefenseInfoExcelAddDefenseBattleMultiplierMax(builder, defenseBattleMultiplierMax): builder.PrependInt64Slot(1, defenseBattleMultiplierMax, 0)
def AddDefenseBattleMultiplierMax(builder, defenseBattleMultiplierMax):
    return MiniGameDefenseInfoExcelAddDefenseBattleMultiplierMax(builder, defenseBattleMultiplierMax)
def MiniGameDefenseInfoExcelAddDefenseBattleParcelId(builder, defenseBattleParcelId): builder.PrependInt64Slot(2, defenseBattleParcelId, 0)
def AddDefenseBattleParcelId(builder, defenseBattleParcelId):
    return MiniGameDefenseInfoExcelAddDefenseBattleParcelId(builder, defenseBattleParcelId)
def MiniGameDefenseInfoExcelAddDefenseBattleParcelType(builder, defenseBattleParcelType): builder.PrependInt32Slot(3, defenseBattleParcelType, 0)
def AddDefenseBattleParcelType(builder, defenseBattleParcelType):
    return MiniGameDefenseInfoExcelAddDefenseBattleParcelType(builder, defenseBattleParcelType)
def MiniGameDefenseInfoExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(4, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDefenseInfoExcelAddEventContentId(builder, eventContentId)
def MiniGameDefenseInfoExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDefenseInfoExcelEnd(builder)