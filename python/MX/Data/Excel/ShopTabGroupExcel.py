# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopTabGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopTabGroupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopTabGroupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopTabGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopTabGroupExcel
    def ShopCategoryTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ShopTabGroupExcel
    def ShopCategoryTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ShopTabGroupExcel
    def ShopCategoryTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShopTabGroupExcel
    def ShopCategoryTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ShopTabGroupExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopTabGroupExcel
    def ShopGroupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopTabGroupExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ShopTabGroupExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return ShopTabGroupExcelStart(builder)
def ShopTabGroupExcelAddShopCategoryTypes(builder, shopCategoryTypes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shopCategoryTypes), 0)
def AddShopCategoryTypes(builder, shopCategoryTypes):
    return ShopTabGroupExcelAddShopCategoryTypes(builder, shopCategoryTypes)
def ShopTabGroupExcelStartShopCategoryTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartShopCategoryTypesVector(builder, numElems):
    return ShopTabGroupExcelStartShopCategoryTypesVector(builder, numElems)
def ShopTabGroupExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt32Slot(1, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return ShopTabGroupExcelAddDisplayOrder(builder, displayOrder)
def ShopTabGroupExcelAddShopGroupType(builder, shopGroupType): builder.PrependInt32Slot(2, shopGroupType, 0)
def AddShopGroupType(builder, shopGroupType):
    return ShopTabGroupExcelAddShopGroupType(builder, shopGroupType)
def ShopTabGroupExcelAddId(builder, id): builder.PrependInt64Slot(3, id, 0)
def AddId(builder, id):
    return ShopTabGroupExcelAddId(builder, id)
def ShopTabGroupExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ShopTabGroupExcelEnd(builder)