# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EquipmentExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EquipmentExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEquipmentExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EquipmentExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EquipmentExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def EquipmentCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def Wear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EquipmentExcel
    def MaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def RecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def TierInit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def NextTierEquipment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def StackableMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EquipmentExcel
    def ImageName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EquipmentExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EquipmentExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EquipmentExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EquipmentExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # EquipmentExcel
    def CraftQualityTier0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def CraftQualityTier1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def CraftQualityTier2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def ShiftingCraftQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentExcel
    def ShopCategory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EquipmentExcel
    def ShopCategoryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EquipmentExcel
    def ShopCategoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EquipmentExcel
    def ShopCategoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # EquipmentExcel
    def ShortcutTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EquipmentExcelStart(builder):
    builder.StartObject(19)

def Start(builder):
    EquipmentExcelStart(builder)

def EquipmentExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    EquipmentExcelAddId(builder, id)

def EquipmentExcelAddEquipmentCategory(builder, equipmentCategory):
    builder.PrependInt32Slot(1, equipmentCategory, 0)

def AddEquipmentCategory(builder, equipmentCategory):
    EquipmentExcelAddEquipmentCategory(builder, equipmentCategory)

def EquipmentExcelAddRarity(builder, rarity):
    builder.PrependInt32Slot(2, rarity, 0)

def AddRarity(builder, rarity):
    EquipmentExcelAddRarity(builder, rarity)

def EquipmentExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(3, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    EquipmentExcelAddLocalizeEtcId(builder, localizeEtcId)

def EquipmentExcelAddWear(builder, wear):
    builder.PrependBoolSlot(4, wear, 0)

def AddWear(builder, wear):
    EquipmentExcelAddWear(builder, wear)

def EquipmentExcelAddMaxLevel(builder, maxLevel):
    builder.PrependInt32Slot(5, maxLevel, 0)

def AddMaxLevel(builder, maxLevel):
    EquipmentExcelAddMaxLevel(builder, maxLevel)

def EquipmentExcelAddRecipeId(builder, recipeId):
    builder.PrependInt32Slot(6, recipeId, 0)

def AddRecipeId(builder, recipeId):
    EquipmentExcelAddRecipeId(builder, recipeId)

def EquipmentExcelAddTierInit(builder, tierInit):
    builder.PrependInt64Slot(7, tierInit, 0)

def AddTierInit(builder, tierInit):
    EquipmentExcelAddTierInit(builder, tierInit)

def EquipmentExcelAddNextTierEquipment(builder, nextTierEquipment):
    builder.PrependInt64Slot(8, nextTierEquipment, 0)

def AddNextTierEquipment(builder, nextTierEquipment):
    EquipmentExcelAddNextTierEquipment(builder, nextTierEquipment)

def EquipmentExcelAddStackableMax(builder, stackableMax):
    builder.PrependInt32Slot(9, stackableMax, 0)

def AddStackableMax(builder, stackableMax):
    EquipmentExcelAddStackableMax(builder, stackableMax)

def EquipmentExcelAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def AddIcon(builder, icon):
    EquipmentExcelAddIcon(builder, icon)

def EquipmentExcelAddImageName(builder, imageName):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(imageName), 0)

def AddImageName(builder, imageName):
    EquipmentExcelAddImageName(builder, imageName)

def EquipmentExcelAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    EquipmentExcelAddTags(builder, tags)

def EquipmentExcelStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return EquipmentExcelStartTagsVector(builder, numElems)

def EquipmentExcelAddCraftQualityTier0(builder, craftQualityTier0):
    builder.PrependInt64Slot(13, craftQualityTier0, 0)

def AddCraftQualityTier0(builder, craftQualityTier0):
    EquipmentExcelAddCraftQualityTier0(builder, craftQualityTier0)

def EquipmentExcelAddCraftQualityTier1(builder, craftQualityTier1):
    builder.PrependInt64Slot(14, craftQualityTier1, 0)

def AddCraftQualityTier1(builder, craftQualityTier1):
    EquipmentExcelAddCraftQualityTier1(builder, craftQualityTier1)

def EquipmentExcelAddCraftQualityTier2(builder, craftQualityTier2):
    builder.PrependInt64Slot(15, craftQualityTier2, 0)

def AddCraftQualityTier2(builder, craftQualityTier2):
    EquipmentExcelAddCraftQualityTier2(builder, craftQualityTier2)

def EquipmentExcelAddShiftingCraftQuality(builder, shiftingCraftQuality):
    builder.PrependInt64Slot(16, shiftingCraftQuality, 0)

def AddShiftingCraftQuality(builder, shiftingCraftQuality):
    EquipmentExcelAddShiftingCraftQuality(builder, shiftingCraftQuality)

def EquipmentExcelAddShopCategory(builder, shopCategory):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(shopCategory), 0)

def AddShopCategory(builder, shopCategory):
    EquipmentExcelAddShopCategory(builder, shopCategory)

def EquipmentExcelStartShopCategoryVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShopCategoryVector(builder, numElems):
    return EquipmentExcelStartShopCategoryVector(builder, numElems)

def EquipmentExcelAddShortcutTypeId(builder, shortcutTypeId):
    builder.PrependInt64Slot(18, shortcutTypeId, 0)

def AddShortcutTypeId(builder, shortcutTypeId):
    EquipmentExcelAddShortcutTypeId(builder, shortcutTypeId)

def EquipmentExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EquipmentExcelEnd(builder)
