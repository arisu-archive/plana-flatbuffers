# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioCharacterSituationSetExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioCharacterSituationSetExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioCharacterSituationSetExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioCharacterSituationSetExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioCharacterSituationSetExcel
    def Emotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterSituationSetExcel
    def Effect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterSituationSetExcel
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Behavior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Face(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ScenarioCharacterSituationSetExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return ScenarioCharacterSituationSetExcelStart(builder)
def ScenarioCharacterSituationSetExcelAddEmotion(builder, emotion): builder.PrependUint32Slot(0, emotion, 0)
def AddEmotion(builder, emotion):
    return ScenarioCharacterSituationSetExcelAddEmotion(builder, emotion)
def ScenarioCharacterSituationSetExcelAddEffect(builder, effect): builder.PrependUint32Slot(1, effect, 0)
def AddEffect(builder, effect):
    return ScenarioCharacterSituationSetExcelAddEffect(builder, effect)
def ScenarioCharacterSituationSetExcelAddShape(builder, shape): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def AddShape(builder, shape):
    return ScenarioCharacterSituationSetExcelAddShape(builder, shape)
def ScenarioCharacterSituationSetExcelAddAction(builder, action): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(action), 0)
def AddAction(builder, action):
    return ScenarioCharacterSituationSetExcelAddAction(builder, action)
def ScenarioCharacterSituationSetExcelAddBehavior(builder, behavior): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(behavior), 0)
def AddBehavior(builder, behavior):
    return ScenarioCharacterSituationSetExcelAddBehavior(builder, behavior)
def ScenarioCharacterSituationSetExcelAddFace(builder, face): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(face), 0)
def AddFace(builder, face):
    return ScenarioCharacterSituationSetExcelAddFace(builder, face)
def ScenarioCharacterSituationSetExcelAddName(builder, name): builder.PrependUint32Slot(6, name, 0)
def AddName(builder, name):
    return ScenarioCharacterSituationSetExcelAddName(builder, name)
def ScenarioCharacterSituationSetExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ScenarioCharacterSituationSetExcelEnd(builder)