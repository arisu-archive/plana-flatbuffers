# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WeekDungeonRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WeekDungeonRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWeekDungeonRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WeekDungeonRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WeekDungeonRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonRewardExcel
    def DungeonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonRewardExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonRewardExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonRewardExcel
    def RewardParcelProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WeekDungeonRewardExcel
    def IsDisplayed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WeekDungeonRewardExcel
    def DropItemModelPrefabPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def WeekDungeonRewardExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    WeekDungeonRewardExcelStart(builder)

def WeekDungeonRewardExcelAddGroupId(builder, groupId):
    builder.PrependInt64Slot(0, groupId, 0)

def AddGroupId(builder, groupId):
    WeekDungeonRewardExcelAddGroupId(builder, groupId)

def WeekDungeonRewardExcelAddDungeonType(builder, dungeonType):
    builder.PrependInt32Slot(1, dungeonType, 0)

def AddDungeonType(builder, dungeonType):
    WeekDungeonRewardExcelAddDungeonType(builder, dungeonType)

def WeekDungeonRewardExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependInt32Slot(2, rewardParcelType, 0)

def AddRewardParcelType(builder, rewardParcelType):
    WeekDungeonRewardExcelAddRewardParcelType(builder, rewardParcelType)

def WeekDungeonRewardExcelAddRewardParcelId(builder, rewardParcelId):
    builder.PrependInt64Slot(3, rewardParcelId, 0)

def AddRewardParcelId(builder, rewardParcelId):
    WeekDungeonRewardExcelAddRewardParcelId(builder, rewardParcelId)

def WeekDungeonRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount):
    builder.PrependInt64Slot(4, rewardParcelAmount, 0)

def AddRewardParcelAmount(builder, rewardParcelAmount):
    WeekDungeonRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)

def WeekDungeonRewardExcelAddRewardParcelProbability(builder, rewardParcelProbability):
    builder.PrependInt64Slot(5, rewardParcelProbability, 0)

def AddRewardParcelProbability(builder, rewardParcelProbability):
    WeekDungeonRewardExcelAddRewardParcelProbability(builder, rewardParcelProbability)

def WeekDungeonRewardExcelAddIsDisplayed(builder, isDisplayed):
    builder.PrependBoolSlot(6, isDisplayed, 0)

def AddIsDisplayed(builder, isDisplayed):
    WeekDungeonRewardExcelAddIsDisplayed(builder, isDisplayed)

def WeekDungeonRewardExcelAddDropItemModelPrefabPath(builder, dropItemModelPrefabPath):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dropItemModelPrefabPath), 0)

def AddDropItemModelPrefabPath(builder, dropItemModelPrefabPath):
    WeekDungeonRewardExcelAddDropItemModelPrefabPath(builder, dropItemModelPrefabPath)

def WeekDungeonRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return WeekDungeonRewardExcelEnd(builder)
