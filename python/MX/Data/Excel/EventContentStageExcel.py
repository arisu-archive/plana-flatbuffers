# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentStageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentStageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentStageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentStageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentStageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentStageExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentStageExcel
    def StageDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def PrevStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def OpenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def OpenEventPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def OpenConditionScenarioPermanentSubEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def PrevStageSubEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def OpenConditionScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def OpenConditionContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def OpenConditionContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageEnterCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageEnterEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StarConditionTacticRankSCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StarConditionTurnCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def EnterScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentStageExcel
    def EnterScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentStageExcel
    def EnterScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentStageExcel
    def EnterScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # EventContentStageExcel
    def ClearScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentStageExcel
    def ClearScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentStageExcel
    def ClearScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentStageExcel
    def ClearScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # EventContentStageExcel
    def StrategyMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentStageExcel
    def StrategyMapBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentStageExcel
    def EventContentStageRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def MaxTurn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def RecommandLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def StrategyEnvironment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def BgmIdD0807648(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentStageExcel
    def InstantClear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentStageExcel
    def BuffContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def FixedEchelonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def ChallengeDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentStageExcel
    def StarGoal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentStageExcel
    def StarGoalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentStageExcel
    def StarGoalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentStageExcel
    def StarGoalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # EventContentStageExcel
    def StarGoalAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentStageExcel
    def StarGoalAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentStageExcel
    def StarGoalAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentStageExcel
    def StarGoalAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # EventContentStageExcel
    def IsDefeatBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentStageExcel
    def StageHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EventContentStageExcelStart(builder): builder.StartObject(43)
def Start(builder):
    return EventContentStageExcelStart(builder)
def EventContentStageExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return EventContentStageExcelAddId(builder, id)
def EventContentStageExcelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return EventContentStageExcelAddName(builder, name)
def EventContentStageExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(2, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentStageExcelAddEventContentId(builder, eventContentId)
def EventContentStageExcelAddStageDifficulty(builder, stageDifficulty): builder.PrependInt32Slot(3, stageDifficulty, 0)
def AddStageDifficulty(builder, stageDifficulty):
    return EventContentStageExcelAddStageDifficulty(builder, stageDifficulty)
def EventContentStageExcelAddStageNumber(builder, stageNumber): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stageNumber), 0)
def AddStageNumber(builder, stageNumber):
    return EventContentStageExcelAddStageNumber(builder, stageNumber)
def EventContentStageExcelAddStageDisplay(builder, stageDisplay): builder.PrependInt32Slot(5, stageDisplay, 0)
def AddStageDisplay(builder, stageDisplay):
    return EventContentStageExcelAddStageDisplay(builder, stageDisplay)
def EventContentStageExcelAddPrevStageId(builder, prevStageId): builder.PrependInt64Slot(6, prevStageId, 0)
def AddPrevStageId(builder, prevStageId):
    return EventContentStageExcelAddPrevStageId(builder, prevStageId)
def EventContentStageExcelAddOpenDate(builder, openDate): builder.PrependInt64Slot(7, openDate, 0)
def AddOpenDate(builder, openDate):
    return EventContentStageExcelAddOpenDate(builder, openDate)
def EventContentStageExcelAddOpenEventPoint(builder, openEventPoint): builder.PrependInt64Slot(8, openEventPoint, 0)
def AddOpenEventPoint(builder, openEventPoint):
    return EventContentStageExcelAddOpenEventPoint(builder, openEventPoint)
def EventContentStageExcelAddOpenConditionScenarioPermanentSubEventId(builder, openConditionScenarioPermanentSubEventId): builder.PrependInt64Slot(9, openConditionScenarioPermanentSubEventId, 0)
def AddOpenConditionScenarioPermanentSubEventId(builder, openConditionScenarioPermanentSubEventId):
    return EventContentStageExcelAddOpenConditionScenarioPermanentSubEventId(builder, openConditionScenarioPermanentSubEventId)
def EventContentStageExcelAddPrevStageSubEventId(builder, prevStageSubEventId): builder.PrependInt64Slot(10, prevStageSubEventId, 0)
def AddPrevStageSubEventId(builder, prevStageSubEventId):
    return EventContentStageExcelAddPrevStageSubEventId(builder, prevStageSubEventId)
def EventContentStageExcelAddOpenConditionScenarioId(builder, openConditionScenarioId): builder.PrependInt64Slot(11, openConditionScenarioId, 0)
def AddOpenConditionScenarioId(builder, openConditionScenarioId):
    return EventContentStageExcelAddOpenConditionScenarioId(builder, openConditionScenarioId)
def EventContentStageExcelAddOpenConditionContentType(builder, openConditionContentType): builder.PrependInt32Slot(12, openConditionContentType, 0)
def AddOpenConditionContentType(builder, openConditionContentType):
    return EventContentStageExcelAddOpenConditionContentType(builder, openConditionContentType)
def EventContentStageExcelAddOpenConditionContentId(builder, openConditionContentId): builder.PrependInt64Slot(13, openConditionContentId, 0)
def AddOpenConditionContentId(builder, openConditionContentId):
    return EventContentStageExcelAddOpenConditionContentId(builder, openConditionContentId)
def EventContentStageExcelAddBattleDuration(builder, battleDuration): builder.PrependInt64Slot(14, battleDuration, 0)
def AddBattleDuration(builder, battleDuration):
    return EventContentStageExcelAddBattleDuration(builder, battleDuration)
def EventContentStageExcelAddStageEnterCostType(builder, stageEnterCostType): builder.PrependInt32Slot(15, stageEnterCostType, 0)
def AddStageEnterCostType(builder, stageEnterCostType):
    return EventContentStageExcelAddStageEnterCostType(builder, stageEnterCostType)
def EventContentStageExcelAddStageEnterCostId(builder, stageEnterCostId): builder.PrependInt64Slot(16, stageEnterCostId, 0)
def AddStageEnterCostId(builder, stageEnterCostId):
    return EventContentStageExcelAddStageEnterCostId(builder, stageEnterCostId)
def EventContentStageExcelAddStageEnterCostAmount(builder, stageEnterCostAmount): builder.PrependInt32Slot(17, stageEnterCostAmount, 0)
def AddStageEnterCostAmount(builder, stageEnterCostAmount):
    return EventContentStageExcelAddStageEnterCostAmount(builder, stageEnterCostAmount)
def EventContentStageExcelAddStageEnterEchelonCount(builder, stageEnterEchelonCount): builder.PrependInt32Slot(18, stageEnterEchelonCount, 0)
def AddStageEnterEchelonCount(builder, stageEnterEchelonCount):
    return EventContentStageExcelAddStageEnterEchelonCount(builder, stageEnterEchelonCount)
def EventContentStageExcelAddStarConditionTacticRankSCount(builder, starConditionTacticRankSCount): builder.PrependInt64Slot(19, starConditionTacticRankSCount, 0)
def AddStarConditionTacticRankSCount(builder, starConditionTacticRankSCount):
    return EventContentStageExcelAddStarConditionTacticRankSCount(builder, starConditionTacticRankSCount)
def EventContentStageExcelAddStarConditionTurnCount(builder, starConditionTurnCount): builder.PrependInt64Slot(20, starConditionTurnCount, 0)
def AddStarConditionTurnCount(builder, starConditionTurnCount):
    return EventContentStageExcelAddStarConditionTurnCount(builder, starConditionTurnCount)
def EventContentStageExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(enterScenarioGroupId), 0)
def AddEnterScenarioGroupId(builder, enterScenarioGroupId):
    return EventContentStageExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId)
def EventContentStageExcelStartEnterScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEnterScenarioGroupIdVector(builder, numElems):
    return EventContentStageExcelStartEnterScenarioGroupIdVector(builder, numElems)
def EventContentStageExcelAddClearScenarioGroupId(builder, clearScenarioGroupId): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(clearScenarioGroupId), 0)
def AddClearScenarioGroupId(builder, clearScenarioGroupId):
    return EventContentStageExcelAddClearScenarioGroupId(builder, clearScenarioGroupId)
def EventContentStageExcelStartClearScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartClearScenarioGroupIdVector(builder, numElems):
    return EventContentStageExcelStartClearScenarioGroupIdVector(builder, numElems)
def EventContentStageExcelAddStrategyMap(builder, strategyMap): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(strategyMap), 0)
def AddStrategyMap(builder, strategyMap):
    return EventContentStageExcelAddStrategyMap(builder, strategyMap)
def EventContentStageExcelAddStrategyMapBg(builder, strategyMapBg): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(strategyMapBg), 0)
def AddStrategyMapBg(builder, strategyMapBg):
    return EventContentStageExcelAddStrategyMapBg(builder, strategyMapBg)
def EventContentStageExcelAddEventContentStageRewardId(builder, eventContentStageRewardId): builder.PrependInt64Slot(25, eventContentStageRewardId, 0)
def AddEventContentStageRewardId(builder, eventContentStageRewardId):
    return EventContentStageExcelAddEventContentStageRewardId(builder, eventContentStageRewardId)
def EventContentStageExcelAddMaxTurn(builder, maxTurn): builder.PrependInt32Slot(26, maxTurn, 0)
def AddMaxTurn(builder, maxTurn):
    return EventContentStageExcelAddMaxTurn(builder, maxTurn)
def EventContentStageExcelAddStageTopography(builder, stageTopography): builder.PrependInt32Slot(27, stageTopography, 0)
def AddStageTopography(builder, stageTopography):
    return EventContentStageExcelAddStageTopography(builder, stageTopography)
def EventContentStageExcelAddRecommandLevel(builder, recommandLevel): builder.PrependInt32Slot(28, recommandLevel, 0)
def AddRecommandLevel(builder, recommandLevel):
    return EventContentStageExcelAddRecommandLevel(builder, recommandLevel)
def EventContentStageExcelAddStrategyEnvironment(builder, strategyEnvironment): builder.PrependInt32Slot(29, strategyEnvironment, 0)
def AddStrategyEnvironment(builder, strategyEnvironment):
    return EventContentStageExcelAddStrategyEnvironment(builder, strategyEnvironment)
def EventContentStageExcelAddGroundId(builder, groundId): builder.PrependInt64Slot(30, groundId, 0)
def AddGroundId(builder, groundId):
    return EventContentStageExcelAddGroundId(builder, groundId)
def EventContentStageExcelAddContentType(builder, contentType): builder.PrependInt32Slot(31, contentType, 0)
def AddContentType(builder, contentType):
    return EventContentStageExcelAddContentType(builder, contentType)
def EventContentStageExcelAddBgmId(builder, bgmId): builder.PrependInt64Slot(32, bgmId, 0)
def AddBgmId(builder, bgmId):
    return EventContentStageExcelAddBgmId(builder, bgmId)
def EventContentStageExcelAddBgmIdD0807648(builder, bgmIdD0807648): builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(bgmIdD0807648), 0)
def AddBgmIdD0807648(builder, bgmIdD0807648):
    return EventContentStageExcelAddBgmIdD0807648(builder, bgmIdD0807648)
def EventContentStageExcelAddInstantClear(builder, instantClear): builder.PrependBoolSlot(34, instantClear, 0)
def AddInstantClear(builder, instantClear):
    return EventContentStageExcelAddInstantClear(builder, instantClear)
def EventContentStageExcelAddBuffContentId(builder, buffContentId): builder.PrependInt64Slot(35, buffContentId, 0)
def AddBuffContentId(builder, buffContentId):
    return EventContentStageExcelAddBuffContentId(builder, buffContentId)
def EventContentStageExcelAddFixedEchelonId(builder, fixedEchelonId): builder.PrependInt64Slot(36, fixedEchelonId, 0)
def AddFixedEchelonId(builder, fixedEchelonId):
    return EventContentStageExcelAddFixedEchelonId(builder, fixedEchelonId)
def EventContentStageExcelAddChallengeDisplay(builder, challengeDisplay): builder.PrependBoolSlot(37, challengeDisplay, 0)
def AddChallengeDisplay(builder, challengeDisplay):
    return EventContentStageExcelAddChallengeDisplay(builder, challengeDisplay)
def EventContentStageExcelAddStarGoal(builder, starGoal): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(starGoal), 0)
def AddStarGoal(builder, starGoal):
    return EventContentStageExcelAddStarGoal(builder, starGoal)
def EventContentStageExcelStartStarGoalVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStarGoalVector(builder, numElems):
    return EventContentStageExcelStartStarGoalVector(builder, numElems)
def EventContentStageExcelAddStarGoalAmount(builder, starGoalAmount): builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(starGoalAmount), 0)
def AddStarGoalAmount(builder, starGoalAmount):
    return EventContentStageExcelAddStarGoalAmount(builder, starGoalAmount)
def EventContentStageExcelStartStarGoalAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStarGoalAmountVector(builder, numElems):
    return EventContentStageExcelStartStarGoalAmountVector(builder, numElems)
def EventContentStageExcelAddIsDefeatBattle(builder, isDefeatBattle): builder.PrependBoolSlot(40, isDefeatBattle, 0)
def AddIsDefeatBattle(builder, isDefeatBattle):
    return EventContentStageExcelAddIsDefeatBattle(builder, isDefeatBattle)
def EventContentStageExcelAddStageHint(builder, stageHint): builder.PrependUint32Slot(41, stageHint, 0)
def AddStageHint(builder, stageHint):
    return EventContentStageExcelAddStageHint(builder, stageHint)
def EventContentStageExcelAddEchelonExtensionType(builder, echelonExtensionType): builder.PrependInt32Slot(42, echelonExtensionType, 0)
def AddEchelonExtensionType(builder, echelonExtensionType):
    return EventContentStageExcelAddEchelonExtensionType(builder, echelonExtensionType)
def EventContentStageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentStageExcelEnd(builder)