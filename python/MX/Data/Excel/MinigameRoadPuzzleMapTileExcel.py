# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameRoadPuzzleMapTileExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameRoadPuzzleMapTileExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameRoadPuzzleMapTileExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameRoadPuzzleMapTileExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameRoadPuzzleMapTileExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleMapTileExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleMapTileExcel
    def PrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameRoadPuzzleMapTileExcel
    def MapTileType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MinigameRoadPuzzleMapTileExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return MinigameRoadPuzzleMapTileExcelStart(builder)
def MinigameRoadPuzzleMapTileExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MinigameRoadPuzzleMapTileExcelAddEventContentId(builder, eventContentId)
def MinigameRoadPuzzleMapTileExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(1, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MinigameRoadPuzzleMapTileExcelAddUniqueId(builder, uniqueId)
def MinigameRoadPuzzleMapTileExcelAddPrefabName(builder, prefabName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(prefabName), 0)
def AddPrefabName(builder, prefabName):
    return MinigameRoadPuzzleMapTileExcelAddPrefabName(builder, prefabName)
def MinigameRoadPuzzleMapTileExcelAddMapTileType(builder, mapTileType): builder.PrependInt32Slot(3, mapTileType, 0)
def AddMapTileType(builder, mapTileType):
    return MinigameRoadPuzzleMapTileExcelAddMapTileType(builder, mapTileType)
def MinigameRoadPuzzleMapTileExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameRoadPuzzleMapTileExcelEnd(builder)