# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AcademyZoneExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AcademyZoneExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAcademyZoneExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AcademyZoneExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AcademyZoneExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyZoneExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AcademyZoneExcel
    def LocationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyZoneExcel
    def LocationRankForUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyZoneExcel
    def RewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyZoneExcel
    def StudentVisitProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AcademyZoneExcel
    def StudentVisitProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # AcademyZoneExcel
    def StudentVisitProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyZoneExcel
    def StudentVisitProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # AcademyZoneExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AcademyZoneExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # AcademyZoneExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyZoneExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def AcademyZoneExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return AcademyZoneExcelStart(builder)
def AcademyZoneExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return AcademyZoneExcelAddId(builder, id)
def AcademyZoneExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(1, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return AcademyZoneExcelAddLocalizeEtcId(builder, localizeEtcId)
def AcademyZoneExcelAddLocationId(builder, locationId): builder.PrependInt64Slot(2, locationId, 0)
def AddLocationId(builder, locationId):
    return AcademyZoneExcelAddLocationId(builder, locationId)
def AcademyZoneExcelAddLocationRankForUnlock(builder, locationRankForUnlock): builder.PrependInt64Slot(3, locationRankForUnlock, 0)
def AddLocationRankForUnlock(builder, locationRankForUnlock):
    return AcademyZoneExcelAddLocationRankForUnlock(builder, locationRankForUnlock)
def AcademyZoneExcelAddRewardGroupId(builder, rewardGroupId): builder.PrependInt64Slot(4, rewardGroupId, 0)
def AddRewardGroupId(builder, rewardGroupId):
    return AcademyZoneExcelAddRewardGroupId(builder, rewardGroupId)
def AcademyZoneExcelAddStudentVisitProb(builder, studentVisitProb): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(studentVisitProb), 0)
def AddStudentVisitProb(builder, studentVisitProb):
    return AcademyZoneExcelAddStudentVisitProb(builder, studentVisitProb)
def AcademyZoneExcelStartStudentVisitProbVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartStudentVisitProbVector(builder, numElems):
    return AcademyZoneExcelStartStudentVisitProbVector(builder, numElems)
def AcademyZoneExcelAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return AcademyZoneExcelAddTags(builder, tags)
def AcademyZoneExcelStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return AcademyZoneExcelStartTagsVector(builder, numElems)
def AcademyZoneExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AcademyZoneExcelEnd(builder)