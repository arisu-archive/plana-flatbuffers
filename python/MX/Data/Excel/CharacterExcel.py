# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterExcel
    def AimIkType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def AirUnitHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def AppearFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ArmorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def BodyRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def BulletType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CanBattleItemMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanCrowdControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanFix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanSurvive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CharacterAiId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterPieceItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterPieceItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Club(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CollectionVisibleEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CollectionVisibleStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CombatStyleIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CombineRecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CostumeGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DefaultStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def DisplayEnemyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def EmojiOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def EmojiOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def EquipmentSlot(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterExcel
    def EquipmentSlotAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterExcel
    def EquipmentSlotLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterExcel
    def EquipmentSlotIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # CharacterExcel
    def ExternalBtId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def FavorLevelupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def HighlightFloaterHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def HpBarHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def HpBarHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def IgnoreObstacle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsAirUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsDummy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsNpc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsPlayable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsPlayableCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def Jumpable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def JumpMotionFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MainCombatStyleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MaxStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MoveEndFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MoveStartFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def PersonalityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def RandomEffectRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ReleaseDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def ScenarioCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def School(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SecretStoneItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SecretStoneItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SpawnTemplateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SquadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def StatLevelUpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SubPartsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticEntityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        return o == 0

    # CharacterExcel
    def WeaponLocalizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def WeaponType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CharacterExcelStart(builder): builder.StartObject(65)
def Start(builder):
    return CharacterExcelStart(builder)
def CharacterExcelAddAimIkType(builder, aimIkType): builder.PrependInt32Slot(0, aimIkType, 0)
def AddAimIkType(builder, aimIkType):
    return CharacterExcelAddAimIkType(builder, aimIkType)
def CharacterExcelAddAirUnitHeight(builder, airUnitHeight): builder.PrependInt64Slot(1, airUnitHeight, 0)
def AddAirUnitHeight(builder, airUnitHeight):
    return CharacterExcelAddAirUnitHeight(builder, airUnitHeight)
def CharacterExcelAddAppearFrame(builder, appearFrame): builder.PrependInt32Slot(2, appearFrame, 0)
def AddAppearFrame(builder, appearFrame):
    return CharacterExcelAddAppearFrame(builder, appearFrame)
def CharacterExcelAddArmorType(builder, armorType): builder.PrependInt32Slot(3, armorType, 0)
def AddArmorType(builder, armorType):
    return CharacterExcelAddArmorType(builder, armorType)
def CharacterExcelAddBodyRadius(builder, bodyRadius): builder.PrependInt64Slot(4, bodyRadius, 0)
def AddBodyRadius(builder, bodyRadius):
    return CharacterExcelAddBodyRadius(builder, bodyRadius)
def CharacterExcelAddBulletType(builder, bulletType): builder.PrependInt32Slot(5, bulletType, 0)
def AddBulletType(builder, bulletType):
    return CharacterExcelAddBulletType(builder, bulletType)
def CharacterExcelAddCanBattleItemMove(builder, canBattleItemMove): builder.PrependBoolSlot(6, canBattleItemMove, 0)
def AddCanBattleItemMove(builder, canBattleItemMove):
    return CharacterExcelAddCanBattleItemMove(builder, canBattleItemMove)
def CharacterExcelAddCanCrowdControl(builder, canCrowdControl): builder.PrependBoolSlot(7, canCrowdControl, 0)
def AddCanCrowdControl(builder, canCrowdControl):
    return CharacterExcelAddCanCrowdControl(builder, canCrowdControl)
def CharacterExcelAddCanFix(builder, canFix): builder.PrependBoolSlot(8, canFix, 0)
def AddCanFix(builder, canFix):
    return CharacterExcelAddCanFix(builder, canFix)
def CharacterExcelAddCanMove(builder, canMove): builder.PrependBoolSlot(9, canMove, 0)
def AddCanMove(builder, canMove):
    return CharacterExcelAddCanMove(builder, canMove)
def CharacterExcelAddCanSurvive(builder, canSurvive): builder.PrependBoolSlot(10, canSurvive, 0)
def AddCanSurvive(builder, canSurvive):
    return CharacterExcelAddCanSurvive(builder, canSurvive)
def CharacterExcelAddCharacterAiId(builder, characterAiId): builder.PrependInt64Slot(11, characterAiId, 0)
def AddCharacterAiId(builder, characterAiId):
    return CharacterExcelAddCharacterAiId(builder, characterAiId)
def CharacterExcelAddCharacterPieceItemAmount(builder, characterPieceItemAmount): builder.PrependInt32Slot(12, characterPieceItemAmount, 0)
def AddCharacterPieceItemAmount(builder, characterPieceItemAmount):
    return CharacterExcelAddCharacterPieceItemAmount(builder, characterPieceItemAmount)
def CharacterExcelAddCharacterPieceItemId(builder, characterPieceItemId): builder.PrependInt64Slot(13, characterPieceItemId, 0)
def AddCharacterPieceItemId(builder, characterPieceItemId):
    return CharacterExcelAddCharacterPieceItemId(builder, characterPieceItemId)
def CharacterExcelAddClub(builder, club): builder.PrependInt32Slot(14, club, 0)
def AddClub(builder, club):
    return CharacterExcelAddClub(builder, club)
def CharacterExcelAddCollectionVisible(builder, collectionVisible): builder.PrependBoolSlot(15, collectionVisible, 0)
def AddCollectionVisible(builder, collectionVisible):
    return CharacterExcelAddCollectionVisible(builder, collectionVisible)
def CharacterExcelAddCollectionVisibleEndDate(builder, collectionVisibleEndDate): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(collectionVisibleEndDate), 0)
def AddCollectionVisibleEndDate(builder, collectionVisibleEndDate):
    return CharacterExcelAddCollectionVisibleEndDate(builder, collectionVisibleEndDate)
def CharacterExcelAddCollectionVisibleStartDate(builder, collectionVisibleStartDate): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(collectionVisibleStartDate), 0)
def AddCollectionVisibleStartDate(builder, collectionVisibleStartDate):
    return CharacterExcelAddCollectionVisibleStartDate(builder, collectionVisibleStartDate)
def CharacterExcelAddCombatStyleIndex(builder, combatStyleIndex): builder.PrependInt32Slot(18, combatStyleIndex, 0)
def AddCombatStyleIndex(builder, combatStyleIndex):
    return CharacterExcelAddCombatStyleIndex(builder, combatStyleIndex)
def CharacterExcelAddCombineRecipeId(builder, combineRecipeId): builder.PrependInt64Slot(19, combineRecipeId, 0)
def AddCombineRecipeId(builder, combineRecipeId):
    return CharacterExcelAddCombineRecipeId(builder, combineRecipeId)
def CharacterExcelAddCostumeGroupId(builder, costumeGroupId): builder.PrependInt64Slot(20, costumeGroupId, 0)
def AddCostumeGroupId(builder, costumeGroupId):
    return CharacterExcelAddCostumeGroupId(builder, costumeGroupId)
def CharacterExcelAddDefaultStarGrade(builder, defaultStarGrade): builder.PrependInt32Slot(21, defaultStarGrade, 0)
def AddDefaultStarGrade(builder, defaultStarGrade):
    return CharacterExcelAddDefaultStarGrade(builder, defaultStarGrade)
def CharacterExcelAddDevName(builder, devName): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(devName), 0)
def AddDevName(builder, devName):
    return CharacterExcelAddDevName(builder, devName)
def CharacterExcelAddDisplayEnemyInfo(builder, displayEnemyInfo): builder.PrependBoolSlot(23, displayEnemyInfo, 0)
def AddDisplayEnemyInfo(builder, displayEnemyInfo):
    return CharacterExcelAddDisplayEnemyInfo(builder, displayEnemyInfo)
def CharacterExcelAddEmojiOffsetX(builder, emojiOffsetX): builder.PrependFloat32Slot(24, emojiOffsetX, 0.0)
def AddEmojiOffsetX(builder, emojiOffsetX):
    return CharacterExcelAddEmojiOffsetX(builder, emojiOffsetX)
def CharacterExcelAddEmojiOffsetY(builder, emojiOffsetY): builder.PrependFloat32Slot(25, emojiOffsetY, 0.0)
def AddEmojiOffsetY(builder, emojiOffsetY):
    return CharacterExcelAddEmojiOffsetY(builder, emojiOffsetY)
def CharacterExcelAddEquipmentSlot(builder, equipmentSlot): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentSlot), 0)
def AddEquipmentSlot(builder, equipmentSlot):
    return CharacterExcelAddEquipmentSlot(builder, equipmentSlot)
def CharacterExcelStartEquipmentSlotVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEquipmentSlotVector(builder, numElems):
    return CharacterExcelStartEquipmentSlotVector(builder, numElems)
def CharacterExcelAddExternalBtId(builder, externalBtId): builder.PrependInt64Slot(27, externalBtId, 0)
def AddExternalBtId(builder, externalBtId):
    return CharacterExcelAddExternalBtId(builder, externalBtId)
def CharacterExcelAddFavorLevelupType(builder, favorLevelupType): builder.PrependInt32Slot(28, favorLevelupType, 0)
def AddFavorLevelupType(builder, favorLevelupType):
    return CharacterExcelAddFavorLevelupType(builder, favorLevelupType)
def CharacterExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight): builder.PrependFloat32Slot(29, highlightFloaterHeight, 0.0)
def AddHighlightFloaterHeight(builder, highlightFloaterHeight):
    return CharacterExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight)
def CharacterExcelAddHpBarHeight(builder, hpBarHeight): builder.PrependFloat32Slot(30, hpBarHeight, 0.0)
def AddHpBarHeight(builder, hpBarHeight):
    return CharacterExcelAddHpBarHeight(builder, hpBarHeight)
def CharacterExcelAddHpBarHide(builder, hpBarHide): builder.PrependBoolSlot(31, hpBarHide, 0)
def AddHpBarHide(builder, hpBarHide):
    return CharacterExcelAddHpBarHide(builder, hpBarHide)
def CharacterExcelAddId(builder, id): builder.PrependInt64Slot(32, id, 0)
def AddId(builder, id):
    return CharacterExcelAddId(builder, id)
def CharacterExcelAddIgnoreObstacle(builder, ignoreObstacle): builder.PrependBoolSlot(33, ignoreObstacle, 0)
def AddIgnoreObstacle(builder, ignoreObstacle):
    return CharacterExcelAddIgnoreObstacle(builder, ignoreObstacle)
def CharacterExcelAddIsAirUnit(builder, isAirUnit): builder.PrependBoolSlot(34, isAirUnit, 0)
def AddIsAirUnit(builder, isAirUnit):
    return CharacterExcelAddIsAirUnit(builder, isAirUnit)
def CharacterExcelAddIsDummy(builder, isDummy): builder.PrependBoolSlot(35, isDummy, 0)
def AddIsDummy(builder, isDummy):
    return CharacterExcelAddIsDummy(builder, isDummy)
def CharacterExcelAddIsNpc(builder, isNpc): builder.PrependBoolSlot(36, isNpc, 0)
def AddIsNpc(builder, isNpc):
    return CharacterExcelAddIsNpc(builder, isNpc)
def CharacterExcelAddIsPlayable(builder, isPlayable): builder.PrependBoolSlot(37, isPlayable, 0)
def AddIsPlayable(builder, isPlayable):
    return CharacterExcelAddIsPlayable(builder, isPlayable)
def CharacterExcelAddIsPlayableCharacter(builder, isPlayableCharacter): builder.PrependBoolSlot(38, isPlayableCharacter, 0)
def AddIsPlayableCharacter(builder, isPlayableCharacter):
    return CharacterExcelAddIsPlayableCharacter(builder, isPlayableCharacter)
def CharacterExcelAddJumpable(builder, jumpable): builder.PrependBoolSlot(39, jumpable, 0)
def AddJumpable(builder, jumpable):
    return CharacterExcelAddJumpable(builder, jumpable)
def CharacterExcelAddJumpMotionFrame(builder, jumpMotionFrame): builder.PrependInt32Slot(40, jumpMotionFrame, 0)
def AddJumpMotionFrame(builder, jumpMotionFrame):
    return CharacterExcelAddJumpMotionFrame(builder, jumpMotionFrame)
def CharacterExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(41, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return CharacterExcelAddLocalizeEtcId(builder, localizeEtcId)
def CharacterExcelAddMainCombatStyleId(builder, mainCombatStyleId): builder.PrependInt64Slot(42, mainCombatStyleId, 0)
def AddMainCombatStyleId(builder, mainCombatStyleId):
    return CharacterExcelAddMainCombatStyleId(builder, mainCombatStyleId)
def CharacterExcelAddMaxStarGrade(builder, maxStarGrade): builder.PrependInt32Slot(43, maxStarGrade, 0)
def AddMaxStarGrade(builder, maxStarGrade):
    return CharacterExcelAddMaxStarGrade(builder, maxStarGrade)
def CharacterExcelAddMoveEndFrame(builder, moveEndFrame): builder.PrependInt32Slot(44, moveEndFrame, 0)
def AddMoveEndFrame(builder, moveEndFrame):
    return CharacterExcelAddMoveEndFrame(builder, moveEndFrame)
def CharacterExcelAddMoveStartFrame(builder, moveStartFrame): builder.PrependInt32Slot(45, moveStartFrame, 0)
def AddMoveStartFrame(builder, moveStartFrame):
    return CharacterExcelAddMoveStartFrame(builder, moveStartFrame)
def CharacterExcelAddPersonalityId(builder, personalityId): builder.PrependInt64Slot(46, personalityId, 0)
def AddPersonalityId(builder, personalityId):
    return CharacterExcelAddPersonalityId(builder, personalityId)
def CharacterExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(47, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return CharacterExcelAddProductionStep(builder, productionStep)
def CharacterExcelAddRandomEffectRadius(builder, randomEffectRadius): builder.PrependInt64Slot(48, randomEffectRadius, 0)
def AddRandomEffectRadius(builder, randomEffectRadius):
    return CharacterExcelAddRandomEffectRadius(builder, randomEffectRadius)
def CharacterExcelAddRarity(builder, rarity): builder.PrependInt32Slot(49, rarity, 0)
def AddRarity(builder, rarity):
    return CharacterExcelAddRarity(builder, rarity)
def CharacterExcelAddReleaseDate(builder, releaseDate): builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(releaseDate), 0)
def AddReleaseDate(builder, releaseDate):
    return CharacterExcelAddReleaseDate(builder, releaseDate)
def CharacterExcelAddScenarioCharacter(builder, scenarioCharacter): builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioCharacter), 0)
def AddScenarioCharacter(builder, scenarioCharacter):
    return CharacterExcelAddScenarioCharacter(builder, scenarioCharacter)
def CharacterExcelAddSchool(builder, school): builder.PrependInt32Slot(52, school, 0)
def AddSchool(builder, school):
    return CharacterExcelAddSchool(builder, school)
def CharacterExcelAddSecretStoneItemAmount(builder, secretStoneItemAmount): builder.PrependInt32Slot(53, secretStoneItemAmount, 0)
def AddSecretStoneItemAmount(builder, secretStoneItemAmount):
    return CharacterExcelAddSecretStoneItemAmount(builder, secretStoneItemAmount)
def CharacterExcelAddSecretStoneItemId(builder, secretStoneItemId): builder.PrependInt64Slot(54, secretStoneItemId, 0)
def AddSecretStoneItemId(builder, secretStoneItemId):
    return CharacterExcelAddSecretStoneItemId(builder, secretStoneItemId)
def CharacterExcelAddSpawnTemplateId(builder, spawnTemplateId): builder.PrependUint32Slot(55, spawnTemplateId, 0)
def AddSpawnTemplateId(builder, spawnTemplateId):
    return CharacterExcelAddSpawnTemplateId(builder, spawnTemplateId)
def CharacterExcelAddSquadType(builder, squadType): builder.PrependInt32Slot(56, squadType, 0)
def AddSquadType(builder, squadType):
    return CharacterExcelAddSquadType(builder, squadType)
def CharacterExcelAddStatLevelUpType(builder, statLevelUpType): builder.PrependInt32Slot(57, statLevelUpType, 0)
def AddStatLevelUpType(builder, statLevelUpType):
    return CharacterExcelAddStatLevelUpType(builder, statLevelUpType)
def CharacterExcelAddSubPartsCount(builder, subPartsCount): builder.PrependInt32Slot(58, subPartsCount, 0)
def AddSubPartsCount(builder, subPartsCount):
    return CharacterExcelAddSubPartsCount(builder, subPartsCount)
def CharacterExcelAddTacticEntityType(builder, tacticEntityType): builder.PrependInt32Slot(59, tacticEntityType, 0)
def AddTacticEntityType(builder, tacticEntityType):
    return CharacterExcelAddTacticEntityType(builder, tacticEntityType)
def CharacterExcelAddTacticRange(builder, tacticRange): builder.PrependInt32Slot(60, tacticRange, 0)
def AddTacticRange(builder, tacticRange):
    return CharacterExcelAddTacticRange(builder, tacticRange)
def CharacterExcelAddTacticRole(builder, tacticRole): builder.PrependInt32Slot(61, tacticRole, 0)
def AddTacticRole(builder, tacticRole):
    return CharacterExcelAddTacticRole(builder, tacticRole)
def CharacterExcelAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return CharacterExcelAddTags(builder, tags)
def CharacterExcelStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return CharacterExcelStartTagsVector(builder, numElems)
def CharacterExcelAddWeaponLocalizeId(builder, weaponLocalizeId): builder.PrependUint32Slot(63, weaponLocalizeId, 0)
def AddWeaponLocalizeId(builder, weaponLocalizeId):
    return CharacterExcelAddWeaponLocalizeId(builder, weaponLocalizeId)
def CharacterExcelAddWeaponType(builder, weaponType): builder.PrependInt32Slot(64, weaponType, 0)
def AddWeaponType(builder, weaponType):
    return CharacterExcelAddWeaponType(builder, weaponType)
def CharacterExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterExcelEnd(builder)