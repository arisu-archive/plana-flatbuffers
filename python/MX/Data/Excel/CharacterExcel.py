# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CostumeGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def IsPlayable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def ReleaseDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CollectionVisibleStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CollectionVisibleEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def IsPlayableCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def IsNpc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def TacticEntityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CanSurvive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsDummy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def SubPartsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def WeaponType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def BulletType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ArmorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def AimIkType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def School(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Club(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DefaultStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MaxStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def StatLevelUpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SquadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Jumpable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def PersonalityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterAiId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ExternalBtId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MainCombatStyleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CombatStyleIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ScenarioCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def SpawnTemplateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def FavorLevelupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def EquipmentSlot(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterExcel
    def EquipmentSlotAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterExcel
    def EquipmentSlotLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterExcel
    def EquipmentSlotIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # CharacterExcel
    def WeaponLocalizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DisplayEnemyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def BodyRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def RandomEffectRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def HpBarHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def HpBarHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def HighlightFloaterHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def EmojiOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def EmojiOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def MoveStartFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MoveEndFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def JumpMotionFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def AppearFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CanMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanFix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanCrowdControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanBattleItemMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IgnoreObstacle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsAirUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def AirUnitHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        return o == 0

    # CharacterExcel
    def SecretStoneItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SecretStoneItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterPieceItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterPieceItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CombineRecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterExcelStart(builder):
    builder.StartObject(65)

def Start(builder):
    CharacterExcelStart(builder)

def CharacterExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    CharacterExcelAddId(builder, id)

def CharacterExcelAddDevName(builder, devName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(devName), 0)

def AddDevName(builder, devName):
    CharacterExcelAddDevName(builder, devName)

def CharacterExcelAddCostumeGroupId(builder, costumeGroupId):
    builder.PrependInt64Slot(2, costumeGroupId, 0)

def AddCostumeGroupId(builder, costumeGroupId):
    CharacterExcelAddCostumeGroupId(builder, costumeGroupId)

def CharacterExcelAddIsPlayable(builder, isPlayable):
    builder.PrependBoolSlot(3, isPlayable, 0)

def AddIsPlayable(builder, isPlayable):
    CharacterExcelAddIsPlayable(builder, isPlayable)

def CharacterExcelAddProductionStep(builder, productionStep):
    builder.PrependInt32Slot(4, productionStep, 0)

def AddProductionStep(builder, productionStep):
    CharacterExcelAddProductionStep(builder, productionStep)

def CharacterExcelAddCollectionVisible(builder, collectionVisible):
    builder.PrependBoolSlot(5, collectionVisible, 0)

def AddCollectionVisible(builder, collectionVisible):
    CharacterExcelAddCollectionVisible(builder, collectionVisible)

def CharacterExcelAddReleaseDate(builder, releaseDate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(releaseDate), 0)

def AddReleaseDate(builder, releaseDate):
    CharacterExcelAddReleaseDate(builder, releaseDate)

def CharacterExcelAddCollectionVisibleStartDate(builder, collectionVisibleStartDate):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(collectionVisibleStartDate), 0)

def AddCollectionVisibleStartDate(builder, collectionVisibleStartDate):
    CharacterExcelAddCollectionVisibleStartDate(builder, collectionVisibleStartDate)

def CharacterExcelAddCollectionVisibleEndDate(builder, collectionVisibleEndDate):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(collectionVisibleEndDate), 0)

def AddCollectionVisibleEndDate(builder, collectionVisibleEndDate):
    CharacterExcelAddCollectionVisibleEndDate(builder, collectionVisibleEndDate)

def CharacterExcelAddIsPlayableCharacter(builder, isPlayableCharacter):
    builder.PrependBoolSlot(9, isPlayableCharacter, 0)

def AddIsPlayableCharacter(builder, isPlayableCharacter):
    CharacterExcelAddIsPlayableCharacter(builder, isPlayableCharacter)

def CharacterExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(10, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    CharacterExcelAddLocalizeEtcId(builder, localizeEtcId)

def CharacterExcelAddRarity(builder, rarity):
    builder.PrependInt32Slot(11, rarity, 0)

def AddRarity(builder, rarity):
    CharacterExcelAddRarity(builder, rarity)

def CharacterExcelAddIsNpc(builder, isNpc):
    builder.PrependBoolSlot(12, isNpc, 0)

def AddIsNpc(builder, isNpc):
    CharacterExcelAddIsNpc(builder, isNpc)

def CharacterExcelAddTacticEntityType(builder, tacticEntityType):
    builder.PrependInt32Slot(13, tacticEntityType, 0)

def AddTacticEntityType(builder, tacticEntityType):
    CharacterExcelAddTacticEntityType(builder, tacticEntityType)

def CharacterExcelAddCanSurvive(builder, canSurvive):
    builder.PrependBoolSlot(14, canSurvive, 0)

def AddCanSurvive(builder, canSurvive):
    CharacterExcelAddCanSurvive(builder, canSurvive)

def CharacterExcelAddIsDummy(builder, isDummy):
    builder.PrependBoolSlot(15, isDummy, 0)

def AddIsDummy(builder, isDummy):
    CharacterExcelAddIsDummy(builder, isDummy)

def CharacterExcelAddSubPartsCount(builder, subPartsCount):
    builder.PrependInt32Slot(16, subPartsCount, 0)

def AddSubPartsCount(builder, subPartsCount):
    CharacterExcelAddSubPartsCount(builder, subPartsCount)

def CharacterExcelAddTacticRole(builder, tacticRole):
    builder.PrependInt32Slot(17, tacticRole, 0)

def AddTacticRole(builder, tacticRole):
    CharacterExcelAddTacticRole(builder, tacticRole)

def CharacterExcelAddWeaponType(builder, weaponType):
    builder.PrependInt32Slot(18, weaponType, 0)

def AddWeaponType(builder, weaponType):
    CharacterExcelAddWeaponType(builder, weaponType)

def CharacterExcelAddTacticRange(builder, tacticRange):
    builder.PrependInt32Slot(19, tacticRange, 0)

def AddTacticRange(builder, tacticRange):
    CharacterExcelAddTacticRange(builder, tacticRange)

def CharacterExcelAddBulletType(builder, bulletType):
    builder.PrependInt32Slot(20, bulletType, 0)

def AddBulletType(builder, bulletType):
    CharacterExcelAddBulletType(builder, bulletType)

def CharacterExcelAddArmorType(builder, armorType):
    builder.PrependInt32Slot(21, armorType, 0)

def AddArmorType(builder, armorType):
    CharacterExcelAddArmorType(builder, armorType)

def CharacterExcelAddAimIkType(builder, aimIkType):
    builder.PrependInt32Slot(22, aimIkType, 0)

def AddAimIkType(builder, aimIkType):
    CharacterExcelAddAimIkType(builder, aimIkType)

def CharacterExcelAddSchool(builder, school):
    builder.PrependInt32Slot(23, school, 0)

def AddSchool(builder, school):
    CharacterExcelAddSchool(builder, school)

def CharacterExcelAddClub(builder, club):
    builder.PrependInt32Slot(24, club, 0)

def AddClub(builder, club):
    CharacterExcelAddClub(builder, club)

def CharacterExcelAddDefaultStarGrade(builder, defaultStarGrade):
    builder.PrependInt32Slot(25, defaultStarGrade, 0)

def AddDefaultStarGrade(builder, defaultStarGrade):
    CharacterExcelAddDefaultStarGrade(builder, defaultStarGrade)

def CharacterExcelAddMaxStarGrade(builder, maxStarGrade):
    builder.PrependInt32Slot(26, maxStarGrade, 0)

def AddMaxStarGrade(builder, maxStarGrade):
    CharacterExcelAddMaxStarGrade(builder, maxStarGrade)

def CharacterExcelAddStatLevelUpType(builder, statLevelUpType):
    builder.PrependInt32Slot(27, statLevelUpType, 0)

def AddStatLevelUpType(builder, statLevelUpType):
    CharacterExcelAddStatLevelUpType(builder, statLevelUpType)

def CharacterExcelAddSquadType(builder, squadType):
    builder.PrependInt32Slot(28, squadType, 0)

def AddSquadType(builder, squadType):
    CharacterExcelAddSquadType(builder, squadType)

def CharacterExcelAddJumpable(builder, jumpable):
    builder.PrependBoolSlot(29, jumpable, 0)

def AddJumpable(builder, jumpable):
    CharacterExcelAddJumpable(builder, jumpable)

def CharacterExcelAddPersonalityId(builder, personalityId):
    builder.PrependInt64Slot(30, personalityId, 0)

def AddPersonalityId(builder, personalityId):
    CharacterExcelAddPersonalityId(builder, personalityId)

def CharacterExcelAddCharacterAiId(builder, characterAiId):
    builder.PrependInt64Slot(31, characterAiId, 0)

def AddCharacterAiId(builder, characterAiId):
    CharacterExcelAddCharacterAiId(builder, characterAiId)

def CharacterExcelAddExternalBtId(builder, externalBtId):
    builder.PrependInt64Slot(32, externalBtId, 0)

def AddExternalBtId(builder, externalBtId):
    CharacterExcelAddExternalBtId(builder, externalBtId)

def CharacterExcelAddMainCombatStyleId(builder, mainCombatStyleId):
    builder.PrependInt64Slot(33, mainCombatStyleId, 0)

def AddMainCombatStyleId(builder, mainCombatStyleId):
    CharacterExcelAddMainCombatStyleId(builder, mainCombatStyleId)

def CharacterExcelAddCombatStyleIndex(builder, combatStyleIndex):
    builder.PrependInt32Slot(34, combatStyleIndex, 0)

def AddCombatStyleIndex(builder, combatStyleIndex):
    CharacterExcelAddCombatStyleIndex(builder, combatStyleIndex)

def CharacterExcelAddScenarioCharacter(builder, scenarioCharacter):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioCharacter), 0)

def AddScenarioCharacter(builder, scenarioCharacter):
    CharacterExcelAddScenarioCharacter(builder, scenarioCharacter)

def CharacterExcelAddSpawnTemplateId(builder, spawnTemplateId):
    builder.PrependUint32Slot(36, spawnTemplateId, 0)

def AddSpawnTemplateId(builder, spawnTemplateId):
    CharacterExcelAddSpawnTemplateId(builder, spawnTemplateId)

def CharacterExcelAddFavorLevelupType(builder, favorLevelupType):
    builder.PrependInt32Slot(37, favorLevelupType, 0)

def AddFavorLevelupType(builder, favorLevelupType):
    CharacterExcelAddFavorLevelupType(builder, favorLevelupType)

def CharacterExcelAddEquipmentSlot(builder, equipmentSlot):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentSlot), 0)

def AddEquipmentSlot(builder, equipmentSlot):
    CharacterExcelAddEquipmentSlot(builder, equipmentSlot)

def CharacterExcelStartEquipmentSlotVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEquipmentSlotVector(builder, numElems):
    return CharacterExcelStartEquipmentSlotVector(builder, numElems)

def CharacterExcelAddWeaponLocalizeId(builder, weaponLocalizeId):
    builder.PrependUint32Slot(39, weaponLocalizeId, 0)

def AddWeaponLocalizeId(builder, weaponLocalizeId):
    CharacterExcelAddWeaponLocalizeId(builder, weaponLocalizeId)

def CharacterExcelAddDisplayEnemyInfo(builder, displayEnemyInfo):
    builder.PrependBoolSlot(40, displayEnemyInfo, 0)

def AddDisplayEnemyInfo(builder, displayEnemyInfo):
    CharacterExcelAddDisplayEnemyInfo(builder, displayEnemyInfo)

def CharacterExcelAddBodyRadius(builder, bodyRadius):
    builder.PrependInt64Slot(41, bodyRadius, 0)

def AddBodyRadius(builder, bodyRadius):
    CharacterExcelAddBodyRadius(builder, bodyRadius)

def CharacterExcelAddRandomEffectRadius(builder, randomEffectRadius):
    builder.PrependInt64Slot(42, randomEffectRadius, 0)

def AddRandomEffectRadius(builder, randomEffectRadius):
    CharacterExcelAddRandomEffectRadius(builder, randomEffectRadius)

def CharacterExcelAddHpBarHide(builder, hpBarHide):
    builder.PrependBoolSlot(43, hpBarHide, 0)

def AddHpBarHide(builder, hpBarHide):
    CharacterExcelAddHpBarHide(builder, hpBarHide)

def CharacterExcelAddHpBarHeight(builder, hpBarHeight):
    builder.PrependFloat32Slot(44, hpBarHeight, 0.0)

def AddHpBarHeight(builder, hpBarHeight):
    CharacterExcelAddHpBarHeight(builder, hpBarHeight)

def CharacterExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight):
    builder.PrependFloat32Slot(45, highlightFloaterHeight, 0.0)

def AddHighlightFloaterHeight(builder, highlightFloaterHeight):
    CharacterExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight)

def CharacterExcelAddEmojiOffsetX(builder, emojiOffsetX):
    builder.PrependFloat32Slot(46, emojiOffsetX, 0.0)

def AddEmojiOffsetX(builder, emojiOffsetX):
    CharacterExcelAddEmojiOffsetX(builder, emojiOffsetX)

def CharacterExcelAddEmojiOffsetY(builder, emojiOffsetY):
    builder.PrependFloat32Slot(47, emojiOffsetY, 0.0)

def AddEmojiOffsetY(builder, emojiOffsetY):
    CharacterExcelAddEmojiOffsetY(builder, emojiOffsetY)

def CharacterExcelAddMoveStartFrame(builder, moveStartFrame):
    builder.PrependInt32Slot(48, moveStartFrame, 0)

def AddMoveStartFrame(builder, moveStartFrame):
    CharacterExcelAddMoveStartFrame(builder, moveStartFrame)

def CharacterExcelAddMoveEndFrame(builder, moveEndFrame):
    builder.PrependInt32Slot(49, moveEndFrame, 0)

def AddMoveEndFrame(builder, moveEndFrame):
    CharacterExcelAddMoveEndFrame(builder, moveEndFrame)

def CharacterExcelAddJumpMotionFrame(builder, jumpMotionFrame):
    builder.PrependInt32Slot(50, jumpMotionFrame, 0)

def AddJumpMotionFrame(builder, jumpMotionFrame):
    CharacterExcelAddJumpMotionFrame(builder, jumpMotionFrame)

def CharacterExcelAddAppearFrame(builder, appearFrame):
    builder.PrependInt32Slot(51, appearFrame, 0)

def AddAppearFrame(builder, appearFrame):
    CharacterExcelAddAppearFrame(builder, appearFrame)

def CharacterExcelAddCanMove(builder, canMove):
    builder.PrependBoolSlot(52, canMove, 0)

def AddCanMove(builder, canMove):
    CharacterExcelAddCanMove(builder, canMove)

def CharacterExcelAddCanFix(builder, canFix):
    builder.PrependBoolSlot(53, canFix, 0)

def AddCanFix(builder, canFix):
    CharacterExcelAddCanFix(builder, canFix)

def CharacterExcelAddCanCrowdControl(builder, canCrowdControl):
    builder.PrependBoolSlot(54, canCrowdControl, 0)

def AddCanCrowdControl(builder, canCrowdControl):
    CharacterExcelAddCanCrowdControl(builder, canCrowdControl)

def CharacterExcelAddCanBattleItemMove(builder, canBattleItemMove):
    builder.PrependBoolSlot(55, canBattleItemMove, 0)

def AddCanBattleItemMove(builder, canBattleItemMove):
    CharacterExcelAddCanBattleItemMove(builder, canBattleItemMove)

def CharacterExcelAddIgnoreObstacle(builder, ignoreObstacle):
    builder.PrependBoolSlot(56, ignoreObstacle, 0)

def AddIgnoreObstacle(builder, ignoreObstacle):
    CharacterExcelAddIgnoreObstacle(builder, ignoreObstacle)

def CharacterExcelAddIsAirUnit(builder, isAirUnit):
    builder.PrependBoolSlot(57, isAirUnit, 0)

def AddIsAirUnit(builder, isAirUnit):
    CharacterExcelAddIsAirUnit(builder, isAirUnit)

def CharacterExcelAddAirUnitHeight(builder, airUnitHeight):
    builder.PrependInt64Slot(58, airUnitHeight, 0)

def AddAirUnitHeight(builder, airUnitHeight):
    CharacterExcelAddAirUnitHeight(builder, airUnitHeight)

def CharacterExcelAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    CharacterExcelAddTags(builder, tags)

def CharacterExcelStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return CharacterExcelStartTagsVector(builder, numElems)

def CharacterExcelAddSecretStoneItemId(builder, secretStoneItemId):
    builder.PrependInt64Slot(60, secretStoneItemId, 0)

def AddSecretStoneItemId(builder, secretStoneItemId):
    CharacterExcelAddSecretStoneItemId(builder, secretStoneItemId)

def CharacterExcelAddSecretStoneItemAmount(builder, secretStoneItemAmount):
    builder.PrependInt32Slot(61, secretStoneItemAmount, 0)

def AddSecretStoneItemAmount(builder, secretStoneItemAmount):
    CharacterExcelAddSecretStoneItemAmount(builder, secretStoneItemAmount)

def CharacterExcelAddCharacterPieceItemId(builder, characterPieceItemId):
    builder.PrependInt64Slot(62, characterPieceItemId, 0)

def AddCharacterPieceItemId(builder, characterPieceItemId):
    CharacterExcelAddCharacterPieceItemId(builder, characterPieceItemId)

def CharacterExcelAddCharacterPieceItemAmount(builder, characterPieceItemAmount):
    builder.PrependInt32Slot(63, characterPieceItemAmount, 0)

def AddCharacterPieceItemAmount(builder, characterPieceItemAmount):
    CharacterExcelAddCharacterPieceItemAmount(builder, characterPieceItemAmount)

def CharacterExcelAddCombineRecipeId(builder, combineRecipeId):
    builder.PrependInt64Slot(64, combineRecipeId, 0)

def AddCombineRecipeId(builder, combineRecipeId):
    CharacterExcelAddCombineRecipeId(builder, combineRecipeId)

def CharacterExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return CharacterExcelEnd(builder)
