# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AssistEchelonTypeConvertExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AssistEchelonTypeConvertExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAssistEchelonTypeConvertExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AssistEchelonTypeConvertExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AssistEchelonTypeConvertExcel
    def Contents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AssistEchelonTypeConvertExcel
    def ConvertTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AssistEchelonTypeConvertExcelStart(builder): builder.StartObject(2)
def Start(builder):
    return AssistEchelonTypeConvertExcelStart(builder)
def AssistEchelonTypeConvertExcelAddContents(builder, contents): builder.PrependInt32Slot(0, contents, 0)
def AddContents(builder, contents):
    return AssistEchelonTypeConvertExcelAddContents(builder, contents)
def AssistEchelonTypeConvertExcelAddConvertTo(builder, convertTo): builder.PrependInt32Slot(1, convertTo, 0)
def AddConvertTo(builder, convertTo):
    return AssistEchelonTypeConvertExcelAddConvertTo(builder, convertTo)
def AssistEchelonTypeConvertExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AssistEchelonTypeConvertExcelEnd(builder)