# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FurnitureExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FurnitureExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFurnitureExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FurnitureExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FurnitureExcel
    def CafeCharacterStateAdd(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateAddLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateAddIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FurnitureExcel
    def CafeCharacterStateMake(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateMakeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateMakeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FurnitureExcel
    def CafeCharacterStateOnly(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateOnlyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateOnlyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FurnitureExcel
    def CafeCharacterStateReq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateReqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateReqIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FurnitureExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CheckFloorDecoration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FurnitureExcel
    def ComfortBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CornerPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def CraftQualityTier0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CraftQualityTier1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CraftQualityTier2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Enable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FurnitureExcel
    def EventCollectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ExpandWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureBubbleOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureBubbleOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureFunctionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FurnitureExcel
    def FurnitureFunctionParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FurnitureExcel
    def FurnitureFunctionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def FurnitureFunctionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # FurnitureExcel
    def FurnitureFunctionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def HideCraftShortcut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FurnitureExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def OtherSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Prefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def PrefabExpand(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def RecipeCraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ReverseRotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FurnitureExcel
    def SetGroudpId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ShiftingCraftQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SizeHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SizeWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def StackableMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def StarGradeInit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SubCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SubExpandPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def SubPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FurnitureExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FurnitureExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # FurnitureExcel
    def Tier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def VideoId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def VisitBonusOperationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def VisitOperationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FurnitureExcelStart(builder): builder.StartObject(43)
def Start(builder):
    return FurnitureExcelStart(builder)
def FurnitureExcelAddCafeCharacterStateAdd(builder, cafeCharacterStateAdd): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cafeCharacterStateAdd), 0)
def AddCafeCharacterStateAdd(builder, cafeCharacterStateAdd):
    return FurnitureExcelAddCafeCharacterStateAdd(builder, cafeCharacterStateAdd)
def FurnitureExcelStartCafeCharacterStateAddVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCafeCharacterStateAddVector(builder, numElems):
    return FurnitureExcelStartCafeCharacterStateAddVector(builder, numElems)
def FurnitureExcelAddCafeCharacterStateMake(builder, cafeCharacterStateMake): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cafeCharacterStateMake), 0)
def AddCafeCharacterStateMake(builder, cafeCharacterStateMake):
    return FurnitureExcelAddCafeCharacterStateMake(builder, cafeCharacterStateMake)
def FurnitureExcelStartCafeCharacterStateMakeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCafeCharacterStateMakeVector(builder, numElems):
    return FurnitureExcelStartCafeCharacterStateMakeVector(builder, numElems)
def FurnitureExcelAddCafeCharacterStateOnly(builder, cafeCharacterStateOnly): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cafeCharacterStateOnly), 0)
def AddCafeCharacterStateOnly(builder, cafeCharacterStateOnly):
    return FurnitureExcelAddCafeCharacterStateOnly(builder, cafeCharacterStateOnly)
def FurnitureExcelStartCafeCharacterStateOnlyVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCafeCharacterStateOnlyVector(builder, numElems):
    return FurnitureExcelStartCafeCharacterStateOnlyVector(builder, numElems)
def FurnitureExcelAddCafeCharacterStateReq(builder, cafeCharacterStateReq): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cafeCharacterStateReq), 0)
def AddCafeCharacterStateReq(builder, cafeCharacterStateReq):
    return FurnitureExcelAddCafeCharacterStateReq(builder, cafeCharacterStateReq)
def FurnitureExcelStartCafeCharacterStateReqVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCafeCharacterStateReqVector(builder, numElems):
    return FurnitureExcelStartCafeCharacterStateReqVector(builder, numElems)
def FurnitureExcelAddCategory(builder, category): builder.PrependInt32Slot(4, category, 0)
def AddCategory(builder, category):
    return FurnitureExcelAddCategory(builder, category)
def FurnitureExcelAddCheckFloorDecoration(builder, checkFloorDecoration): builder.PrependBoolSlot(5, checkFloorDecoration, 0)
def AddCheckFloorDecoration(builder, checkFloorDecoration):
    return FurnitureExcelAddCheckFloorDecoration(builder, checkFloorDecoration)
def FurnitureExcelAddComfortBonus(builder, comfortBonus): builder.PrependInt64Slot(6, comfortBonus, 0)
def AddComfortBonus(builder, comfortBonus):
    return FurnitureExcelAddComfortBonus(builder, comfortBonus)
def FurnitureExcelAddCornerPrefab(builder, cornerPrefab): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cornerPrefab), 0)
def AddCornerPrefab(builder, cornerPrefab):
    return FurnitureExcelAddCornerPrefab(builder, cornerPrefab)
def FurnitureExcelAddCraftQualityTier0(builder, craftQualityTier0): builder.PrependInt64Slot(8, craftQualityTier0, 0)
def AddCraftQualityTier0(builder, craftQualityTier0):
    return FurnitureExcelAddCraftQualityTier0(builder, craftQualityTier0)
def FurnitureExcelAddCraftQualityTier1(builder, craftQualityTier1): builder.PrependInt64Slot(9, craftQualityTier1, 0)
def AddCraftQualityTier1(builder, craftQualityTier1):
    return FurnitureExcelAddCraftQualityTier1(builder, craftQualityTier1)
def FurnitureExcelAddCraftQualityTier2(builder, craftQualityTier2): builder.PrependInt64Slot(10, craftQualityTier2, 0)
def AddCraftQualityTier2(builder, craftQualityTier2):
    return FurnitureExcelAddCraftQualityTier2(builder, craftQualityTier2)
def FurnitureExcelAddEnable(builder, enable): builder.PrependBoolSlot(11, enable, 0)
def AddEnable(builder, enable):
    return FurnitureExcelAddEnable(builder, enable)
def FurnitureExcelAddEventCollectionId(builder, eventCollectionId): builder.PrependInt64Slot(12, eventCollectionId, 0)
def AddEventCollectionId(builder, eventCollectionId):
    return FurnitureExcelAddEventCollectionId(builder, eventCollectionId)
def FurnitureExcelAddExpandWidth(builder, expandWidth): builder.PrependInt32Slot(13, expandWidth, 0)
def AddExpandWidth(builder, expandWidth):
    return FurnitureExcelAddExpandWidth(builder, expandWidth)
def FurnitureExcelAddFurnitureBubbleOffsetX(builder, furnitureBubbleOffsetX): builder.PrependInt64Slot(14, furnitureBubbleOffsetX, 0)
def AddFurnitureBubbleOffsetX(builder, furnitureBubbleOffsetX):
    return FurnitureExcelAddFurnitureBubbleOffsetX(builder, furnitureBubbleOffsetX)
def FurnitureExcelAddFurnitureBubbleOffsetY(builder, furnitureBubbleOffsetY): builder.PrependInt64Slot(15, furnitureBubbleOffsetY, 0)
def AddFurnitureBubbleOffsetY(builder, furnitureBubbleOffsetY):
    return FurnitureExcelAddFurnitureBubbleOffsetY(builder, furnitureBubbleOffsetY)
def FurnitureExcelAddFurnitureFunctionParameter(builder, furnitureFunctionParameter): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureFunctionParameter), 0)
def AddFurnitureFunctionParameter(builder, furnitureFunctionParameter):
    return FurnitureExcelAddFurnitureFunctionParameter(builder, furnitureFunctionParameter)
def FurnitureExcelStartFurnitureFunctionParameterVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartFurnitureFunctionParameterVector(builder, numElems):
    return FurnitureExcelStartFurnitureFunctionParameterVector(builder, numElems)
def FurnitureExcelAddFurnitureFunctionType(builder, furnitureFunctionType): builder.PrependInt32Slot(17, furnitureFunctionType, 0)
def AddFurnitureFunctionType(builder, furnitureFunctionType):
    return FurnitureExcelAddFurnitureFunctionType(builder, furnitureFunctionType)
def FurnitureExcelAddHideCraftShortcut(builder, hideCraftShortcut): builder.PrependBoolSlot(18, hideCraftShortcut, 0)
def AddHideCraftShortcut(builder, hideCraftShortcut):
    return FurnitureExcelAddHideCraftShortcut(builder, hideCraftShortcut)
def FurnitureExcelAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return FurnitureExcelAddIcon(builder, icon)
def FurnitureExcelAddId(builder, id): builder.PrependInt64Slot(20, id, 0)
def AddId(builder, id):
    return FurnitureExcelAddId(builder, id)
def FurnitureExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(21, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return FurnitureExcelAddLocalizeEtcId(builder, localizeEtcId)
def FurnitureExcelAddOtherSize(builder, otherSize): builder.PrependInt32Slot(22, otherSize, 0)
def AddOtherSize(builder, otherSize):
    return FurnitureExcelAddOtherSize(builder, otherSize)
def FurnitureExcelAddPrefab(builder, prefab): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(prefab), 0)
def AddPrefab(builder, prefab):
    return FurnitureExcelAddPrefab(builder, prefab)
def FurnitureExcelAddPrefabExpand(builder, prefabExpand): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(prefabExpand), 0)
def AddPrefabExpand(builder, prefabExpand):
    return FurnitureExcelAddPrefabExpand(builder, prefabExpand)
def FurnitureExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(25, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return FurnitureExcelAddProductionStep(builder, productionStep)
def FurnitureExcelAddRarity(builder, rarity): builder.PrependInt32Slot(26, rarity, 0)
def AddRarity(builder, rarity):
    return FurnitureExcelAddRarity(builder, rarity)
def FurnitureExcelAddRecipeCraftId(builder, recipeCraftId): builder.PrependInt64Slot(27, recipeCraftId, 0)
def AddRecipeCraftId(builder, recipeCraftId):
    return FurnitureExcelAddRecipeCraftId(builder, recipeCraftId)
def FurnitureExcelAddReverseRotation(builder, reverseRotation): builder.PrependBoolSlot(28, reverseRotation, 0)
def AddReverseRotation(builder, reverseRotation):
    return FurnitureExcelAddReverseRotation(builder, reverseRotation)
def FurnitureExcelAddSetGroudpId(builder, setGroudpId): builder.PrependInt64Slot(29, setGroudpId, 0)
def AddSetGroudpId(builder, setGroudpId):
    return FurnitureExcelAddSetGroudpId(builder, setGroudpId)
def FurnitureExcelAddShiftingCraftQuality(builder, shiftingCraftQuality): builder.PrependInt64Slot(30, shiftingCraftQuality, 0)
def AddShiftingCraftQuality(builder, shiftingCraftQuality):
    return FurnitureExcelAddShiftingCraftQuality(builder, shiftingCraftQuality)
def FurnitureExcelAddSizeHeight(builder, sizeHeight): builder.PrependInt32Slot(31, sizeHeight, 0)
def AddSizeHeight(builder, sizeHeight):
    return FurnitureExcelAddSizeHeight(builder, sizeHeight)
def FurnitureExcelAddSizeWidth(builder, sizeWidth): builder.PrependInt32Slot(32, sizeWidth, 0)
def AddSizeWidth(builder, sizeWidth):
    return FurnitureExcelAddSizeWidth(builder, sizeWidth)
def FurnitureExcelAddStackableMax(builder, stackableMax): builder.PrependInt64Slot(33, stackableMax, 0)
def AddStackableMax(builder, stackableMax):
    return FurnitureExcelAddStackableMax(builder, stackableMax)
def FurnitureExcelAddStarGradeInit(builder, starGradeInit): builder.PrependInt32Slot(34, starGradeInit, 0)
def AddStarGradeInit(builder, starGradeInit):
    return FurnitureExcelAddStarGradeInit(builder, starGradeInit)
def FurnitureExcelAddSubCategory(builder, subCategory): builder.PrependInt32Slot(35, subCategory, 0)
def AddSubCategory(builder, subCategory):
    return FurnitureExcelAddSubCategory(builder, subCategory)
def FurnitureExcelAddSubExpandPrefab(builder, subExpandPrefab): builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(subExpandPrefab), 0)
def AddSubExpandPrefab(builder, subExpandPrefab):
    return FurnitureExcelAddSubExpandPrefab(builder, subExpandPrefab)
def FurnitureExcelAddSubPrefab(builder, subPrefab): builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(subPrefab), 0)
def AddSubPrefab(builder, subPrefab):
    return FurnitureExcelAddSubPrefab(builder, subPrefab)
def FurnitureExcelAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return FurnitureExcelAddTags(builder, tags)
def FurnitureExcelStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return FurnitureExcelStartTagsVector(builder, numElems)
def FurnitureExcelAddTier(builder, tier): builder.PrependInt64Slot(39, tier, 0)
def AddTier(builder, tier):
    return FurnitureExcelAddTier(builder, tier)
def FurnitureExcelAddVideoId(builder, videoId): builder.PrependInt64Slot(40, videoId, 0)
def AddVideoId(builder, videoId):
    return FurnitureExcelAddVideoId(builder, videoId)
def FurnitureExcelAddVisitBonusOperationType(builder, visitBonusOperationType): builder.PrependInt64Slot(41, visitBonusOperationType, 0)
def AddVisitBonusOperationType(builder, visitBonusOperationType):
    return FurnitureExcelAddVisitBonusOperationType(builder, visitBonusOperationType)
def FurnitureExcelAddVisitOperationType(builder, visitOperationType): builder.PrependInt64Slot(42, visitOperationType, 0)
def AddVisitOperationType(builder, visitOperationType):
    return FurnitureExcelAddVisitOperationType(builder, visitOperationType)
def FurnitureExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FurnitureExcelEnd(builder)