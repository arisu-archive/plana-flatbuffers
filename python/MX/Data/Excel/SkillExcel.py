# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SkillExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SkillExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSkillExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SkillExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SkillExcel
    def SkillCardLabelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def TextureSkillCardForFormConversion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def SelectExSkillToolTipId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def AdditionalToolTipId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def PublicSpeechDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def IsShowSpeechbubble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SkillExcel
    def IsShowInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SkillExcel
    def IconName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def RequireLevelUpMaterial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def RequireCharacterLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def UseAtg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def NpcCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def NpcStartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemyCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemyStartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def CoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def StartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def BulletType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def ExtraNpcSkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def NpcSkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def ExtraEnemySkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemySkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def ExtraSkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def SkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def VisualDataKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def SkillDataKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def LocalizeSkillId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def SkillExcelStart(builder): builder.StartObject(30)
def Start(builder):
    return SkillExcelStart(builder)
def SkillExcelAddSkillCardLabelPath(builder, skillCardLabelPath): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(skillCardLabelPath), 0)
def AddSkillCardLabelPath(builder, skillCardLabelPath):
    return SkillExcelAddSkillCardLabelPath(builder, skillCardLabelPath)
def SkillExcelAddTextureSkillCardForFormConversion(builder, textureSkillCardForFormConversion): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(textureSkillCardForFormConversion), 0)
def AddTextureSkillCardForFormConversion(builder, textureSkillCardForFormConversion):
    return SkillExcelAddTextureSkillCardForFormConversion(builder, textureSkillCardForFormConversion)
def SkillExcelAddSelectExSkillToolTipId(builder, selectExSkillToolTipId): builder.PrependInt64Slot(2, selectExSkillToolTipId, 0)
def AddSelectExSkillToolTipId(builder, selectExSkillToolTipId):
    return SkillExcelAddSelectExSkillToolTipId(builder, selectExSkillToolTipId)
def SkillExcelAddAdditionalToolTipId(builder, additionalToolTipId): builder.PrependInt64Slot(3, additionalToolTipId, 0)
def AddAdditionalToolTipId(builder, additionalToolTipId):
    return SkillExcelAddAdditionalToolTipId(builder, additionalToolTipId)
def SkillExcelAddPublicSpeechDuration(builder, publicSpeechDuration): builder.PrependInt32Slot(4, publicSpeechDuration, 0)
def AddPublicSpeechDuration(builder, publicSpeechDuration):
    return SkillExcelAddPublicSpeechDuration(builder, publicSpeechDuration)
def SkillExcelAddIsShowSpeechbubble(builder, isShowSpeechbubble): builder.PrependBoolSlot(5, isShowSpeechbubble, 0)
def AddIsShowSpeechbubble(builder, isShowSpeechbubble):
    return SkillExcelAddIsShowSpeechbubble(builder, isShowSpeechbubble)
def SkillExcelAddIsShowInfo(builder, isShowInfo): builder.PrependBoolSlot(6, isShowInfo, 0)
def AddIsShowInfo(builder, isShowInfo):
    return SkillExcelAddIsShowInfo(builder, isShowInfo)
def SkillExcelAddIconName(builder, iconName): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(iconName), 0)
def AddIconName(builder, iconName):
    return SkillExcelAddIconName(builder, iconName)
def SkillExcelAddRequireLevelUpMaterial(builder, requireLevelUpMaterial): builder.PrependInt64Slot(8, requireLevelUpMaterial, 0)
def AddRequireLevelUpMaterial(builder, requireLevelUpMaterial):
    return SkillExcelAddRequireLevelUpMaterial(builder, requireLevelUpMaterial)
def SkillExcelAddRequireCharacterLevel(builder, requireCharacterLevel): builder.PrependInt32Slot(9, requireCharacterLevel, 0)
def AddRequireCharacterLevel(builder, requireCharacterLevel):
    return SkillExcelAddRequireCharacterLevel(builder, requireCharacterLevel)
def SkillExcelAddUseAtg(builder, useAtg): builder.PrependInt32Slot(10, useAtg, 0)
def AddUseAtg(builder, useAtg):
    return SkillExcelAddUseAtg(builder, useAtg)
def SkillExcelAddNpcCoolTime(builder, npcCoolTime): builder.PrependInt32Slot(11, npcCoolTime, 0)
def AddNpcCoolTime(builder, npcCoolTime):
    return SkillExcelAddNpcCoolTime(builder, npcCoolTime)
def SkillExcelAddNpcStartCoolTime(builder, npcStartCoolTime): builder.PrependInt32Slot(12, npcStartCoolTime, 0)
def AddNpcStartCoolTime(builder, npcStartCoolTime):
    return SkillExcelAddNpcStartCoolTime(builder, npcStartCoolTime)
def SkillExcelAddEnemyCoolTime(builder, enemyCoolTime): builder.PrependInt32Slot(13, enemyCoolTime, 0)
def AddEnemyCoolTime(builder, enemyCoolTime):
    return SkillExcelAddEnemyCoolTime(builder, enemyCoolTime)
def SkillExcelAddEnemyStartCoolTime(builder, enemyStartCoolTime): builder.PrependInt32Slot(14, enemyStartCoolTime, 0)
def AddEnemyStartCoolTime(builder, enemyStartCoolTime):
    return SkillExcelAddEnemyStartCoolTime(builder, enemyStartCoolTime)
def SkillExcelAddCoolTime(builder, coolTime): builder.PrependInt32Slot(15, coolTime, 0)
def AddCoolTime(builder, coolTime):
    return SkillExcelAddCoolTime(builder, coolTime)
def SkillExcelAddStartCoolTime(builder, startCoolTime): builder.PrependInt32Slot(16, startCoolTime, 0)
def AddStartCoolTime(builder, startCoolTime):
    return SkillExcelAddStartCoolTime(builder, startCoolTime)
def SkillExcelAddBulletType(builder, bulletType): builder.PrependInt32Slot(17, bulletType, 0)
def AddBulletType(builder, bulletType):
    return SkillExcelAddBulletType(builder, bulletType)
def SkillExcelAddExtraNpcSkillCost(builder, extraNpcSkillCost): builder.PrependInt32Slot(18, extraNpcSkillCost, 0)
def AddExtraNpcSkillCost(builder, extraNpcSkillCost):
    return SkillExcelAddExtraNpcSkillCost(builder, extraNpcSkillCost)
def SkillExcelAddNpcSkillCost(builder, npcSkillCost): builder.PrependInt32Slot(19, npcSkillCost, 0)
def AddNpcSkillCost(builder, npcSkillCost):
    return SkillExcelAddNpcSkillCost(builder, npcSkillCost)
def SkillExcelAddExtraEnemySkillCost(builder, extraEnemySkillCost): builder.PrependInt32Slot(20, extraEnemySkillCost, 0)
def AddExtraEnemySkillCost(builder, extraEnemySkillCost):
    return SkillExcelAddExtraEnemySkillCost(builder, extraEnemySkillCost)
def SkillExcelAddEnemySkillCost(builder, enemySkillCost): builder.PrependInt32Slot(21, enemySkillCost, 0)
def AddEnemySkillCost(builder, enemySkillCost):
    return SkillExcelAddEnemySkillCost(builder, enemySkillCost)
def SkillExcelAddExtraSkillCost(builder, extraSkillCost): builder.PrependInt32Slot(22, extraSkillCost, 0)
def AddExtraSkillCost(builder, extraSkillCost):
    return SkillExcelAddExtraSkillCost(builder, extraSkillCost)
def SkillExcelAddSkillCost(builder, skillCost): builder.PrependInt32Slot(23, skillCost, 0)
def AddSkillCost(builder, skillCost):
    return SkillExcelAddSkillCost(builder, skillCost)
def SkillExcelAddLevel(builder, level): builder.PrependInt32Slot(24, level, 0)
def AddLevel(builder, level):
    return SkillExcelAddLevel(builder, level)
def SkillExcelAddVisualDataKey(builder, visualDataKey): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(visualDataKey), 0)
def AddVisualDataKey(builder, visualDataKey):
    return SkillExcelAddVisualDataKey(builder, visualDataKey)
def SkillExcelAddSkillDataKey(builder, skillDataKey): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(skillDataKey), 0)
def AddSkillDataKey(builder, skillDataKey):
    return SkillExcelAddSkillDataKey(builder, skillDataKey)
def SkillExcelAddGroupId(builder, groupId): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)
def AddGroupId(builder, groupId):
    return SkillExcelAddGroupId(builder, groupId)
def SkillExcelAddLocalizeSkillId(builder, localizeSkillId): builder.PrependUint32Slot(28, localizeSkillId, 0)
def AddLocalizeSkillId(builder, localizeSkillId):
    return SkillExcelAddLocalizeSkillId(builder, localizeSkillId)
def SkillExcelAddId(builder, id): builder.PrependInt64Slot(29, id, 0)
def AddId(builder, id):
    return SkillExcelAddId(builder, id)
def SkillExcelEnd(builder): return builder.EndObject()
def End(builder):
    return SkillExcelEnd(builder)