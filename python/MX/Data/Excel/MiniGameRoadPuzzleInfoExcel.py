# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameRoadPuzzleInfoExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameRoadPuzzleInfoExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameRoadPuzzleInfoExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameRoadPuzzleInfoExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameRoadPuzzleInfoExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRoadPuzzleInfoExcel
    def EventUseCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameRoadPuzzleInfoExcel
    def EventUseCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRoadPuzzleInfoExcel
    def CostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRoadPuzzleInfoExcel
    def RailSetRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRoadPuzzleInfoExcel
    def InstantClearRound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MiniGameRoadPuzzleInfoExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return MiniGameRoadPuzzleInfoExcelStart(builder)
def MiniGameRoadPuzzleInfoExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameRoadPuzzleInfoExcelAddEventContentId(builder, eventContentId)
def MiniGameRoadPuzzleInfoExcelAddEventUseCostType(builder, eventUseCostType): builder.PrependInt32Slot(1, eventUseCostType, 0)
def AddEventUseCostType(builder, eventUseCostType):
    return MiniGameRoadPuzzleInfoExcelAddEventUseCostType(builder, eventUseCostType)
def MiniGameRoadPuzzleInfoExcelAddEventUseCostId(builder, eventUseCostId): builder.PrependInt64Slot(2, eventUseCostId, 0)
def AddEventUseCostId(builder, eventUseCostId):
    return MiniGameRoadPuzzleInfoExcelAddEventUseCostId(builder, eventUseCostId)
def MiniGameRoadPuzzleInfoExcelAddCostGoodsId(builder, costGoodsId): builder.PrependInt64Slot(3, costGoodsId, 0)
def AddCostGoodsId(builder, costGoodsId):
    return MiniGameRoadPuzzleInfoExcelAddCostGoodsId(builder, costGoodsId)
def MiniGameRoadPuzzleInfoExcelAddRailSetRewardId(builder, railSetRewardId): builder.PrependInt64Slot(4, railSetRewardId, 0)
def AddRailSetRewardId(builder, railSetRewardId):
    return MiniGameRoadPuzzleInfoExcelAddRailSetRewardId(builder, railSetRewardId)
def MiniGameRoadPuzzleInfoExcelAddInstantClearRound(builder, instantClearRound): builder.PrependInt32Slot(5, instantClearRound, 0)
def AddInstantClearRound(builder, instantClearRound):
    return MiniGameRoadPuzzleInfoExcelAddInstantClearRound(builder, instantClearRound)
def MiniGameRoadPuzzleInfoExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameRoadPuzzleInfoExcelEnd(builder)