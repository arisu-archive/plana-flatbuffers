# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EquipmentStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EquipmentStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEquipmentStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EquipmentStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EquipmentStatExcel
    def EquipmentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def StatLevelUpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def StatType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EquipmentStatExcel
    def StatTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EquipmentStatExcel
    def StatTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EquipmentStatExcel
    def StatTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EquipmentStatExcel
    def MinStat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EquipmentStatExcel
    def MinStatAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EquipmentStatExcel
    def MinStatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EquipmentStatExcel
    def MinStatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EquipmentStatExcel
    def MaxStat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EquipmentStatExcel
    def MaxStatAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EquipmentStatExcel
    def MaxStatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EquipmentStatExcel
    def MaxStatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # EquipmentStatExcel
    def LevelUpInsertLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def LevelUpFeedExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def LevelUpFeedCostCurrency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def LevelUpFeedCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def EquipmentCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def LevelUpFeedAddExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def DefaultMaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def TranscendenceMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EquipmentStatExcel
    def DamageFactorGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EquipmentStatExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return EquipmentStatExcelStart(builder)
def EquipmentStatExcelAddEquipmentId(builder, equipmentId): builder.PrependInt64Slot(0, equipmentId, 0)
def AddEquipmentId(builder, equipmentId):
    return EquipmentStatExcelAddEquipmentId(builder, equipmentId)
def EquipmentStatExcelAddStatLevelUpType(builder, statLevelUpType): builder.PrependInt32Slot(1, statLevelUpType, 0)
def AddStatLevelUpType(builder, statLevelUpType):
    return EquipmentStatExcelAddStatLevelUpType(builder, statLevelUpType)
def EquipmentStatExcelAddStatType(builder, statType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(statType), 0)
def AddStatType(builder, statType):
    return EquipmentStatExcelAddStatType(builder, statType)
def EquipmentStatExcelStartStatTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStatTypeVector(builder, numElems):
    return EquipmentStatExcelStartStatTypeVector(builder, numElems)
def EquipmentStatExcelAddMinStat(builder, minStat): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(minStat), 0)
def AddMinStat(builder, minStat):
    return EquipmentStatExcelAddMinStat(builder, minStat)
def EquipmentStatExcelStartMinStatVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartMinStatVector(builder, numElems):
    return EquipmentStatExcelStartMinStatVector(builder, numElems)
def EquipmentStatExcelAddMaxStat(builder, maxStat): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(maxStat), 0)
def AddMaxStat(builder, maxStat):
    return EquipmentStatExcelAddMaxStat(builder, maxStat)
def EquipmentStatExcelStartMaxStatVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartMaxStatVector(builder, numElems):
    return EquipmentStatExcelStartMaxStatVector(builder, numElems)
def EquipmentStatExcelAddLevelUpInsertLimit(builder, levelUpInsertLimit): builder.PrependInt32Slot(5, levelUpInsertLimit, 0)
def AddLevelUpInsertLimit(builder, levelUpInsertLimit):
    return EquipmentStatExcelAddLevelUpInsertLimit(builder, levelUpInsertLimit)
def EquipmentStatExcelAddLevelUpFeedExp(builder, levelUpFeedExp): builder.PrependInt64Slot(6, levelUpFeedExp, 0)
def AddLevelUpFeedExp(builder, levelUpFeedExp):
    return EquipmentStatExcelAddLevelUpFeedExp(builder, levelUpFeedExp)
def EquipmentStatExcelAddLevelUpFeedCostCurrency(builder, levelUpFeedCostCurrency): builder.PrependInt32Slot(7, levelUpFeedCostCurrency, 0)
def AddLevelUpFeedCostCurrency(builder, levelUpFeedCostCurrency):
    return EquipmentStatExcelAddLevelUpFeedCostCurrency(builder, levelUpFeedCostCurrency)
def EquipmentStatExcelAddLevelUpFeedCostAmount(builder, levelUpFeedCostAmount): builder.PrependInt64Slot(8, levelUpFeedCostAmount, 0)
def AddLevelUpFeedCostAmount(builder, levelUpFeedCostAmount):
    return EquipmentStatExcelAddLevelUpFeedCostAmount(builder, levelUpFeedCostAmount)
def EquipmentStatExcelAddEquipmentCategory(builder, equipmentCategory): builder.PrependInt32Slot(9, equipmentCategory, 0)
def AddEquipmentCategory(builder, equipmentCategory):
    return EquipmentStatExcelAddEquipmentCategory(builder, equipmentCategory)
def EquipmentStatExcelAddLevelUpFeedAddExp(builder, levelUpFeedAddExp): builder.PrependInt64Slot(10, levelUpFeedAddExp, 0)
def AddLevelUpFeedAddExp(builder, levelUpFeedAddExp):
    return EquipmentStatExcelAddLevelUpFeedAddExp(builder, levelUpFeedAddExp)
def EquipmentStatExcelAddDefaultMaxLevel(builder, defaultMaxLevel): builder.PrependInt32Slot(11, defaultMaxLevel, 0)
def AddDefaultMaxLevel(builder, defaultMaxLevel):
    return EquipmentStatExcelAddDefaultMaxLevel(builder, defaultMaxLevel)
def EquipmentStatExcelAddTranscendenceMax(builder, transcendenceMax): builder.PrependInt32Slot(12, transcendenceMax, 0)
def AddTranscendenceMax(builder, transcendenceMax):
    return EquipmentStatExcelAddTranscendenceMax(builder, transcendenceMax)
def EquipmentStatExcelAddDamageFactorGroupId(builder, damageFactorGroupId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(damageFactorGroupId), 0)
def AddDamageFactorGroupId(builder, damageFactorGroupId):
    return EquipmentStatExcelAddDamageFactorGroupId(builder, damageFactorGroupId)
def EquipmentStatExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EquipmentStatExcelEnd(builder)