# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObstacleStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObstacleStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObstacleStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObstacleStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObstacleStatExcel
    def ReduceExDamagedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceStructureRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def HighlightFloaterHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ObstacleStatExcel
    def CanNotStandRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def Dodge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def MaxHp100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def MaxHp1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ObstacleStatExcel
    def StringId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ObstacleStatExcelStart(builder): builder.StartObject(15)
def Start(builder):
    return ObstacleStatExcelStart(builder)
def ObstacleStatExcelAddReduceExDamagedRate(builder, reduceExDamagedRate): builder.PrependInt64Slot(0, reduceExDamagedRate, 0)
def AddReduceExDamagedRate(builder, reduceExDamagedRate):
    return ObstacleStatExcelAddReduceExDamagedRate(builder, reduceExDamagedRate)
def ObstacleStatExcelAddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate): builder.PrependInt64Slot(1, enhanceNormalArmorRate, 0)
def AddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate):
    return ObstacleStatExcelAddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate)
def ObstacleStatExcelAddEnhanceStructureRate(builder, enhanceStructureRate): builder.PrependInt64Slot(2, enhanceStructureRate, 0)
def AddEnhanceStructureRate(builder, enhanceStructureRate):
    return ObstacleStatExcelAddEnhanceStructureRate(builder, enhanceStructureRate)
def ObstacleStatExcelAddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate): builder.PrependInt64Slot(3, enhanceElasticArmorRate, 0)
def AddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate):
    return ObstacleStatExcelAddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate)
def ObstacleStatExcelAddEnhanceUnarmedRate(builder, enhanceUnarmedRate): builder.PrependInt64Slot(4, enhanceUnarmedRate, 0)
def AddEnhanceUnarmedRate(builder, enhanceUnarmedRate):
    return ObstacleStatExcelAddEnhanceUnarmedRate(builder, enhanceUnarmedRate)
def ObstacleStatExcelAddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate): builder.PrependInt64Slot(5, enhanceHeavyArmorRate, 0)
def AddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate):
    return ObstacleStatExcelAddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate)
def ObstacleStatExcelAddEnhanceLightArmorRate(builder, enhanceLightArmorRate): builder.PrependInt64Slot(6, enhanceLightArmorRate, 0)
def AddEnhanceLightArmorRate(builder, enhanceLightArmorRate):
    return ObstacleStatExcelAddEnhanceLightArmorRate(builder, enhanceLightArmorRate)
def ObstacleStatExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight): builder.PrependFloat32Slot(7, highlightFloaterHeight, 0.0)
def AddHighlightFloaterHeight(builder, highlightFloaterHeight):
    return ObstacleStatExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight)
def ObstacleStatExcelAddCanNotStandRange(builder, canNotStandRange): builder.PrependInt64Slot(8, canNotStandRange, 0)
def AddCanNotStandRange(builder, canNotStandRange):
    return ObstacleStatExcelAddCanNotStandRange(builder, canNotStandRange)
def ObstacleStatExcelAddDodge(builder, dodge): builder.PrependInt64Slot(9, dodge, 0)
def AddDodge(builder, dodge):
    return ObstacleStatExcelAddDodge(builder, dodge)
def ObstacleStatExcelAddBlockRate(builder, blockRate): builder.PrependInt64Slot(10, blockRate, 0)
def AddBlockRate(builder, blockRate):
    return ObstacleStatExcelAddBlockRate(builder, blockRate)
def ObstacleStatExcelAddMaxHp100(builder, maxHp100): builder.PrependInt64Slot(11, maxHp100, 0)
def AddMaxHp100(builder, maxHp100):
    return ObstacleStatExcelAddMaxHp100(builder, maxHp100)
def ObstacleStatExcelAddMaxHp1(builder, maxHp1): builder.PrependInt64Slot(12, maxHp1, 0)
def AddMaxHp1(builder, maxHp1):
    return ObstacleStatExcelAddMaxHp1(builder, maxHp1)
def ObstacleStatExcelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ObstacleStatExcelAddName(builder, name)
def ObstacleStatExcelAddStringId(builder, stringId): builder.PrependUint32Slot(14, stringId, 0)
def AddStringId(builder, stringId):
    return ObstacleStatExcelAddStringId(builder, stringId)
def ObstacleStatExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ObstacleStatExcelEnd(builder)