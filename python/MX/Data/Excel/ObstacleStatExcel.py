# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObstacleStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObstacleStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObstacleStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObstacleStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObstacleStatExcel
    def StringId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ObstacleStatExcel
    def MaxHp1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def MaxHp100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def Dodge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def CanNotStandRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def HighlightFloaterHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ObstacleStatExcel
    def EnhanceLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceStructureRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def EnhanceNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def ReduceExDamagedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ObstacleStatExcelStart(builder):
    builder.StartObject(15)

def Start(builder):
    ObstacleStatExcelStart(builder)

def ObstacleStatExcelAddStringId(builder, stringId):
    builder.PrependUint32Slot(0, stringId, 0)

def AddStringId(builder, stringId):
    ObstacleStatExcelAddStringId(builder, stringId)

def ObstacleStatExcelAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ObstacleStatExcelAddName(builder, name)

def ObstacleStatExcelAddMaxHp1(builder, maxHp1):
    builder.PrependInt64Slot(2, maxHp1, 0)

def AddMaxHp1(builder, maxHp1):
    ObstacleStatExcelAddMaxHp1(builder, maxHp1)

def ObstacleStatExcelAddMaxHp100(builder, maxHp100):
    builder.PrependInt64Slot(3, maxHp100, 0)

def AddMaxHp100(builder, maxHp100):
    ObstacleStatExcelAddMaxHp100(builder, maxHp100)

def ObstacleStatExcelAddBlockRate(builder, blockRate):
    builder.PrependInt64Slot(4, blockRate, 0)

def AddBlockRate(builder, blockRate):
    ObstacleStatExcelAddBlockRate(builder, blockRate)

def ObstacleStatExcelAddDodge(builder, dodge):
    builder.PrependInt64Slot(5, dodge, 0)

def AddDodge(builder, dodge):
    ObstacleStatExcelAddDodge(builder, dodge)

def ObstacleStatExcelAddCanNotStandRange(builder, canNotStandRange):
    builder.PrependInt64Slot(6, canNotStandRange, 0)

def AddCanNotStandRange(builder, canNotStandRange):
    ObstacleStatExcelAddCanNotStandRange(builder, canNotStandRange)

def ObstacleStatExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight):
    builder.PrependFloat32Slot(7, highlightFloaterHeight, 0.0)

def AddHighlightFloaterHeight(builder, highlightFloaterHeight):
    ObstacleStatExcelAddHighlightFloaterHeight(builder, highlightFloaterHeight)

def ObstacleStatExcelAddEnhanceLightArmorRate(builder, enhanceLightArmorRate):
    builder.PrependInt64Slot(8, enhanceLightArmorRate, 0)

def AddEnhanceLightArmorRate(builder, enhanceLightArmorRate):
    ObstacleStatExcelAddEnhanceLightArmorRate(builder, enhanceLightArmorRate)

def ObstacleStatExcelAddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate):
    builder.PrependInt64Slot(9, enhanceHeavyArmorRate, 0)

def AddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate):
    ObstacleStatExcelAddEnhanceHeavyArmorRate(builder, enhanceHeavyArmorRate)

def ObstacleStatExcelAddEnhanceUnarmedRate(builder, enhanceUnarmedRate):
    builder.PrependInt64Slot(10, enhanceUnarmedRate, 0)

def AddEnhanceUnarmedRate(builder, enhanceUnarmedRate):
    ObstacleStatExcelAddEnhanceUnarmedRate(builder, enhanceUnarmedRate)

def ObstacleStatExcelAddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate):
    builder.PrependInt64Slot(11, enhanceElasticArmorRate, 0)

def AddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate):
    ObstacleStatExcelAddEnhanceElasticArmorRate(builder, enhanceElasticArmorRate)

def ObstacleStatExcelAddEnhanceStructureRate(builder, enhanceStructureRate):
    builder.PrependInt64Slot(12, enhanceStructureRate, 0)

def AddEnhanceStructureRate(builder, enhanceStructureRate):
    ObstacleStatExcelAddEnhanceStructureRate(builder, enhanceStructureRate)

def ObstacleStatExcelAddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate):
    builder.PrependInt64Slot(13, enhanceNormalArmorRate, 0)

def AddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate):
    ObstacleStatExcelAddEnhanceNormalArmorRate(builder, enhanceNormalArmorRate)

def ObstacleStatExcelAddReduceExDamagedRate(builder, reduceExDamagedRate):
    builder.PrependInt64Slot(14, reduceExDamagedRate, 0)

def AddReduceExDamagedRate(builder, reduceExDamagedRate):
    ObstacleStatExcelAddReduceExDamagedRate(builder, reduceExDamagedRate)

def ObstacleStatExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ObstacleStatExcelEnd(builder)
