# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FloaterCommonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloaterCommonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloaterCommonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FloaterCommonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloaterCommonExcel
    def FloaterOffsetPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FloaterCommonExcel
    def FloaterOffsetPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FloaterCommonExcel
    def FloaterRandomPosRangeX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FloaterCommonExcel
    def FloaterRandomPosRangeY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FloaterCommonExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FloaterCommonExcel
    def TacticEntityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FloaterCommonExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return FloaterCommonExcelStart(builder)
def FloaterCommonExcelAddFloaterOffsetPosX(builder, floaterOffsetPosX): builder.PrependInt32Slot(0, floaterOffsetPosX, 0)
def AddFloaterOffsetPosX(builder, floaterOffsetPosX):
    return FloaterCommonExcelAddFloaterOffsetPosX(builder, floaterOffsetPosX)
def FloaterCommonExcelAddFloaterOffsetPosY(builder, floaterOffsetPosY): builder.PrependInt32Slot(1, floaterOffsetPosY, 0)
def AddFloaterOffsetPosY(builder, floaterOffsetPosY):
    return FloaterCommonExcelAddFloaterOffsetPosY(builder, floaterOffsetPosY)
def FloaterCommonExcelAddFloaterRandomPosRangeX(builder, floaterRandomPosRangeX): builder.PrependInt32Slot(2, floaterRandomPosRangeX, 0)
def AddFloaterRandomPosRangeX(builder, floaterRandomPosRangeX):
    return FloaterCommonExcelAddFloaterRandomPosRangeX(builder, floaterRandomPosRangeX)
def FloaterCommonExcelAddFloaterRandomPosRangeY(builder, floaterRandomPosRangeY): builder.PrependInt32Slot(3, floaterRandomPosRangeY, 0)
def AddFloaterRandomPosRangeY(builder, floaterRandomPosRangeY):
    return FloaterCommonExcelAddFloaterRandomPosRangeY(builder, floaterRandomPosRangeY)
def FloaterCommonExcelAddId(builder, id): builder.PrependInt64Slot(4, id, 0)
def AddId(builder, id):
    return FloaterCommonExcelAddId(builder, id)
def FloaterCommonExcelAddTacticEntityType(builder, tacticEntityType): builder.PrependInt32Slot(5, tacticEntityType, 0)
def AddTacticEntityType(builder, tacticEntityType):
    return FloaterCommonExcelAddTacticEntityType(builder, tacticEntityType)
def FloaterCommonExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FloaterCommonExcelEnd(builder)