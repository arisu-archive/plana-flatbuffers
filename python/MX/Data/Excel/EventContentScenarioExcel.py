# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentScenarioExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentScenarioExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentScenarioExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def ReplayDisplayGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RecollectionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def IsRecollection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentScenarioExcel
    def IsMeetup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentScenarioExcel
    def IsOmnibus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentScenarioExcel
    def ScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentScenarioExcel
    def ScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentScenarioExcel
    def ScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def ScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # EventContentScenarioExcel
    def ScenarioConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def ConditionAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def ConditionEventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def ClearedScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RecollectionSummaryLocalizeScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RecollectionResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentScenarioExcel
    def IsRecollectionHorizon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentScenarioExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentScenarioExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentScenarioExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # EventContentScenarioExcel
    def RewardId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentScenarioExcel
    def RewardIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentScenarioExcel
    def RewardIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def RewardIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # EventContentScenarioExcel
    def RewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentScenarioExcel
    def RewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentScenarioExcel
    def RewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def RewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

def EventContentScenarioExcelStart(builder):
    builder.StartObject(19)

def Start(builder):
    EventContentScenarioExcelStart(builder)

def EventContentScenarioExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    EventContentScenarioExcelAddId(builder, id)

def EventContentScenarioExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(1, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    EventContentScenarioExcelAddEventContentId(builder, eventContentId)

def EventContentScenarioExcelAddReplayDisplayGroup(builder, replayDisplayGroup):
    builder.PrependInt32Slot(2, replayDisplayGroup, 0)

def AddReplayDisplayGroup(builder, replayDisplayGroup):
    EventContentScenarioExcelAddReplayDisplayGroup(builder, replayDisplayGroup)

def EventContentScenarioExcelAddOrder(builder, order):
    builder.PrependInt64Slot(3, order, 0)

def AddOrder(builder, order):
    EventContentScenarioExcelAddOrder(builder, order)

def EventContentScenarioExcelAddRecollectionNumber(builder, recollectionNumber):
    builder.PrependInt64Slot(4, recollectionNumber, 0)

def AddRecollectionNumber(builder, recollectionNumber):
    EventContentScenarioExcelAddRecollectionNumber(builder, recollectionNumber)

def EventContentScenarioExcelAddIsRecollection(builder, isRecollection):
    builder.PrependBoolSlot(5, isRecollection, 0)

def AddIsRecollection(builder, isRecollection):
    EventContentScenarioExcelAddIsRecollection(builder, isRecollection)

def EventContentScenarioExcelAddIsMeetup(builder, isMeetup):
    builder.PrependBoolSlot(6, isMeetup, 0)

def AddIsMeetup(builder, isMeetup):
    EventContentScenarioExcelAddIsMeetup(builder, isMeetup)

def EventContentScenarioExcelAddIsOmnibus(builder, isOmnibus):
    builder.PrependBoolSlot(7, isOmnibus, 0)

def AddIsOmnibus(builder, isOmnibus):
    EventContentScenarioExcelAddIsOmnibus(builder, isOmnibus)

def EventContentScenarioExcelAddScenarioGroupId(builder, scenarioGroupId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioGroupId), 0)

def AddScenarioGroupId(builder, scenarioGroupId):
    EventContentScenarioExcelAddScenarioGroupId(builder, scenarioGroupId)

def EventContentScenarioExcelStartScenarioGroupIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartScenarioGroupIdVector(builder, numElems):
    return EventContentScenarioExcelStartScenarioGroupIdVector(builder, numElems)

def EventContentScenarioExcelAddScenarioConditionType(builder, scenarioConditionType):
    builder.PrependInt32Slot(9, scenarioConditionType, 0)

def AddScenarioConditionType(builder, scenarioConditionType):
    EventContentScenarioExcelAddScenarioConditionType(builder, scenarioConditionType)

def EventContentScenarioExcelAddConditionAmount(builder, conditionAmount):
    builder.PrependInt64Slot(10, conditionAmount, 0)

def AddConditionAmount(builder, conditionAmount):
    EventContentScenarioExcelAddConditionAmount(builder, conditionAmount)

def EventContentScenarioExcelAddConditionEventContentId(builder, conditionEventContentId):
    builder.PrependInt64Slot(11, conditionEventContentId, 0)

def AddConditionEventContentId(builder, conditionEventContentId):
    EventContentScenarioExcelAddConditionEventContentId(builder, conditionEventContentId)

def EventContentScenarioExcelAddClearedScenarioGroupId(builder, clearedScenarioGroupId):
    builder.PrependInt64Slot(12, clearedScenarioGroupId, 0)

def AddClearedScenarioGroupId(builder, clearedScenarioGroupId):
    EventContentScenarioExcelAddClearedScenarioGroupId(builder, clearedScenarioGroupId)

def EventContentScenarioExcelAddRecollectionSummaryLocalizeScenarioId(builder, recollectionSummaryLocalizeScenarioId):
    builder.PrependUint32Slot(13, recollectionSummaryLocalizeScenarioId, 0)

def AddRecollectionSummaryLocalizeScenarioId(builder, recollectionSummaryLocalizeScenarioId):
    EventContentScenarioExcelAddRecollectionSummaryLocalizeScenarioId(builder, recollectionSummaryLocalizeScenarioId)

def EventContentScenarioExcelAddRecollectionResource(builder, recollectionResource):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(recollectionResource), 0)

def AddRecollectionResource(builder, recollectionResource):
    EventContentScenarioExcelAddRecollectionResource(builder, recollectionResource)

def EventContentScenarioExcelAddIsRecollectionHorizon(builder, isRecollectionHorizon):
    builder.PrependBoolSlot(15, isRecollectionHorizon, 0)

def AddIsRecollectionHorizon(builder, isRecollectionHorizon):
    EventContentScenarioExcelAddIsRecollectionHorizon(builder, isRecollectionHorizon)

def EventContentScenarioExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)

def AddRewardParcelType(builder, rewardParcelType):
    EventContentScenarioExcelAddRewardParcelType(builder, rewardParcelType)

def EventContentScenarioExcelStartRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelTypeVector(builder, numElems):
    return EventContentScenarioExcelStartRewardParcelTypeVector(builder, numElems)

def EventContentScenarioExcelAddRewardId(builder, rewardId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(rewardId), 0)

def AddRewardId(builder, rewardId):
    EventContentScenarioExcelAddRewardId(builder, rewardId)

def EventContentScenarioExcelStartRewardIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardIdVector(builder, numElems):
    return EventContentScenarioExcelStartRewardIdVector(builder, numElems)

def EventContentScenarioExcelAddRewardAmount(builder, rewardAmount):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(rewardAmount), 0)

def AddRewardAmount(builder, rewardAmount):
    EventContentScenarioExcelAddRewardAmount(builder, rewardAmount)

def EventContentScenarioExcelStartRewardAmountVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardAmountVector(builder, numElems):
    return EventContentScenarioExcelStartRewardAmountVector(builder, numElems)

def EventContentScenarioExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentScenarioExcelEnd(builder)
