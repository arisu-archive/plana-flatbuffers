# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGRewardItemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGRewardItemExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGRewardItemExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGRewardItemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGRewardItemExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardItemExcel
    def CcgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardItemExcel
    def MinPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardItemExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardItemExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardItemExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardItemExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameCCGRewardItemExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return MinigameCCGRewardItemExcelStart(builder)
def MinigameCCGRewardItemExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return MinigameCCGRewardItemExcelAddId(builder, id)
def MinigameCCGRewardItemExcelAddCcgId(builder, ccgId): builder.PrependInt64Slot(1, ccgId, 0)
def AddCcgId(builder, ccgId):
    return MinigameCCGRewardItemExcelAddCcgId(builder, ccgId)
def MinigameCCGRewardItemExcelAddMinPoint(builder, minPoint): builder.PrependInt32Slot(2, minPoint, 0)
def AddMinPoint(builder, minPoint):
    return MinigameCCGRewardItemExcelAddMinPoint(builder, minPoint)
def MinigameCCGRewardItemExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(3, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return MinigameCCGRewardItemExcelAddRewardParcelType(builder, rewardParcelType)
def MinigameCCGRewardItemExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependInt64Slot(4, rewardParcelId, 0)
def AddRewardParcelId(builder, rewardParcelId):
    return MinigameCCGRewardItemExcelAddRewardParcelId(builder, rewardParcelId)
def MinigameCCGRewardItemExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt32Slot(5, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return MinigameCCGRewardItemExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def MinigameCCGRewardItemExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(6, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return MinigameCCGRewardItemExcelAddDisplayOrder(builder, displayOrder)
def MinigameCCGRewardItemExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameCCGRewardItemExcelEnd(builder)