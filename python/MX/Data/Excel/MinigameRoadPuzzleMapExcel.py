# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameRoadPuzzleMapExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameRoadPuzzleMapExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameRoadPuzzleMapExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameRoadPuzzleMapExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameRoadPuzzleMapExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleMapExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleMapExcel
    def MapGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleMapExcel
    def Map(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameRoadPuzzleMapExcel
    def MapBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameRoadPuzzleMapExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTile(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameRoadPuzzleMapExcel
    def AvailableRailTileAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # MinigameRoadPuzzleMapExcel
    def OriginalTileCount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MinigameRoadPuzzleMapExcel
    def OriginalTileCountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MinigameRoadPuzzleMapExcel
    def OriginalTileCountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameRoadPuzzleMapExcel
    def OriginalTileCountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # MinigameRoadPuzzleMapExcel
    def TrainSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def MinigameRoadPuzzleMapExcelStart(builder):
    builder.StartObject(10)

def Start(builder):
    MinigameRoadPuzzleMapExcelStart(builder)

def MinigameRoadPuzzleMapExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    MinigameRoadPuzzleMapExcelAddEventContentId(builder, eventContentId)

def MinigameRoadPuzzleMapExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(1, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    MinigameRoadPuzzleMapExcelAddUniqueId(builder, uniqueId)

def MinigameRoadPuzzleMapExcelAddMapGroupId(builder, mapGroupId):
    builder.PrependInt64Slot(2, mapGroupId, 0)

def AddMapGroupId(builder, mapGroupId):
    MinigameRoadPuzzleMapExcelAddMapGroupId(builder, mapGroupId)

def MinigameRoadPuzzleMapExcelAddMap(builder, map):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def AddMap(builder, map):
    MinigameRoadPuzzleMapExcelAddMap(builder, map)

def MinigameRoadPuzzleMapExcelAddMapBg(builder, mapBg):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mapBg), 0)

def AddMapBg(builder, mapBg):
    MinigameRoadPuzzleMapExcelAddMapBg(builder, mapBg)

def MinigameRoadPuzzleMapExcelAddBgmId(builder, bgmId):
    builder.PrependInt64Slot(5, bgmId, 0)

def AddBgmId(builder, bgmId):
    MinigameRoadPuzzleMapExcelAddBgmId(builder, bgmId)

def MinigameRoadPuzzleMapExcelAddAvailableRailTile(builder, availableRailTile):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(availableRailTile), 0)

def AddAvailableRailTile(builder, availableRailTile):
    MinigameRoadPuzzleMapExcelAddAvailableRailTile(builder, availableRailTile)

def MinigameRoadPuzzleMapExcelStartAvailableRailTileVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartAvailableRailTileVector(builder, numElems):
    return MinigameRoadPuzzleMapExcelStartAvailableRailTileVector(builder, numElems)

def MinigameRoadPuzzleMapExcelAddAvailableRailTileAmount(builder, availableRailTileAmount):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(availableRailTileAmount), 0)

def AddAvailableRailTileAmount(builder, availableRailTileAmount):
    MinigameRoadPuzzleMapExcelAddAvailableRailTileAmount(builder, availableRailTileAmount)

def MinigameRoadPuzzleMapExcelStartAvailableRailTileAmountVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartAvailableRailTileAmountVector(builder, numElems):
    return MinigameRoadPuzzleMapExcelStartAvailableRailTileAmountVector(builder, numElems)

def MinigameRoadPuzzleMapExcelAddOriginalTileCount(builder, originalTileCount):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(originalTileCount), 0)

def AddOriginalTileCount(builder, originalTileCount):
    MinigameRoadPuzzleMapExcelAddOriginalTileCount(builder, originalTileCount)

def MinigameRoadPuzzleMapExcelStartOriginalTileCountVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartOriginalTileCountVector(builder, numElems):
    return MinigameRoadPuzzleMapExcelStartOriginalTileCountVector(builder, numElems)

def MinigameRoadPuzzleMapExcelAddTrainSpeed(builder, trainSpeed):
    builder.PrependFloat32Slot(9, trainSpeed, 0.0)

def AddTrainSpeed(builder, trainSpeed):
    MinigameRoadPuzzleMapExcelAddTrainSpeed(builder, trainSpeed)

def MinigameRoadPuzzleMapExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MinigameRoadPuzzleMapExcelEnd(builder)
