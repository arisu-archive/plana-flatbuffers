# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameRhythmExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameRhythmExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameRhythmExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameRhythmExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameRhythmExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def RhythmBgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def PresetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def StageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def IsSpecial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameRhythmExcel
    def OpenStageScoreAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MissDamage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def CriticalHpRestoreValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MaxScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def FeverScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def NoteScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def ComboScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def AttackScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def FeverCriticalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameRhythmExcel
    def FeverAttackRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameRhythmExcel
    def MaxHpScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def RhythmFileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def ArtLevelSceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def ComboImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MiniGameRhythmExcelStart(builder):
    builder.StartObject(20)

def Start(builder):
    MiniGameRhythmExcelStart(builder)

def MiniGameRhythmExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(0, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    MiniGameRhythmExcelAddUniqueId(builder, uniqueId)

def MiniGameRhythmExcelAddRhythmBgmId(builder, rhythmBgmId):
    builder.PrependInt64Slot(1, rhythmBgmId, 0)

def AddRhythmBgmId(builder, rhythmBgmId):
    MiniGameRhythmExcelAddRhythmBgmId(builder, rhythmBgmId)

def MiniGameRhythmExcelAddPresetName(builder, presetName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(presetName), 0)

def AddPresetName(builder, presetName):
    MiniGameRhythmExcelAddPresetName(builder, presetName)

def MiniGameRhythmExcelAddStageDifficulty(builder, stageDifficulty):
    builder.PrependInt32Slot(3, stageDifficulty, 0)

def AddStageDifficulty(builder, stageDifficulty):
    MiniGameRhythmExcelAddStageDifficulty(builder, stageDifficulty)

def MiniGameRhythmExcelAddIsSpecial(builder, isSpecial):
    builder.PrependBoolSlot(4, isSpecial, 0)

def AddIsSpecial(builder, isSpecial):
    MiniGameRhythmExcelAddIsSpecial(builder, isSpecial)

def MiniGameRhythmExcelAddOpenStageScoreAmount(builder, openStageScoreAmount):
    builder.PrependInt64Slot(5, openStageScoreAmount, 0)

def AddOpenStageScoreAmount(builder, openStageScoreAmount):
    MiniGameRhythmExcelAddOpenStageScoreAmount(builder, openStageScoreAmount)

def MiniGameRhythmExcelAddMaxHp(builder, maxHp):
    builder.PrependInt64Slot(6, maxHp, 0)

def AddMaxHp(builder, maxHp):
    MiniGameRhythmExcelAddMaxHp(builder, maxHp)

def MiniGameRhythmExcelAddMissDamage(builder, missDamage):
    builder.PrependInt64Slot(7, missDamage, 0)

def AddMissDamage(builder, missDamage):
    MiniGameRhythmExcelAddMissDamage(builder, missDamage)

def MiniGameRhythmExcelAddCriticalHpRestoreValue(builder, criticalHpRestoreValue):
    builder.PrependInt64Slot(8, criticalHpRestoreValue, 0)

def AddCriticalHpRestoreValue(builder, criticalHpRestoreValue):
    MiniGameRhythmExcelAddCriticalHpRestoreValue(builder, criticalHpRestoreValue)

def MiniGameRhythmExcelAddMaxScore(builder, maxScore):
    builder.PrependInt64Slot(9, maxScore, 0)

def AddMaxScore(builder, maxScore):
    MiniGameRhythmExcelAddMaxScore(builder, maxScore)

def MiniGameRhythmExcelAddFeverScoreRate(builder, feverScoreRate):
    builder.PrependInt64Slot(10, feverScoreRate, 0)

def AddFeverScoreRate(builder, feverScoreRate):
    MiniGameRhythmExcelAddFeverScoreRate(builder, feverScoreRate)

def MiniGameRhythmExcelAddNoteScoreRate(builder, noteScoreRate):
    builder.PrependInt64Slot(11, noteScoreRate, 0)

def AddNoteScoreRate(builder, noteScoreRate):
    MiniGameRhythmExcelAddNoteScoreRate(builder, noteScoreRate)

def MiniGameRhythmExcelAddComboScoreRate(builder, comboScoreRate):
    builder.PrependInt64Slot(12, comboScoreRate, 0)

def AddComboScoreRate(builder, comboScoreRate):
    MiniGameRhythmExcelAddComboScoreRate(builder, comboScoreRate)

def MiniGameRhythmExcelAddAttackScoreRate(builder, attackScoreRate):
    builder.PrependInt64Slot(13, attackScoreRate, 0)

def AddAttackScoreRate(builder, attackScoreRate):
    MiniGameRhythmExcelAddAttackScoreRate(builder, attackScoreRate)

def MiniGameRhythmExcelAddFeverCriticalRate(builder, feverCriticalRate):
    builder.PrependFloat32Slot(14, feverCriticalRate, 0.0)

def AddFeverCriticalRate(builder, feverCriticalRate):
    MiniGameRhythmExcelAddFeverCriticalRate(builder, feverCriticalRate)

def MiniGameRhythmExcelAddFeverAttackRate(builder, feverAttackRate):
    builder.PrependFloat32Slot(15, feverAttackRate, 0.0)

def AddFeverAttackRate(builder, feverAttackRate):
    MiniGameRhythmExcelAddFeverAttackRate(builder, feverAttackRate)

def MiniGameRhythmExcelAddMaxHpScore(builder, maxHpScore):
    builder.PrependInt64Slot(16, maxHpScore, 0)

def AddMaxHpScore(builder, maxHpScore):
    MiniGameRhythmExcelAddMaxHpScore(builder, maxHpScore)

def MiniGameRhythmExcelAddRhythmFileName(builder, rhythmFileName):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(rhythmFileName), 0)

def AddRhythmFileName(builder, rhythmFileName):
    MiniGameRhythmExcelAddRhythmFileName(builder, rhythmFileName)

def MiniGameRhythmExcelAddArtLevelSceneName(builder, artLevelSceneName):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(artLevelSceneName), 0)

def AddArtLevelSceneName(builder, artLevelSceneName):
    MiniGameRhythmExcelAddArtLevelSceneName(builder, artLevelSceneName)

def MiniGameRhythmExcelAddComboImagePath(builder, comboImagePath):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(comboImagePath), 0)

def AddComboImagePath(builder, comboImagePath):
    MiniGameRhythmExcelAddComboImagePath(builder, comboImagePath)

def MiniGameRhythmExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MiniGameRhythmExcelEnd(builder)
