# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameRhythmExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameRhythmExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameRhythmExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameRhythmExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameRhythmExcel
    def ArtLevelSceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def AttackScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def ComboImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def ComboScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def CriticalHpRestoreValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def FeverAttackRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameRhythmExcel
    def FeverCriticalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameRhythmExcel
    def FeverScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def IsSpecial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameRhythmExcel
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MaxHpScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MaxScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MissDamage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def NoteScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def OpenStageScoreAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def PresetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def RhythmBgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def RhythmFileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def StageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameRhythmExcelStart(builder): builder.StartObject(20)
def Start(builder):
    return MiniGameRhythmExcelStart(builder)
def MiniGameRhythmExcelAddArtLevelSceneName(builder, artLevelSceneName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(artLevelSceneName), 0)
def AddArtLevelSceneName(builder, artLevelSceneName):
    return MiniGameRhythmExcelAddArtLevelSceneName(builder, artLevelSceneName)
def MiniGameRhythmExcelAddAttackScoreRate(builder, attackScoreRate): builder.PrependInt64Slot(1, attackScoreRate, 0)
def AddAttackScoreRate(builder, attackScoreRate):
    return MiniGameRhythmExcelAddAttackScoreRate(builder, attackScoreRate)
def MiniGameRhythmExcelAddComboImagePath(builder, comboImagePath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(comboImagePath), 0)
def AddComboImagePath(builder, comboImagePath):
    return MiniGameRhythmExcelAddComboImagePath(builder, comboImagePath)
def MiniGameRhythmExcelAddComboScoreRate(builder, comboScoreRate): builder.PrependInt64Slot(3, comboScoreRate, 0)
def AddComboScoreRate(builder, comboScoreRate):
    return MiniGameRhythmExcelAddComboScoreRate(builder, comboScoreRate)
def MiniGameRhythmExcelAddCriticalHpRestoreValue(builder, criticalHpRestoreValue): builder.PrependInt64Slot(4, criticalHpRestoreValue, 0)
def AddCriticalHpRestoreValue(builder, criticalHpRestoreValue):
    return MiniGameRhythmExcelAddCriticalHpRestoreValue(builder, criticalHpRestoreValue)
def MiniGameRhythmExcelAddFeverAttackRate(builder, feverAttackRate): builder.PrependFloat32Slot(5, feverAttackRate, 0.0)
def AddFeverAttackRate(builder, feverAttackRate):
    return MiniGameRhythmExcelAddFeverAttackRate(builder, feverAttackRate)
def MiniGameRhythmExcelAddFeverCriticalRate(builder, feverCriticalRate): builder.PrependFloat32Slot(6, feverCriticalRate, 0.0)
def AddFeverCriticalRate(builder, feverCriticalRate):
    return MiniGameRhythmExcelAddFeverCriticalRate(builder, feverCriticalRate)
def MiniGameRhythmExcelAddFeverScoreRate(builder, feverScoreRate): builder.PrependInt64Slot(7, feverScoreRate, 0)
def AddFeverScoreRate(builder, feverScoreRate):
    return MiniGameRhythmExcelAddFeverScoreRate(builder, feverScoreRate)
def MiniGameRhythmExcelAddIsSpecial(builder, isSpecial): builder.PrependBoolSlot(8, isSpecial, 0)
def AddIsSpecial(builder, isSpecial):
    return MiniGameRhythmExcelAddIsSpecial(builder, isSpecial)
def MiniGameRhythmExcelAddMaxHp(builder, maxHp): builder.PrependInt64Slot(9, maxHp, 0)
def AddMaxHp(builder, maxHp):
    return MiniGameRhythmExcelAddMaxHp(builder, maxHp)
def MiniGameRhythmExcelAddMaxHpScore(builder, maxHpScore): builder.PrependInt64Slot(10, maxHpScore, 0)
def AddMaxHpScore(builder, maxHpScore):
    return MiniGameRhythmExcelAddMaxHpScore(builder, maxHpScore)
def MiniGameRhythmExcelAddMaxScore(builder, maxScore): builder.PrependInt64Slot(11, maxScore, 0)
def AddMaxScore(builder, maxScore):
    return MiniGameRhythmExcelAddMaxScore(builder, maxScore)
def MiniGameRhythmExcelAddMissDamage(builder, missDamage): builder.PrependInt64Slot(12, missDamage, 0)
def AddMissDamage(builder, missDamage):
    return MiniGameRhythmExcelAddMissDamage(builder, missDamage)
def MiniGameRhythmExcelAddNoteScoreRate(builder, noteScoreRate): builder.PrependInt64Slot(13, noteScoreRate, 0)
def AddNoteScoreRate(builder, noteScoreRate):
    return MiniGameRhythmExcelAddNoteScoreRate(builder, noteScoreRate)
def MiniGameRhythmExcelAddOpenStageScoreAmount(builder, openStageScoreAmount): builder.PrependInt64Slot(14, openStageScoreAmount, 0)
def AddOpenStageScoreAmount(builder, openStageScoreAmount):
    return MiniGameRhythmExcelAddOpenStageScoreAmount(builder, openStageScoreAmount)
def MiniGameRhythmExcelAddPresetName(builder, presetName): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(presetName), 0)
def AddPresetName(builder, presetName):
    return MiniGameRhythmExcelAddPresetName(builder, presetName)
def MiniGameRhythmExcelAddRhythmBgmId(builder, rhythmBgmId): builder.PrependInt64Slot(16, rhythmBgmId, 0)
def AddRhythmBgmId(builder, rhythmBgmId):
    return MiniGameRhythmExcelAddRhythmBgmId(builder, rhythmBgmId)
def MiniGameRhythmExcelAddRhythmFileName(builder, rhythmFileName): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(rhythmFileName), 0)
def AddRhythmFileName(builder, rhythmFileName):
    return MiniGameRhythmExcelAddRhythmFileName(builder, rhythmFileName)
def MiniGameRhythmExcelAddStageDifficulty(builder, stageDifficulty): builder.PrependInt32Slot(18, stageDifficulty, 0)
def AddStageDifficulty(builder, stageDifficulty):
    return MiniGameRhythmExcelAddStageDifficulty(builder, stageDifficulty)
def MiniGameRhythmExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(19, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MiniGameRhythmExcelAddUniqueId(builder, uniqueId)
def MiniGameRhythmExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameRhythmExcelEnd(builder)