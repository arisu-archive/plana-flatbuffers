# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioBGEffectExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioBGEffectExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioBGEffectExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioBGEffectExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioBGEffectExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGEffectExcel
    def Effect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGEffectExcel
    def Effect2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGEffectExcel
    def Scroll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGEffectExcel
    def ScrollTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGEffectExcel
    def ScrollFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGEffectExcel
    def ScrollTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ScenarioBGEffectExcelStart(builder):
    builder.StartObject(7)

def Start(builder):
    ScenarioBGEffectExcelStart(builder)

def ScenarioBGEffectExcelAddName(builder, name):
    builder.PrependUint32Slot(0, name, 0)

def AddName(builder, name):
    ScenarioBGEffectExcelAddName(builder, name)

def ScenarioBGEffectExcelAddEffect(builder, effect):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(effect), 0)

def AddEffect(builder, effect):
    ScenarioBGEffectExcelAddEffect(builder, effect)

def ScenarioBGEffectExcelAddEffect2(builder, effect2):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effect2), 0)

def AddEffect2(builder, effect2):
    ScenarioBGEffectExcelAddEffect2(builder, effect2)

def ScenarioBGEffectExcelAddScroll(builder, scroll):
    builder.PrependInt32Slot(3, scroll, 0)

def AddScroll(builder, scroll):
    ScenarioBGEffectExcelAddScroll(builder, scroll)

def ScenarioBGEffectExcelAddScrollTime(builder, scrollTime):
    builder.PrependInt64Slot(4, scrollTime, 0)

def AddScrollTime(builder, scrollTime):
    ScenarioBGEffectExcelAddScrollTime(builder, scrollTime)

def ScenarioBGEffectExcelAddScrollFrom(builder, scrollFrom):
    builder.PrependInt64Slot(5, scrollFrom, 0)

def AddScrollFrom(builder, scrollFrom):
    ScenarioBGEffectExcelAddScrollFrom(builder, scrollFrom)

def ScenarioBGEffectExcelAddScrollTo(builder, scrollTo):
    builder.PrependInt64Slot(6, scrollTo, 0)

def AddScrollTo(builder, scrollTo):
    ScenarioBGEffectExcelAddScrollTo(builder, scrollTo)

def ScenarioBGEffectExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScenarioBGEffectExcelEnd(builder)
