# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterPotentialStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterPotentialStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterPotentialStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterPotentialStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterPotentialStatExcel
    def PotentialStatGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialStatExcel
    def PotentialLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialStatExcel
    def RecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialStatExcel
    def StatBonusRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterPotentialStatExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return CharacterPotentialStatExcelStart(builder)
def CharacterPotentialStatExcelAddPotentialStatGroupId(builder, potentialStatGroupId): builder.PrependInt64Slot(0, potentialStatGroupId, 0)
def AddPotentialStatGroupId(builder, potentialStatGroupId):
    return CharacterPotentialStatExcelAddPotentialStatGroupId(builder, potentialStatGroupId)
def CharacterPotentialStatExcelAddPotentialLevel(builder, potentialLevel): builder.PrependInt32Slot(1, potentialLevel, 0)
def AddPotentialLevel(builder, potentialLevel):
    return CharacterPotentialStatExcelAddPotentialLevel(builder, potentialLevel)
def CharacterPotentialStatExcelAddRecipeId(builder, recipeId): builder.PrependInt64Slot(2, recipeId, 0)
def AddRecipeId(builder, recipeId):
    return CharacterPotentialStatExcelAddRecipeId(builder, recipeId)
def CharacterPotentialStatExcelAddStatBonusRate(builder, statBonusRate): builder.PrependInt64Slot(3, statBonusRate, 0)
def AddStatBonusRate(builder, statBonusRate):
    return CharacterPotentialStatExcelAddStatBonusRate(builder, statBonusRate)
def CharacterPotentialStatExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterPotentialStatExcelEnd(builder)