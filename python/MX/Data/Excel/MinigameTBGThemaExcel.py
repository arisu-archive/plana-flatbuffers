# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGThemaExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGThemaExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGThemaExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGThemaExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGThemaExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGThemaExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGThemaExcel
    def ThemaIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGThemaExcel
    def ThemaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGThemaExcel
    def ThemaMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGThemaExcel
    def ThemaMapBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGThemaExcel
    def PortalCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MinigameTBGThemaExcel
    def PortalConditionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MinigameTBGThemaExcel
    def PortalConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameTBGThemaExcel
    def PortalConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MinigameTBGThemaExcel
    def PortalConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MinigameTBGThemaExcel
    def PortalConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameTBGThemaExcel
    def PortalConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # MinigameTBGThemaExcel
    def ThemaNameLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGThemaExcel
    def ThemaLoadingImage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGThemaExcel
    def ThemaPlayerPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGThemaExcel
    def ThemaLeaderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGThemaExcel
    def ThemaGoalLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGThemaExcel
    def InstantClearCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGThemaExcel
    def IsTutorial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MinigameTBGThemaExcelStart(builder):
    builder.StartObject(15)

def Start(builder):
    MinigameTBGThemaExcelStart(builder)

def MinigameTBGThemaExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    MinigameTBGThemaExcelAddEventContentId(builder, eventContentId)

def MinigameTBGThemaExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(1, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    MinigameTBGThemaExcelAddUniqueId(builder, uniqueId)

def MinigameTBGThemaExcelAddThemaIndex(builder, themaIndex):
    builder.PrependInt32Slot(2, themaIndex, 0)

def AddThemaIndex(builder, themaIndex):
    MinigameTBGThemaExcelAddThemaIndex(builder, themaIndex)

def MinigameTBGThemaExcelAddThemaType(builder, themaType):
    builder.PrependInt32Slot(3, themaType, 0)

def AddThemaType(builder, themaType):
    MinigameTBGThemaExcelAddThemaType(builder, themaType)

def MinigameTBGThemaExcelAddThemaMap(builder, themaMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(themaMap), 0)

def AddThemaMap(builder, themaMap):
    MinigameTBGThemaExcelAddThemaMap(builder, themaMap)

def MinigameTBGThemaExcelAddThemaMapBg(builder, themaMapBg):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(themaMapBg), 0)

def AddThemaMapBg(builder, themaMapBg):
    MinigameTBGThemaExcelAddThemaMapBg(builder, themaMapBg)

def MinigameTBGThemaExcelAddPortalCondition(builder, portalCondition):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(portalCondition), 0)

def AddPortalCondition(builder, portalCondition):
    MinigameTBGThemaExcelAddPortalCondition(builder, portalCondition)

def MinigameTBGThemaExcelStartPortalConditionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPortalConditionVector(builder, numElems):
    return MinigameTBGThemaExcelStartPortalConditionVector(builder, numElems)

def MinigameTBGThemaExcelAddPortalConditionParameter(builder, portalConditionParameter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(portalConditionParameter), 0)

def AddPortalConditionParameter(builder, portalConditionParameter):
    MinigameTBGThemaExcelAddPortalConditionParameter(builder, portalConditionParameter)

def MinigameTBGThemaExcelStartPortalConditionParameterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPortalConditionParameterVector(builder, numElems):
    return MinigameTBGThemaExcelStartPortalConditionParameterVector(builder, numElems)

def MinigameTBGThemaExcelAddThemaNameLocalize(builder, themaNameLocalize):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(themaNameLocalize), 0)

def AddThemaNameLocalize(builder, themaNameLocalize):
    MinigameTBGThemaExcelAddThemaNameLocalize(builder, themaNameLocalize)

def MinigameTBGThemaExcelAddThemaLoadingImage(builder, themaLoadingImage):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(themaLoadingImage), 0)

def AddThemaLoadingImage(builder, themaLoadingImage):
    MinigameTBGThemaExcelAddThemaLoadingImage(builder, themaLoadingImage)

def MinigameTBGThemaExcelAddThemaPlayerPrefab(builder, themaPlayerPrefab):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(themaPlayerPrefab), 0)

def AddThemaPlayerPrefab(builder, themaPlayerPrefab):
    MinigameTBGThemaExcelAddThemaPlayerPrefab(builder, themaPlayerPrefab)

def MinigameTBGThemaExcelAddThemaLeaderId(builder, themaLeaderId):
    builder.PrependInt64Slot(11, themaLeaderId, 0)

def AddThemaLeaderId(builder, themaLeaderId):
    MinigameTBGThemaExcelAddThemaLeaderId(builder, themaLeaderId)

def MinigameTBGThemaExcelAddThemaGoalLocalize(builder, themaGoalLocalize):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(themaGoalLocalize), 0)

def AddThemaGoalLocalize(builder, themaGoalLocalize):
    MinigameTBGThemaExcelAddThemaGoalLocalize(builder, themaGoalLocalize)

def MinigameTBGThemaExcelAddInstantClearCostAmount(builder, instantClearCostAmount):
    builder.PrependInt64Slot(13, instantClearCostAmount, 0)

def AddInstantClearCostAmount(builder, instantClearCostAmount):
    MinigameTBGThemaExcelAddInstantClearCostAmount(builder, instantClearCostAmount)

def MinigameTBGThemaExcelAddIsTutorial(builder, isTutorial):
    builder.PrependBoolSlot(14, isTutorial, 0)

def AddIsTutorial(builder, isTutorial):
    MinigameTBGThemaExcelAddIsTutorial(builder, isTutorial)

def MinigameTBGThemaExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MinigameTBGThemaExcelEnd(builder)
