# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EchelonConstraintExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EchelonConstraintExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEchelonConstraintExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EchelonConstraintExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EchelonConstraintExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def IsWhiteList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EchelonConstraintExcel
    def CharacterId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EchelonConstraintExcel
    def CharacterIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EchelonConstraintExcel
    def CharacterIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EchelonConstraintExcel
    def CharacterIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EchelonConstraintExcel
    def PersonalityId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EchelonConstraintExcel
    def PersonalityIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EchelonConstraintExcel
    def PersonalityIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EchelonConstraintExcel
    def PersonalityIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EchelonConstraintExcel
    def WeaponType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def School(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def Club(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def Role(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EchelonConstraintExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    EchelonConstraintExcelStart(builder)

def EchelonConstraintExcelAddGroupId(builder, groupId):
    builder.PrependInt64Slot(0, groupId, 0)

def AddGroupId(builder, groupId):
    EchelonConstraintExcelAddGroupId(builder, groupId)

def EchelonConstraintExcelAddIsWhiteList(builder, isWhiteList):
    builder.PrependBoolSlot(1, isWhiteList, 0)

def AddIsWhiteList(builder, isWhiteList):
    EchelonConstraintExcelAddIsWhiteList(builder, isWhiteList)

def EchelonConstraintExcelAddCharacterId(builder, characterId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(characterId), 0)

def AddCharacterId(builder, characterId):
    EchelonConstraintExcelAddCharacterId(builder, characterId)

def EchelonConstraintExcelStartCharacterIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartCharacterIdVector(builder, numElems):
    return EchelonConstraintExcelStartCharacterIdVector(builder, numElems)

def EchelonConstraintExcelAddPersonalityId(builder, personalityId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(personalityId), 0)

def AddPersonalityId(builder, personalityId):
    EchelonConstraintExcelAddPersonalityId(builder, personalityId)

def EchelonConstraintExcelStartPersonalityIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartPersonalityIdVector(builder, numElems):
    return EchelonConstraintExcelStartPersonalityIdVector(builder, numElems)

def EchelonConstraintExcelAddWeaponType(builder, weaponType):
    builder.PrependInt32Slot(4, weaponType, 0)

def AddWeaponType(builder, weaponType):
    EchelonConstraintExcelAddWeaponType(builder, weaponType)

def EchelonConstraintExcelAddSchool(builder, school):
    builder.PrependInt32Slot(5, school, 0)

def AddSchool(builder, school):
    EchelonConstraintExcelAddSchool(builder, school)

def EchelonConstraintExcelAddClub(builder, club):
    builder.PrependInt32Slot(6, club, 0)

def AddClub(builder, club):
    EchelonConstraintExcelAddClub(builder, club)

def EchelonConstraintExcelAddRole(builder, role):
    builder.PrependInt32Slot(7, role, 0)

def AddRole(builder, role):
    EchelonConstraintExcelAddRole(builder, role)

def EchelonConstraintExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EchelonConstraintExcelEnd(builder)
