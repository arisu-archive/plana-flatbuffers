# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldRaidConditionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldRaidConditionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorldRaidConditionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorldRaidConditionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldRaidConditionExcel
    def WorldRaidBossKill(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidConditionExcel
    def WorldRaidBossKillAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidConditionExcel
    def WorldRaidBossKillLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def WorldRaidBossKillIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # WorldRaidConditionExcel
    def AfterWhenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidConditionExcel
    def MultipleConditionCheckType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WorldRaidConditionExcel
    def CampaignStageId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidConditionExcel
    def CampaignStageIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidConditionExcel
    def CampaignStageIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def CampaignStageIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # WorldRaidConditionExcel
    def ScenarioModeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # WorldRaidConditionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidConditionExcel
    def HideWhenLocked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidConditionExcel
    def LockUi(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WorldRaidConditionExcel
    def LockUiLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def LockUiIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # WorldRaidConditionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def WorldRaidConditionExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return WorldRaidConditionExcelStart(builder)
def WorldRaidConditionExcelAddWorldRaidBossKill(builder, worldRaidBossKill): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(worldRaidBossKill), 0)
def AddWorldRaidBossKill(builder, worldRaidBossKill):
    return WorldRaidConditionExcelAddWorldRaidBossKill(builder, worldRaidBossKill)
def WorldRaidConditionExcelStartWorldRaidBossKillVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartWorldRaidBossKillVector(builder, numElems):
    return WorldRaidConditionExcelStartWorldRaidBossKillVector(builder, numElems)
def WorldRaidConditionExcelAddAfterWhenDate(builder, afterWhenDate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(afterWhenDate), 0)
def AddAfterWhenDate(builder, afterWhenDate):
    return WorldRaidConditionExcelAddAfterWhenDate(builder, afterWhenDate)
def WorldRaidConditionExcelAddMultipleConditionCheckType(builder, multipleConditionCheckType): builder.PrependInt32Slot(2, multipleConditionCheckType, 0)
def AddMultipleConditionCheckType(builder, multipleConditionCheckType):
    return WorldRaidConditionExcelAddMultipleConditionCheckType(builder, multipleConditionCheckType)
def WorldRaidConditionExcelAddCampaignStageId(builder, campaignStageId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(campaignStageId), 0)
def AddCampaignStageId(builder, campaignStageId):
    return WorldRaidConditionExcelAddCampaignStageId(builder, campaignStageId)
def WorldRaidConditionExcelStartCampaignStageIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCampaignStageIdVector(builder, numElems):
    return WorldRaidConditionExcelStartCampaignStageIdVector(builder, numElems)
def WorldRaidConditionExcelAddScenarioModeId(builder, scenarioModeId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioModeId), 0)
def AddScenarioModeId(builder, scenarioModeId):
    return WorldRaidConditionExcelAddScenarioModeId(builder, scenarioModeId)
def WorldRaidConditionExcelStartScenarioModeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartScenarioModeIdVector(builder, numElems):
    return WorldRaidConditionExcelStartScenarioModeIdVector(builder, numElems)
def WorldRaidConditionExcelAddAccountLevel(builder, accountLevel): builder.PrependInt64Slot(5, accountLevel, 0)
def AddAccountLevel(builder, accountLevel):
    return WorldRaidConditionExcelAddAccountLevel(builder, accountLevel)
def WorldRaidConditionExcelAddHideWhenLocked(builder, hideWhenLocked): builder.PrependBoolSlot(6, hideWhenLocked, 0)
def AddHideWhenLocked(builder, hideWhenLocked):
    return WorldRaidConditionExcelAddHideWhenLocked(builder, hideWhenLocked)
def WorldRaidConditionExcelAddLockUi(builder, lockUi): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(lockUi), 0)
def AddLockUi(builder, lockUi):
    return WorldRaidConditionExcelAddLockUi(builder, lockUi)
def WorldRaidConditionExcelStartLockUiVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLockUiVector(builder, numElems):
    return WorldRaidConditionExcelStartLockUiVector(builder, numElems)
def WorldRaidConditionExcelAddId(builder, id): builder.PrependInt64Slot(8, id, 0)
def AddId(builder, id):
    return WorldRaidConditionExcelAddId(builder, id)
def WorldRaidConditionExcelEnd(builder): return builder.EndObject()
def End(builder):
    return WorldRaidConditionExcelEnd(builder)