# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentConcentrationRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentConcentrationRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentConcentrationRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentConcentrationRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentConcentrationRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationRewardExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationRewardExcel
    def ConcentrationRewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationRewardExcel
    def LocalizePrefabId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentConcentrationRewardExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationRewardExcel
    def Round(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationRewardExcel
    def IsLoop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentConcentrationRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # EventContentConcentrationRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # EventContentConcentrationRewardExcel
    def RewardParcelAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentConcentrationRewardExcel
    def RewardParcelAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def EventContentConcentrationRewardExcelStart(builder):
    builder.StartObject(10)

def Start(builder):
    EventContentConcentrationRewardExcelStart(builder)

def EventContentConcentrationRewardExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    EventContentConcentrationRewardExcelAddEventContentId(builder, eventContentId)

def EventContentConcentrationRewardExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(1, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    EventContentConcentrationRewardExcelAddUniqueId(builder, uniqueId)

def EventContentConcentrationRewardExcelAddConcentrationRewardType(builder, concentrationRewardType):
    builder.PrependInt32Slot(2, concentrationRewardType, 0)

def AddConcentrationRewardType(builder, concentrationRewardType):
    EventContentConcentrationRewardExcelAddConcentrationRewardType(builder, concentrationRewardType)

def EventContentConcentrationRewardExcelAddLocalizePrefabId(builder, localizePrefabId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(localizePrefabId), 0)

def AddLocalizePrefabId(builder, localizePrefabId):
    EventContentConcentrationRewardExcelAddLocalizePrefabId(builder, localizePrefabId)

def EventContentConcentrationRewardExcelAddRarity(builder, rarity):
    builder.PrependInt32Slot(4, rarity, 0)

def AddRarity(builder, rarity):
    EventContentConcentrationRewardExcelAddRarity(builder, rarity)

def EventContentConcentrationRewardExcelAddRound(builder, round):
    builder.PrependInt32Slot(5, round, 0)

def AddRound(builder, round):
    EventContentConcentrationRewardExcelAddRound(builder, round)

def EventContentConcentrationRewardExcelAddIsLoop(builder, isLoop):
    builder.PrependBoolSlot(6, isLoop, 0)

def AddIsLoop(builder, isLoop):
    EventContentConcentrationRewardExcelAddIsLoop(builder, isLoop)

def EventContentConcentrationRewardExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)

def AddRewardParcelType(builder, rewardParcelType):
    EventContentConcentrationRewardExcelAddRewardParcelType(builder, rewardParcelType)

def EventContentConcentrationRewardExcelStartRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelTypeVector(builder, numElems):
    return EventContentConcentrationRewardExcelStartRewardParcelTypeVector(builder, numElems)

def EventContentConcentrationRewardExcelAddRewardParcelId(builder, rewardParcelId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)

def AddRewardParcelId(builder, rewardParcelId):
    EventContentConcentrationRewardExcelAddRewardParcelId(builder, rewardParcelId)

def EventContentConcentrationRewardExcelStartRewardParcelIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardParcelIdVector(builder, numElems):
    return EventContentConcentrationRewardExcelStartRewardParcelIdVector(builder, numElems)

def EventContentConcentrationRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelAmount), 0)

def AddRewardParcelAmount(builder, rewardParcelAmount):
    EventContentConcentrationRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)

def EventContentConcentrationRewardExcelStartRewardParcelAmountVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelAmountVector(builder, numElems):
    return EventContentConcentrationRewardExcelStartRewardParcelAmountVector(builder, numElems)

def EventContentConcentrationRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentConcentrationRewardExcelEnd(builder)
