# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ToastExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ToastExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsToastExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ToastExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ToastExcel
    def LifeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def TextId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def ToastType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ToastExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return ToastExcelStart(builder)
def ToastExcelAddLifeTime(builder, lifeTime): builder.PrependInt64Slot(0, lifeTime, 0)
def AddLifeTime(builder, lifeTime):
    return ToastExcelAddLifeTime(builder, lifeTime)
def ToastExcelAddTextId(builder, textId): builder.PrependUint32Slot(1, textId, 0)
def AddTextId(builder, textId):
    return ToastExcelAddTextId(builder, textId)
def ToastExcelAddMissionId(builder, missionId): builder.PrependUint32Slot(2, missionId, 0)
def AddMissionId(builder, missionId):
    return ToastExcelAddMissionId(builder, missionId)
def ToastExcelAddToastType(builder, toastType): builder.PrependInt32Slot(3, toastType, 0)
def AddToastType(builder, toastType):
    return ToastExcelAddToastType(builder, toastType)
def ToastExcelAddId(builder, id): builder.PrependUint32Slot(4, id, 0)
def AddId(builder, id):
    return ToastExcelAddId(builder, id)
def ToastExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ToastExcelEnd(builder)