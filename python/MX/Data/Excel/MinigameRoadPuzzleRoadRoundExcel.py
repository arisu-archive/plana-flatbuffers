# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameRoadPuzzleRoadRoundExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameRoadPuzzleRoadRoundExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameRoadPuzzleRoadRoundExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameRoadPuzzleRoadRoundExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def AdditionalRewardIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MinigameRoadPuzzleRoadRoundExcel
    def EndScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def EnterScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def IsLoop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameRoadPuzzleRoadRoundExcel
    def MapGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def Round(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def RoundReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameRoadPuzzleRoadRoundExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameRoadPuzzleRoadRoundExcelStart(builder): builder.StartObject(10)
def Start(builder):
    return MinigameRoadPuzzleRoadRoundExcelStart(builder)
def MinigameRoadPuzzleRoadRoundExcelAddAdditionalRewardAmount(builder, additionalRewardAmount): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(additionalRewardAmount), 0)
def AddAdditionalRewardAmount(builder, additionalRewardAmount):
    return MinigameRoadPuzzleRoadRoundExcelAddAdditionalRewardAmount(builder, additionalRewardAmount)
def MinigameRoadPuzzleRoadRoundExcelStartAdditionalRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAdditionalRewardAmountVector(builder, numElems):
    return MinigameRoadPuzzleRoadRoundExcelStartAdditionalRewardAmountVector(builder, numElems)
def MinigameRoadPuzzleRoadRoundExcelAddAdditionalRewardId(builder, additionalRewardId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(additionalRewardId), 0)
def AddAdditionalRewardId(builder, additionalRewardId):
    return MinigameRoadPuzzleRoadRoundExcelAddAdditionalRewardId(builder, additionalRewardId)
def MinigameRoadPuzzleRoadRoundExcelStartAdditionalRewardIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartAdditionalRewardIdVector(builder, numElems):
    return MinigameRoadPuzzleRoadRoundExcelStartAdditionalRewardIdVector(builder, numElems)
def MinigameRoadPuzzleRoadRoundExcelAddEndScenarioGroupId(builder, endScenarioGroupId): builder.PrependInt64Slot(2, endScenarioGroupId, 0)
def AddEndScenarioGroupId(builder, endScenarioGroupId):
    return MinigameRoadPuzzleRoadRoundExcelAddEndScenarioGroupId(builder, endScenarioGroupId)
def MinigameRoadPuzzleRoadRoundExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId): builder.PrependInt64Slot(3, enterScenarioGroupId, 0)
def AddEnterScenarioGroupId(builder, enterScenarioGroupId):
    return MinigameRoadPuzzleRoadRoundExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId)
def MinigameRoadPuzzleRoadRoundExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(4, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MinigameRoadPuzzleRoadRoundExcelAddEventContentId(builder, eventContentId)
def MinigameRoadPuzzleRoadRoundExcelAddIsLoop(builder, isLoop): builder.PrependBoolSlot(5, isLoop, 0)
def AddIsLoop(builder, isLoop):
    return MinigameRoadPuzzleRoadRoundExcelAddIsLoop(builder, isLoop)
def MinigameRoadPuzzleRoadRoundExcelAddMapGroupId(builder, mapGroupId): builder.PrependInt64Slot(6, mapGroupId, 0)
def AddMapGroupId(builder, mapGroupId):
    return MinigameRoadPuzzleRoadRoundExcelAddMapGroupId(builder, mapGroupId)
def MinigameRoadPuzzleRoadRoundExcelAddRound(builder, round): builder.PrependInt32Slot(7, round, 0)
def AddRound(builder, round):
    return MinigameRoadPuzzleRoadRoundExcelAddRound(builder, round)
def MinigameRoadPuzzleRoadRoundExcelAddRoundReward(builder, roundReward): builder.PrependInt64Slot(8, roundReward, 0)
def AddRoundReward(builder, roundReward):
    return MinigameRoadPuzzleRoadRoundExcelAddRoundReward(builder, roundReward)
def MinigameRoadPuzzleRoadRoundExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(9, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MinigameRoadPuzzleRoadRoundExcelAddUniqueId(builder, uniqueId)
def MinigameRoadPuzzleRoadRoundExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameRoadPuzzleRoadRoundExcelEnd(builder)