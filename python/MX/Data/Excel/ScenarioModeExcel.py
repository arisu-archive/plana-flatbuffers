# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioModeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioModeExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioModeExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioModeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioModeExcel
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ModeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def VolumeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EpisodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ExposedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def Hide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def Open(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def IsContinue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def EpisodeContinueModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # ScenarioModeExcel
    def StrategyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsDefeatBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # ScenarioModeExcel
    def ClearedModeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def ClearedModeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def ClearedModeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def ClearedModeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # ScenarioModeExcel
    def ScenarioModeRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsScenarioSpecialReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def AccountLevelLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ClearedStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClub(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClubStudentCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentConditionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def MapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def StepIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def RecommendLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventIconParcelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def EventBannerTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def Lof(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def FixedEchelonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def CompleteReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def CollectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ScenarioModeExcelStart(builder):
    builder.StartObject(39)

def Start(builder):
    ScenarioModeExcelStart(builder)

def ScenarioModeExcelAddModeId(builder, modeId):
    builder.PrependInt64Slot(0, modeId, 0)

def AddModeId(builder, modeId):
    ScenarioModeExcelAddModeId(builder, modeId)

def ScenarioModeExcelAddModeType(builder, modeType):
    builder.PrependInt32Slot(1, modeType, 0)

def AddModeType(builder, modeType):
    ScenarioModeExcelAddModeType(builder, modeType)

def ScenarioModeExcelAddSubType(builder, subType):
    builder.PrependInt32Slot(2, subType, 0)

def AddSubType(builder, subType):
    ScenarioModeExcelAddSubType(builder, subType)

def ScenarioModeExcelAddVolumeId(builder, volumeId):
    builder.PrependInt64Slot(3, volumeId, 0)

def AddVolumeId(builder, volumeId):
    ScenarioModeExcelAddVolumeId(builder, volumeId)

def ScenarioModeExcelAddChapterId(builder, chapterId):
    builder.PrependInt64Slot(4, chapterId, 0)

def AddChapterId(builder, chapterId):
    ScenarioModeExcelAddChapterId(builder, chapterId)

def ScenarioModeExcelAddEpisodeId(builder, episodeId):
    builder.PrependInt64Slot(5, episodeId, 0)

def AddEpisodeId(builder, episodeId):
    ScenarioModeExcelAddEpisodeId(builder, episodeId)

def ScenarioModeExcelAddExposedTime(builder, exposedTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(exposedTime), 0)

def AddExposedTime(builder, exposedTime):
    ScenarioModeExcelAddExposedTime(builder, exposedTime)

def ScenarioModeExcelAddHide(builder, hide):
    builder.PrependBoolSlot(7, hide, 0)

def AddHide(builder, hide):
    ScenarioModeExcelAddHide(builder, hide)

def ScenarioModeExcelAddOpen(builder, open):
    builder.PrependBoolSlot(8, open, 0)

def AddOpen(builder, open):
    ScenarioModeExcelAddOpen(builder, open)

def ScenarioModeExcelAddIsContinue(builder, isContinue):
    builder.PrependBoolSlot(9, isContinue, 0)

def AddIsContinue(builder, isContinue):
    ScenarioModeExcelAddIsContinue(builder, isContinue)

def ScenarioModeExcelAddEpisodeContinueModeId(builder, episodeContinueModeId):
    builder.PrependInt64Slot(10, episodeContinueModeId, 0)

def AddEpisodeContinueModeId(builder, episodeContinueModeId):
    ScenarioModeExcelAddEpisodeContinueModeId(builder, episodeContinueModeId)

def ScenarioModeExcelAddFrontScenarioGroupId(builder, frontScenarioGroupId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(frontScenarioGroupId), 0)

def AddFrontScenarioGroupId(builder, frontScenarioGroupId):
    ScenarioModeExcelAddFrontScenarioGroupId(builder, frontScenarioGroupId)

def ScenarioModeExcelStartFrontScenarioGroupIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartFrontScenarioGroupIdVector(builder, numElems):
    return ScenarioModeExcelStartFrontScenarioGroupIdVector(builder, numElems)

def ScenarioModeExcelAddStrategyId(builder, strategyId):
    builder.PrependInt64Slot(12, strategyId, 0)

def AddStrategyId(builder, strategyId):
    ScenarioModeExcelAddStrategyId(builder, strategyId)

def ScenarioModeExcelAddGroundId(builder, groundId):
    builder.PrependInt64Slot(13, groundId, 0)

def AddGroundId(builder, groundId):
    ScenarioModeExcelAddGroundId(builder, groundId)

def ScenarioModeExcelAddIsDefeatBattle(builder, isDefeatBattle):
    builder.PrependBoolSlot(14, isDefeatBattle, 0)

def AddIsDefeatBattle(builder, isDefeatBattle):
    ScenarioModeExcelAddIsDefeatBattle(builder, isDefeatBattle)

def ScenarioModeExcelAddBattleDuration(builder, battleDuration):
    builder.PrependInt64Slot(15, battleDuration, 0)

def AddBattleDuration(builder, battleDuration):
    ScenarioModeExcelAddBattleDuration(builder, battleDuration)

def ScenarioModeExcelAddBackScenarioGroupId(builder, backScenarioGroupId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(backScenarioGroupId), 0)

def AddBackScenarioGroupId(builder, backScenarioGroupId):
    ScenarioModeExcelAddBackScenarioGroupId(builder, backScenarioGroupId)

def ScenarioModeExcelStartBackScenarioGroupIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartBackScenarioGroupIdVector(builder, numElems):
    return ScenarioModeExcelStartBackScenarioGroupIdVector(builder, numElems)

def ScenarioModeExcelAddClearedModeId(builder, clearedModeId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(clearedModeId), 0)

def AddClearedModeId(builder, clearedModeId):
    ScenarioModeExcelAddClearedModeId(builder, clearedModeId)

def ScenarioModeExcelStartClearedModeIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartClearedModeIdVector(builder, numElems):
    return ScenarioModeExcelStartClearedModeIdVector(builder, numElems)

def ScenarioModeExcelAddScenarioModeRewardId(builder, scenarioModeRewardId):
    builder.PrependInt64Slot(18, scenarioModeRewardId, 0)

def AddScenarioModeRewardId(builder, scenarioModeRewardId):
    ScenarioModeExcelAddScenarioModeRewardId(builder, scenarioModeRewardId)

def ScenarioModeExcelAddIsScenarioSpecialReward(builder, isScenarioSpecialReward):
    builder.PrependBoolSlot(19, isScenarioSpecialReward, 0)

def AddIsScenarioSpecialReward(builder, isScenarioSpecialReward):
    ScenarioModeExcelAddIsScenarioSpecialReward(builder, isScenarioSpecialReward)

def ScenarioModeExcelAddAccountLevelLimit(builder, accountLevelLimit):
    builder.PrependInt64Slot(20, accountLevelLimit, 0)

def AddAccountLevelLimit(builder, accountLevelLimit):
    ScenarioModeExcelAddAccountLevelLimit(builder, accountLevelLimit)

def ScenarioModeExcelAddClearedStageId(builder, clearedStageId):
    builder.PrependInt64Slot(21, clearedStageId, 0)

def AddClearedStageId(builder, clearedStageId):
    ScenarioModeExcelAddClearedStageId(builder, clearedStageId)

def ScenarioModeExcelAddNeedClub(builder, needClub):
    builder.PrependInt32Slot(22, needClub, 0)

def AddNeedClub(builder, needClub):
    ScenarioModeExcelAddNeedClub(builder, needClub)

def ScenarioModeExcelAddNeedClubStudentCount(builder, needClubStudentCount):
    builder.PrependInt32Slot(23, needClubStudentCount, 0)

def AddNeedClubStudentCount(builder, needClubStudentCount):
    ScenarioModeExcelAddNeedClubStudentCount(builder, needClubStudentCount)

def ScenarioModeExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(24, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    ScenarioModeExcelAddEventContentId(builder, eventContentId)

def ScenarioModeExcelAddEventContentType(builder, eventContentType):
    builder.PrependInt32Slot(25, eventContentType, 0)

def AddEventContentType(builder, eventContentType):
    ScenarioModeExcelAddEventContentType(builder, eventContentType)

def ScenarioModeExcelAddEventContentCondition(builder, eventContentCondition):
    builder.PrependInt64Slot(26, eventContentCondition, 0)

def AddEventContentCondition(builder, eventContentCondition):
    ScenarioModeExcelAddEventContentCondition(builder, eventContentCondition)

def ScenarioModeExcelAddEventContentConditionGroup(builder, eventContentConditionGroup):
    builder.PrependInt64Slot(27, eventContentConditionGroup, 0)

def AddEventContentConditionGroup(builder, eventContentConditionGroup):
    ScenarioModeExcelAddEventContentConditionGroup(builder, eventContentConditionGroup)

def ScenarioModeExcelAddMapDifficulty(builder, mapDifficulty):
    builder.PrependInt32Slot(28, mapDifficulty, 0)

def AddMapDifficulty(builder, mapDifficulty):
    ScenarioModeExcelAddMapDifficulty(builder, mapDifficulty)

def ScenarioModeExcelAddStepIndex(builder, stepIndex):
    builder.PrependInt32Slot(29, stepIndex, 0)

def AddStepIndex(builder, stepIndex):
    ScenarioModeExcelAddStepIndex(builder, stepIndex)

def ScenarioModeExcelAddRecommendLevel(builder, recommendLevel):
    builder.PrependInt32Slot(30, recommendLevel, 0)

def AddRecommendLevel(builder, recommendLevel):
    ScenarioModeExcelAddRecommendLevel(builder, recommendLevel)

def ScenarioModeExcelAddEventIconParcelPath(builder, eventIconParcelPath):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(eventIconParcelPath), 0)

def AddEventIconParcelPath(builder, eventIconParcelPath):
    ScenarioModeExcelAddEventIconParcelPath(builder, eventIconParcelPath)

def ScenarioModeExcelAddEventBannerTitle(builder, eventBannerTitle):
    builder.PrependUint32Slot(32, eventBannerTitle, 0)

def AddEventBannerTitle(builder, eventBannerTitle):
    ScenarioModeExcelAddEventBannerTitle(builder, eventBannerTitle)

def ScenarioModeExcelAddLof(builder, lof):
    builder.PrependBoolSlot(33, lof, 0)

def AddLof(builder, lof):
    ScenarioModeExcelAddLof(builder, lof)

def ScenarioModeExcelAddStageTopography(builder, stageTopography):
    builder.PrependInt32Slot(34, stageTopography, 0)

def AddStageTopography(builder, stageTopography):
    ScenarioModeExcelAddStageTopography(builder, stageTopography)

def ScenarioModeExcelAddFixedEchelonId(builder, fixedEchelonId):
    builder.PrependInt64Slot(35, fixedEchelonId, 0)

def AddFixedEchelonId(builder, fixedEchelonId):
    ScenarioModeExcelAddFixedEchelonId(builder, fixedEchelonId)

def ScenarioModeExcelAddCompleteReportEventName(builder, completeReportEventName):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(completeReportEventName), 0)

def AddCompleteReportEventName(builder, completeReportEventName):
    ScenarioModeExcelAddCompleteReportEventName(builder, completeReportEventName)

def ScenarioModeExcelAddEchelonExtensionType(builder, echelonExtensionType):
    builder.PrependInt32Slot(37, echelonExtensionType, 0)

def AddEchelonExtensionType(builder, echelonExtensionType):
    ScenarioModeExcelAddEchelonExtensionType(builder, echelonExtensionType)

def ScenarioModeExcelAddCollectionGroupId(builder, collectionGroupId):
    builder.PrependInt64Slot(38, collectionGroupId, 0)

def AddCollectionGroupId(builder, collectionGroupId):
    ScenarioModeExcelAddCollectionGroupId(builder, collectionGroupId)

def ScenarioModeExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScenarioModeExcelEnd(builder)
