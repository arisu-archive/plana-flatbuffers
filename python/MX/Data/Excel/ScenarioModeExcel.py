# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioModeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioModeExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioModeExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioModeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioModeExcel
    def CollectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def CompleteReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def FixedEchelonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def Lof(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def EventBannerTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventIconParcelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def RecommendLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def StepIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def MapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentConditionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClubStudentCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClub(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ClearedStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def AccountLevelLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsScenarioSpecialReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def ScenarioModeRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ClearedModeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def ClearedModeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def ClearedModeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def ClearedModeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # ScenarioModeExcel
    def BackScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # ScenarioModeExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsDefeatBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def StrategyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # ScenarioModeExcel
    def EpisodeContinueModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsContinue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def Open(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def Hide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def ExposedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def EpisodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def VolumeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ModeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ScenarioModeExcelStart(builder): builder.StartObject(39)
def Start(builder):
    return ScenarioModeExcelStart(builder)
def ScenarioModeExcelAddCollectionGroupId(builder, collectionGroupId): builder.PrependInt64Slot(0, collectionGroupId, 0)
def AddCollectionGroupId(builder, collectionGroupId):
    return ScenarioModeExcelAddCollectionGroupId(builder, collectionGroupId)
def ScenarioModeExcelAddEchelonExtensionType(builder, echelonExtensionType): builder.PrependInt32Slot(1, echelonExtensionType, 0)
def AddEchelonExtensionType(builder, echelonExtensionType):
    return ScenarioModeExcelAddEchelonExtensionType(builder, echelonExtensionType)
def ScenarioModeExcelAddCompleteReportEventName(builder, completeReportEventName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(completeReportEventName), 0)
def AddCompleteReportEventName(builder, completeReportEventName):
    return ScenarioModeExcelAddCompleteReportEventName(builder, completeReportEventName)
def ScenarioModeExcelAddFixedEchelonId(builder, fixedEchelonId): builder.PrependInt64Slot(3, fixedEchelonId, 0)
def AddFixedEchelonId(builder, fixedEchelonId):
    return ScenarioModeExcelAddFixedEchelonId(builder, fixedEchelonId)
def ScenarioModeExcelAddStageTopography(builder, stageTopography): builder.PrependInt32Slot(4, stageTopography, 0)
def AddStageTopography(builder, stageTopography):
    return ScenarioModeExcelAddStageTopography(builder, stageTopography)
def ScenarioModeExcelAddLof(builder, lof): builder.PrependBoolSlot(5, lof, 0)
def AddLof(builder, lof):
    return ScenarioModeExcelAddLof(builder, lof)
def ScenarioModeExcelAddEventBannerTitle(builder, eventBannerTitle): builder.PrependUint32Slot(6, eventBannerTitle, 0)
def AddEventBannerTitle(builder, eventBannerTitle):
    return ScenarioModeExcelAddEventBannerTitle(builder, eventBannerTitle)
def ScenarioModeExcelAddEventIconParcelPath(builder, eventIconParcelPath): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(eventIconParcelPath), 0)
def AddEventIconParcelPath(builder, eventIconParcelPath):
    return ScenarioModeExcelAddEventIconParcelPath(builder, eventIconParcelPath)
def ScenarioModeExcelAddRecommendLevel(builder, recommendLevel): builder.PrependInt32Slot(8, recommendLevel, 0)
def AddRecommendLevel(builder, recommendLevel):
    return ScenarioModeExcelAddRecommendLevel(builder, recommendLevel)
def ScenarioModeExcelAddStepIndex(builder, stepIndex): builder.PrependInt32Slot(9, stepIndex, 0)
def AddStepIndex(builder, stepIndex):
    return ScenarioModeExcelAddStepIndex(builder, stepIndex)
def ScenarioModeExcelAddMapDifficulty(builder, mapDifficulty): builder.PrependInt32Slot(10, mapDifficulty, 0)
def AddMapDifficulty(builder, mapDifficulty):
    return ScenarioModeExcelAddMapDifficulty(builder, mapDifficulty)
def ScenarioModeExcelAddEventContentConditionGroup(builder, eventContentConditionGroup): builder.PrependInt64Slot(11, eventContentConditionGroup, 0)
def AddEventContentConditionGroup(builder, eventContentConditionGroup):
    return ScenarioModeExcelAddEventContentConditionGroup(builder, eventContentConditionGroup)
def ScenarioModeExcelAddEventContentCondition(builder, eventContentCondition): builder.PrependInt64Slot(12, eventContentCondition, 0)
def AddEventContentCondition(builder, eventContentCondition):
    return ScenarioModeExcelAddEventContentCondition(builder, eventContentCondition)
def ScenarioModeExcelAddEventContentType(builder, eventContentType): builder.PrependInt32Slot(13, eventContentType, 0)
def AddEventContentType(builder, eventContentType):
    return ScenarioModeExcelAddEventContentType(builder, eventContentType)
def ScenarioModeExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(14, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return ScenarioModeExcelAddEventContentId(builder, eventContentId)
def ScenarioModeExcelAddNeedClubStudentCount(builder, needClubStudentCount): builder.PrependInt32Slot(15, needClubStudentCount, 0)
def AddNeedClubStudentCount(builder, needClubStudentCount):
    return ScenarioModeExcelAddNeedClubStudentCount(builder, needClubStudentCount)
def ScenarioModeExcelAddNeedClub(builder, needClub): builder.PrependInt32Slot(16, needClub, 0)
def AddNeedClub(builder, needClub):
    return ScenarioModeExcelAddNeedClub(builder, needClub)
def ScenarioModeExcelAddClearedStageId(builder, clearedStageId): builder.PrependInt64Slot(17, clearedStageId, 0)
def AddClearedStageId(builder, clearedStageId):
    return ScenarioModeExcelAddClearedStageId(builder, clearedStageId)
def ScenarioModeExcelAddAccountLevelLimit(builder, accountLevelLimit): builder.PrependInt64Slot(18, accountLevelLimit, 0)
def AddAccountLevelLimit(builder, accountLevelLimit):
    return ScenarioModeExcelAddAccountLevelLimit(builder, accountLevelLimit)
def ScenarioModeExcelAddIsScenarioSpecialReward(builder, isScenarioSpecialReward): builder.PrependBoolSlot(19, isScenarioSpecialReward, 0)
def AddIsScenarioSpecialReward(builder, isScenarioSpecialReward):
    return ScenarioModeExcelAddIsScenarioSpecialReward(builder, isScenarioSpecialReward)
def ScenarioModeExcelAddScenarioModeRewardId(builder, scenarioModeRewardId): builder.PrependInt64Slot(20, scenarioModeRewardId, 0)
def AddScenarioModeRewardId(builder, scenarioModeRewardId):
    return ScenarioModeExcelAddScenarioModeRewardId(builder, scenarioModeRewardId)
def ScenarioModeExcelAddClearedModeId(builder, clearedModeId): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(clearedModeId), 0)
def AddClearedModeId(builder, clearedModeId):
    return ScenarioModeExcelAddClearedModeId(builder, clearedModeId)
def ScenarioModeExcelStartClearedModeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartClearedModeIdVector(builder, numElems):
    return ScenarioModeExcelStartClearedModeIdVector(builder, numElems)
def ScenarioModeExcelAddBackScenarioGroupId(builder, backScenarioGroupId): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(backScenarioGroupId), 0)
def AddBackScenarioGroupId(builder, backScenarioGroupId):
    return ScenarioModeExcelAddBackScenarioGroupId(builder, backScenarioGroupId)
def ScenarioModeExcelStartBackScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartBackScenarioGroupIdVector(builder, numElems):
    return ScenarioModeExcelStartBackScenarioGroupIdVector(builder, numElems)
def ScenarioModeExcelAddBattleDuration(builder, battleDuration): builder.PrependInt64Slot(23, battleDuration, 0)
def AddBattleDuration(builder, battleDuration):
    return ScenarioModeExcelAddBattleDuration(builder, battleDuration)
def ScenarioModeExcelAddIsDefeatBattle(builder, isDefeatBattle): builder.PrependBoolSlot(24, isDefeatBattle, 0)
def AddIsDefeatBattle(builder, isDefeatBattle):
    return ScenarioModeExcelAddIsDefeatBattle(builder, isDefeatBattle)
def ScenarioModeExcelAddGroundId(builder, groundId): builder.PrependInt64Slot(25, groundId, 0)
def AddGroundId(builder, groundId):
    return ScenarioModeExcelAddGroundId(builder, groundId)
def ScenarioModeExcelAddStrategyId(builder, strategyId): builder.PrependInt64Slot(26, strategyId, 0)
def AddStrategyId(builder, strategyId):
    return ScenarioModeExcelAddStrategyId(builder, strategyId)
def ScenarioModeExcelAddFrontScenarioGroupId(builder, frontScenarioGroupId): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(frontScenarioGroupId), 0)
def AddFrontScenarioGroupId(builder, frontScenarioGroupId):
    return ScenarioModeExcelAddFrontScenarioGroupId(builder, frontScenarioGroupId)
def ScenarioModeExcelStartFrontScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartFrontScenarioGroupIdVector(builder, numElems):
    return ScenarioModeExcelStartFrontScenarioGroupIdVector(builder, numElems)
def ScenarioModeExcelAddEpisodeContinueModeId(builder, episodeContinueModeId): builder.PrependInt64Slot(28, episodeContinueModeId, 0)
def AddEpisodeContinueModeId(builder, episodeContinueModeId):
    return ScenarioModeExcelAddEpisodeContinueModeId(builder, episodeContinueModeId)
def ScenarioModeExcelAddIsContinue(builder, isContinue): builder.PrependBoolSlot(29, isContinue, 0)
def AddIsContinue(builder, isContinue):
    return ScenarioModeExcelAddIsContinue(builder, isContinue)
def ScenarioModeExcelAddOpen(builder, open): builder.PrependBoolSlot(30, open, 0)
def AddOpen(builder, open):
    return ScenarioModeExcelAddOpen(builder, open)
def ScenarioModeExcelAddHide(builder, hide): builder.PrependBoolSlot(31, hide, 0)
def AddHide(builder, hide):
    return ScenarioModeExcelAddHide(builder, hide)
def ScenarioModeExcelAddExposedTime(builder, exposedTime): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(exposedTime), 0)
def AddExposedTime(builder, exposedTime):
    return ScenarioModeExcelAddExposedTime(builder, exposedTime)
def ScenarioModeExcelAddEpisodeId(builder, episodeId): builder.PrependInt64Slot(33, episodeId, 0)
def AddEpisodeId(builder, episodeId):
    return ScenarioModeExcelAddEpisodeId(builder, episodeId)
def ScenarioModeExcelAddChapterId(builder, chapterId): builder.PrependInt64Slot(34, chapterId, 0)
def AddChapterId(builder, chapterId):
    return ScenarioModeExcelAddChapterId(builder, chapterId)
def ScenarioModeExcelAddVolumeId(builder, volumeId): builder.PrependInt64Slot(35, volumeId, 0)
def AddVolumeId(builder, volumeId):
    return ScenarioModeExcelAddVolumeId(builder, volumeId)
def ScenarioModeExcelAddSubType(builder, subType): builder.PrependInt32Slot(36, subType, 0)
def AddSubType(builder, subType):
    return ScenarioModeExcelAddSubType(builder, subType)
def ScenarioModeExcelAddModeType(builder, modeType): builder.PrependInt32Slot(37, modeType, 0)
def AddModeType(builder, modeType):
    return ScenarioModeExcelAddModeType(builder, modeType)
def ScenarioModeExcelAddModeId(builder, modeId): builder.PrependInt64Slot(38, modeId, 0)
def AddModeId(builder, modeId):
    return ScenarioModeExcelAddModeId(builder, modeId)
def ScenarioModeExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ScenarioModeExcelEnd(builder)