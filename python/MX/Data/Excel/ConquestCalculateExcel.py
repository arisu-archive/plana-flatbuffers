# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestCalculateExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestCalculateExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConquestCalculateExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConquestCalculateExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestCalculateExcel
    def CalculateConditionParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestCalculateExcel
    def CalculateConditionParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestCalculateExcel
    def CalculateConditionParcelUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestCalculateExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ConquestCalculateExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return ConquestCalculateExcelStart(builder)
def ConquestCalculateExcelAddCalculateConditionParcelAmount(builder, calculateConditionParcelAmount): builder.PrependInt64Slot(0, calculateConditionParcelAmount, 0)
def AddCalculateConditionParcelAmount(builder, calculateConditionParcelAmount):
    return ConquestCalculateExcelAddCalculateConditionParcelAmount(builder, calculateConditionParcelAmount)
def ConquestCalculateExcelAddCalculateConditionParcelType(builder, calculateConditionParcelType): builder.PrependInt32Slot(1, calculateConditionParcelType, 0)
def AddCalculateConditionParcelType(builder, calculateConditionParcelType):
    return ConquestCalculateExcelAddCalculateConditionParcelType(builder, calculateConditionParcelType)
def ConquestCalculateExcelAddCalculateConditionParcelUniqueId(builder, calculateConditionParcelUniqueId): builder.PrependInt64Slot(2, calculateConditionParcelUniqueId, 0)
def AddCalculateConditionParcelUniqueId(builder, calculateConditionParcelUniqueId):
    return ConquestCalculateExcelAddCalculateConditionParcelUniqueId(builder, calculateConditionParcelUniqueId)
def ConquestCalculateExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(3, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return ConquestCalculateExcelAddEventContentId(builder, eventContentId)
def ConquestCalculateExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConquestCalculateExcelEnd(builder)