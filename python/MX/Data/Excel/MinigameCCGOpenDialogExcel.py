# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGOpenDialogExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGOpenDialogExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGOpenDialogExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGOpenDialogExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGOpenDialogExcel
    def Voice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGOpenDialogExcel
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGOpenDialogExcel
    def Dialog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGOpenDialogExcel
    def ConditionCard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGOpenDialogExcel
    def PlayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGOpenDialogExcel
    def DialogId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameCCGOpenDialogExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return MinigameCCGOpenDialogExcelStart(builder)
def MinigameCCGOpenDialogExcelAddVoice(builder, voice): builder.PrependUint32Slot(0, voice, 0)
def AddVoice(builder, voice):
    return MinigameCCGOpenDialogExcelAddVoice(builder, voice)
def MinigameCCGOpenDialogExcelAddDuration(builder, duration): builder.PrependInt64Slot(1, duration, 0)
def AddDuration(builder, duration):
    return MinigameCCGOpenDialogExcelAddDuration(builder, duration)
def MinigameCCGOpenDialogExcelAddDialog(builder, dialog): builder.PrependUint32Slot(2, dialog, 0)
def AddDialog(builder, dialog):
    return MinigameCCGOpenDialogExcelAddDialog(builder, dialog)
def MinigameCCGOpenDialogExcelAddConditionCard(builder, conditionCard): builder.PrependInt64Slot(3, conditionCard, 0)
def AddConditionCard(builder, conditionCard):
    return MinigameCCGOpenDialogExcelAddConditionCard(builder, conditionCard)
def MinigameCCGOpenDialogExcelAddPlayOrder(builder, playOrder): builder.PrependInt32Slot(4, playOrder, 0)
def AddPlayOrder(builder, playOrder):
    return MinigameCCGOpenDialogExcelAddPlayOrder(builder, playOrder)
def MinigameCCGOpenDialogExcelAddDialogId(builder, dialogId): builder.PrependInt64Slot(5, dialogId, 0)
def AddDialogId(builder, dialogId):
    return MinigameCCGOpenDialogExcelAddDialogId(builder, dialogId)
def MinigameCCGOpenDialogExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameCCGOpenDialogExcelEnd(builder)