# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentShopExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentShopExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentShopExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentShopExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentShopExcel
    def BuyReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentShopExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def GoodsId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentShopExcel
    def GoodsIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentShopExcel
    def GoodsIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentShopExcel
    def GoodsIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # EventContentShopExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentShopExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def PurchaseCooltimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def PurchaseCountLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def PurchaseCountResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentShopExcel
    def RestrictBuyWhenInventoryFull(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentShopExcel
    def SalePeriodFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentShopExcel
    def SalePeriodTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EventContentShopExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return EventContentShopExcelStart(builder)
def EventContentShopExcelAddBuyReportEventName(builder, buyReportEventName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buyReportEventName), 0)
def AddBuyReportEventName(builder, buyReportEventName):
    return EventContentShopExcelAddBuyReportEventName(builder, buyReportEventName)
def EventContentShopExcelAddCategoryType(builder, categoryType): builder.PrependInt32Slot(1, categoryType, 0)
def AddCategoryType(builder, categoryType):
    return EventContentShopExcelAddCategoryType(builder, categoryType)
def EventContentShopExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(2, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return EventContentShopExcelAddDisplayOrder(builder, displayOrder)
def EventContentShopExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(3, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentShopExcelAddEventContentId(builder, eventContentId)
def EventContentShopExcelAddGoodsId(builder, goodsId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(goodsId), 0)
def AddGoodsId(builder, goodsId):
    return EventContentShopExcelAddGoodsId(builder, goodsId)
def EventContentShopExcelStartGoodsIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartGoodsIdVector(builder, numElems):
    return EventContentShopExcelStartGoodsIdVector(builder, numElems)
def EventContentShopExcelAddId(builder, id): builder.PrependInt64Slot(5, id, 0)
def AddId(builder, id):
    return EventContentShopExcelAddId(builder, id)
def EventContentShopExcelAddIsLegacy(builder, isLegacy): builder.PrependBoolSlot(6, isLegacy, 0)
def AddIsLegacy(builder, isLegacy):
    return EventContentShopExcelAddIsLegacy(builder, isLegacy)
def EventContentShopExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(7, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return EventContentShopExcelAddLocalizeEtcId(builder, localizeEtcId)
def EventContentShopExcelAddPurchaseCooltimeMin(builder, purchaseCooltimeMin): builder.PrependInt64Slot(8, purchaseCooltimeMin, 0)
def AddPurchaseCooltimeMin(builder, purchaseCooltimeMin):
    return EventContentShopExcelAddPurchaseCooltimeMin(builder, purchaseCooltimeMin)
def EventContentShopExcelAddPurchaseCountLimit(builder, purchaseCountLimit): builder.PrependInt64Slot(9, purchaseCountLimit, 0)
def AddPurchaseCountLimit(builder, purchaseCountLimit):
    return EventContentShopExcelAddPurchaseCountLimit(builder, purchaseCountLimit)
def EventContentShopExcelAddPurchaseCountResetType(builder, purchaseCountResetType): builder.PrependInt32Slot(10, purchaseCountResetType, 0)
def AddPurchaseCountResetType(builder, purchaseCountResetType):
    return EventContentShopExcelAddPurchaseCountResetType(builder, purchaseCountResetType)
def EventContentShopExcelAddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull): builder.PrependBoolSlot(11, restrictBuyWhenInventoryFull, 0)
def AddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull):
    return EventContentShopExcelAddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull)
def EventContentShopExcelAddSalePeriodFrom(builder, salePeriodFrom): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(salePeriodFrom), 0)
def AddSalePeriodFrom(builder, salePeriodFrom):
    return EventContentShopExcelAddSalePeriodFrom(builder, salePeriodFrom)
def EventContentShopExcelAddSalePeriodTo(builder, salePeriodTo): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(salePeriodTo), 0)
def AddSalePeriodTo(builder, salePeriodTo):
    return EventContentShopExcelAddSalePeriodTo(builder, salePeriodTo)
def EventContentShopExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentShopExcelEnd(builder)