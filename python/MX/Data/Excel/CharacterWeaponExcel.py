# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterWeaponExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterWeaponExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterWeaponExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterWeaponExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterWeaponExcel
    def AttackPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def AttackPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def HealPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def HealPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterWeaponExcel
    def LearnSkillSlot(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterWeaponExcel
    def LearnSkillSlotLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def LearnSkillSlotIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CharacterWeaponExcel
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def MaxHp100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def MaxLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterWeaponExcel
    def MaxLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterWeaponExcel
    def MaxLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def MaxLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # CharacterWeaponExcel
    def RecipeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterWeaponExcel
    def RecipeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterWeaponExcel
    def RecipeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def RecipeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CharacterWeaponExcel
    def SetRecipe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def StatLevelUpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def StatType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterWeaponExcel
    def StatTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterWeaponExcel
    def StatTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def StatTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # CharacterWeaponExcel
    def StatValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterWeaponExcel
    def StatValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterWeaponExcel
    def StatValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def StatValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # CharacterWeaponExcel
    def Unlock(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CharacterWeaponExcel
    def UnlockAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # CharacterWeaponExcel
    def UnlockLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def UnlockIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def CharacterWeaponExcelStart(builder): builder.StartObject(16)
def Start(builder):
    return CharacterWeaponExcelStart(builder)
def CharacterWeaponExcelAddAttackPower(builder, attackPower): builder.PrependInt64Slot(0, attackPower, 0)
def AddAttackPower(builder, attackPower):
    return CharacterWeaponExcelAddAttackPower(builder, attackPower)
def CharacterWeaponExcelAddAttackPower100(builder, attackPower100): builder.PrependInt64Slot(1, attackPower100, 0)
def AddAttackPower100(builder, attackPower100):
    return CharacterWeaponExcelAddAttackPower100(builder, attackPower100)
def CharacterWeaponExcelAddHealPower(builder, healPower): builder.PrependInt64Slot(2, healPower, 0)
def AddHealPower(builder, healPower):
    return CharacterWeaponExcelAddHealPower(builder, healPower)
def CharacterWeaponExcelAddHealPower100(builder, healPower100): builder.PrependInt64Slot(3, healPower100, 0)
def AddHealPower100(builder, healPower100):
    return CharacterWeaponExcelAddHealPower100(builder, healPower100)
def CharacterWeaponExcelAddId(builder, id): builder.PrependInt64Slot(4, id, 0)
def AddId(builder, id):
    return CharacterWeaponExcelAddId(builder, id)
def CharacterWeaponExcelAddImagePath(builder, imagePath): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(imagePath), 0)
def AddImagePath(builder, imagePath):
    return CharacterWeaponExcelAddImagePath(builder, imagePath)
def CharacterWeaponExcelAddLearnSkillSlot(builder, learnSkillSlot): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(learnSkillSlot), 0)
def AddLearnSkillSlot(builder, learnSkillSlot):
    return CharacterWeaponExcelAddLearnSkillSlot(builder, learnSkillSlot)
def CharacterWeaponExcelStartLearnSkillSlotVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLearnSkillSlotVector(builder, numElems):
    return CharacterWeaponExcelStartLearnSkillSlotVector(builder, numElems)
def CharacterWeaponExcelAddMaxHp(builder, maxHp): builder.PrependInt64Slot(7, maxHp, 0)
def AddMaxHp(builder, maxHp):
    return CharacterWeaponExcelAddMaxHp(builder, maxHp)
def CharacterWeaponExcelAddMaxHp100(builder, maxHp100): builder.PrependInt64Slot(8, maxHp100, 0)
def AddMaxHp100(builder, maxHp100):
    return CharacterWeaponExcelAddMaxHp100(builder, maxHp100)
def CharacterWeaponExcelAddMaxLevel(builder, maxLevel): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(maxLevel), 0)
def AddMaxLevel(builder, maxLevel):
    return CharacterWeaponExcelAddMaxLevel(builder, maxLevel)
def CharacterWeaponExcelStartMaxLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMaxLevelVector(builder, numElems):
    return CharacterWeaponExcelStartMaxLevelVector(builder, numElems)
def CharacterWeaponExcelAddRecipeId(builder, recipeId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(recipeId), 0)
def AddRecipeId(builder, recipeId):
    return CharacterWeaponExcelAddRecipeId(builder, recipeId)
def CharacterWeaponExcelStartRecipeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRecipeIdVector(builder, numElems):
    return CharacterWeaponExcelStartRecipeIdVector(builder, numElems)
def CharacterWeaponExcelAddSetRecipe(builder, setRecipe): builder.PrependInt64Slot(11, setRecipe, 0)
def AddSetRecipe(builder, setRecipe):
    return CharacterWeaponExcelAddSetRecipe(builder, setRecipe)
def CharacterWeaponExcelAddStatLevelUpType(builder, statLevelUpType): builder.PrependInt32Slot(12, statLevelUpType, 0)
def AddStatLevelUpType(builder, statLevelUpType):
    return CharacterWeaponExcelAddStatLevelUpType(builder, statLevelUpType)
def CharacterWeaponExcelAddStatType(builder, statType): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(statType), 0)
def AddStatType(builder, statType):
    return CharacterWeaponExcelAddStatType(builder, statType)
def CharacterWeaponExcelStartStatTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStatTypeVector(builder, numElems):
    return CharacterWeaponExcelStartStatTypeVector(builder, numElems)
def CharacterWeaponExcelAddStatValue(builder, statValue): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(statValue), 0)
def AddStatValue(builder, statValue):
    return CharacterWeaponExcelAddStatValue(builder, statValue)
def CharacterWeaponExcelStartStatValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartStatValueVector(builder, numElems):
    return CharacterWeaponExcelStartStatValueVector(builder, numElems)
def CharacterWeaponExcelAddUnlock(builder, unlock): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(unlock), 0)
def AddUnlock(builder, unlock):
    return CharacterWeaponExcelAddUnlock(builder, unlock)
def CharacterWeaponExcelStartUnlockVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartUnlockVector(builder, numElems):
    return CharacterWeaponExcelStartUnlockVector(builder, numElems)
def CharacterWeaponExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterWeaponExcelEnd(builder)