# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenConditionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenConditionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpenConditionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpenConditionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenConditionExcel
    def OpenConditionContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def LockUi(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpenConditionExcel
    def LockUiLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenConditionExcel
    def LockUiIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OpenConditionExcel
    def ShortcutPopupPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def ShortcutUiName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpenConditionExcel
    def ShortcutUiNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenConditionExcel
    def ShortcutUiNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # OpenConditionExcel
    def ShortcutParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def Scene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpenConditionExcel
    def HideWhenLocked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OpenConditionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def ScenarioModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CampaignStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def MultipleConditionCheckType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def OpenDayOfWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def OpenHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CloseDayOfWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CloseHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def OpenedCafeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CafeIdforCafeRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CafeRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def ContentsOpenShow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OpenConditionExcel
    def ContentsOpenShortcutUi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OpenConditionExcelStart(builder): builder.StartObject(20)
def Start(builder):
    return OpenConditionExcelStart(builder)
def OpenConditionExcelAddOpenConditionContentType(builder, openConditionContentType): builder.PrependInt32Slot(0, openConditionContentType, 0)
def AddOpenConditionContentType(builder, openConditionContentType):
    return OpenConditionExcelAddOpenConditionContentType(builder, openConditionContentType)
def OpenConditionExcelAddLockUi(builder, lockUi): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lockUi), 0)
def AddLockUi(builder, lockUi):
    return OpenConditionExcelAddLockUi(builder, lockUi)
def OpenConditionExcelStartLockUiVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLockUiVector(builder, numElems):
    return OpenConditionExcelStartLockUiVector(builder, numElems)
def OpenConditionExcelAddShortcutPopupPriority(builder, shortcutPopupPriority): builder.PrependInt64Slot(2, shortcutPopupPriority, 0)
def AddShortcutPopupPriority(builder, shortcutPopupPriority):
    return OpenConditionExcelAddShortcutPopupPriority(builder, shortcutPopupPriority)
def OpenConditionExcelAddShortcutUiName(builder, shortcutUiName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shortcutUiName), 0)
def AddShortcutUiName(builder, shortcutUiName):
    return OpenConditionExcelAddShortcutUiName(builder, shortcutUiName)
def OpenConditionExcelStartShortcutUiNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartShortcutUiNameVector(builder, numElems):
    return OpenConditionExcelStartShortcutUiNameVector(builder, numElems)
def OpenConditionExcelAddShortcutParam(builder, shortcutParam): builder.PrependInt32Slot(4, shortcutParam, 0)
def AddShortcutParam(builder, shortcutParam):
    return OpenConditionExcelAddShortcutParam(builder, shortcutParam)
def OpenConditionExcelAddScene(builder, scene): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scene), 0)
def AddScene(builder, scene):
    return OpenConditionExcelAddScene(builder, scene)
def OpenConditionExcelAddHideWhenLocked(builder, hideWhenLocked): builder.PrependBoolSlot(6, hideWhenLocked, 0)
def AddHideWhenLocked(builder, hideWhenLocked):
    return OpenConditionExcelAddHideWhenLocked(builder, hideWhenLocked)
def OpenConditionExcelAddAccountLevel(builder, accountLevel): builder.PrependInt64Slot(7, accountLevel, 0)
def AddAccountLevel(builder, accountLevel):
    return OpenConditionExcelAddAccountLevel(builder, accountLevel)
def OpenConditionExcelAddScenarioModeId(builder, scenarioModeId): builder.PrependInt64Slot(8, scenarioModeId, 0)
def AddScenarioModeId(builder, scenarioModeId):
    return OpenConditionExcelAddScenarioModeId(builder, scenarioModeId)
def OpenConditionExcelAddCampaignStageId(builder, campaignStageId): builder.PrependInt64Slot(9, campaignStageId, 0)
def AddCampaignStageId(builder, campaignStageId):
    return OpenConditionExcelAddCampaignStageId(builder, campaignStageId)
def OpenConditionExcelAddMultipleConditionCheckType(builder, multipleConditionCheckType): builder.PrependInt32Slot(10, multipleConditionCheckType, 0)
def AddMultipleConditionCheckType(builder, multipleConditionCheckType):
    return OpenConditionExcelAddMultipleConditionCheckType(builder, multipleConditionCheckType)
def OpenConditionExcelAddOpenDayOfWeek(builder, openDayOfWeek): builder.PrependInt32Slot(11, openDayOfWeek, 0)
def AddOpenDayOfWeek(builder, openDayOfWeek):
    return OpenConditionExcelAddOpenDayOfWeek(builder, openDayOfWeek)
def OpenConditionExcelAddOpenHour(builder, openHour): builder.PrependInt64Slot(12, openHour, 0)
def AddOpenHour(builder, openHour):
    return OpenConditionExcelAddOpenHour(builder, openHour)
def OpenConditionExcelAddCloseDayOfWeek(builder, closeDayOfWeek): builder.PrependInt32Slot(13, closeDayOfWeek, 0)
def AddCloseDayOfWeek(builder, closeDayOfWeek):
    return OpenConditionExcelAddCloseDayOfWeek(builder, closeDayOfWeek)
def OpenConditionExcelAddCloseHour(builder, closeHour): builder.PrependInt64Slot(14, closeHour, 0)
def AddCloseHour(builder, closeHour):
    return OpenConditionExcelAddCloseHour(builder, closeHour)
def OpenConditionExcelAddOpenedCafeId(builder, openedCafeId): builder.PrependInt64Slot(15, openedCafeId, 0)
def AddOpenedCafeId(builder, openedCafeId):
    return OpenConditionExcelAddOpenedCafeId(builder, openedCafeId)
def OpenConditionExcelAddCafeIdforCafeRank(builder, cafeIdforCafeRank): builder.PrependInt64Slot(16, cafeIdforCafeRank, 0)
def AddCafeIdforCafeRank(builder, cafeIdforCafeRank):
    return OpenConditionExcelAddCafeIdforCafeRank(builder, cafeIdforCafeRank)
def OpenConditionExcelAddCafeRank(builder, cafeRank): builder.PrependInt64Slot(17, cafeRank, 0)
def AddCafeRank(builder, cafeRank):
    return OpenConditionExcelAddCafeRank(builder, cafeRank)
def OpenConditionExcelAddContentsOpenShow(builder, contentsOpenShow): builder.PrependBoolSlot(18, contentsOpenShow, 0)
def AddContentsOpenShow(builder, contentsOpenShow):
    return OpenConditionExcelAddContentsOpenShow(builder, contentsOpenShow)
def OpenConditionExcelAddContentsOpenShortcutUi(builder, contentsOpenShortcutUi): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(contentsOpenShortcutUi), 0)
def AddContentsOpenShortcutUi(builder, contentsOpenShortcutUi):
    return OpenConditionExcelAddContentsOpenShortcutUi(builder, contentsOpenShortcutUi)
def OpenConditionExcelEnd(builder): return builder.EndObject()
def End(builder):
    return OpenConditionExcelEnd(builder)