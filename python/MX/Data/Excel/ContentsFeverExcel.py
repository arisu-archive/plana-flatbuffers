# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ContentsFeverExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContentsFeverExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContentsFeverExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ContentsFeverExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContentsFeverExcel
    def ConditionContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsFeverExcel
    def SkillFeverCheckCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsFeverExcel
    def SkillCostFever(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsFeverExcel
    def FeverStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsFeverExcel
    def FeverDurationTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ContentsFeverExcelStart(builder):
    builder.StartObject(5)

def Start(builder):
    ContentsFeverExcelStart(builder)

def ContentsFeverExcelAddConditionContent(builder, conditionContent):
    builder.PrependInt32Slot(0, conditionContent, 0)

def AddConditionContent(builder, conditionContent):
    ContentsFeverExcelAddConditionContent(builder, conditionContent)

def ContentsFeverExcelAddSkillFeverCheckCondition(builder, skillFeverCheckCondition):
    builder.PrependInt32Slot(1, skillFeverCheckCondition, 0)

def AddSkillFeverCheckCondition(builder, skillFeverCheckCondition):
    ContentsFeverExcelAddSkillFeverCheckCondition(builder, skillFeverCheckCondition)

def ContentsFeverExcelAddSkillCostFever(builder, skillCostFever):
    builder.PrependInt64Slot(2, skillCostFever, 0)

def AddSkillCostFever(builder, skillCostFever):
    ContentsFeverExcelAddSkillCostFever(builder, skillCostFever)

def ContentsFeverExcelAddFeverStartTime(builder, feverStartTime):
    builder.PrependInt64Slot(3, feverStartTime, 0)

def AddFeverStartTime(builder, feverStartTime):
    ContentsFeverExcelAddFeverStartTime(builder, feverStartTime)

def ContentsFeverExcelAddFeverDurationTime(builder, feverDurationTime):
    builder.PrependInt64Slot(4, feverDurationTime, 0)

def AddFeverDurationTime(builder, feverDurationTime):
    ContentsFeverExcelAddFeverDurationTime(builder, feverDurationTime)

def ContentsFeverExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ContentsFeverExcelEnd(builder)
