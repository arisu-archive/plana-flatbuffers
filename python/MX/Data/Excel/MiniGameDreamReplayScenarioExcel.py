# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamReplayScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamReplayScenarioExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamReplayScenarioExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamReplayScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamReplayScenarioExcel
    def IsReplayScenarioHorizon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameDreamReplayScenarioExcel
    def ReplayScenarioResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDreamReplayScenarioExcel
    def ReplaySummaryLocalizeScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def ReplaySummaryTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def ScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamReplayScenarioExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return MiniGameDreamReplayScenarioExcelStart(builder)
def MiniGameDreamReplayScenarioExcelAddIsReplayScenarioHorizon(builder, isReplayScenarioHorizon): builder.PrependBoolSlot(0, isReplayScenarioHorizon, 0)
def AddIsReplayScenarioHorizon(builder, isReplayScenarioHorizon):
    return MiniGameDreamReplayScenarioExcelAddIsReplayScenarioHorizon(builder, isReplayScenarioHorizon)
def MiniGameDreamReplayScenarioExcelAddReplayScenarioResource(builder, replayScenarioResource): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(replayScenarioResource), 0)
def AddReplayScenarioResource(builder, replayScenarioResource):
    return MiniGameDreamReplayScenarioExcelAddReplayScenarioResource(builder, replayScenarioResource)
def MiniGameDreamReplayScenarioExcelAddReplaySummaryLocalizeScenarioId(builder, replaySummaryLocalizeScenarioId): builder.PrependUint32Slot(2, replaySummaryLocalizeScenarioId, 0)
def AddReplaySummaryLocalizeScenarioId(builder, replaySummaryLocalizeScenarioId):
    return MiniGameDreamReplayScenarioExcelAddReplaySummaryLocalizeScenarioId(builder, replaySummaryLocalizeScenarioId)
def MiniGameDreamReplayScenarioExcelAddReplaySummaryTitleLocalize(builder, replaySummaryTitleLocalize): builder.PrependUint32Slot(3, replaySummaryTitleLocalize, 0)
def AddReplaySummaryTitleLocalize(builder, replaySummaryTitleLocalize):
    return MiniGameDreamReplayScenarioExcelAddReplaySummaryTitleLocalize(builder, replaySummaryTitleLocalize)
def MiniGameDreamReplayScenarioExcelAddOrder(builder, order): builder.PrependInt64Slot(4, order, 0)
def AddOrder(builder, order):
    return MiniGameDreamReplayScenarioExcelAddOrder(builder, order)
def MiniGameDreamReplayScenarioExcelAddScenarioGroupId(builder, scenarioGroupId): builder.PrependInt64Slot(5, scenarioGroupId, 0)
def AddScenarioGroupId(builder, scenarioGroupId):
    return MiniGameDreamReplayScenarioExcelAddScenarioGroupId(builder, scenarioGroupId)
def MiniGameDreamReplayScenarioExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(6, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDreamReplayScenarioExcelAddEventContentId(builder, eventContentId)
def MiniGameDreamReplayScenarioExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDreamReplayScenarioExcelEnd(builder)