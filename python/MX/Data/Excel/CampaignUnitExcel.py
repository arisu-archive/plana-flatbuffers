# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CampaignUnitExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CampaignUnitExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCampaignUnitExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CampaignUnitExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CampaignUnitExcel
    def AiMoveType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def ClearScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CampaignUnitExcel
    def ClearScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CampaignUnitExcel
    def ClearScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CampaignUnitExcel
    def ClearScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CampaignUnitExcel
    def EnterScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CampaignUnitExcel
    def EnterScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CampaignUnitExcel
    def EnterScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CampaignUnitExcel
    def EnterScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CampaignUnitExcel
    def EnvironmentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def Grade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def IsTacticSkip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CampaignUnitExcel
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def MoveRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CampaignUnitExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CampaignUnitExcel
    def PrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CampaignUnitExcel
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CampaignUnitExcel
    def StrategyPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CampaignUnitExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return CampaignUnitExcelStart(builder)
def CampaignUnitExcelAddAiMoveType(builder, aiMoveType): builder.PrependInt32Slot(0, aiMoveType, 0)
def AddAiMoveType(builder, aiMoveType):
    return CampaignUnitExcelAddAiMoveType(builder, aiMoveType)
def CampaignUnitExcelAddClearScenarioGroupId(builder, clearScenarioGroupId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clearScenarioGroupId), 0)
def AddClearScenarioGroupId(builder, clearScenarioGroupId):
    return CampaignUnitExcelAddClearScenarioGroupId(builder, clearScenarioGroupId)
def CampaignUnitExcelStartClearScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartClearScenarioGroupIdVector(builder, numElems):
    return CampaignUnitExcelStartClearScenarioGroupIdVector(builder, numElems)
def CampaignUnitExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enterScenarioGroupId), 0)
def AddEnterScenarioGroupId(builder, enterScenarioGroupId):
    return CampaignUnitExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId)
def CampaignUnitExcelStartEnterScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEnterScenarioGroupIdVector(builder, numElems):
    return CampaignUnitExcelStartEnterScenarioGroupIdVector(builder, numElems)
def CampaignUnitExcelAddEnvironmentType(builder, environmentType): builder.PrependInt32Slot(3, environmentType, 0)
def AddEnvironmentType(builder, environmentType):
    return CampaignUnitExcelAddEnvironmentType(builder, environmentType)
def CampaignUnitExcelAddGrade(builder, grade): builder.PrependInt32Slot(4, grade, 0)
def AddGrade(builder, grade):
    return CampaignUnitExcelAddGrade(builder, grade)
def CampaignUnitExcelAddGroundId(builder, groundId): builder.PrependInt64Slot(5, groundId, 0)
def AddGroundId(builder, groundId):
    return CampaignUnitExcelAddGroundId(builder, groundId)
def CampaignUnitExcelAddId(builder, id): builder.PrependInt64Slot(6, id, 0)
def AddId(builder, id):
    return CampaignUnitExcelAddId(builder, id)
def CampaignUnitExcelAddIsTacticSkip(builder, isTacticSkip): builder.PrependBoolSlot(7, isTacticSkip, 0)
def AddIsTacticSkip(builder, isTacticSkip):
    return CampaignUnitExcelAddIsTacticSkip(builder, isTacticSkip)
def CampaignUnitExcelAddKey(builder, key): builder.PrependUint32Slot(8, key, 0)
def AddKey(builder, key):
    return CampaignUnitExcelAddKey(builder, key)
def CampaignUnitExcelAddMoveRange(builder, moveRange): builder.PrependInt32Slot(9, moveRange, 0)
def AddMoveRange(builder, moveRange):
    return CampaignUnitExcelAddMoveRange(builder, moveRange)
def CampaignUnitExcelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CampaignUnitExcelAddName(builder, name)
def CampaignUnitExcelAddPrefabName(builder, prefabName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(prefabName), 0)
def AddPrefabName(builder, prefabName):
    return CampaignUnitExcelAddPrefabName(builder, prefabName)
def CampaignUnitExcelAddScale(builder, scale): builder.PrependFloat32Slot(12, scale, 0.0)
def AddScale(builder, scale):
    return CampaignUnitExcelAddScale(builder, scale)
def CampaignUnitExcelAddStrategyPrefabName(builder, strategyPrefabName): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(strategyPrefabName), 0)
def AddStrategyPrefabName(builder, strategyPrefabName):
    return CampaignUnitExcelAddStrategyPrefabName(builder, strategyPrefabName)
def CampaignUnitExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CampaignUnitExcelEnd(builder)