# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecipeIngredientExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecipeIngredientExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecipeIngredientExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecipeIngredientExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecipeIngredientExcel
    def CostAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def CostAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def CostAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def CostAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # RecipeIngredientExcel
    def CostId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def CostIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def CostIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def CostIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RecipeIngredientExcel
    def CostParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RecipeIngredientExcel
    def CostParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RecipeIngredientExcel
    def CostParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def CostParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RecipeIngredientExcel
    def CostTimeInSecond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeIngredientExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeIngredientExcel
    def IngredientAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def IngredientAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def IngredientAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def IngredientAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # RecipeIngredientExcel
    def IngredientId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def IngredientIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def IngredientIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def IngredientIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # RecipeIngredientExcel
    def IngredientParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RecipeIngredientExcel
    def IngredientParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RecipeIngredientExcel
    def IngredientParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def IngredientParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # RecipeIngredientExcel
    def RecipeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def RecipeIngredientExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return RecipeIngredientExcelStart(builder)
def RecipeIngredientExcelAddCostAmount(builder, costAmount): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(costAmount), 0)
def AddCostAmount(builder, costAmount):
    return RecipeIngredientExcelAddCostAmount(builder, costAmount)
def RecipeIngredientExcelStartCostAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCostAmountVector(builder, numElems):
    return RecipeIngredientExcelStartCostAmountVector(builder, numElems)
def RecipeIngredientExcelAddCostId(builder, costId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(costId), 0)
def AddCostId(builder, costId):
    return RecipeIngredientExcelAddCostId(builder, costId)
def RecipeIngredientExcelStartCostIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCostIdVector(builder, numElems):
    return RecipeIngredientExcelStartCostIdVector(builder, numElems)
def RecipeIngredientExcelAddCostParcelType(builder, costParcelType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(costParcelType), 0)
def AddCostParcelType(builder, costParcelType):
    return RecipeIngredientExcelAddCostParcelType(builder, costParcelType)
def RecipeIngredientExcelStartCostParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCostParcelTypeVector(builder, numElems):
    return RecipeIngredientExcelStartCostParcelTypeVector(builder, numElems)
def RecipeIngredientExcelAddCostTimeInSecond(builder, costTimeInSecond): builder.PrependInt64Slot(3, costTimeInSecond, 0)
def AddCostTimeInSecond(builder, costTimeInSecond):
    return RecipeIngredientExcelAddCostTimeInSecond(builder, costTimeInSecond)
def RecipeIngredientExcelAddId(builder, id): builder.PrependInt64Slot(4, id, 0)
def AddId(builder, id):
    return RecipeIngredientExcelAddId(builder, id)
def RecipeIngredientExcelAddIngredientAmount(builder, ingredientAmount): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ingredientAmount), 0)
def AddIngredientAmount(builder, ingredientAmount):
    return RecipeIngredientExcelAddIngredientAmount(builder, ingredientAmount)
def RecipeIngredientExcelStartIngredientAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartIngredientAmountVector(builder, numElems):
    return RecipeIngredientExcelStartIngredientAmountVector(builder, numElems)
def RecipeIngredientExcelAddIngredientId(builder, ingredientId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ingredientId), 0)
def AddIngredientId(builder, ingredientId):
    return RecipeIngredientExcelAddIngredientId(builder, ingredientId)
def RecipeIngredientExcelStartIngredientIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartIngredientIdVector(builder, numElems):
    return RecipeIngredientExcelStartIngredientIdVector(builder, numElems)
def RecipeIngredientExcelAddIngredientParcelType(builder, ingredientParcelType): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ingredientParcelType), 0)
def AddIngredientParcelType(builder, ingredientParcelType):
    return RecipeIngredientExcelAddIngredientParcelType(builder, ingredientParcelType)
def RecipeIngredientExcelStartIngredientParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartIngredientParcelTypeVector(builder, numElems):
    return RecipeIngredientExcelStartIngredientParcelTypeVector(builder, numElems)
def RecipeIngredientExcelAddRecipeType(builder, recipeType): builder.PrependInt32Slot(8, recipeType, 0)
def AddRecipeType(builder, recipeType):
    return RecipeIngredientExcelAddRecipeType(builder, recipeType)
def RecipeIngredientExcelEnd(builder): return builder.EndObject()
def End(builder):
    return RecipeIngredientExcelEnd(builder)