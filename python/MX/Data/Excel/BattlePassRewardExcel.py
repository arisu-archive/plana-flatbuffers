# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BattlePassRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BattlePassRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBattlePassRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BattlePassRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BattlePassRewardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BattlePassRewardExcel
    def RewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BattlePassRewardExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BattlePassRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BattlePassRewardExcel
    def RewardParcelUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BattlePassRewardExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def BattlePassRewardExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return BattlePassRewardExcelStart(builder)
def BattlePassRewardExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return BattlePassRewardExcelAddId(builder, id)
def BattlePassRewardExcelAddRewardGroupId(builder, rewardGroupId): builder.PrependInt64Slot(1, rewardGroupId, 0)
def AddRewardGroupId(builder, rewardGroupId):
    return BattlePassRewardExcelAddRewardGroupId(builder, rewardGroupId)
def BattlePassRewardExcelAddLevel(builder, level): builder.PrependInt64Slot(2, level, 0)
def AddLevel(builder, level):
    return BattlePassRewardExcelAddLevel(builder, level)
def BattlePassRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(3, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return BattlePassRewardExcelAddRewardParcelType(builder, rewardParcelType)
def BattlePassRewardExcelAddRewardParcelUniqueId(builder, rewardParcelUniqueId): builder.PrependInt64Slot(4, rewardParcelUniqueId, 0)
def AddRewardParcelUniqueId(builder, rewardParcelUniqueId):
    return BattlePassRewardExcelAddRewardParcelUniqueId(builder, rewardParcelUniqueId)
def BattlePassRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt64Slot(5, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return BattlePassRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def BattlePassRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return BattlePassRewardExcelEnd(builder)