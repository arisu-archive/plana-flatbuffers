# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterIllustCoordinateExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterIllustCoordinateExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterIllustCoordinateExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterIllustCoordinateExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterIllustCoordinateExcel
    def CharacterBodyCenterX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterIllustCoordinateExcel
    def CharacterBodyCenterY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterIllustCoordinateExcel
    def DefaultScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterIllustCoordinateExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterIllustCoordinateExcel
    def MaxScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterIllustCoordinateExcel
    def MinScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def CharacterIllustCoordinateExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return CharacterIllustCoordinateExcelStart(builder)
def CharacterIllustCoordinateExcelAddCharacterBodyCenterX(builder, characterBodyCenterX): builder.PrependFloat32Slot(0, characterBodyCenterX, 0.0)
def AddCharacterBodyCenterX(builder, characterBodyCenterX):
    return CharacterIllustCoordinateExcelAddCharacterBodyCenterX(builder, characterBodyCenterX)
def CharacterIllustCoordinateExcelAddCharacterBodyCenterY(builder, characterBodyCenterY): builder.PrependFloat32Slot(1, characterBodyCenterY, 0.0)
def AddCharacterBodyCenterY(builder, characterBodyCenterY):
    return CharacterIllustCoordinateExcelAddCharacterBodyCenterY(builder, characterBodyCenterY)
def CharacterIllustCoordinateExcelAddDefaultScale(builder, defaultScale): builder.PrependFloat32Slot(2, defaultScale, 0.0)
def AddDefaultScale(builder, defaultScale):
    return CharacterIllustCoordinateExcelAddDefaultScale(builder, defaultScale)
def CharacterIllustCoordinateExcelAddId(builder, id): builder.PrependInt64Slot(3, id, 0)
def AddId(builder, id):
    return CharacterIllustCoordinateExcelAddId(builder, id)
def CharacterIllustCoordinateExcelAddMaxScale(builder, maxScale): builder.PrependFloat32Slot(4, maxScale, 0.0)
def AddMaxScale(builder, maxScale):
    return CharacterIllustCoordinateExcelAddMaxScale(builder, maxScale)
def CharacterIllustCoordinateExcelAddMinScale(builder, minScale): builder.PrependFloat32Slot(5, minScale, 0.0)
def AddMinScale(builder, minScale):
    return CharacterIllustCoordinateExcelAddMinScale(builder, minScale)
def CharacterIllustCoordinateExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterIllustCoordinateExcelEnd(builder)