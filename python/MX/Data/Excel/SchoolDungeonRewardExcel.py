# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SchoolDungeonRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SchoolDungeonRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSchoolDungeonRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SchoolDungeonRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SchoolDungeonRewardExcel
    def IsDisplayed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SchoolDungeonRewardExcel
    def RewardParcelProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def DungeonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def SchoolDungeonRewardExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return SchoolDungeonRewardExcelStart(builder)
def SchoolDungeonRewardExcelAddIsDisplayed(builder, isDisplayed): builder.PrependBoolSlot(0, isDisplayed, 0)
def AddIsDisplayed(builder, isDisplayed):
    return SchoolDungeonRewardExcelAddIsDisplayed(builder, isDisplayed)
def SchoolDungeonRewardExcelAddRewardParcelProbability(builder, rewardParcelProbability): builder.PrependInt64Slot(1, rewardParcelProbability, 0)
def AddRewardParcelProbability(builder, rewardParcelProbability):
    return SchoolDungeonRewardExcelAddRewardParcelProbability(builder, rewardParcelProbability)
def SchoolDungeonRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt64Slot(2, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return SchoolDungeonRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def SchoolDungeonRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependInt64Slot(3, rewardParcelId, 0)
def AddRewardParcelId(builder, rewardParcelId):
    return SchoolDungeonRewardExcelAddRewardParcelId(builder, rewardParcelId)
def SchoolDungeonRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(4, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return SchoolDungeonRewardExcelAddRewardParcelType(builder, rewardParcelType)
def SchoolDungeonRewardExcelAddRewardTag(builder, rewardTag): builder.PrependInt32Slot(5, rewardTag, 0)
def AddRewardTag(builder, rewardTag):
    return SchoolDungeonRewardExcelAddRewardTag(builder, rewardTag)
def SchoolDungeonRewardExcelAddDungeonType(builder, dungeonType): builder.PrependInt32Slot(6, dungeonType, 0)
def AddDungeonType(builder, dungeonType):
    return SchoolDungeonRewardExcelAddDungeonType(builder, dungeonType)
def SchoolDungeonRewardExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(7, groupId, 0)
def AddGroupId(builder, groupId):
    return SchoolDungeonRewardExcelAddGroupId(builder, groupId)
def SchoolDungeonRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return SchoolDungeonRewardExcelEnd(builder)