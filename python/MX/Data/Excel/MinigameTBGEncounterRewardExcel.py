# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGEncounterRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGEncounterRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGEncounterRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGEncounterRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGEncounterRewardExcel
    def Prob(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def Amount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def ParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def ParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def Paremeter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def TbgOptionSuccessType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameTBGEncounterRewardExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return MinigameTBGEncounterRewardExcelStart(builder)
def MinigameTBGEncounterRewardExcelAddProb(builder, prob): builder.PrependInt32Slot(0, prob, 0)
def AddProb(builder, prob):
    return MinigameTBGEncounterRewardExcelAddProb(builder, prob)
def MinigameTBGEncounterRewardExcelAddAmount(builder, amount): builder.PrependInt64Slot(1, amount, 0)
def AddAmount(builder, amount):
    return MinigameTBGEncounterRewardExcelAddAmount(builder, amount)
def MinigameTBGEncounterRewardExcelAddParcelId(builder, parcelId): builder.PrependInt64Slot(2, parcelId, 0)
def AddParcelId(builder, parcelId):
    return MinigameTBGEncounterRewardExcelAddParcelId(builder, parcelId)
def MinigameTBGEncounterRewardExcelAddParcelType(builder, parcelType): builder.PrependInt32Slot(3, parcelType, 0)
def AddParcelType(builder, parcelType):
    return MinigameTBGEncounterRewardExcelAddParcelType(builder, parcelType)
def MinigameTBGEncounterRewardExcelAddParemeter(builder, paremeter): builder.PrependInt64Slot(4, paremeter, 0)
def AddParemeter(builder, paremeter):
    return MinigameTBGEncounterRewardExcelAddParemeter(builder, paremeter)
def MinigameTBGEncounterRewardExcelAddTbgOptionSuccessType(builder, tbgOptionSuccessType): builder.PrependInt32Slot(5, tbgOptionSuccessType, 0)
def AddTbgOptionSuccessType(builder, tbgOptionSuccessType):
    return MinigameTBGEncounterRewardExcelAddTbgOptionSuccessType(builder, tbgOptionSuccessType)
def MinigameTBGEncounterRewardExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(6, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MinigameTBGEncounterRewardExcelAddUniqueId(builder, uniqueId)
def MinigameTBGEncounterRewardExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(7, groupId, 0)
def AddGroupId(builder, groupId):
    return MinigameTBGEncounterRewardExcelAddGroupId(builder, groupId)
def MinigameTBGEncounterRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameTBGEncounterRewardExcelEnd(builder)