# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ContentsShortcutExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContentsShortcutExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContentsShortcutExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ContentsShortcutExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContentsShortcutExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ScenarioModeVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ScenarioModeChapter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ShortcutOpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContentsShortcutExcel
    def ShortcutCloseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContentsShortcutExcel
    def ConditionContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ConquestMapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ConquestStepIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ShortcutContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ShortcutUiName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ContentsShortcutExcel
    def ShortcutUiNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ContentsShortcutExcel
    def ShortcutUiNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # ContentsShortcutExcel
    def Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ContentsShortcutExcelStart(builder):
    builder.StartObject(13)

def Start(builder):
    ContentsShortcutExcelStart(builder)

def ContentsShortcutExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(0, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    ContentsShortcutExcelAddUniqueId(builder, uniqueId)

def ContentsShortcutExcelAddContentType(builder, contentType):
    builder.PrependInt32Slot(1, contentType, 0)

def AddContentType(builder, contentType):
    ContentsShortcutExcelAddContentType(builder, contentType)

def ContentsShortcutExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(2, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    ContentsShortcutExcelAddEventContentId(builder, eventContentId)

def ContentsShortcutExcelAddScenarioModeVolume(builder, scenarioModeVolume):
    builder.PrependInt64Slot(3, scenarioModeVolume, 0)

def AddScenarioModeVolume(builder, scenarioModeVolume):
    ContentsShortcutExcelAddScenarioModeVolume(builder, scenarioModeVolume)

def ContentsShortcutExcelAddScenarioModeChapter(builder, scenarioModeChapter):
    builder.PrependInt64Slot(4, scenarioModeChapter, 0)

def AddScenarioModeChapter(builder, scenarioModeChapter):
    ContentsShortcutExcelAddScenarioModeChapter(builder, scenarioModeChapter)

def ContentsShortcutExcelAddShortcutOpenTime(builder, shortcutOpenTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(shortcutOpenTime), 0)

def AddShortcutOpenTime(builder, shortcutOpenTime):
    ContentsShortcutExcelAddShortcutOpenTime(builder, shortcutOpenTime)

def ContentsShortcutExcelAddShortcutCloseTime(builder, shortcutCloseTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(shortcutCloseTime), 0)

def AddShortcutCloseTime(builder, shortcutCloseTime):
    ContentsShortcutExcelAddShortcutCloseTime(builder, shortcutCloseTime)

def ContentsShortcutExcelAddConditionContentId(builder, conditionContentId):
    builder.PrependInt64Slot(7, conditionContentId, 0)

def AddConditionContentId(builder, conditionContentId):
    ContentsShortcutExcelAddConditionContentId(builder, conditionContentId)

def ContentsShortcutExcelAddConquestMapDifficulty(builder, conquestMapDifficulty):
    builder.PrependInt32Slot(8, conquestMapDifficulty, 0)

def AddConquestMapDifficulty(builder, conquestMapDifficulty):
    ContentsShortcutExcelAddConquestMapDifficulty(builder, conquestMapDifficulty)

def ContentsShortcutExcelAddConquestStepIndex(builder, conquestStepIndex):
    builder.PrependInt32Slot(9, conquestStepIndex, 0)

def AddConquestStepIndex(builder, conquestStepIndex):
    ContentsShortcutExcelAddConquestStepIndex(builder, conquestStepIndex)

def ContentsShortcutExcelAddShortcutContentId(builder, shortcutContentId):
    builder.PrependInt64Slot(10, shortcutContentId, 0)

def AddShortcutContentId(builder, shortcutContentId):
    ContentsShortcutExcelAddShortcutContentId(builder, shortcutContentId)

def ContentsShortcutExcelAddShortcutUiName(builder, shortcutUiName):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(shortcutUiName), 0)

def AddShortcutUiName(builder, shortcutUiName):
    ContentsShortcutExcelAddShortcutUiName(builder, shortcutUiName)

def ContentsShortcutExcelStartShortcutUiNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShortcutUiNameVector(builder, numElems):
    return ContentsShortcutExcelStartShortcutUiNameVector(builder, numElems)

def ContentsShortcutExcelAddLocalize(builder, localize):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(localize), 0)

def AddLocalize(builder, localize):
    ContentsShortcutExcelAddLocalize(builder, localize)

def ContentsShortcutExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ContentsShortcutExcelEnd(builder)
