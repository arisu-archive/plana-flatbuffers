# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ContentsScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContentsScenarioExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContentsScenarioExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ContentsScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContentsScenarioExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ContentsScenarioExcel
    def LocalizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ContentsScenarioExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsScenarioExcel
    def ScenarioContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsScenarioExcel
    def ScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ContentsScenarioExcel
    def ScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ContentsScenarioExcel
    def ScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ContentsScenarioExcel
    def ScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ContentsScenarioExcelStart(builder):
    builder.StartObject(5)

def Start(builder):
    ContentsScenarioExcelStart(builder)

def ContentsScenarioExcelAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    ContentsScenarioExcelAddId(builder, id)

def ContentsScenarioExcelAddLocalizeId(builder, localizeId):
    builder.PrependUint32Slot(1, localizeId, 0)

def AddLocalizeId(builder, localizeId):
    ContentsScenarioExcelAddLocalizeId(builder, localizeId)

def ContentsScenarioExcelAddDisplayOrder(builder, displayOrder):
    builder.PrependInt32Slot(2, displayOrder, 0)

def AddDisplayOrder(builder, displayOrder):
    ContentsScenarioExcelAddDisplayOrder(builder, displayOrder)

def ContentsScenarioExcelAddScenarioContentType(builder, scenarioContentType):
    builder.PrependInt32Slot(3, scenarioContentType, 0)

def AddScenarioContentType(builder, scenarioContentType):
    ContentsScenarioExcelAddScenarioContentType(builder, scenarioContentType)

def ContentsScenarioExcelAddScenarioGroupId(builder, scenarioGroupId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioGroupId), 0)

def AddScenarioGroupId(builder, scenarioGroupId):
    ContentsScenarioExcelAddScenarioGroupId(builder, scenarioGroupId)

def ContentsScenarioExcelStartScenarioGroupIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartScenarioGroupIdVector(builder, numElems):
    return ContentsScenarioExcelStartScenarioGroupIdVector(builder, numElems)

def ContentsScenarioExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ContentsScenarioExcelEnd(builder)
