# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentCardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentCardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentCardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentCardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentCardExcel
    def CardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentCardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCardExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentCardExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentCardExcel
    def BackIconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentCardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentCardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentCardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentCardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EventContentCardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentCardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentCardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentCardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def EventContentCardExcelStart(builder):
    builder.StartObject(7)

def Start(builder):
    EventContentCardExcelStart(builder)

def EventContentCardExcelAddCardGroupId(builder, cardGroupId):
    builder.PrependInt32Slot(0, cardGroupId, 0)

def AddCardGroupId(builder, cardGroupId):
    EventContentCardExcelAddCardGroupId(builder, cardGroupId)

def EventContentCardExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(1, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    EventContentCardExcelAddEventContentId(builder, eventContentId)

def EventContentCardExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(2, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    EventContentCardExcelAddLocalizeEtcId(builder, localizeEtcId)

def EventContentCardExcelAddIconPath(builder, iconPath):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconPath), 0)

def AddIconPath(builder, iconPath):
    EventContentCardExcelAddIconPath(builder, iconPath)

def EventContentCardExcelAddBackIconPath(builder, backIconPath):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(backIconPath), 0)

def AddBackIconPath(builder, backIconPath):
    EventContentCardExcelAddBackIconPath(builder, backIconPath)

def EventContentCardExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)

def AddRewardParcelType(builder, rewardParcelType):
    EventContentCardExcelAddRewardParcelType(builder, rewardParcelType)

def EventContentCardExcelStartRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelTypeVector(builder, numElems):
    return EventContentCardExcelStartRewardParcelTypeVector(builder, numElems)

def EventContentCardExcelAddRewardParcelId(builder, rewardParcelId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)

def AddRewardParcelId(builder, rewardParcelId):
    EventContentCardExcelAddRewardParcelId(builder, rewardParcelId)

def EventContentCardExcelStartRewardParcelIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardParcelIdVector(builder, numElems):
    return EventContentCardExcelStartRewardParcelIdVector(builder, numElems)

def EventContentCardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentCardExcelEnd(builder)
