# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamEndingExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamEndingExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamEndingExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamEndingExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamEndingExcel
    def EndingConditionValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # MiniGameDreamEndingExcel
    def EndingCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MiniGameDreamEndingExcel
    def ScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def DreamMakerEndingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def EndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamEndingExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return MiniGameDreamEndingExcelStart(builder)
def MiniGameDreamEndingExcelAddEndingConditionValue(builder, endingConditionValue): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endingConditionValue), 0)
def AddEndingConditionValue(builder, endingConditionValue):
    return MiniGameDreamEndingExcelAddEndingConditionValue(builder, endingConditionValue)
def MiniGameDreamEndingExcelStartEndingConditionValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEndingConditionValueVector(builder, numElems):
    return MiniGameDreamEndingExcelStartEndingConditionValueVector(builder, numElems)
def MiniGameDreamEndingExcelAddEndingCondition(builder, endingCondition): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endingCondition), 0)
def AddEndingCondition(builder, endingCondition):
    return MiniGameDreamEndingExcelAddEndingCondition(builder, endingCondition)
def MiniGameDreamEndingExcelStartEndingConditionVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEndingConditionVector(builder, numElems):
    return MiniGameDreamEndingExcelStartEndingConditionVector(builder, numElems)
def MiniGameDreamEndingExcelAddScenarioGroupId(builder, scenarioGroupId): builder.PrependInt64Slot(2, scenarioGroupId, 0)
def AddScenarioGroupId(builder, scenarioGroupId):
    return MiniGameDreamEndingExcelAddScenarioGroupId(builder, scenarioGroupId)
def MiniGameDreamEndingExcelAddOrder(builder, order): builder.PrependInt32Slot(3, order, 0)
def AddOrder(builder, order):
    return MiniGameDreamEndingExcelAddOrder(builder, order)
def MiniGameDreamEndingExcelAddDreamMakerEndingType(builder, dreamMakerEndingType): builder.PrependInt32Slot(4, dreamMakerEndingType, 0)
def AddDreamMakerEndingType(builder, dreamMakerEndingType):
    return MiniGameDreamEndingExcelAddDreamMakerEndingType(builder, dreamMakerEndingType)
def MiniGameDreamEndingExcelAddEndingId(builder, endingId): builder.PrependInt64Slot(5, endingId, 0)
def AddEndingId(builder, endingId):
    return MiniGameDreamEndingExcelAddEndingId(builder, endingId)
def MiniGameDreamEndingExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(6, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDreamEndingExcelAddEventContentId(builder, eventContentId)
def MiniGameDreamEndingExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDreamEndingExcelEnd(builder)