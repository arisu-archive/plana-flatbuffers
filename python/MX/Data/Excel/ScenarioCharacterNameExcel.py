# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioCharacterNameExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioCharacterNameExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioCharacterNameExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioCharacterNameExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioCharacterNameExcel
    def CharacterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterNameExcel
    def NameJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterNameExcel
    def NameKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterNameExcel
    def NicknameJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterNameExcel
    def NicknameKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterNameExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterNameExcel
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterNameExcel
    def SmallPortrait(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterNameExcel
    def SpinePrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ScenarioCharacterNameExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return ScenarioCharacterNameExcelStart(builder)
def ScenarioCharacterNameExcelAddCharacterName(builder, characterName): builder.PrependUint32Slot(0, characterName, 0)
def AddCharacterName(builder, characterName):
    return ScenarioCharacterNameExcelAddCharacterName(builder, characterName)
def ScenarioCharacterNameExcelAddNameJp(builder, nameJp): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nameJp), 0)
def AddNameJp(builder, nameJp):
    return ScenarioCharacterNameExcelAddNameJp(builder, nameJp)
def ScenarioCharacterNameExcelAddNameKr(builder, nameKr): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nameKr), 0)
def AddNameKr(builder, nameKr):
    return ScenarioCharacterNameExcelAddNameKr(builder, nameKr)
def ScenarioCharacterNameExcelAddNicknameJp(builder, nicknameJp): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nicknameJp), 0)
def AddNicknameJp(builder, nicknameJp):
    return ScenarioCharacterNameExcelAddNicknameJp(builder, nicknameJp)
def ScenarioCharacterNameExcelAddNicknameKr(builder, nicknameKr): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(nicknameKr), 0)
def AddNicknameKr(builder, nicknameKr):
    return ScenarioCharacterNameExcelAddNicknameKr(builder, nicknameKr)
def ScenarioCharacterNameExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(5, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return ScenarioCharacterNameExcelAddProductionStep(builder, productionStep)
def ScenarioCharacterNameExcelAddShape(builder, shape): builder.PrependInt32Slot(6, shape, 0)
def AddShape(builder, shape):
    return ScenarioCharacterNameExcelAddShape(builder, shape)
def ScenarioCharacterNameExcelAddSmallPortrait(builder, smallPortrait): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(smallPortrait), 0)
def AddSmallPortrait(builder, smallPortrait):
    return ScenarioCharacterNameExcelAddSmallPortrait(builder, smallPortrait)
def ScenarioCharacterNameExcelAddSpinePrefabName(builder, spinePrefabName): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(spinePrefabName), 0)
def AddSpinePrefabName(builder, spinePrefabName):
    return ScenarioCharacterNameExcelAddSpinePrefabName(builder, spinePrefabName)
def ScenarioCharacterNameExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ScenarioCharacterNameExcelEnd(builder)