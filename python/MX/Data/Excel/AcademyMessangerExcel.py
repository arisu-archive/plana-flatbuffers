# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AcademyMessangerExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AcademyMessangerExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAcademyMessangerExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AcademyMessangerExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AcademyMessangerExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def ConditionValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def FavorScheduleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def FeedbackTimeMillisec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyMessangerExcel
    def MessageCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def MessageGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def MessageJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyMessangerExcel
    def MessageKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyMessangerExcel
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def NextGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def PreConditionFavorScheduleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessangerExcel
    def PreConditionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def AcademyMessangerExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return AcademyMessangerExcelStart(builder)
def AcademyMessangerExcelAddCharacterId(builder, characterId): builder.PrependInt64Slot(0, characterId, 0)
def AddCharacterId(builder, characterId):
    return AcademyMessangerExcelAddCharacterId(builder, characterId)
def AcademyMessangerExcelAddConditionValue(builder, conditionValue): builder.PrependInt64Slot(1, conditionValue, 0)
def AddConditionValue(builder, conditionValue):
    return AcademyMessangerExcelAddConditionValue(builder, conditionValue)
def AcademyMessangerExcelAddFavorScheduleId(builder, favorScheduleId): builder.PrependInt64Slot(2, favorScheduleId, 0)
def AddFavorScheduleId(builder, favorScheduleId):
    return AcademyMessangerExcelAddFavorScheduleId(builder, favorScheduleId)
def AcademyMessangerExcelAddFeedbackTimeMillisec(builder, feedbackTimeMillisec): builder.PrependInt64Slot(3, feedbackTimeMillisec, 0)
def AddFeedbackTimeMillisec(builder, feedbackTimeMillisec):
    return AcademyMessangerExcelAddFeedbackTimeMillisec(builder, feedbackTimeMillisec)
def AcademyMessangerExcelAddId(builder, id): builder.PrependInt64Slot(4, id, 0)
def AddId(builder, id):
    return AcademyMessangerExcelAddId(builder, id)
def AcademyMessangerExcelAddImagePath(builder, imagePath): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(imagePath), 0)
def AddImagePath(builder, imagePath):
    return AcademyMessangerExcelAddImagePath(builder, imagePath)
def AcademyMessangerExcelAddMessageCondition(builder, messageCondition): builder.PrependInt32Slot(6, messageCondition, 0)
def AddMessageCondition(builder, messageCondition):
    return AcademyMessangerExcelAddMessageCondition(builder, messageCondition)
def AcademyMessangerExcelAddMessageGroupId(builder, messageGroupId): builder.PrependInt64Slot(7, messageGroupId, 0)
def AddMessageGroupId(builder, messageGroupId):
    return AcademyMessangerExcelAddMessageGroupId(builder, messageGroupId)
def AcademyMessangerExcelAddMessageJp(builder, messageJp): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(messageJp), 0)
def AddMessageJp(builder, messageJp):
    return AcademyMessangerExcelAddMessageJp(builder, messageJp)
def AcademyMessangerExcelAddMessageKr(builder, messageKr): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(messageKr), 0)
def AddMessageKr(builder, messageKr):
    return AcademyMessangerExcelAddMessageKr(builder, messageKr)
def AcademyMessangerExcelAddMessageType(builder, messageType): builder.PrependInt32Slot(10, messageType, 0)
def AddMessageType(builder, messageType):
    return AcademyMessangerExcelAddMessageType(builder, messageType)
def AcademyMessangerExcelAddNextGroupId(builder, nextGroupId): builder.PrependInt64Slot(11, nextGroupId, 0)
def AddNextGroupId(builder, nextGroupId):
    return AcademyMessangerExcelAddNextGroupId(builder, nextGroupId)
def AcademyMessangerExcelAddPreConditionFavorScheduleId(builder, preConditionFavorScheduleId): builder.PrependInt64Slot(12, preConditionFavorScheduleId, 0)
def AddPreConditionFavorScheduleId(builder, preConditionFavorScheduleId):
    return AcademyMessangerExcelAddPreConditionFavorScheduleId(builder, preConditionFavorScheduleId)
def AcademyMessangerExcelAddPreConditionGroupId(builder, preConditionGroupId): builder.PrependInt64Slot(13, preConditionGroupId, 0)
def AddPreConditionGroupId(builder, preConditionGroupId):
    return AcademyMessangerExcelAddPreConditionGroupId(builder, preConditionGroupId)
def AcademyMessangerExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AcademyMessangerExcelEnd(builder)