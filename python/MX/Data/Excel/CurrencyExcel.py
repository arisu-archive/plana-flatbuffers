# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CurrencyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CurrencyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCurrencyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CurrencyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CurrencyExcel
    def AutoChargeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def AutoChargeMsc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ChargeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyAdditionalChargeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def CurrencyOverChargeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def DailyRefillAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def DailyRefillTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CurrencyExcel
    def DailyRefillTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CurrencyExcel
    def DailyRefillTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CurrencyExcel
    def DailyRefillTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # CurrencyExcel
    def DailyRefillType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ExpirationDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def ExpirationNotifyDateIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ExpiryChangeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ExpiryChangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ExpiryChangeParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def OverChargeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ResetAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def SpriteName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CurrencyExcelStart(builder): builder.StartObject(23)
def Start(builder):
    return CurrencyExcelStart(builder)
def CurrencyExcelAddAutoChargeAmount(builder, autoChargeAmount): builder.PrependInt32Slot(0, autoChargeAmount, 0)
def AddAutoChargeAmount(builder, autoChargeAmount):
    return CurrencyExcelAddAutoChargeAmount(builder, autoChargeAmount)
def CurrencyExcelAddAutoChargeMsc(builder, autoChargeMsc): builder.PrependInt32Slot(1, autoChargeMsc, 0)
def AddAutoChargeMsc(builder, autoChargeMsc):
    return CurrencyExcelAddAutoChargeMsc(builder, autoChargeMsc)
def CurrencyExcelAddChargeLimit(builder, chargeLimit): builder.PrependInt64Slot(2, chargeLimit, 0)
def AddChargeLimit(builder, chargeLimit):
    return CurrencyExcelAddChargeLimit(builder, chargeLimit)
def CurrencyExcelAddCurrencyAdditionalChargeType(builder, currencyAdditionalChargeType): builder.PrependInt32Slot(3, currencyAdditionalChargeType, 0)
def AddCurrencyAdditionalChargeType(builder, currencyAdditionalChargeType):
    return CurrencyExcelAddCurrencyAdditionalChargeType(builder, currencyAdditionalChargeType)
def CurrencyExcelAddCurrencyName(builder, currencyName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(currencyName), 0)
def AddCurrencyName(builder, currencyName):
    return CurrencyExcelAddCurrencyName(builder, currencyName)
def CurrencyExcelAddCurrencyOverChargeType(builder, currencyOverChargeType): builder.PrependInt32Slot(5, currencyOverChargeType, 0)
def AddCurrencyOverChargeType(builder, currencyOverChargeType):
    return CurrencyExcelAddCurrencyOverChargeType(builder, currencyOverChargeType)
def CurrencyExcelAddCurrencyType(builder, currencyType): builder.PrependInt32Slot(6, currencyType, 0)
def AddCurrencyType(builder, currencyType):
    return CurrencyExcelAddCurrencyType(builder, currencyType)
def CurrencyExcelAddDailyRefillAmount(builder, dailyRefillAmount): builder.PrependInt64Slot(7, dailyRefillAmount, 0)
def AddDailyRefillAmount(builder, dailyRefillAmount):
    return CurrencyExcelAddDailyRefillAmount(builder, dailyRefillAmount)
def CurrencyExcelAddDailyRefillTime(builder, dailyRefillTime): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(dailyRefillTime), 0)
def AddDailyRefillTime(builder, dailyRefillTime):
    return CurrencyExcelAddDailyRefillTime(builder, dailyRefillTime)
def CurrencyExcelStartDailyRefillTimeVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartDailyRefillTimeVector(builder, numElems):
    return CurrencyExcelStartDailyRefillTimeVector(builder, numElems)
def CurrencyExcelAddDailyRefillType(builder, dailyRefillType): builder.PrependInt32Slot(9, dailyRefillType, 0)
def AddDailyRefillType(builder, dailyRefillType):
    return CurrencyExcelAddDailyRefillType(builder, dailyRefillType)
def CurrencyExcelAddExpirationDateTime(builder, expirationDateTime): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(expirationDateTime), 0)
def AddExpirationDateTime(builder, expirationDateTime):
    return CurrencyExcelAddExpirationDateTime(builder, expirationDateTime)
def CurrencyExcelAddExpirationNotifyDateIn(builder, expirationNotifyDateIn): builder.PrependInt32Slot(11, expirationNotifyDateIn, 0)
def AddExpirationNotifyDateIn(builder, expirationNotifyDateIn):
    return CurrencyExcelAddExpirationNotifyDateIn(builder, expirationNotifyDateIn)
def CurrencyExcelAddExpiryChangeAmount(builder, expiryChangeAmount): builder.PrependInt64Slot(12, expiryChangeAmount, 0)
def AddExpiryChangeAmount(builder, expiryChangeAmount):
    return CurrencyExcelAddExpiryChangeAmount(builder, expiryChangeAmount)
def CurrencyExcelAddExpiryChangeId(builder, expiryChangeId): builder.PrependInt64Slot(13, expiryChangeId, 0)
def AddExpiryChangeId(builder, expiryChangeId):
    return CurrencyExcelAddExpiryChangeId(builder, expiryChangeId)
def CurrencyExcelAddExpiryChangeParcelType(builder, expiryChangeParcelType): builder.PrependInt32Slot(14, expiryChangeParcelType, 0)
def AddExpiryChangeParcelType(builder, expiryChangeParcelType):
    return CurrencyExcelAddExpiryChangeParcelType(builder, expiryChangeParcelType)
def CurrencyExcelAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return CurrencyExcelAddIcon(builder, icon)
def CurrencyExcelAddId(builder, id): builder.PrependInt64Slot(16, id, 0)
def AddId(builder, id):
    return CurrencyExcelAddId(builder, id)
def CurrencyExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(17, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return CurrencyExcelAddLocalizeEtcId(builder, localizeEtcId)
def CurrencyExcelAddOverChargeLimit(builder, overChargeLimit): builder.PrependInt64Slot(18, overChargeLimit, 0)
def AddOverChargeLimit(builder, overChargeLimit):
    return CurrencyExcelAddOverChargeLimit(builder, overChargeLimit)
def CurrencyExcelAddRarity(builder, rarity): builder.PrependInt32Slot(19, rarity, 0)
def AddRarity(builder, rarity):
    return CurrencyExcelAddRarity(builder, rarity)
def CurrencyExcelAddResetAmount(builder, resetAmount): builder.PrependInt64Slot(20, resetAmount, 0)
def AddResetAmount(builder, resetAmount):
    return CurrencyExcelAddResetAmount(builder, resetAmount)
def CurrencyExcelAddResetType(builder, resetType): builder.PrependInt32Slot(21, resetType, 0)
def AddResetType(builder, resetType):
    return CurrencyExcelAddResetType(builder, resetType)
def CurrencyExcelAddSpriteName(builder, spriteName): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(spriteName), 0)
def AddSpriteName(builder, spriteName):
    return CurrencyExcelAddSpriteName(builder, spriteName)
def CurrencyExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CurrencyExcelEnd(builder)