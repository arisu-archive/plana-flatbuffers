# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameShootingStageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameShootingStageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameShootingStageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameShootingStageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameShootingStageExcel
    def ArtLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingStageExcel
    def BgmId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameShootingStageExcel
    def BgmIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameShootingStageExcel
    def BgmIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameShootingStageExcel
    def BgmIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MiniGameShootingStageExcel
    def CameraSizeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameShootingStageExcel
    def CostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingStageExcel
    def DefaultBattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingStageExcel
    def DefaultLogicEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingStageExcel
    def DesignLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingStageExcel
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingStageExcel
    def EventContentStageRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingStageExcel
    def StartBattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingStageExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameShootingStageExcelStart(builder): builder.StartObject(11)
def Start(builder):
    return MiniGameShootingStageExcelStart(builder)
def MiniGameShootingStageExcelAddArtLevel(builder, artLevel): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(artLevel), 0)
def AddArtLevel(builder, artLevel):
    return MiniGameShootingStageExcelAddArtLevel(builder, artLevel)
def MiniGameShootingStageExcelAddBgmId(builder, bgmId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bgmId), 0)
def AddBgmId(builder, bgmId):
    return MiniGameShootingStageExcelAddBgmId(builder, bgmId)
def MiniGameShootingStageExcelStartBgmIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartBgmIdVector(builder, numElems):
    return MiniGameShootingStageExcelStartBgmIdVector(builder, numElems)
def MiniGameShootingStageExcelAddCameraSizeRate(builder, cameraSizeRate): builder.PrependFloat32Slot(2, cameraSizeRate, 0.0)
def AddCameraSizeRate(builder, cameraSizeRate):
    return MiniGameShootingStageExcelAddCameraSizeRate(builder, cameraSizeRate)
def MiniGameShootingStageExcelAddCostGoodsId(builder, costGoodsId): builder.PrependInt64Slot(3, costGoodsId, 0)
def AddCostGoodsId(builder, costGoodsId):
    return MiniGameShootingStageExcelAddCostGoodsId(builder, costGoodsId)
def MiniGameShootingStageExcelAddDefaultBattleDuration(builder, defaultBattleDuration): builder.PrependInt64Slot(4, defaultBattleDuration, 0)
def AddDefaultBattleDuration(builder, defaultBattleDuration):
    return MiniGameShootingStageExcelAddDefaultBattleDuration(builder, defaultBattleDuration)
def MiniGameShootingStageExcelAddDefaultLogicEffect(builder, defaultLogicEffect): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(defaultLogicEffect), 0)
def AddDefaultLogicEffect(builder, defaultLogicEffect):
    return MiniGameShootingStageExcelAddDefaultLogicEffect(builder, defaultLogicEffect)
def MiniGameShootingStageExcelAddDesignLevel(builder, designLevel): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(designLevel), 0)
def AddDesignLevel(builder, designLevel):
    return MiniGameShootingStageExcelAddDesignLevel(builder, designLevel)
def MiniGameShootingStageExcelAddDifficulty(builder, difficulty): builder.PrependInt32Slot(7, difficulty, 0)
def AddDifficulty(builder, difficulty):
    return MiniGameShootingStageExcelAddDifficulty(builder, difficulty)
def MiniGameShootingStageExcelAddEventContentStageRewardId(builder, eventContentStageRewardId): builder.PrependInt64Slot(8, eventContentStageRewardId, 0)
def AddEventContentStageRewardId(builder, eventContentStageRewardId):
    return MiniGameShootingStageExcelAddEventContentStageRewardId(builder, eventContentStageRewardId)
def MiniGameShootingStageExcelAddStartBattleDuration(builder, startBattleDuration): builder.PrependInt64Slot(9, startBattleDuration, 0)
def AddStartBattleDuration(builder, startBattleDuration):
    return MiniGameShootingStageExcelAddStartBattleDuration(builder, startBattleDuration)
def MiniGameShootingStageExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(10, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MiniGameShootingStageExcelAddUniqueId(builder, uniqueId)
def MiniGameShootingStageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameShootingStageExcelEnd(builder)