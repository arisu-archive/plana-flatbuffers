# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimeAttackDungeonSeasonManageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeAttackDungeonSeasonManageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeAttackDungeonSeasonManageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeAttackDungeonSeasonManageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimeAttackDungeonSeasonManageExcel
    def RoomLifeTimeInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def TimeAttackDungeonRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeasAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TimeAttackDungeonSeasonManageExcel
    def DungeonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def UiSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TimeAttackDungeonSeasonManageExcel
    def EndNoteLabelStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TimeAttackDungeonSeasonManageExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TimeAttackDungeonSeasonManageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TimeAttackDungeonSeasonManageExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return TimeAttackDungeonSeasonManageExcelStart(builder)
def TimeAttackDungeonSeasonManageExcelAddRoomLifeTimeInSeconds(builder, roomLifeTimeInSeconds): builder.PrependInt64Slot(0, roomLifeTimeInSeconds, 0)
def AddRoomLifeTimeInSeconds(builder, roomLifeTimeInSeconds):
    return TimeAttackDungeonSeasonManageExcelAddRoomLifeTimeInSeconds(builder, roomLifeTimeInSeconds)
def TimeAttackDungeonSeasonManageExcelAddTimeAttackDungeonRewardId(builder, timeAttackDungeonRewardId): builder.PrependInt64Slot(1, timeAttackDungeonRewardId, 0)
def AddTimeAttackDungeonRewardId(builder, timeAttackDungeonRewardId):
    return TimeAttackDungeonSeasonManageExcelAddTimeAttackDungeonRewardId(builder, timeAttackDungeonRewardId)
def TimeAttackDungeonSeasonManageExcelAddDifficultyGeas(builder, difficultyGeas): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(difficultyGeas), 0)
def AddDifficultyGeas(builder, difficultyGeas):
    return TimeAttackDungeonSeasonManageExcelAddDifficultyGeas(builder, difficultyGeas)
def TimeAttackDungeonSeasonManageExcelStartDifficultyGeasVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartDifficultyGeasVector(builder, numElems):
    return TimeAttackDungeonSeasonManageExcelStartDifficultyGeasVector(builder, numElems)
def TimeAttackDungeonSeasonManageExcelAddDungeonId(builder, dungeonId): builder.PrependInt64Slot(3, dungeonId, 0)
def AddDungeonId(builder, dungeonId):
    return TimeAttackDungeonSeasonManageExcelAddDungeonId(builder, dungeonId)
def TimeAttackDungeonSeasonManageExcelAddUiSlot(builder, uiSlot): builder.PrependInt64Slot(4, uiSlot, 0)
def AddUiSlot(builder, uiSlot):
    return TimeAttackDungeonSeasonManageExcelAddUiSlot(builder, uiSlot)
def TimeAttackDungeonSeasonManageExcelAddEndDate(builder, endDate): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)
def AddEndDate(builder, endDate):
    return TimeAttackDungeonSeasonManageExcelAddEndDate(builder, endDate)
def TimeAttackDungeonSeasonManageExcelAddEndNoteLabelStartDate(builder, endNoteLabelStartDate): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endNoteLabelStartDate), 0)
def AddEndNoteLabelStartDate(builder, endNoteLabelStartDate):
    return TimeAttackDungeonSeasonManageExcelAddEndNoteLabelStartDate(builder, endNoteLabelStartDate)
def TimeAttackDungeonSeasonManageExcelAddStartDate(builder, startDate): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)
def AddStartDate(builder, startDate):
    return TimeAttackDungeonSeasonManageExcelAddStartDate(builder, startDate)
def TimeAttackDungeonSeasonManageExcelAddId(builder, id): builder.PrependInt64Slot(8, id, 0)
def AddId(builder, id):
    return TimeAttackDungeonSeasonManageExcelAddId(builder, id)
def TimeAttackDungeonSeasonManageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return TimeAttackDungeonSeasonManageExcelEnd(builder)