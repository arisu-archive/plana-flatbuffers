# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PresetParcelsExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PresetParcelsExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPresetParcelsExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PresetParcelsExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PresetParcelsExcel
    def ParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PresetParcelsExcel
    def PresetGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PresetParcelsExcel
    def ParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PresetParcelsExcel
    def ParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PresetParcelsExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return PresetParcelsExcelStart(builder)
def PresetParcelsExcelAddParcelAmount(builder, parcelAmount): builder.PrependInt64Slot(0, parcelAmount, 0)
def AddParcelAmount(builder, parcelAmount):
    return PresetParcelsExcelAddParcelAmount(builder, parcelAmount)
def PresetParcelsExcelAddPresetGroupId(builder, presetGroupId): builder.PrependInt64Slot(1, presetGroupId, 0)
def AddPresetGroupId(builder, presetGroupId):
    return PresetParcelsExcelAddPresetGroupId(builder, presetGroupId)
def PresetParcelsExcelAddParcelId(builder, parcelId): builder.PrependInt64Slot(2, parcelId, 0)
def AddParcelId(builder, parcelId):
    return PresetParcelsExcelAddParcelId(builder, parcelId)
def PresetParcelsExcelAddParcelType(builder, parcelType): builder.PrependInt32Slot(3, parcelType, 0)
def AddParcelType(builder, parcelType):
    return PresetParcelsExcelAddParcelType(builder, parcelType)
def PresetParcelsExcelEnd(builder): return builder.EndObject()
def End(builder):
    return PresetParcelsExcelEnd(builder)