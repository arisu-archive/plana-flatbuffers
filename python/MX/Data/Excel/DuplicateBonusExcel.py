# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DuplicateBonusExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DuplicateBonusExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDuplicateBonusExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DuplicateBonusExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DuplicateBonusExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def ItemCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def DuplicateBonusExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return DuplicateBonusExcelStart(builder)
def DuplicateBonusExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt64Slot(0, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return DuplicateBonusExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def DuplicateBonusExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependInt64Slot(1, rewardParcelId, 0)
def AddRewardParcelId(builder, rewardParcelId):
    return DuplicateBonusExcelAddRewardParcelId(builder, rewardParcelId)
def DuplicateBonusExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(2, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return DuplicateBonusExcelAddRewardParcelType(builder, rewardParcelType)
def DuplicateBonusExcelAddCharacterId(builder, characterId): builder.PrependInt64Slot(3, characterId, 0)
def AddCharacterId(builder, characterId):
    return DuplicateBonusExcelAddCharacterId(builder, characterId)
def DuplicateBonusExcelAddItemId(builder, itemId): builder.PrependInt64Slot(4, itemId, 0)
def AddItemId(builder, itemId):
    return DuplicateBonusExcelAddItemId(builder, itemId)
def DuplicateBonusExcelAddItemCategory(builder, itemCategory): builder.PrependInt32Slot(5, itemCategory, 0)
def AddItemCategory(builder, itemCategory):
    return DuplicateBonusExcelAddItemCategory(builder, itemCategory)
def DuplicateBonusExcelAddId(builder, id): builder.PrependInt64Slot(6, id, 0)
def AddId(builder, id):
    return DuplicateBonusExcelAddId(builder, id)
def DuplicateBonusExcelEnd(builder): return builder.EndObject()
def End(builder):
    return DuplicateBonusExcelEnd(builder)