# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AudioAnimatorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AudioAnimatorExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAudioAnimatorExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AudioAnimatorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AudioAnimatorExcel
    def ControllerNameHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def VoiceNamePrefix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AudioAnimatorExcel
    def StateNameHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def StateName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AudioAnimatorExcel
    def IgnoreInterruptDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AudioAnimatorExcel
    def IgnoreInterruptPlay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AudioAnimatorExcel
    def IgnoreVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AudioAnimatorExcel
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AudioAnimatorExcel
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AudioAnimatorExcel
    def RandomPitchMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def RandomPitchMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def AudioPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def AudioClipPath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AudioAnimatorExcel
    def AudioClipPathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AudioAnimatorExcel
    def AudioClipPathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # AudioAnimatorExcel
    def VoiceHash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AudioAnimatorExcel
    def VoiceHashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # AudioAnimatorExcel
    def VoiceHashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AudioAnimatorExcel
    def VoiceHashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def AudioAnimatorExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return AudioAnimatorExcelStart(builder)
def AudioAnimatorExcelAddControllerNameHash(builder, controllerNameHash): builder.PrependUint32Slot(0, controllerNameHash, 0)
def AddControllerNameHash(builder, controllerNameHash):
    return AudioAnimatorExcelAddControllerNameHash(builder, controllerNameHash)
def AudioAnimatorExcelAddVoiceNamePrefix(builder, voiceNamePrefix): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(voiceNamePrefix), 0)
def AddVoiceNamePrefix(builder, voiceNamePrefix):
    return AudioAnimatorExcelAddVoiceNamePrefix(builder, voiceNamePrefix)
def AudioAnimatorExcelAddStateNameHash(builder, stateNameHash): builder.PrependUint32Slot(2, stateNameHash, 0)
def AddStateNameHash(builder, stateNameHash):
    return AudioAnimatorExcelAddStateNameHash(builder, stateNameHash)
def AudioAnimatorExcelAddStateName(builder, stateName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stateName), 0)
def AddStateName(builder, stateName):
    return AudioAnimatorExcelAddStateName(builder, stateName)
def AudioAnimatorExcelAddIgnoreInterruptDelay(builder, ignoreInterruptDelay): builder.PrependBoolSlot(4, ignoreInterruptDelay, 0)
def AddIgnoreInterruptDelay(builder, ignoreInterruptDelay):
    return AudioAnimatorExcelAddIgnoreInterruptDelay(builder, ignoreInterruptDelay)
def AudioAnimatorExcelAddIgnoreInterruptPlay(builder, ignoreInterruptPlay): builder.PrependBoolSlot(5, ignoreInterruptPlay, 0)
def AddIgnoreInterruptPlay(builder, ignoreInterruptPlay):
    return AudioAnimatorExcelAddIgnoreInterruptPlay(builder, ignoreInterruptPlay)
def AudioAnimatorExcelAddIgnoreVelocity(builder, ignoreVelocity): builder.PrependBoolSlot(6, ignoreVelocity, 0)
def AddIgnoreVelocity(builder, ignoreVelocity):
    return AudioAnimatorExcelAddIgnoreVelocity(builder, ignoreVelocity)
def AudioAnimatorExcelAddVolume(builder, volume): builder.PrependFloat32Slot(7, volume, 0.0)
def AddVolume(builder, volume):
    return AudioAnimatorExcelAddVolume(builder, volume)
def AudioAnimatorExcelAddDelay(builder, delay): builder.PrependFloat32Slot(8, delay, 0.0)
def AddDelay(builder, delay):
    return AudioAnimatorExcelAddDelay(builder, delay)
def AudioAnimatorExcelAddRandomPitchMin(builder, randomPitchMin): builder.PrependInt32Slot(9, randomPitchMin, 0)
def AddRandomPitchMin(builder, randomPitchMin):
    return AudioAnimatorExcelAddRandomPitchMin(builder, randomPitchMin)
def AudioAnimatorExcelAddRandomPitchMax(builder, randomPitchMax): builder.PrependInt32Slot(10, randomPitchMax, 0)
def AddRandomPitchMax(builder, randomPitchMax):
    return AudioAnimatorExcelAddRandomPitchMax(builder, randomPitchMax)
def AudioAnimatorExcelAddAudioPriority(builder, audioPriority): builder.PrependInt32Slot(11, audioPriority, 0)
def AddAudioPriority(builder, audioPriority):
    return AudioAnimatorExcelAddAudioPriority(builder, audioPriority)
def AudioAnimatorExcelAddAudioClipPath(builder, audioClipPath): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(audioClipPath), 0)
def AddAudioClipPath(builder, audioClipPath):
    return AudioAnimatorExcelAddAudioClipPath(builder, audioClipPath)
def AudioAnimatorExcelStartAudioClipPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAudioClipPathVector(builder, numElems):
    return AudioAnimatorExcelStartAudioClipPathVector(builder, numElems)
def AudioAnimatorExcelAddVoiceHash(builder, voiceHash): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(voiceHash), 0)
def AddVoiceHash(builder, voiceHash):
    return AudioAnimatorExcelAddVoiceHash(builder, voiceHash)
def AudioAnimatorExcelStartVoiceHashVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVoiceHashVector(builder, numElems):
    return AudioAnimatorExcelStartVoiceHashVector(builder, numElems)
def AudioAnimatorExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AudioAnimatorExcelEnd(builder)