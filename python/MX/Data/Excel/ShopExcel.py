# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopExcel
    def BuyReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def DisplayTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def GoodsId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ShopExcel
    def GoodsIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ShopExcel
    def GoodsIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShopExcel
    def GoodsIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ShopExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCooltimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCountLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCountResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def RestrictBuyWhenInventoryFull(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopExcel
    def SalePeriodFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def SalePeriodTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def ShopUpdateGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def UseBigPopup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ShopExcelStart(builder): builder.StartObject(16)
def Start(builder):
    return ShopExcelStart(builder)
def ShopExcelAddBuyReportEventName(builder, buyReportEventName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buyReportEventName), 0)
def AddBuyReportEventName(builder, buyReportEventName):
    return ShopExcelAddBuyReportEventName(builder, buyReportEventName)
def ShopExcelAddCategoryType(builder, categoryType): builder.PrependInt32Slot(1, categoryType, 0)
def AddCategoryType(builder, categoryType):
    return ShopExcelAddCategoryType(builder, categoryType)
def ShopExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(2, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return ShopExcelAddDisplayOrder(builder, displayOrder)
def ShopExcelAddDisplayTag(builder, displayTag): builder.PrependInt32Slot(3, displayTag, 0)
def AddDisplayTag(builder, displayTag):
    return ShopExcelAddDisplayTag(builder, displayTag)
def ShopExcelAddGoodsId(builder, goodsId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(goodsId), 0)
def AddGoodsId(builder, goodsId):
    return ShopExcelAddGoodsId(builder, goodsId)
def ShopExcelStartGoodsIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartGoodsIdVector(builder, numElems):
    return ShopExcelStartGoodsIdVector(builder, numElems)
def ShopExcelAddId(builder, id): builder.PrependInt64Slot(5, id, 0)
def AddId(builder, id):
    return ShopExcelAddId(builder, id)
def ShopExcelAddIsLegacy(builder, isLegacy): builder.PrependBoolSlot(6, isLegacy, 0)
def AddIsLegacy(builder, isLegacy):
    return ShopExcelAddIsLegacy(builder, isLegacy)
def ShopExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(7, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return ShopExcelAddLocalizeEtcId(builder, localizeEtcId)
def ShopExcelAddPurchaseCooltimeMin(builder, purchaseCooltimeMin): builder.PrependInt64Slot(8, purchaseCooltimeMin, 0)
def AddPurchaseCooltimeMin(builder, purchaseCooltimeMin):
    return ShopExcelAddPurchaseCooltimeMin(builder, purchaseCooltimeMin)
def ShopExcelAddPurchaseCountLimit(builder, purchaseCountLimit): builder.PrependInt64Slot(9, purchaseCountLimit, 0)
def AddPurchaseCountLimit(builder, purchaseCountLimit):
    return ShopExcelAddPurchaseCountLimit(builder, purchaseCountLimit)
def ShopExcelAddPurchaseCountResetType(builder, purchaseCountResetType): builder.PrependInt32Slot(10, purchaseCountResetType, 0)
def AddPurchaseCountResetType(builder, purchaseCountResetType):
    return ShopExcelAddPurchaseCountResetType(builder, purchaseCountResetType)
def ShopExcelAddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull): builder.PrependBoolSlot(11, restrictBuyWhenInventoryFull, 0)
def AddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull):
    return ShopExcelAddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull)
def ShopExcelAddSalePeriodFrom(builder, salePeriodFrom): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(salePeriodFrom), 0)
def AddSalePeriodFrom(builder, salePeriodFrom):
    return ShopExcelAddSalePeriodFrom(builder, salePeriodFrom)
def ShopExcelAddSalePeriodTo(builder, salePeriodTo): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(salePeriodTo), 0)
def AddSalePeriodTo(builder, salePeriodTo):
    return ShopExcelAddSalePeriodTo(builder, salePeriodTo)
def ShopExcelAddShopUpdateGroupId(builder, shopUpdateGroupId): builder.PrependInt32Slot(14, shopUpdateGroupId, 0)
def AddShopUpdateGroupId(builder, shopUpdateGroupId):
    return ShopExcelAddShopUpdateGroupId(builder, shopUpdateGroupId)
def ShopExcelAddUseBigPopup(builder, useBigPopup): builder.PrependBoolSlot(15, useBigPopup, 0)
def AddUseBigPopup(builder, useBigPopup):
    return ShopExcelAddUseBigPopup(builder, useBigPopup)
def ShopExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ShopExcelEnd(builder)