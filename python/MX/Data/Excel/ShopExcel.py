# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopExcel
    def UseBigPopup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopExcel
    def GoodsId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ShopExcel
    def GoodsIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ShopExcel
    def GoodsIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShopExcel
    def GoodsIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ShopExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def SalePeriodFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def SalePeriodTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def PurchaseCooltimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCountLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCountResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def BuyReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def RestrictBuyWhenInventoryFull(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopExcel
    def DisplayTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def ShopUpdateGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ShopExcelStart(builder):
    builder.StartObject(16)

def Start(builder):
    ShopExcelStart(builder)

def ShopExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    ShopExcelAddId(builder, id)

def ShopExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(1, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    ShopExcelAddLocalizeEtcId(builder, localizeEtcId)

def ShopExcelAddCategoryType(builder, categoryType):
    builder.PrependInt32Slot(2, categoryType, 0)

def AddCategoryType(builder, categoryType):
    ShopExcelAddCategoryType(builder, categoryType)

def ShopExcelAddIsLegacy(builder, isLegacy):
    builder.PrependBoolSlot(3, isLegacy, 0)

def AddIsLegacy(builder, isLegacy):
    ShopExcelAddIsLegacy(builder, isLegacy)

def ShopExcelAddUseBigPopup(builder, useBigPopup):
    builder.PrependBoolSlot(4, useBigPopup, 0)

def AddUseBigPopup(builder, useBigPopup):
    ShopExcelAddUseBigPopup(builder, useBigPopup)

def ShopExcelAddGoodsId(builder, goodsId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(goodsId), 0)

def AddGoodsId(builder, goodsId):
    ShopExcelAddGoodsId(builder, goodsId)

def ShopExcelStartGoodsIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartGoodsIdVector(builder, numElems):
    return ShopExcelStartGoodsIdVector(builder, numElems)

def ShopExcelAddDisplayOrder(builder, displayOrder):
    builder.PrependInt64Slot(6, displayOrder, 0)

def AddDisplayOrder(builder, displayOrder):
    ShopExcelAddDisplayOrder(builder, displayOrder)

def ShopExcelAddSalePeriodFrom(builder, salePeriodFrom):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(salePeriodFrom), 0)

def AddSalePeriodFrom(builder, salePeriodFrom):
    ShopExcelAddSalePeriodFrom(builder, salePeriodFrom)

def ShopExcelAddSalePeriodTo(builder, salePeriodTo):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(salePeriodTo), 0)

def AddSalePeriodTo(builder, salePeriodTo):
    ShopExcelAddSalePeriodTo(builder, salePeriodTo)

def ShopExcelAddPurchaseCooltimeMin(builder, purchaseCooltimeMin):
    builder.PrependInt64Slot(9, purchaseCooltimeMin, 0)

def AddPurchaseCooltimeMin(builder, purchaseCooltimeMin):
    ShopExcelAddPurchaseCooltimeMin(builder, purchaseCooltimeMin)

def ShopExcelAddPurchaseCountLimit(builder, purchaseCountLimit):
    builder.PrependInt64Slot(10, purchaseCountLimit, 0)

def AddPurchaseCountLimit(builder, purchaseCountLimit):
    ShopExcelAddPurchaseCountLimit(builder, purchaseCountLimit)

def ShopExcelAddPurchaseCountResetType(builder, purchaseCountResetType):
    builder.PrependInt32Slot(11, purchaseCountResetType, 0)

def AddPurchaseCountResetType(builder, purchaseCountResetType):
    ShopExcelAddPurchaseCountResetType(builder, purchaseCountResetType)

def ShopExcelAddBuyReportEventName(builder, buyReportEventName):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(buyReportEventName), 0)

def AddBuyReportEventName(builder, buyReportEventName):
    ShopExcelAddBuyReportEventName(builder, buyReportEventName)

def ShopExcelAddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull):
    builder.PrependBoolSlot(13, restrictBuyWhenInventoryFull, 0)

def AddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull):
    ShopExcelAddRestrictBuyWhenInventoryFull(builder, restrictBuyWhenInventoryFull)

def ShopExcelAddDisplayTag(builder, displayTag):
    builder.PrependInt32Slot(14, displayTag, 0)

def AddDisplayTag(builder, displayTag):
    ShopExcelAddDisplayTag(builder, displayTag)

def ShopExcelAddShopUpdateGroupId(builder, shopUpdateGroupId):
    builder.PrependInt32Slot(15, shopUpdateGroupId, 0)

def AddShopUpdateGroupId(builder, shopUpdateGroupId):
    ShopExcelAddShopUpdateGroupId(builder, shopUpdateGroupId)

def ShopExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShopExcelEnd(builder)
