# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentStageRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentStageRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentStageRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentStageRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentStageRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageRewardExcel
    def RewardTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageRewardExcel
    def RewardProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageRewardExcel
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentStageRewardExcel
    def RewardAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentStageRewardExcel
    def IsDisplayed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def EventContentStageRewardExcelStart(builder):
    builder.StartObject(7)

def Start(builder):
    EventContentStageRewardExcelStart(builder)

def EventContentStageRewardExcelAddGroupId(builder, groupId):
    builder.PrependInt64Slot(0, groupId, 0)

def AddGroupId(builder, groupId):
    EventContentStageRewardExcelAddGroupId(builder, groupId)

def EventContentStageRewardExcelAddRewardTag(builder, rewardTag):
    builder.PrependInt32Slot(1, rewardTag, 0)

def AddRewardTag(builder, rewardTag):
    EventContentStageRewardExcelAddRewardTag(builder, rewardTag)

def EventContentStageRewardExcelAddRewardProb(builder, rewardProb):
    builder.PrependInt32Slot(2, rewardProb, 0)

def AddRewardProb(builder, rewardProb):
    EventContentStageRewardExcelAddRewardProb(builder, rewardProb)

def EventContentStageRewardExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependInt32Slot(3, rewardParcelType, 0)

def AddRewardParcelType(builder, rewardParcelType):
    EventContentStageRewardExcelAddRewardParcelType(builder, rewardParcelType)

def EventContentStageRewardExcelAddRewardId(builder, rewardId):
    builder.PrependInt64Slot(4, rewardId, 0)

def AddRewardId(builder, rewardId):
    EventContentStageRewardExcelAddRewardId(builder, rewardId)

def EventContentStageRewardExcelAddRewardAmount(builder, rewardAmount):
    builder.PrependInt32Slot(5, rewardAmount, 0)

def AddRewardAmount(builder, rewardAmount):
    EventContentStageRewardExcelAddRewardAmount(builder, rewardAmount)

def EventContentStageRewardExcelAddIsDisplayed(builder, isDisplayed):
    builder.PrependBoolSlot(6, isDisplayed, 0)

def AddIsDisplayed(builder, isDisplayed):
    EventContentStageRewardExcelAddIsDisplayed(builder, isDisplayed)

def EventContentStageRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentStageRewardExcelEnd(builder)
