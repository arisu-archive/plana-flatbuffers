# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentDiceRaceTotalRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentDiceRaceTotalRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentDiceRaceTotalRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentDiceRaceTotalRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EventContentDiceRaceTotalRewardExcel
    def DisplayLapFinishCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RequiredLapFinishCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceTotalRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentDiceRaceTotalRewardExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return EventContentDiceRaceTotalRewardExcelStart(builder)
def EventContentDiceRaceTotalRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelAmount), 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return EventContentDiceRaceTotalRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def EventContentDiceRaceTotalRewardExcelStartRewardParcelAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelAmountVector(builder, numElems):
    return EventContentDiceRaceTotalRewardExcelStartRewardParcelAmountVector(builder, numElems)
def EventContentDiceRaceTotalRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)
def AddRewardParcelId(builder, rewardParcelId):
    return EventContentDiceRaceTotalRewardExcelAddRewardParcelId(builder, rewardParcelId)
def EventContentDiceRaceTotalRewardExcelStartRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelIdVector(builder, numElems):
    return EventContentDiceRaceTotalRewardExcelStartRewardParcelIdVector(builder, numElems)
def EventContentDiceRaceTotalRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)
def AddRewardParcelType(builder, rewardParcelType):
    return EventContentDiceRaceTotalRewardExcelAddRewardParcelType(builder, rewardParcelType)
def EventContentDiceRaceTotalRewardExcelStartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParcelTypeVector(builder, numElems):
    return EventContentDiceRaceTotalRewardExcelStartRewardParcelTypeVector(builder, numElems)
def EventContentDiceRaceTotalRewardExcelAddDisplayLapFinishCount(builder, displayLapFinishCount): builder.PrependInt32Slot(3, displayLapFinishCount, 0)
def AddDisplayLapFinishCount(builder, displayLapFinishCount):
    return EventContentDiceRaceTotalRewardExcelAddDisplayLapFinishCount(builder, displayLapFinishCount)
def EventContentDiceRaceTotalRewardExcelAddRequiredLapFinishCount(builder, requiredLapFinishCount): builder.PrependInt32Slot(4, requiredLapFinishCount, 0)
def AddRequiredLapFinishCount(builder, requiredLapFinishCount):
    return EventContentDiceRaceTotalRewardExcelAddRequiredLapFinishCount(builder, requiredLapFinishCount)
def EventContentDiceRaceTotalRewardExcelAddRewardId(builder, rewardId): builder.PrependInt64Slot(5, rewardId, 0)
def AddRewardId(builder, rewardId):
    return EventContentDiceRaceTotalRewardExcelAddRewardId(builder, rewardId)
def EventContentDiceRaceTotalRewardExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(6, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentDiceRaceTotalRewardExcelAddEventContentId(builder, eventContentId)
def EventContentDiceRaceTotalRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentDiceRaceTotalRewardExcelEnd(builder)