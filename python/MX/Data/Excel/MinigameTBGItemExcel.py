# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGItemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGItemExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGItemExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGItemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGItemExcel
    def BuffIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def BuffIconHudVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameTBGItemExcel
    def DiceEffectAniClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def EncounterCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def ItemParameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def TbgItemEffectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameTBGItemExcelStart(builder): builder.StartObject(10)
def Start(builder):
    return MinigameTBGItemExcelStart(builder)
def MinigameTBGItemExcelAddBuffIcon(builder, buffIcon): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffIcon), 0)
def AddBuffIcon(builder, buffIcon):
    return MinigameTBGItemExcelAddBuffIcon(builder, buffIcon)
def MinigameTBGItemExcelAddBuffIconHudVisible(builder, buffIconHudVisible): builder.PrependBoolSlot(1, buffIconHudVisible, 0)
def AddBuffIconHudVisible(builder, buffIconHudVisible):
    return MinigameTBGItemExcelAddBuffIconHudVisible(builder, buffIconHudVisible)
def MinigameTBGItemExcelAddDiceEffectAniClip(builder, diceEffectAniClip): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(diceEffectAniClip), 0)
def AddDiceEffectAniClip(builder, diceEffectAniClip):
    return MinigameTBGItemExcelAddDiceEffectAniClip(builder, diceEffectAniClip)
def MinigameTBGItemExcelAddEncounterCount(builder, encounterCount): builder.PrependInt32Slot(3, encounterCount, 0)
def AddEncounterCount(builder, encounterCount):
    return MinigameTBGItemExcelAddEncounterCount(builder, encounterCount)
def MinigameTBGItemExcelAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return MinigameTBGItemExcelAddIcon(builder, icon)
def MinigameTBGItemExcelAddItemParameter(builder, itemParameter): builder.PrependInt32Slot(5, itemParameter, 0)
def AddItemParameter(builder, itemParameter):
    return MinigameTBGItemExcelAddItemParameter(builder, itemParameter)
def MinigameTBGItemExcelAddItemType(builder, itemType): builder.PrependInt32Slot(6, itemType, 0)
def AddItemType(builder, itemType):
    return MinigameTBGItemExcelAddItemType(builder, itemType)
def MinigameTBGItemExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(localizeEtcId), 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return MinigameTBGItemExcelAddLocalizeEtcId(builder, localizeEtcId)
def MinigameTBGItemExcelAddTbgItemEffectType(builder, tbgItemEffectType): builder.PrependInt32Slot(8, tbgItemEffectType, 0)
def AddTbgItemEffectType(builder, tbgItemEffectType):
    return MinigameTBGItemExcelAddTbgItemEffectType(builder, tbgItemEffectType)
def MinigameTBGItemExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(9, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MinigameTBGItemExcelAddUniqueId(builder, uniqueId)
def MinigameTBGItemExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameTBGItemExcelEnd(builder)