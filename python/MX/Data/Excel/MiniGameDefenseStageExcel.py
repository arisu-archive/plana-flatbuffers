# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDefenseStageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDefenseStageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDefenseStageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDefenseStageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDefenseStageExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MiniGameDefenseStageExcel
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def DefenseFormationBgPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDefenseStageExcel
    def DefenseFormationBgPrefabScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameDefenseStageExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MiniGameDefenseStageExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def EventContentStageRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def FixedEchelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def MininageDefenseFixedStatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDefenseStageExcel
    def PrevStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def RecommandLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageDifficultyLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageEnterCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # MiniGameDefenseStageExcel
    def StarGoal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

def MiniGameDefenseStageExcelStart(builder): builder.StartObject(27)
def Start(builder):
    return MiniGameDefenseStageExcelStart(builder)
def MiniGameDefenseStageExcelAddBattleDuration(builder, battleDuration): builder.PrependInt64Slot(0, battleDuration, 0)
def AddBattleDuration(builder, battleDuration):
    return MiniGameDefenseStageExcelAddBattleDuration(builder, battleDuration)
def MiniGameDefenseStageExcelAddClearScenarioGroupId(builder, clearScenarioGroupId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clearScenarioGroupId), 0)
def AddClearScenarioGroupId(builder, clearScenarioGroupId):
    return MiniGameDefenseStageExcelAddClearScenarioGroupId(builder, clearScenarioGroupId)
def MiniGameDefenseStageExcelStartClearScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartClearScenarioGroupIdVector(builder, numElems):
    return MiniGameDefenseStageExcelStartClearScenarioGroupIdVector(builder, numElems)
def MiniGameDefenseStageExcelAddContentType(builder, contentType): builder.PrependInt32Slot(2, contentType, 0)
def AddContentType(builder, contentType):
    return MiniGameDefenseStageExcelAddContentType(builder, contentType)
def MiniGameDefenseStageExcelAddDefenseFormationBgPrefab(builder, defenseFormationBgPrefab): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defenseFormationBgPrefab), 0)
def AddDefenseFormationBgPrefab(builder, defenseFormationBgPrefab):
    return MiniGameDefenseStageExcelAddDefenseFormationBgPrefab(builder, defenseFormationBgPrefab)
def MiniGameDefenseStageExcelAddDefenseFormationBgPrefabScale(builder, defenseFormationBgPrefabScale): builder.PrependFloat32Slot(4, defenseFormationBgPrefabScale, 0.0)
def AddDefenseFormationBgPrefabScale(builder, defenseFormationBgPrefabScale):
    return MiniGameDefenseStageExcelAddDefenseFormationBgPrefabScale(builder, defenseFormationBgPrefabScale)
def MiniGameDefenseStageExcelAddEchelonExtensionType(builder, echelonExtensionType): builder.PrependInt32Slot(5, echelonExtensionType, 0)
def AddEchelonExtensionType(builder, echelonExtensionType):
    return MiniGameDefenseStageExcelAddEchelonExtensionType(builder, echelonExtensionType)
def MiniGameDefenseStageExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enterScenarioGroupId), 0)
def AddEnterScenarioGroupId(builder, enterScenarioGroupId):
    return MiniGameDefenseStageExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId)
def MiniGameDefenseStageExcelStartEnterScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEnterScenarioGroupIdVector(builder, numElems):
    return MiniGameDefenseStageExcelStartEnterScenarioGroupIdVector(builder, numElems)
def MiniGameDefenseStageExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(7, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDefenseStageExcelAddEventContentId(builder, eventContentId)
def MiniGameDefenseStageExcelAddEventContentStageRewardId(builder, eventContentStageRewardId): builder.PrependInt64Slot(8, eventContentStageRewardId, 0)
def AddEventContentStageRewardId(builder, eventContentStageRewardId):
    return MiniGameDefenseStageExcelAddEventContentStageRewardId(builder, eventContentStageRewardId)
def MiniGameDefenseStageExcelAddFixedEchelon(builder, fixedEchelon): builder.PrependInt64Slot(9, fixedEchelon, 0)
def AddFixedEchelon(builder, fixedEchelon):
    return MiniGameDefenseStageExcelAddFixedEchelon(builder, fixedEchelon)
def MiniGameDefenseStageExcelAddGroundId(builder, groundId): builder.PrependInt64Slot(10, groundId, 0)
def AddGroundId(builder, groundId):
    return MiniGameDefenseStageExcelAddGroundId(builder, groundId)
def MiniGameDefenseStageExcelAddId(builder, id): builder.PrependInt64Slot(11, id, 0)
def AddId(builder, id):
    return MiniGameDefenseStageExcelAddId(builder, id)
def MiniGameDefenseStageExcelAddMininageDefenseFixedStatId(builder, mininageDefenseFixedStatId): builder.PrependInt64Slot(12, mininageDefenseFixedStatId, 0)
def AddMininageDefenseFixedStatId(builder, mininageDefenseFixedStatId):
    return MiniGameDefenseStageExcelAddMininageDefenseFixedStatId(builder, mininageDefenseFixedStatId)
def MiniGameDefenseStageExcelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return MiniGameDefenseStageExcelAddName(builder, name)
def MiniGameDefenseStageExcelAddPrevStageId(builder, prevStageId): builder.PrependInt64Slot(14, prevStageId, 0)
def AddPrevStageId(builder, prevStageId):
    return MiniGameDefenseStageExcelAddPrevStageId(builder, prevStageId)
def MiniGameDefenseStageExcelAddRecommandLevel(builder, recommandLevel): builder.PrependInt32Slot(15, recommandLevel, 0)
def AddRecommandLevel(builder, recommandLevel):
    return MiniGameDefenseStageExcelAddRecommandLevel(builder, recommandLevel)
def MiniGameDefenseStageExcelAddStageDifficulty(builder, stageDifficulty): builder.PrependInt32Slot(16, stageDifficulty, 0)
def AddStageDifficulty(builder, stageDifficulty):
    return MiniGameDefenseStageExcelAddStageDifficulty(builder, stageDifficulty)
def MiniGameDefenseStageExcelAddStageDifficultyLocalize(builder, stageDifficultyLocalize): builder.PrependUint32Slot(17, stageDifficultyLocalize, 0)
def AddStageDifficultyLocalize(builder, stageDifficultyLocalize):
    return MiniGameDefenseStageExcelAddStageDifficultyLocalize(builder, stageDifficultyLocalize)
def MiniGameDefenseStageExcelAddStageDisplay(builder, stageDisplay): builder.PrependInt32Slot(18, stageDisplay, 0)
def AddStageDisplay(builder, stageDisplay):
    return MiniGameDefenseStageExcelAddStageDisplay(builder, stageDisplay)
def MiniGameDefenseStageExcelAddStageEnterCostAmount(builder, stageEnterCostAmount): builder.PrependInt32Slot(19, stageEnterCostAmount, 0)
def AddStageEnterCostAmount(builder, stageEnterCostAmount):
    return MiniGameDefenseStageExcelAddStageEnterCostAmount(builder, stageEnterCostAmount)
def MiniGameDefenseStageExcelAddStageEnterCostId(builder, stageEnterCostId): builder.PrependInt64Slot(20, stageEnterCostId, 0)
def AddStageEnterCostId(builder, stageEnterCostId):
    return MiniGameDefenseStageExcelAddStageEnterCostId(builder, stageEnterCostId)
def MiniGameDefenseStageExcelAddStageEnterCostType(builder, stageEnterCostType): builder.PrependInt32Slot(21, stageEnterCostType, 0)
def AddStageEnterCostType(builder, stageEnterCostType):
    return MiniGameDefenseStageExcelAddStageEnterCostType(builder, stageEnterCostType)
def MiniGameDefenseStageExcelAddStageHint(builder, stageHint): builder.PrependUint32Slot(22, stageHint, 0)
def AddStageHint(builder, stageHint):
    return MiniGameDefenseStageExcelAddStageHint(builder, stageHint)
def MiniGameDefenseStageExcelAddStageNumber(builder, stageNumber): builder.PrependInt32Slot(23, stageNumber, 0)
def AddStageNumber(builder, stageNumber):
    return MiniGameDefenseStageExcelAddStageNumber(builder, stageNumber)
def MiniGameDefenseStageExcelAddStageTopography(builder, stageTopography): builder.PrependInt32Slot(24, stageTopography, 0)
def AddStageTopography(builder, stageTopography):
    return MiniGameDefenseStageExcelAddStageTopography(builder, stageTopography)
def MiniGameDefenseStageExcelAddStarGoalAmount(builder, starGoalAmount): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(starGoalAmount), 0)
def AddStarGoalAmount(builder, starGoalAmount):
    return MiniGameDefenseStageExcelAddStarGoalAmount(builder, starGoalAmount)
def MiniGameDefenseStageExcelStartStarGoalAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStarGoalAmountVector(builder, numElems):
    return MiniGameDefenseStageExcelStartStarGoalAmountVector(builder, numElems)
def MiniGameDefenseStageExcelAddStarGoal(builder, starGoal): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(starGoal), 0)
def AddStarGoal(builder, starGoal):
    return MiniGameDefenseStageExcelAddStarGoal(builder, starGoal)
def MiniGameDefenseStageExcelStartStarGoalVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStarGoalVector(builder, numElems):
    return MiniGameDefenseStageExcelStartStarGoalVector(builder, numElems)
def MiniGameDefenseStageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDefenseStageExcelEnd(builder)