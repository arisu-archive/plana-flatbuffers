# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterTranscendenceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterTranscendenceExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterTranscendenceExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterTranscendenceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterTranscendenceExcel
    def MaxlevelStar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillSlotC(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillSlotCLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillSlotCIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillSlotB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillSlotBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillSlotBIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillSlotA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillSlotALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillSlotAIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CharacterTranscendenceExcel
    def RecipeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateHeal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateHp(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHpAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHpLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHpIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CharacterTranscendenceExcel
    def MaxFavorLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # CharacterTranscendenceExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterTranscendenceExcelStart(builder): builder.StartObject(10)
def Start(builder):
    return CharacterTranscendenceExcelStart(builder)
def CharacterTranscendenceExcelAddMaxlevelStar(builder, maxlevelStar): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(maxlevelStar), 0)
def AddMaxlevelStar(builder, maxlevelStar):
    return CharacterTranscendenceExcelAddMaxlevelStar(builder, maxlevelStar)
def CharacterTranscendenceExcelStartMaxlevelStarVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMaxlevelStarVector(builder, numElems):
    return CharacterTranscendenceExcelStartMaxlevelStarVector(builder, numElems)
def CharacterTranscendenceExcelAddSkillSlotC(builder, skillSlotC): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(skillSlotC), 0)
def AddSkillSlotC(builder, skillSlotC):
    return CharacterTranscendenceExcelAddSkillSlotC(builder, skillSlotC)
def CharacterTranscendenceExcelStartSkillSlotCVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSkillSlotCVector(builder, numElems):
    return CharacterTranscendenceExcelStartSkillSlotCVector(builder, numElems)
def CharacterTranscendenceExcelAddSkillSlotB(builder, skillSlotB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(skillSlotB), 0)
def AddSkillSlotB(builder, skillSlotB):
    return CharacterTranscendenceExcelAddSkillSlotB(builder, skillSlotB)
def CharacterTranscendenceExcelStartSkillSlotBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSkillSlotBVector(builder, numElems):
    return CharacterTranscendenceExcelStartSkillSlotBVector(builder, numElems)
def CharacterTranscendenceExcelAddSkillSlotA(builder, skillSlotA): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(skillSlotA), 0)
def AddSkillSlotA(builder, skillSlotA):
    return CharacterTranscendenceExcelAddSkillSlotA(builder, skillSlotA)
def CharacterTranscendenceExcelStartSkillSlotAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSkillSlotAVector(builder, numElems):
    return CharacterTranscendenceExcelStartSkillSlotAVector(builder, numElems)
def CharacterTranscendenceExcelAddRecipeId(builder, recipeId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(recipeId), 0)
def AddRecipeId(builder, recipeId):
    return CharacterTranscendenceExcelAddRecipeId(builder, recipeId)
def CharacterTranscendenceExcelStartRecipeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRecipeIdVector(builder, numElems):
    return CharacterTranscendenceExcelStartRecipeIdVector(builder, numElems)
def CharacterTranscendenceExcelAddStatBonusRateHeal(builder, statBonusRateHeal): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(statBonusRateHeal), 0)
def AddStatBonusRateHeal(builder, statBonusRateHeal):
    return CharacterTranscendenceExcelAddStatBonusRateHeal(builder, statBonusRateHeal)
def CharacterTranscendenceExcelStartStatBonusRateHealVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartStatBonusRateHealVector(builder, numElems):
    return CharacterTranscendenceExcelStartStatBonusRateHealVector(builder, numElems)
def CharacterTranscendenceExcelAddStatBonusRateHp(builder, statBonusRateHp): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(statBonusRateHp), 0)
def AddStatBonusRateHp(builder, statBonusRateHp):
    return CharacterTranscendenceExcelAddStatBonusRateHp(builder, statBonusRateHp)
def CharacterTranscendenceExcelStartStatBonusRateHpVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartStatBonusRateHpVector(builder, numElems):
    return CharacterTranscendenceExcelStartStatBonusRateHpVector(builder, numElems)
def CharacterTranscendenceExcelAddStatBonusRateAttack(builder, statBonusRateAttack): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(statBonusRateAttack), 0)
def AddStatBonusRateAttack(builder, statBonusRateAttack):
    return CharacterTranscendenceExcelAddStatBonusRateAttack(builder, statBonusRateAttack)
def CharacterTranscendenceExcelStartStatBonusRateAttackVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartStatBonusRateAttackVector(builder, numElems):
    return CharacterTranscendenceExcelStartStatBonusRateAttackVector(builder, numElems)
def CharacterTranscendenceExcelAddMaxFavorLevel(builder, maxFavorLevel): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(maxFavorLevel), 0)
def AddMaxFavorLevel(builder, maxFavorLevel):
    return CharacterTranscendenceExcelAddMaxFavorLevel(builder, maxFavorLevel)
def CharacterTranscendenceExcelStartMaxFavorLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMaxFavorLevelVector(builder, numElems):
    return CharacterTranscendenceExcelStartMaxFavorLevelVector(builder, numElems)
def CharacterTranscendenceExcelAddCharacterId(builder, characterId): builder.PrependInt64Slot(9, characterId, 0)
def AddCharacterId(builder, characterId):
    return CharacterTranscendenceExcelAddCharacterId(builder, characterId)
def CharacterTranscendenceExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterTranscendenceExcelEnd(builder)