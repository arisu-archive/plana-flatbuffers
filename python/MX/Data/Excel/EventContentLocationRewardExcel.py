# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentLocationRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentLocationRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentLocationRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentLocationRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentLocationRewardExcel
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentLocationRewardExcel
    def ScheduleGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def OrderInGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def ProgressTexture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentLocationRewardExcel
    def VoiceId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentLocationRewardExcel
    def VoiceIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def VoiceIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def VoiceIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EventContentLocationRewardExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def LocationRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def FavorExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def SecretStoneAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def SecretStoneProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def ExtraFavorExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def ExtraFavorExpProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # EventContentLocationRewardExcel
    def ExtraRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # EventContentLocationRewardExcel
    def ExtraRewardProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def ExtraRewardProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # EventContentLocationRewardExcel
    def IsExtraRewardDisplayed(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EventContentLocationRewardExcel
    def IsExtraRewardDisplayedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # EventContentLocationRewardExcel
    def IsExtraRewardDisplayedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def IsExtraRewardDisplayedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # EventContentLocationRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentLocationRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # EventContentLocationRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentLocationRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # EventContentLocationRewardExcel
    def RewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentLocationRewardExcel
    def RewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentLocationRewardExcel
    def RewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentLocationRewardExcel
    def RewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

def EventContentLocationRewardExcelStart(builder):
    builder.StartObject(21)

def Start(builder):
    EventContentLocationRewardExcelStart(builder)

def EventContentLocationRewardExcelAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    EventContentLocationRewardExcelAddLocation(builder, location)

def EventContentLocationRewardExcelAddScheduleGroupId(builder, scheduleGroupId):
    builder.PrependInt64Slot(1, scheduleGroupId, 0)

def AddScheduleGroupId(builder, scheduleGroupId):
    EventContentLocationRewardExcelAddScheduleGroupId(builder, scheduleGroupId)

def EventContentLocationRewardExcelAddOrderInGroup(builder, orderInGroup):
    builder.PrependInt64Slot(2, orderInGroup, 0)

def AddOrderInGroup(builder, orderInGroup):
    EventContentLocationRewardExcelAddOrderInGroup(builder, orderInGroup)

def EventContentLocationRewardExcelAddId(builder, id):
    builder.PrependInt64Slot(3, id, 0)

def AddId(builder, id):
    EventContentLocationRewardExcelAddId(builder, id)

def EventContentLocationRewardExcelAddProgressTexture(builder, progressTexture):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(progressTexture), 0)

def AddProgressTexture(builder, progressTexture):
    EventContentLocationRewardExcelAddProgressTexture(builder, progressTexture)

def EventContentLocationRewardExcelAddVoiceId(builder, voiceId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(voiceId), 0)

def AddVoiceId(builder, voiceId):
    EventContentLocationRewardExcelAddVoiceId(builder, voiceId)

def EventContentLocationRewardExcelStartVoiceIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVoiceIdVector(builder, numElems):
    return EventContentLocationRewardExcelStartVoiceIdVector(builder, numElems)

def EventContentLocationRewardExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(6, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    EventContentLocationRewardExcelAddLocalizeEtcId(builder, localizeEtcId)

def EventContentLocationRewardExcelAddLocationRank(builder, locationRank):
    builder.PrependInt64Slot(7, locationRank, 0)

def AddLocationRank(builder, locationRank):
    EventContentLocationRewardExcelAddLocationRank(builder, locationRank)

def EventContentLocationRewardExcelAddFavorExp(builder, favorExp):
    builder.PrependInt64Slot(8, favorExp, 0)

def AddFavorExp(builder, favorExp):
    EventContentLocationRewardExcelAddFavorExp(builder, favorExp)

def EventContentLocationRewardExcelAddSecretStoneAmount(builder, secretStoneAmount):
    builder.PrependInt64Slot(9, secretStoneAmount, 0)

def AddSecretStoneAmount(builder, secretStoneAmount):
    EventContentLocationRewardExcelAddSecretStoneAmount(builder, secretStoneAmount)

def EventContentLocationRewardExcelAddSecretStoneProb(builder, secretStoneProb):
    builder.PrependInt64Slot(10, secretStoneProb, 0)

def AddSecretStoneProb(builder, secretStoneProb):
    EventContentLocationRewardExcelAddSecretStoneProb(builder, secretStoneProb)

def EventContentLocationRewardExcelAddExtraFavorExp(builder, extraFavorExp):
    builder.PrependInt64Slot(11, extraFavorExp, 0)

def AddExtraFavorExp(builder, extraFavorExp):
    EventContentLocationRewardExcelAddExtraFavorExp(builder, extraFavorExp)

def EventContentLocationRewardExcelAddExtraFavorExpProb(builder, extraFavorExpProb):
    builder.PrependInt64Slot(12, extraFavorExpProb, 0)

def AddExtraFavorExpProb(builder, extraFavorExpProb):
    EventContentLocationRewardExcelAddExtraFavorExpProb(builder, extraFavorExpProb)

def EventContentLocationRewardExcelAddExtraRewardParcelType(builder, extraRewardParcelType):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(extraRewardParcelType), 0)

def AddExtraRewardParcelType(builder, extraRewardParcelType):
    EventContentLocationRewardExcelAddExtraRewardParcelType(builder, extraRewardParcelType)

def EventContentLocationRewardExcelStartExtraRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExtraRewardParcelTypeVector(builder, numElems):
    return EventContentLocationRewardExcelStartExtraRewardParcelTypeVector(builder, numElems)

def EventContentLocationRewardExcelAddExtraRewardParcelId(builder, extraRewardParcelId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(extraRewardParcelId), 0)

def AddExtraRewardParcelId(builder, extraRewardParcelId):
    EventContentLocationRewardExcelAddExtraRewardParcelId(builder, extraRewardParcelId)

def EventContentLocationRewardExcelStartExtraRewardParcelIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartExtraRewardParcelIdVector(builder, numElems):
    return EventContentLocationRewardExcelStartExtraRewardParcelIdVector(builder, numElems)

def EventContentLocationRewardExcelAddExtraRewardAmount(builder, extraRewardAmount):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(extraRewardAmount), 0)

def AddExtraRewardAmount(builder, extraRewardAmount):
    EventContentLocationRewardExcelAddExtraRewardAmount(builder, extraRewardAmount)

def EventContentLocationRewardExcelStartExtraRewardAmountVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartExtraRewardAmountVector(builder, numElems):
    return EventContentLocationRewardExcelStartExtraRewardAmountVector(builder, numElems)

def EventContentLocationRewardExcelAddExtraRewardProb(builder, extraRewardProb):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(extraRewardProb), 0)

def AddExtraRewardProb(builder, extraRewardProb):
    EventContentLocationRewardExcelAddExtraRewardProb(builder, extraRewardProb)

def EventContentLocationRewardExcelStartExtraRewardProbVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartExtraRewardProbVector(builder, numElems):
    return EventContentLocationRewardExcelStartExtraRewardProbVector(builder, numElems)

def EventContentLocationRewardExcelAddIsExtraRewardDisplayed(builder, isExtraRewardDisplayed):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(isExtraRewardDisplayed), 0)

def AddIsExtraRewardDisplayed(builder, isExtraRewardDisplayed):
    EventContentLocationRewardExcelAddIsExtraRewardDisplayed(builder, isExtraRewardDisplayed)

def EventContentLocationRewardExcelStartIsExtraRewardDisplayedVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartIsExtraRewardDisplayedVector(builder, numElems):
    return EventContentLocationRewardExcelStartIsExtraRewardDisplayedVector(builder, numElems)

def EventContentLocationRewardExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)

def AddRewardParcelType(builder, rewardParcelType):
    EventContentLocationRewardExcelAddRewardParcelType(builder, rewardParcelType)

def EventContentLocationRewardExcelStartRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelTypeVector(builder, numElems):
    return EventContentLocationRewardExcelStartRewardParcelTypeVector(builder, numElems)

def EventContentLocationRewardExcelAddRewardParcelId(builder, rewardParcelId):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)

def AddRewardParcelId(builder, rewardParcelId):
    EventContentLocationRewardExcelAddRewardParcelId(builder, rewardParcelId)

def EventContentLocationRewardExcelStartRewardParcelIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardParcelIdVector(builder, numElems):
    return EventContentLocationRewardExcelStartRewardParcelIdVector(builder, numElems)

def EventContentLocationRewardExcelAddRewardAmount(builder, rewardAmount):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(rewardAmount), 0)

def AddRewardAmount(builder, rewardAmount):
    EventContentLocationRewardExcelAddRewardAmount(builder, rewardAmount)

def EventContentLocationRewardExcelStartRewardAmountVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardAmountVector(builder, numElems):
    return EventContentLocationRewardExcelStartRewardAmountVector(builder, numElems)

def EventContentLocationRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentLocationRewardExcelEnd(builder)
