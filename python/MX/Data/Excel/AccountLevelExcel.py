# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AccountLevelExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AccountLevelExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAccountLevelExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AccountLevelExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AccountLevelExcel
    def ApAutoChargeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def CloseInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def NeedReportEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountLevelExcel
    def NewbieExpRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AccountLevelExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return AccountLevelExcelStart(builder)
def AccountLevelExcelAddApAutoChargeMax(builder, apAutoChargeMax): builder.PrependInt64Slot(0, apAutoChargeMax, 0)
def AddApAutoChargeMax(builder, apAutoChargeMax):
    return AccountLevelExcelAddApAutoChargeMax(builder, apAutoChargeMax)
def AccountLevelExcelAddCloseInterval(builder, closeInterval): builder.PrependInt32Slot(1, closeInterval, 0)
def AddCloseInterval(builder, closeInterval):
    return AccountLevelExcelAddCloseInterval(builder, closeInterval)
def AccountLevelExcelAddExp(builder, exp): builder.PrependInt64Slot(2, exp, 0)
def AddExp(builder, exp):
    return AccountLevelExcelAddExp(builder, exp)
def AccountLevelExcelAddId(builder, id): builder.PrependInt64Slot(3, id, 0)
def AddId(builder, id):
    return AccountLevelExcelAddId(builder, id)
def AccountLevelExcelAddLevel(builder, level): builder.PrependInt64Slot(4, level, 0)
def AddLevel(builder, level):
    return AccountLevelExcelAddLevel(builder, level)
def AccountLevelExcelAddNeedReportEvent(builder, needReportEvent): builder.PrependBoolSlot(5, needReportEvent, 0)
def AddNeedReportEvent(builder, needReportEvent):
    return AccountLevelExcelAddNeedReportEvent(builder, needReportEvent)
def AccountLevelExcelAddNewbieExpRatio(builder, newbieExpRatio): builder.PrependInt32Slot(6, newbieExpRatio, 0)
def AddNewbieExpRatio(builder, newbieExpRatio):
    return AccountLevelExcelAddNewbieExpRatio(builder, newbieExpRatio)
def AccountLevelExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AccountLevelExcelEnd(builder)