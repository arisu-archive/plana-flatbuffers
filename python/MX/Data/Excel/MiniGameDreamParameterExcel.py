# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamParameterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamParameterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamParameterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamParameterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamParameterExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDreamParameterExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterBaseMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamParameterExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return MiniGameDreamParameterExcelStart(builder)
def MiniGameDreamParameterExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameDreamParameterExcelAddEventContentId(builder, eventContentId)
def MiniGameDreamParameterExcelAddIconPath(builder, iconPath): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconPath), 0)
def AddIconPath(builder, iconPath):
    return MiniGameDreamParameterExcelAddIconPath(builder, iconPath)
def MiniGameDreamParameterExcelAddId(builder, id): builder.PrependInt64Slot(2, id, 0)
def AddId(builder, id):
    return MiniGameDreamParameterExcelAddId(builder, id)
def MiniGameDreamParameterExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(3, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return MiniGameDreamParameterExcelAddLocalizeEtcId(builder, localizeEtcId)
def MiniGameDreamParameterExcelAddParameterBase(builder, parameterBase): builder.PrependInt64Slot(4, parameterBase, 0)
def AddParameterBase(builder, parameterBase):
    return MiniGameDreamParameterExcelAddParameterBase(builder, parameterBase)
def MiniGameDreamParameterExcelAddParameterBaseMax(builder, parameterBaseMax): builder.PrependInt64Slot(5, parameterBaseMax, 0)
def AddParameterBaseMax(builder, parameterBaseMax):
    return MiniGameDreamParameterExcelAddParameterBaseMax(builder, parameterBaseMax)
def MiniGameDreamParameterExcelAddParameterMax(builder, parameterMax): builder.PrependInt64Slot(6, parameterMax, 0)
def AddParameterMax(builder, parameterMax):
    return MiniGameDreamParameterExcelAddParameterMax(builder, parameterMax)
def MiniGameDreamParameterExcelAddParameterMin(builder, parameterMin): builder.PrependInt64Slot(7, parameterMin, 0)
def AddParameterMin(builder, parameterMin):
    return MiniGameDreamParameterExcelAddParameterMin(builder, parameterMin)
def MiniGameDreamParameterExcelAddParameterType(builder, parameterType): builder.PrependInt32Slot(8, parameterType, 0)
def AddParameterType(builder, parameterType):
    return MiniGameDreamParameterExcelAddParameterType(builder, parameterType)
def MiniGameDreamParameterExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameDreamParameterExcelEnd(builder)