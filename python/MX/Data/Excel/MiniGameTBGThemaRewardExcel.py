# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameTBGThemaRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameTBGThemaRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameTBGThemaRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameTBGThemaRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameTBGThemaRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameTBGThemaRewardExcel
    def IsLoop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameTBGThemaRewardExcel
    def MiniGameTbgThemaRewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameTBGThemaRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MiniGameTBGThemaRewardExcel
    def ThemaRound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameTBGThemaRewardExcel
    def ThemaUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MiniGameTBGThemaRewardExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return MiniGameTBGThemaRewardExcelStart(builder)
def MiniGameTBGThemaRewardExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MiniGameTBGThemaRewardExcelAddEventContentId(builder, eventContentId)
def MiniGameTBGThemaRewardExcelAddIsLoop(builder, isLoop): builder.PrependBoolSlot(1, isLoop, 0)
def AddIsLoop(builder, isLoop):
    return MiniGameTBGThemaRewardExcelAddIsLoop(builder, isLoop)
def MiniGameTBGThemaRewardExcelAddMiniGameTbgThemaRewardType(builder, miniGameTbgThemaRewardType): builder.PrependInt32Slot(2, miniGameTbgThemaRewardType, 0)
def AddMiniGameTbgThemaRewardType(builder, miniGameTbgThemaRewardType):
    return MiniGameTBGThemaRewardExcelAddMiniGameTbgThemaRewardType(builder, miniGameTbgThemaRewardType)
def MiniGameTBGThemaRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelAmount), 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return MiniGameTBGThemaRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def MiniGameTBGThemaRewardExcelStartRewardParcelAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParcelAmountVector(builder, numElems):
    return MiniGameTBGThemaRewardExcelStartRewardParcelAmountVector(builder, numElems)
def MiniGameTBGThemaRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)
def AddRewardParcelId(builder, rewardParcelId):
    return MiniGameTBGThemaRewardExcelAddRewardParcelId(builder, rewardParcelId)
def MiniGameTBGThemaRewardExcelStartRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelIdVector(builder, numElems):
    return MiniGameTBGThemaRewardExcelStartRewardParcelIdVector(builder, numElems)
def MiniGameTBGThemaRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)
def AddRewardParcelType(builder, rewardParcelType):
    return MiniGameTBGThemaRewardExcelAddRewardParcelType(builder, rewardParcelType)
def MiniGameTBGThemaRewardExcelStartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParcelTypeVector(builder, numElems):
    return MiniGameTBGThemaRewardExcelStartRewardParcelTypeVector(builder, numElems)
def MiniGameTBGThemaRewardExcelAddThemaRound(builder, themaRound): builder.PrependInt32Slot(6, themaRound, 0)
def AddThemaRound(builder, themaRound):
    return MiniGameTBGThemaRewardExcelAddThemaRound(builder, themaRound)
def MiniGameTBGThemaRewardExcelAddThemaUniqueId(builder, themaUniqueId): builder.PrependInt32Slot(7, themaUniqueId, 0)
def AddThemaUniqueId(builder, themaUniqueId):
    return MiniGameTBGThemaRewardExcelAddThemaUniqueId(builder, themaUniqueId)
def MiniGameTBGThemaRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MiniGameTBGThemaRewardExcelEnd(builder)