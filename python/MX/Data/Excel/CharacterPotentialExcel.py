# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterPotentialExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterPotentialExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterPotentialExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterPotentialExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterPotentialExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialExcel
    def PotentialStatGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialExcel
    def PotentialStatBonusRateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialExcel
    def IsUnnecessaryStat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CharacterPotentialExcelStart(builder):
    builder.StartObject(4)

def Start(builder):
    CharacterPotentialExcelStart(builder)

def CharacterPotentialExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    CharacterPotentialExcelAddId(builder, id)

def CharacterPotentialExcelAddPotentialStatGroupId(builder, potentialStatGroupId):
    builder.PrependInt64Slot(1, potentialStatGroupId, 0)

def AddPotentialStatGroupId(builder, potentialStatGroupId):
    CharacterPotentialExcelAddPotentialStatGroupId(builder, potentialStatGroupId)

def CharacterPotentialExcelAddPotentialStatBonusRateType(builder, potentialStatBonusRateType):
    builder.PrependInt32Slot(2, potentialStatBonusRateType, 0)

def AddPotentialStatBonusRateType(builder, potentialStatBonusRateType):
    CharacterPotentialExcelAddPotentialStatBonusRateType(builder, potentialStatBonusRateType)

def CharacterPotentialExcelAddIsUnnecessaryStat(builder, isUnnecessaryStat):
    builder.PrependBoolSlot(3, isUnnecessaryStat, 0)

def AddIsUnnecessaryStat(builder, isUnnecessaryStat):
    CharacterPotentialExcelAddIsUnnecessaryStat(builder, isUnnecessaryStat)

def CharacterPotentialExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return CharacterPotentialExcelEnd(builder)
