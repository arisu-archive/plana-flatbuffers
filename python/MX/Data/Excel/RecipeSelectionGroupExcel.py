# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecipeSelectionGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecipeSelectionGroupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecipeSelectionGroupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecipeSelectionGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecipeSelectionGroupExcel
    def ResultAmountMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionGroupExcel
    def ResultAmountMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionGroupExcel
    def ParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionGroupExcel
    def ParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionGroupExcel
    def RecipeSelectionGroupComponentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionGroupExcel
    def RecipeSelectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def RecipeSelectionGroupExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return RecipeSelectionGroupExcelStart(builder)
def RecipeSelectionGroupExcelAddResultAmountMax(builder, resultAmountMax): builder.PrependInt64Slot(0, resultAmountMax, 0)
def AddResultAmountMax(builder, resultAmountMax):
    return RecipeSelectionGroupExcelAddResultAmountMax(builder, resultAmountMax)
def RecipeSelectionGroupExcelAddResultAmountMin(builder, resultAmountMin): builder.PrependInt64Slot(1, resultAmountMin, 0)
def AddResultAmountMin(builder, resultAmountMin):
    return RecipeSelectionGroupExcelAddResultAmountMin(builder, resultAmountMin)
def RecipeSelectionGroupExcelAddParcelId(builder, parcelId): builder.PrependInt64Slot(2, parcelId, 0)
def AddParcelId(builder, parcelId):
    return RecipeSelectionGroupExcelAddParcelId(builder, parcelId)
def RecipeSelectionGroupExcelAddParcelType(builder, parcelType): builder.PrependInt32Slot(3, parcelType, 0)
def AddParcelType(builder, parcelType):
    return RecipeSelectionGroupExcelAddParcelType(builder, parcelType)
def RecipeSelectionGroupExcelAddRecipeSelectionGroupComponentId(builder, recipeSelectionGroupComponentId): builder.PrependInt64Slot(4, recipeSelectionGroupComponentId, 0)
def AddRecipeSelectionGroupComponentId(builder, recipeSelectionGroupComponentId):
    return RecipeSelectionGroupExcelAddRecipeSelectionGroupComponentId(builder, recipeSelectionGroupComponentId)
def RecipeSelectionGroupExcelAddRecipeSelectionGroupId(builder, recipeSelectionGroupId): builder.PrependInt64Slot(5, recipeSelectionGroupId, 0)
def AddRecipeSelectionGroupId(builder, recipeSelectionGroupId):
    return RecipeSelectionGroupExcelAddRecipeSelectionGroupId(builder, recipeSelectionGroupId)
def RecipeSelectionGroupExcelEnd(builder): return builder.EndObject()
def End(builder):
    return RecipeSelectionGroupExcelEnd(builder)