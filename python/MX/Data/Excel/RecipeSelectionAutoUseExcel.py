# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecipeSelectionAutoUseExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecipeSelectionAutoUseExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecipeSelectionAutoUseExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecipeSelectionAutoUseExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecipeSelectionAutoUseExcel
    def Priority(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeSelectionAutoUseExcel
    def PriorityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeSelectionAutoUseExcel
    def PriorityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeSelectionAutoUseExcel
    def PriorityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # RecipeSelectionAutoUseExcel
    def TargetItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionAutoUseExcel
    def ParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RecipeSelectionAutoUseExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def RecipeSelectionAutoUseExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return RecipeSelectionAutoUseExcelStart(builder)
def RecipeSelectionAutoUseExcelAddPriority(builder, priority): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)
def AddPriority(builder, priority):
    return RecipeSelectionAutoUseExcelAddPriority(builder, priority)
def RecipeSelectionAutoUseExcelStartPriorityVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPriorityVector(builder, numElems):
    return RecipeSelectionAutoUseExcelStartPriorityVector(builder, numElems)
def RecipeSelectionAutoUseExcelAddTargetItemId(builder, targetItemId): builder.PrependInt64Slot(1, targetItemId, 0)
def AddTargetItemId(builder, targetItemId):
    return RecipeSelectionAutoUseExcelAddTargetItemId(builder, targetItemId)
def RecipeSelectionAutoUseExcelAddParcelType(builder, parcelType): builder.PrependInt32Slot(2, parcelType, 0)
def AddParcelType(builder, parcelType):
    return RecipeSelectionAutoUseExcelAddParcelType(builder, parcelType)
def RecipeSelectionAutoUseExcelAddId(builder, id): builder.PrependInt64Slot(3, id, 0)
def AddId(builder, id):
    return RecipeSelectionAutoUseExcelAddId(builder, id)
def RecipeSelectionAutoUseExcelEnd(builder): return builder.EndObject()
def End(builder):
    return RecipeSelectionAutoUseExcelEnd(builder)