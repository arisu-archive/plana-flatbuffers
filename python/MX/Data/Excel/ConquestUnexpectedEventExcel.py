# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestUnexpectedEventExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestUnexpectedEventExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConquestUnexpectedEventExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConquestUnexpectedEventExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestUnexpectedEventExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventConditionUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventConditionAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventOccurDailyLimitCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestUnexpectedEventExcel
    def UnitCountPerStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventPrefab(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ConquestUnexpectedEventExcel
    def UnexpectedEventPrefabLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventPrefabIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventUnitId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventUnitIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventUnitIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConquestUnexpectedEventExcel
    def UnexpectedEventUnitIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def ConquestUnexpectedEventExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return ConquestUnexpectedEventExcelStart(builder)
def ConquestUnexpectedEventExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return ConquestUnexpectedEventExcelAddEventContentId(builder, eventContentId)
def ConquestUnexpectedEventExcelAddUnexpectedEventConditionType(builder, unexpectedEventConditionType): builder.PrependInt32Slot(1, unexpectedEventConditionType, 0)
def AddUnexpectedEventConditionType(builder, unexpectedEventConditionType):
    return ConquestUnexpectedEventExcelAddUnexpectedEventConditionType(builder, unexpectedEventConditionType)
def ConquestUnexpectedEventExcelAddUnexpectedEventConditionUniqueId(builder, unexpectedEventConditionUniqueId): builder.PrependInt64Slot(2, unexpectedEventConditionUniqueId, 0)
def AddUnexpectedEventConditionUniqueId(builder, unexpectedEventConditionUniqueId):
    return ConquestUnexpectedEventExcelAddUnexpectedEventConditionUniqueId(builder, unexpectedEventConditionUniqueId)
def ConquestUnexpectedEventExcelAddUnexpectedEventConditionAmount(builder, unexpectedEventConditionAmount): builder.PrependInt64Slot(3, unexpectedEventConditionAmount, 0)
def AddUnexpectedEventConditionAmount(builder, unexpectedEventConditionAmount):
    return ConquestUnexpectedEventExcelAddUnexpectedEventConditionAmount(builder, unexpectedEventConditionAmount)
def ConquestUnexpectedEventExcelAddUnexpectedEventOccurDailyLimitCount(builder, unexpectedEventOccurDailyLimitCount): builder.PrependInt32Slot(4, unexpectedEventOccurDailyLimitCount, 0)
def AddUnexpectedEventOccurDailyLimitCount(builder, unexpectedEventOccurDailyLimitCount):
    return ConquestUnexpectedEventExcelAddUnexpectedEventOccurDailyLimitCount(builder, unexpectedEventOccurDailyLimitCount)
def ConquestUnexpectedEventExcelAddUnitCountPerStep(builder, unitCountPerStep): builder.PrependInt32Slot(5, unitCountPerStep, 0)
def AddUnitCountPerStep(builder, unitCountPerStep):
    return ConquestUnexpectedEventExcelAddUnitCountPerStep(builder, unitCountPerStep)
def ConquestUnexpectedEventExcelAddUnexpectedEventPrefab(builder, unexpectedEventPrefab): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(unexpectedEventPrefab), 0)
def AddUnexpectedEventPrefab(builder, unexpectedEventPrefab):
    return ConquestUnexpectedEventExcelAddUnexpectedEventPrefab(builder, unexpectedEventPrefab)
def ConquestUnexpectedEventExcelStartUnexpectedEventPrefabVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartUnexpectedEventPrefabVector(builder, numElems):
    return ConquestUnexpectedEventExcelStartUnexpectedEventPrefabVector(builder, numElems)
def ConquestUnexpectedEventExcelAddUnexpectedEventUnitId(builder, unexpectedEventUnitId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unexpectedEventUnitId), 0)
def AddUnexpectedEventUnitId(builder, unexpectedEventUnitId):
    return ConquestUnexpectedEventExcelAddUnexpectedEventUnitId(builder, unexpectedEventUnitId)
def ConquestUnexpectedEventExcelStartUnexpectedEventUnitIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartUnexpectedEventUnitIdVector(builder, numElems):
    return ConquestUnexpectedEventExcelStartUnexpectedEventUnitIdVector(builder, numElems)
def ConquestUnexpectedEventExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConquestUnexpectedEventExcelEnd(builder)