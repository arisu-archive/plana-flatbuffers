# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterVoiceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterVoiceExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterVoiceExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterVoiceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterVoiceExcel
    def CharacterVoiceGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def CharacterVoiceUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterVoiceExcel
    def CvCollectionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def Delay(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterVoiceExcel
    def DelayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CharacterVoiceExcel
    def DelayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def DelayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CharacterVoiceExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def LocalizeCvGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterVoiceExcel
    def Nation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterVoiceExcel
    def NationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterVoiceExcel
    def NationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def NationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CharacterVoiceExcel
    def OnlyOne(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterVoiceExcel
    def Path(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterVoiceExcel
    def PathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def PathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # CharacterVoiceExcel
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def UnlockFavorRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def VoiceHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def Volume(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterVoiceExcel
    def VolumeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CharacterVoiceExcel
    def VolumeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def VolumeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def CharacterVoiceExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return CharacterVoiceExcelStart(builder)
def CharacterVoiceExcelAddCharacterVoiceGroupId(builder, characterVoiceGroupId): builder.PrependInt64Slot(0, characterVoiceGroupId, 0)
def AddCharacterVoiceGroupId(builder, characterVoiceGroupId):
    return CharacterVoiceExcelAddCharacterVoiceGroupId(builder, characterVoiceGroupId)
def CharacterVoiceExcelAddCharacterVoiceUniqueId(builder, characterVoiceUniqueId): builder.PrependInt64Slot(1, characterVoiceUniqueId, 0)
def AddCharacterVoiceUniqueId(builder, characterVoiceUniqueId):
    return CharacterVoiceExcelAddCharacterVoiceUniqueId(builder, characterVoiceUniqueId)
def CharacterVoiceExcelAddCollectionVisible(builder, collectionVisible): builder.PrependBoolSlot(2, collectionVisible, 0)
def AddCollectionVisible(builder, collectionVisible):
    return CharacterVoiceExcelAddCollectionVisible(builder, collectionVisible)
def CharacterVoiceExcelAddCvCollectionType(builder, cvCollectionType): builder.PrependInt32Slot(3, cvCollectionType, 0)
def AddCvCollectionType(builder, cvCollectionType):
    return CharacterVoiceExcelAddCvCollectionType(builder, cvCollectionType)
def CharacterVoiceExcelAddDelay(builder, delay): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(delay), 0)
def AddDelay(builder, delay):
    return CharacterVoiceExcelAddDelay(builder, delay)
def CharacterVoiceExcelStartDelayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDelayVector(builder, numElems):
    return CharacterVoiceExcelStartDelayVector(builder, numElems)
def CharacterVoiceExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(5, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return CharacterVoiceExcelAddDisplayOrder(builder, displayOrder)
def CharacterVoiceExcelAddLocalizeCvGroup(builder, localizeCvGroup): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(localizeCvGroup), 0)
def AddLocalizeCvGroup(builder, localizeCvGroup):
    return CharacterVoiceExcelAddLocalizeCvGroup(builder, localizeCvGroup)
def CharacterVoiceExcelAddNation(builder, nation): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(nation), 0)
def AddNation(builder, nation):
    return CharacterVoiceExcelAddNation(builder, nation)
def CharacterVoiceExcelStartNationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNationVector(builder, numElems):
    return CharacterVoiceExcelStartNationVector(builder, numElems)
def CharacterVoiceExcelAddOnlyOne(builder, onlyOne): builder.PrependBoolSlot(8, onlyOne, 0)
def AddOnlyOne(builder, onlyOne):
    return CharacterVoiceExcelAddOnlyOne(builder, onlyOne)
def CharacterVoiceExcelAddPath(builder, path): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def AddPath(builder, path):
    return CharacterVoiceExcelAddPath(builder, path)
def CharacterVoiceExcelStartPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPathVector(builder, numElems):
    return CharacterVoiceExcelStartPathVector(builder, numElems)
def CharacterVoiceExcelAddPriority(builder, priority): builder.PrependInt32Slot(10, priority, 0)
def AddPriority(builder, priority):
    return CharacterVoiceExcelAddPriority(builder, priority)
def CharacterVoiceExcelAddUnlockFavorRank(builder, unlockFavorRank): builder.PrependInt64Slot(11, unlockFavorRank, 0)
def AddUnlockFavorRank(builder, unlockFavorRank):
    return CharacterVoiceExcelAddUnlockFavorRank(builder, unlockFavorRank)
def CharacterVoiceExcelAddVoiceHash(builder, voiceHash): builder.PrependUint32Slot(12, voiceHash, 0)
def AddVoiceHash(builder, voiceHash):
    return CharacterVoiceExcelAddVoiceHash(builder, voiceHash)
def CharacterVoiceExcelAddVolume(builder, volume): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(volume), 0)
def AddVolume(builder, volume):
    return CharacterVoiceExcelAddVolume(builder, volume)
def CharacterVoiceExcelStartVolumeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVolumeVector(builder, numElems):
    return CharacterVoiceExcelStartVolumeVector(builder, numElems)
def CharacterVoiceExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterVoiceExcelEnd(builder)