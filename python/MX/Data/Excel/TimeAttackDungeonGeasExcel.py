# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimeAttackDungeonGeasExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeAttackDungeonGeasExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeAttackDungeonGeasExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeAttackDungeonGeasExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimeAttackDungeonGeasExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def TimeAttackDungeonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def LocalizeEtcKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def ClearDefaultPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def ClearTimeWeightPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def TimeWeightConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def RecommandLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonGeasExcel
    def AllyPassiveSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonGeasExcel
    def EnemyPassiveSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # TimeAttackDungeonGeasExcel
    def GeasIconPath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TimeAttackDungeonGeasExcel
    def GeasIconPathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonGeasExcel
    def GeasIconPathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # TimeAttackDungeonGeasExcel
    def GeasLocalizeEtcKey(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TimeAttackDungeonGeasExcel
    def GeasLocalizeEtcKeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # TimeAttackDungeonGeasExcel
    def GeasLocalizeEtcKeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonGeasExcel
    def GeasLocalizeEtcKeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def TimeAttackDungeonGeasExcelStart(builder):
    builder.StartObject(16)

def Start(builder):
    TimeAttackDungeonGeasExcelStart(builder)

def TimeAttackDungeonGeasExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    TimeAttackDungeonGeasExcelAddId(builder, id)

def TimeAttackDungeonGeasExcelAddTimeAttackDungeonType(builder, timeAttackDungeonType):
    builder.PrependInt32Slot(1, timeAttackDungeonType, 0)

def AddTimeAttackDungeonType(builder, timeAttackDungeonType):
    TimeAttackDungeonGeasExcelAddTimeAttackDungeonType(builder, timeAttackDungeonType)

def TimeAttackDungeonGeasExcelAddLocalizeEtcKey(builder, localizeEtcKey):
    builder.PrependUint32Slot(2, localizeEtcKey, 0)

def AddLocalizeEtcKey(builder, localizeEtcKey):
    TimeAttackDungeonGeasExcelAddLocalizeEtcKey(builder, localizeEtcKey)

def TimeAttackDungeonGeasExcelAddBattleDuration(builder, battleDuration):
    builder.PrependInt64Slot(3, battleDuration, 0)

def AddBattleDuration(builder, battleDuration):
    TimeAttackDungeonGeasExcelAddBattleDuration(builder, battleDuration)

def TimeAttackDungeonGeasExcelAddClearDefaultPoint(builder, clearDefaultPoint):
    builder.PrependInt64Slot(4, clearDefaultPoint, 0)

def AddClearDefaultPoint(builder, clearDefaultPoint):
    TimeAttackDungeonGeasExcelAddClearDefaultPoint(builder, clearDefaultPoint)

def TimeAttackDungeonGeasExcelAddClearTimeWeightPoint(builder, clearTimeWeightPoint):
    builder.PrependInt64Slot(5, clearTimeWeightPoint, 0)

def AddClearTimeWeightPoint(builder, clearTimeWeightPoint):
    TimeAttackDungeonGeasExcelAddClearTimeWeightPoint(builder, clearTimeWeightPoint)

def TimeAttackDungeonGeasExcelAddTimeWeightConst(builder, timeWeightConst):
    builder.PrependInt64Slot(6, timeWeightConst, 0)

def AddTimeWeightConst(builder, timeWeightConst):
    TimeAttackDungeonGeasExcelAddTimeWeightConst(builder, timeWeightConst)

def TimeAttackDungeonGeasExcelAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(7, difficulty, 0)

def AddDifficulty(builder, difficulty):
    TimeAttackDungeonGeasExcelAddDifficulty(builder, difficulty)

def TimeAttackDungeonGeasExcelAddRecommandLevel(builder, recommandLevel):
    builder.PrependInt32Slot(8, recommandLevel, 0)

def AddRecommandLevel(builder, recommandLevel):
    TimeAttackDungeonGeasExcelAddRecommandLevel(builder, recommandLevel)

def TimeAttackDungeonGeasExcelAddGroundId(builder, groundId):
    builder.PrependInt64Slot(9, groundId, 0)

def AddGroundId(builder, groundId):
    TimeAttackDungeonGeasExcelAddGroundId(builder, groundId)

def TimeAttackDungeonGeasExcelAddAllyPassiveSkillId(builder, allyPassiveSkillId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(allyPassiveSkillId), 0)

def AddAllyPassiveSkillId(builder, allyPassiveSkillId):
    TimeAttackDungeonGeasExcelAddAllyPassiveSkillId(builder, allyPassiveSkillId)

def TimeAttackDungeonGeasExcelStartAllyPassiveSkillIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAllyPassiveSkillIdVector(builder, numElems):
    return TimeAttackDungeonGeasExcelStartAllyPassiveSkillIdVector(builder, numElems)

def TimeAttackDungeonGeasExcelAddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(allyPassiveSkillLevel), 0)

def AddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel):
    TimeAttackDungeonGeasExcelAddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel)

def TimeAttackDungeonGeasExcelStartAllyPassiveSkillLevelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAllyPassiveSkillLevelVector(builder, numElems):
    return TimeAttackDungeonGeasExcelStartAllyPassiveSkillLevelVector(builder, numElems)

def TimeAttackDungeonGeasExcelAddEnemyPassiveSkillId(builder, enemyPassiveSkillId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPassiveSkillId), 0)

def AddEnemyPassiveSkillId(builder, enemyPassiveSkillId):
    TimeAttackDungeonGeasExcelAddEnemyPassiveSkillId(builder, enemyPassiveSkillId)

def TimeAttackDungeonGeasExcelStartEnemyPassiveSkillIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyPassiveSkillIdVector(builder, numElems):
    return TimeAttackDungeonGeasExcelStartEnemyPassiveSkillIdVector(builder, numElems)

def TimeAttackDungeonGeasExcelAddEnemyPassiveSkillLevel(builder, enemyPassiveSkillLevel):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPassiveSkillLevel), 0)

def AddEnemyPassiveSkillLevel(builder, enemyPassiveSkillLevel):
    TimeAttackDungeonGeasExcelAddEnemyPassiveSkillLevel(builder, enemyPassiveSkillLevel)

def TimeAttackDungeonGeasExcelStartEnemyPassiveSkillLevelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyPassiveSkillLevelVector(builder, numElems):
    return TimeAttackDungeonGeasExcelStartEnemyPassiveSkillLevelVector(builder, numElems)

def TimeAttackDungeonGeasExcelAddGeasIconPath(builder, geasIconPath):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(geasIconPath), 0)

def AddGeasIconPath(builder, geasIconPath):
    TimeAttackDungeonGeasExcelAddGeasIconPath(builder, geasIconPath)

def TimeAttackDungeonGeasExcelStartGeasIconPathVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGeasIconPathVector(builder, numElems):
    return TimeAttackDungeonGeasExcelStartGeasIconPathVector(builder, numElems)

def TimeAttackDungeonGeasExcelAddGeasLocalizeEtcKey(builder, geasLocalizeEtcKey):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(geasLocalizeEtcKey), 0)

def AddGeasLocalizeEtcKey(builder, geasLocalizeEtcKey):
    TimeAttackDungeonGeasExcelAddGeasLocalizeEtcKey(builder, geasLocalizeEtcKey)

def TimeAttackDungeonGeasExcelStartGeasLocalizeEtcKeyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGeasLocalizeEtcKeyVector(builder, numElems):
    return TimeAttackDungeonGeasExcelStartGeasLocalizeEtcKeyVector(builder, numElems)

def TimeAttackDungeonGeasExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return TimeAttackDungeonGeasExcelEnd(builder)
