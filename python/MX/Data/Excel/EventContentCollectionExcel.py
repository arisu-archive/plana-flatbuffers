# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentCollectionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentCollectionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentCollectionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentCollectionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentCollectionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def UnlockConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def UnlockConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentCollectionExcel
    def UnlockConditionParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentCollectionExcel
    def UnlockConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentCollectionExcel
    def UnlockConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # EventContentCollectionExcel
    def MultipleConditionCheckType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def UnlockConditionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def IsObject(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentCollectionExcel
    def IsObjectOnFullResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentCollectionExcel
    def IsHorizon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentCollectionExcel
    def EmblemResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentCollectionExcel
    def ThumbResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentCollectionExcel
    def FullResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentCollectionExcel
    def Decoration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentCollectionExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentCollectionExcel
    def SubNameLocalizeCodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EventContentCollectionExcelStart(builder):
    builder.StartObject(16)

def Start(builder):
    EventContentCollectionExcelStart(builder)

def EventContentCollectionExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    EventContentCollectionExcelAddId(builder, id)

def EventContentCollectionExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(1, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    EventContentCollectionExcelAddEventContentId(builder, eventContentId)

def EventContentCollectionExcelAddGroupId(builder, groupId):
    builder.PrependInt64Slot(2, groupId, 0)

def AddGroupId(builder, groupId):
    EventContentCollectionExcelAddGroupId(builder, groupId)

def EventContentCollectionExcelAddUnlockConditionType(builder, unlockConditionType):
    builder.PrependInt32Slot(3, unlockConditionType, 0)

def AddUnlockConditionType(builder, unlockConditionType):
    EventContentCollectionExcelAddUnlockConditionType(builder, unlockConditionType)

def EventContentCollectionExcelAddUnlockConditionParameter(builder, unlockConditionParameter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockConditionParameter), 0)

def AddUnlockConditionParameter(builder, unlockConditionParameter):
    EventContentCollectionExcelAddUnlockConditionParameter(builder, unlockConditionParameter)

def EventContentCollectionExcelStartUnlockConditionParameterVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartUnlockConditionParameterVector(builder, numElems):
    return EventContentCollectionExcelStartUnlockConditionParameterVector(builder, numElems)

def EventContentCollectionExcelAddMultipleConditionCheckType(builder, multipleConditionCheckType):
    builder.PrependInt32Slot(5, multipleConditionCheckType, 0)

def AddMultipleConditionCheckType(builder, multipleConditionCheckType):
    EventContentCollectionExcelAddMultipleConditionCheckType(builder, multipleConditionCheckType)

def EventContentCollectionExcelAddUnlockConditionCount(builder, unlockConditionCount):
    builder.PrependInt64Slot(6, unlockConditionCount, 0)

def AddUnlockConditionCount(builder, unlockConditionCount):
    EventContentCollectionExcelAddUnlockConditionCount(builder, unlockConditionCount)

def EventContentCollectionExcelAddIsObject(builder, isObject):
    builder.PrependBoolSlot(7, isObject, 0)

def AddIsObject(builder, isObject):
    EventContentCollectionExcelAddIsObject(builder, isObject)

def EventContentCollectionExcelAddIsObjectOnFullResource(builder, isObjectOnFullResource):
    builder.PrependBoolSlot(8, isObjectOnFullResource, 0)

def AddIsObjectOnFullResource(builder, isObjectOnFullResource):
    EventContentCollectionExcelAddIsObjectOnFullResource(builder, isObjectOnFullResource)

def EventContentCollectionExcelAddIsHorizon(builder, isHorizon):
    builder.PrependBoolSlot(9, isHorizon, 0)

def AddIsHorizon(builder, isHorizon):
    EventContentCollectionExcelAddIsHorizon(builder, isHorizon)

def EventContentCollectionExcelAddEmblemResource(builder, emblemResource):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(emblemResource), 0)

def AddEmblemResource(builder, emblemResource):
    EventContentCollectionExcelAddEmblemResource(builder, emblemResource)

def EventContentCollectionExcelAddThumbResource(builder, thumbResource):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(thumbResource), 0)

def AddThumbResource(builder, thumbResource):
    EventContentCollectionExcelAddThumbResource(builder, thumbResource)

def EventContentCollectionExcelAddFullResource(builder, fullResource):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(fullResource), 0)

def AddFullResource(builder, fullResource):
    EventContentCollectionExcelAddFullResource(builder, fullResource)

def EventContentCollectionExcelAddDecoration(builder, decoration):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(decoration), 0)

def AddDecoration(builder, decoration):
    EventContentCollectionExcelAddDecoration(builder, decoration)

def EventContentCollectionExcelAddLocalizeEtcId(builder, localizeEtcId):
    builder.PrependUint32Slot(14, localizeEtcId, 0)

def AddLocalizeEtcId(builder, localizeEtcId):
    EventContentCollectionExcelAddLocalizeEtcId(builder, localizeEtcId)

def EventContentCollectionExcelAddSubNameLocalizeCodeId(builder, subNameLocalizeCodeId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(subNameLocalizeCodeId), 0)

def AddSubNameLocalizeCodeId(builder, subNameLocalizeCodeId):
    EventContentCollectionExcelAddSubNameLocalizeCodeId(builder, subNameLocalizeCodeId)

def EventContentCollectionExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentCollectionExcelEnd(builder)
