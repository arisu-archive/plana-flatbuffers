# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentConcentrationCardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentConcentrationCardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentConcentrationCardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentConcentrationCardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentConcentrationCardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationCardExcel
    def CardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationCardExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentConcentrationCardExcel
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentConcentrationCardExcel
    def BackImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EventContentConcentrationCardExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return EventContentConcentrationCardExcelStart(builder)
def EventContentConcentrationCardExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentConcentrationCardExcelAddEventContentId(builder, eventContentId)
def EventContentConcentrationCardExcelAddCardId(builder, cardId): builder.PrependInt64Slot(1, cardId, 0)
def AddCardId(builder, cardId):
    return EventContentConcentrationCardExcelAddCardId(builder, cardId)
def EventContentConcentrationCardExcelAddRarity(builder, rarity): builder.PrependInt32Slot(2, rarity, 0)
def AddRarity(builder, rarity):
    return EventContentConcentrationCardExcelAddRarity(builder, rarity)
def EventContentConcentrationCardExcelAddImagePath(builder, imagePath): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imagePath), 0)
def AddImagePath(builder, imagePath):
    return EventContentConcentrationCardExcelAddImagePath(builder, imagePath)
def EventContentConcentrationCardExcelAddBackImagePath(builder, backImagePath): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(backImagePath), 0)
def AddBackImagePath(builder, backImagePath):
    return EventContentConcentrationCardExcelAddBackImagePath(builder, backImagePath)
def EventContentConcentrationCardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentConcentrationCardExcelEnd(builder)