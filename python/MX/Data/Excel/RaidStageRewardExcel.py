# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RaidStageRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RaidStageRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRaidStageRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RaidStageRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RaidStageRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def IsClearStageRewardHideInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RaidStageRewardExcel
    def ClearStageRewardProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def ClearStageRewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def ClearStageRewardParcelUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def ClearStageRewardAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def RaidStageRewardExcelStart(builder):
    builder.StartObject(6)

def Start(builder):
    RaidStageRewardExcelStart(builder)

def RaidStageRewardExcelAddGroupId(builder, groupId):
    builder.PrependInt64Slot(0, groupId, 0)

def AddGroupId(builder, groupId):
    RaidStageRewardExcelAddGroupId(builder, groupId)

def RaidStageRewardExcelAddIsClearStageRewardHideInfo(builder, isClearStageRewardHideInfo):
    builder.PrependBoolSlot(1, isClearStageRewardHideInfo, 0)

def AddIsClearStageRewardHideInfo(builder, isClearStageRewardHideInfo):
    RaidStageRewardExcelAddIsClearStageRewardHideInfo(builder, isClearStageRewardHideInfo)

def RaidStageRewardExcelAddClearStageRewardProb(builder, clearStageRewardProb):
    builder.PrependInt64Slot(2, clearStageRewardProb, 0)

def AddClearStageRewardProb(builder, clearStageRewardProb):
    RaidStageRewardExcelAddClearStageRewardProb(builder, clearStageRewardProb)

def RaidStageRewardExcelAddClearStageRewardParcelType(builder, clearStageRewardParcelType):
    builder.PrependInt32Slot(3, clearStageRewardParcelType, 0)

def AddClearStageRewardParcelType(builder, clearStageRewardParcelType):
    RaidStageRewardExcelAddClearStageRewardParcelType(builder, clearStageRewardParcelType)

def RaidStageRewardExcelAddClearStageRewardParcelUniqueId(builder, clearStageRewardParcelUniqueId):
    builder.PrependInt64Slot(4, clearStageRewardParcelUniqueId, 0)

def AddClearStageRewardParcelUniqueId(builder, clearStageRewardParcelUniqueId):
    RaidStageRewardExcelAddClearStageRewardParcelUniqueId(builder, clearStageRewardParcelUniqueId)

def RaidStageRewardExcelAddClearStageRewardAmount(builder, clearStageRewardAmount):
    builder.PrependInt64Slot(5, clearStageRewardAmount, 0)

def AddClearStageRewardAmount(builder, clearStageRewardAmount):
    RaidStageRewardExcelAddClearStageRewardAmount(builder, clearStageRewardAmount)

def RaidStageRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return RaidStageRewardExcelEnd(builder)
