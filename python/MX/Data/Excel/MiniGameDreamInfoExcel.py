# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamInfoExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamInfoExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamInfoExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamInfoExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamInfoExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerMultiplierCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerMultiplierConditionValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerMultiplierMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerActionPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerDailyPointParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerDailyPointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerParameterTransfer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def ScheduleCostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def LobbyBgmChangeScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamInfoExcelStart(builder):
    builder.StartObject(13)

def Start(builder):
    MiniGameDreamInfoExcelStart(builder)

def MiniGameDreamInfoExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    MiniGameDreamInfoExcelAddEventContentId(builder, eventContentId)

def MiniGameDreamInfoExcelAddDreamMakerMultiplierCondition(builder, dreamMakerMultiplierCondition):
    builder.PrependInt32Slot(1, dreamMakerMultiplierCondition, 0)

def AddDreamMakerMultiplierCondition(builder, dreamMakerMultiplierCondition):
    MiniGameDreamInfoExcelAddDreamMakerMultiplierCondition(builder, dreamMakerMultiplierCondition)

def MiniGameDreamInfoExcelAddDreamMakerMultiplierConditionValue(builder, dreamMakerMultiplierConditionValue):
    builder.PrependInt64Slot(2, dreamMakerMultiplierConditionValue, 0)

def AddDreamMakerMultiplierConditionValue(builder, dreamMakerMultiplierConditionValue):
    MiniGameDreamInfoExcelAddDreamMakerMultiplierConditionValue(builder, dreamMakerMultiplierConditionValue)

def MiniGameDreamInfoExcelAddDreamMakerMultiplierMax(builder, dreamMakerMultiplierMax):
    builder.PrependInt64Slot(3, dreamMakerMultiplierMax, 0)

def AddDreamMakerMultiplierMax(builder, dreamMakerMultiplierMax):
    MiniGameDreamInfoExcelAddDreamMakerMultiplierMax(builder, dreamMakerMultiplierMax)

def MiniGameDreamInfoExcelAddDreamMakerDays(builder, dreamMakerDays):
    builder.PrependInt64Slot(4, dreamMakerDays, 0)

def AddDreamMakerDays(builder, dreamMakerDays):
    MiniGameDreamInfoExcelAddDreamMakerDays(builder, dreamMakerDays)

def MiniGameDreamInfoExcelAddDreamMakerActionPoint(builder, dreamMakerActionPoint):
    builder.PrependInt64Slot(5, dreamMakerActionPoint, 0)

def AddDreamMakerActionPoint(builder, dreamMakerActionPoint):
    MiniGameDreamInfoExcelAddDreamMakerActionPoint(builder, dreamMakerActionPoint)

def MiniGameDreamInfoExcelAddDreamMakerParcelType(builder, dreamMakerParcelType):
    builder.PrependInt32Slot(6, dreamMakerParcelType, 0)

def AddDreamMakerParcelType(builder, dreamMakerParcelType):
    MiniGameDreamInfoExcelAddDreamMakerParcelType(builder, dreamMakerParcelType)

def MiniGameDreamInfoExcelAddDreamMakerParcelId(builder, dreamMakerParcelId):
    builder.PrependInt64Slot(7, dreamMakerParcelId, 0)

def AddDreamMakerParcelId(builder, dreamMakerParcelId):
    MiniGameDreamInfoExcelAddDreamMakerParcelId(builder, dreamMakerParcelId)

def MiniGameDreamInfoExcelAddDreamMakerDailyPointParcelType(builder, dreamMakerDailyPointParcelType):
    builder.PrependInt32Slot(8, dreamMakerDailyPointParcelType, 0)

def AddDreamMakerDailyPointParcelType(builder, dreamMakerDailyPointParcelType):
    MiniGameDreamInfoExcelAddDreamMakerDailyPointParcelType(builder, dreamMakerDailyPointParcelType)

def MiniGameDreamInfoExcelAddDreamMakerDailyPointId(builder, dreamMakerDailyPointId):
    builder.PrependInt64Slot(9, dreamMakerDailyPointId, 0)

def AddDreamMakerDailyPointId(builder, dreamMakerDailyPointId):
    MiniGameDreamInfoExcelAddDreamMakerDailyPointId(builder, dreamMakerDailyPointId)

def MiniGameDreamInfoExcelAddDreamMakerParameterTransfer(builder, dreamMakerParameterTransfer):
    builder.PrependInt64Slot(10, dreamMakerParameterTransfer, 0)

def AddDreamMakerParameterTransfer(builder, dreamMakerParameterTransfer):
    MiniGameDreamInfoExcelAddDreamMakerParameterTransfer(builder, dreamMakerParameterTransfer)

def MiniGameDreamInfoExcelAddScheduleCostGoodsId(builder, scheduleCostGoodsId):
    builder.PrependInt64Slot(11, scheduleCostGoodsId, 0)

def AddScheduleCostGoodsId(builder, scheduleCostGoodsId):
    MiniGameDreamInfoExcelAddScheduleCostGoodsId(builder, scheduleCostGoodsId)

def MiniGameDreamInfoExcelAddLobbyBgmChangeScenarioId(builder, lobbyBgmChangeScenarioId):
    builder.PrependInt64Slot(12, lobbyBgmChangeScenarioId, 0)

def AddLobbyBgmChangeScenarioId(builder, lobbyBgmChangeScenarioId):
    MiniGameDreamInfoExcelAddLobbyBgmChangeScenarioId(builder, lobbyBgmChangeScenarioId)

def MiniGameDreamInfoExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MiniGameDreamInfoExcelEnd(builder)
