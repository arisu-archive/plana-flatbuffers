# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProductSelectionGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProductSelectionGroupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProductSelectionGroupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProductSelectionGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProductSelectionGroupExcel
    def ProductSelectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def ProductSelectionGroupComponentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def ParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def ParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def ResultAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def ConditionParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ProductSelectionGroupExcel
    def ConditionParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ProductSelectionGroupExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    ProductSelectionGroupExcelStart(builder)

def ProductSelectionGroupExcelAddProductSelectionGroupId(builder, productSelectionGroupId):
    builder.PrependInt64Slot(0, productSelectionGroupId, 0)

def AddProductSelectionGroupId(builder, productSelectionGroupId):
    ProductSelectionGroupExcelAddProductSelectionGroupId(builder, productSelectionGroupId)

def ProductSelectionGroupExcelAddProductSelectionGroupComponentId(builder, productSelectionGroupComponentId):
    builder.PrependInt64Slot(1, productSelectionGroupComponentId, 0)

def AddProductSelectionGroupComponentId(builder, productSelectionGroupComponentId):
    ProductSelectionGroupExcelAddProductSelectionGroupComponentId(builder, productSelectionGroupComponentId)

def ProductSelectionGroupExcelAddDisplayOrder(builder, displayOrder):
    builder.PrependInt64Slot(2, displayOrder, 0)

def AddDisplayOrder(builder, displayOrder):
    ProductSelectionGroupExcelAddDisplayOrder(builder, displayOrder)

def ProductSelectionGroupExcelAddParcelType(builder, parcelType):
    builder.PrependInt32Slot(3, parcelType, 0)

def AddParcelType(builder, parcelType):
    ProductSelectionGroupExcelAddParcelType(builder, parcelType)

def ProductSelectionGroupExcelAddParcelId(builder, parcelId):
    builder.PrependInt64Slot(4, parcelId, 0)

def AddParcelId(builder, parcelId):
    ProductSelectionGroupExcelAddParcelId(builder, parcelId)

def ProductSelectionGroupExcelAddResultAmount(builder, resultAmount):
    builder.PrependInt64Slot(5, resultAmount, 0)

def AddResultAmount(builder, resultAmount):
    ProductSelectionGroupExcelAddResultAmount(builder, resultAmount)

def ProductSelectionGroupExcelAddConditionParcelType(builder, conditionParcelType):
    builder.PrependInt32Slot(6, conditionParcelType, 0)

def AddConditionParcelType(builder, conditionParcelType):
    ProductSelectionGroupExcelAddConditionParcelType(builder, conditionParcelType)

def ProductSelectionGroupExcelAddConditionParcelId(builder, conditionParcelId):
    builder.PrependInt64Slot(7, conditionParcelId, 0)

def AddConditionParcelId(builder, conditionParcelId):
    ProductSelectionGroupExcelAddConditionParcelId(builder, conditionParcelId)

def ProductSelectionGroupExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ProductSelectionGroupExcelEnd(builder)
