# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParcelAutoSynthExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParcelAutoSynthExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParcelAutoSynthExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParcelAutoSynthExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParcelAutoSynthExcel
    def RequireParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def RequireParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def RequireParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def ResultParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def ResultParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def ResultParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def SynthEndAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ParcelAutoSynthExcel
    def SynthMaxItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ParcelAutoSynthExcel
    def SynthStartAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ParcelAutoSynthExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return ParcelAutoSynthExcelStart(builder)
def ParcelAutoSynthExcelAddRequireParcelAmount(builder, requireParcelAmount): builder.PrependInt64Slot(0, requireParcelAmount, 0)
def AddRequireParcelAmount(builder, requireParcelAmount):
    return ParcelAutoSynthExcelAddRequireParcelAmount(builder, requireParcelAmount)
def ParcelAutoSynthExcelAddRequireParcelId(builder, requireParcelId): builder.PrependInt64Slot(1, requireParcelId, 0)
def AddRequireParcelId(builder, requireParcelId):
    return ParcelAutoSynthExcelAddRequireParcelId(builder, requireParcelId)
def ParcelAutoSynthExcelAddRequireParcelType(builder, requireParcelType): builder.PrependInt32Slot(2, requireParcelType, 0)
def AddRequireParcelType(builder, requireParcelType):
    return ParcelAutoSynthExcelAddRequireParcelType(builder, requireParcelType)
def ParcelAutoSynthExcelAddResultParcelAmount(builder, resultParcelAmount): builder.PrependInt64Slot(3, resultParcelAmount, 0)
def AddResultParcelAmount(builder, resultParcelAmount):
    return ParcelAutoSynthExcelAddResultParcelAmount(builder, resultParcelAmount)
def ParcelAutoSynthExcelAddResultParcelId(builder, resultParcelId): builder.PrependInt64Slot(4, resultParcelId, 0)
def AddResultParcelId(builder, resultParcelId):
    return ParcelAutoSynthExcelAddResultParcelId(builder, resultParcelId)
def ParcelAutoSynthExcelAddResultParcelType(builder, resultParcelType): builder.PrependInt32Slot(5, resultParcelType, 0)
def AddResultParcelType(builder, resultParcelType):
    return ParcelAutoSynthExcelAddResultParcelType(builder, resultParcelType)
def ParcelAutoSynthExcelAddSynthEndAmount(builder, synthEndAmount): builder.PrependInt64Slot(6, synthEndAmount, 0)
def AddSynthEndAmount(builder, synthEndAmount):
    return ParcelAutoSynthExcelAddSynthEndAmount(builder, synthEndAmount)
def ParcelAutoSynthExcelAddSynthMaxItem(builder, synthMaxItem): builder.PrependBoolSlot(7, synthMaxItem, 0)
def AddSynthMaxItem(builder, synthMaxItem):
    return ParcelAutoSynthExcelAddSynthMaxItem(builder, synthMaxItem)
def ParcelAutoSynthExcelAddSynthStartAmount(builder, synthStartAmount): builder.PrependInt64Slot(8, synthStartAmount, 0)
def AddSynthStartAmount(builder, synthStartAmount):
    return ParcelAutoSynthExcelAddSynthStartAmount(builder, synthStartAmount)
def ParcelAutoSynthExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ParcelAutoSynthExcelEnd(builder)