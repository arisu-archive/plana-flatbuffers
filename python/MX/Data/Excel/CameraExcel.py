# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CameraExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CameraExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCameraExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CameraExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CameraExcel
    def UseRailPointCompensation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CameraExcel
    def IgnoreEnemies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CameraExcel
    def BottomMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def LeftMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def MoveInstantlyRotationSave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CameraExcel
    def MoveInstantly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CameraExcel
    def RotationY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def RotationX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def MaxDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def MinDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CameraExcelStart(builder): builder.StartObject(11)
def Start(builder):
    return CameraExcelStart(builder)
def CameraExcelAddUseRailPointCompensation(builder, useRailPointCompensation): builder.PrependBoolSlot(0, useRailPointCompensation, 0)
def AddUseRailPointCompensation(builder, useRailPointCompensation):
    return CameraExcelAddUseRailPointCompensation(builder, useRailPointCompensation)
def CameraExcelAddIgnoreEnemies(builder, ignoreEnemies): builder.PrependBoolSlot(1, ignoreEnemies, 0)
def AddIgnoreEnemies(builder, ignoreEnemies):
    return CameraExcelAddIgnoreEnemies(builder, ignoreEnemies)
def CameraExcelAddBottomMargin(builder, bottomMargin): builder.PrependFloat32Slot(2, bottomMargin, 0.0)
def AddBottomMargin(builder, bottomMargin):
    return CameraExcelAddBottomMargin(builder, bottomMargin)
def CameraExcelAddLeftMargin(builder, leftMargin): builder.PrependFloat32Slot(3, leftMargin, 0.0)
def AddLeftMargin(builder, leftMargin):
    return CameraExcelAddLeftMargin(builder, leftMargin)
def CameraExcelAddMoveInstantlyRotationSave(builder, moveInstantlyRotationSave): builder.PrependBoolSlot(4, moveInstantlyRotationSave, 0)
def AddMoveInstantlyRotationSave(builder, moveInstantlyRotationSave):
    return CameraExcelAddMoveInstantlyRotationSave(builder, moveInstantlyRotationSave)
def CameraExcelAddMoveInstantly(builder, moveInstantly): builder.PrependBoolSlot(5, moveInstantly, 0)
def AddMoveInstantly(builder, moveInstantly):
    return CameraExcelAddMoveInstantly(builder, moveInstantly)
def CameraExcelAddRotationY(builder, rotationY): builder.PrependFloat32Slot(6, rotationY, 0.0)
def AddRotationY(builder, rotationY):
    return CameraExcelAddRotationY(builder, rotationY)
def CameraExcelAddRotationX(builder, rotationX): builder.PrependFloat32Slot(7, rotationX, 0.0)
def AddRotationX(builder, rotationX):
    return CameraExcelAddRotationX(builder, rotationX)
def CameraExcelAddMaxDistance(builder, maxDistance): builder.PrependFloat32Slot(8, maxDistance, 0.0)
def AddMaxDistance(builder, maxDistance):
    return CameraExcelAddMaxDistance(builder, maxDistance)
def CameraExcelAddMinDistance(builder, minDistance): builder.PrependFloat32Slot(9, minDistance, 0.0)
def AddMinDistance(builder, minDistance):
    return CameraExcelAddMinDistance(builder, minDistance)
def CameraExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(10, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return CameraExcelAddUniqueId(builder, uniqueId)
def CameraExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CameraExcelEnd(builder)