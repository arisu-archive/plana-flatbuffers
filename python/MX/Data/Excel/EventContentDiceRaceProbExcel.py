# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentDiceRaceProbExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentDiceRaceProbExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentDiceRaceProbExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentDiceRaceProbExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentDiceRaceProbExcel
    def CostItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceProbExcel
    def CostItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceProbExcel
    def DiceResult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceProbExcel
    def EventContentDiceRaceResultType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceProbExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceProbExcel
    def Prob(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EventContentDiceRaceProbExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return EventContentDiceRaceProbExcelStart(builder)
def EventContentDiceRaceProbExcelAddCostItemAmount(builder, costItemAmount): builder.PrependInt32Slot(0, costItemAmount, 0)
def AddCostItemAmount(builder, costItemAmount):
    return EventContentDiceRaceProbExcelAddCostItemAmount(builder, costItemAmount)
def EventContentDiceRaceProbExcelAddCostItemId(builder, costItemId): builder.PrependInt64Slot(1, costItemId, 0)
def AddCostItemId(builder, costItemId):
    return EventContentDiceRaceProbExcelAddCostItemId(builder, costItemId)
def EventContentDiceRaceProbExcelAddDiceResult(builder, diceResult): builder.PrependInt32Slot(2, diceResult, 0)
def AddDiceResult(builder, diceResult):
    return EventContentDiceRaceProbExcelAddDiceResult(builder, diceResult)
def EventContentDiceRaceProbExcelAddEventContentDiceRaceResultType(builder, eventContentDiceRaceResultType): builder.PrependInt32Slot(3, eventContentDiceRaceResultType, 0)
def AddEventContentDiceRaceResultType(builder, eventContentDiceRaceResultType):
    return EventContentDiceRaceProbExcelAddEventContentDiceRaceResultType(builder, eventContentDiceRaceResultType)
def EventContentDiceRaceProbExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(4, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentDiceRaceProbExcelAddEventContentId(builder, eventContentId)
def EventContentDiceRaceProbExcelAddProb(builder, prob): builder.PrependInt32Slot(5, prob, 0)
def AddProb(builder, prob):
    return EventContentDiceRaceProbExcelAddProb(builder, prob)
def EventContentDiceRaceProbExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentDiceRaceProbExcelEnd(builder)