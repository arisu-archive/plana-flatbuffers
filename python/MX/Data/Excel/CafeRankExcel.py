# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CafeRankExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CafeRankExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCafeRankExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CafeRankExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CafeRankExcel
    def CafeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def CafeVisitWeightBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusStep(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusStepAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusStepLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CafeRankExcel
    def CafeVisitWeightTagBonusStepIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CafeRankExcel
    def CharacterVisitMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def CharacterVisitMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def ComfortMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def RecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CafeRankExcel
    def TagCountMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CafeRankExcelStart(builder): builder.StartObject(10)
def Start(builder):
    return CafeRankExcelStart(builder)
def CafeRankExcelAddCafeId(builder, cafeId): builder.PrependInt64Slot(0, cafeId, 0)
def AddCafeId(builder, cafeId):
    return CafeRankExcelAddCafeId(builder, cafeId)
def CafeRankExcelAddCafeVisitWeightBase(builder, cafeVisitWeightBase): builder.PrependInt32Slot(1, cafeVisitWeightBase, 0)
def AddCafeVisitWeightBase(builder, cafeVisitWeightBase):
    return CafeRankExcelAddCafeVisitWeightBase(builder, cafeVisitWeightBase)
def CafeRankExcelAddCafeVisitWeightTagBonus(builder, cafeVisitWeightTagBonus): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cafeVisitWeightTagBonus), 0)
def AddCafeVisitWeightTagBonus(builder, cafeVisitWeightTagBonus):
    return CafeRankExcelAddCafeVisitWeightTagBonus(builder, cafeVisitWeightTagBonus)
def CafeRankExcelStartCafeVisitWeightTagBonusVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCafeVisitWeightTagBonusVector(builder, numElems):
    return CafeRankExcelStartCafeVisitWeightTagBonusVector(builder, numElems)
def CafeRankExcelAddCafeVisitWeightTagBonusStep(builder, cafeVisitWeightTagBonusStep): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cafeVisitWeightTagBonusStep), 0)
def AddCafeVisitWeightTagBonusStep(builder, cafeVisitWeightTagBonusStep):
    return CafeRankExcelAddCafeVisitWeightTagBonusStep(builder, cafeVisitWeightTagBonusStep)
def CafeRankExcelStartCafeVisitWeightTagBonusStepVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCafeVisitWeightTagBonusStepVector(builder, numElems):
    return CafeRankExcelStartCafeVisitWeightTagBonusStepVector(builder, numElems)
def CafeRankExcelAddCharacterVisitMax(builder, characterVisitMax): builder.PrependInt32Slot(4, characterVisitMax, 0)
def AddCharacterVisitMax(builder, characterVisitMax):
    return CafeRankExcelAddCharacterVisitMax(builder, characterVisitMax)
def CafeRankExcelAddCharacterVisitMin(builder, characterVisitMin): builder.PrependInt32Slot(5, characterVisitMin, 0)
def AddCharacterVisitMin(builder, characterVisitMin):
    return CafeRankExcelAddCharacterVisitMin(builder, characterVisitMin)
def CafeRankExcelAddComfortMax(builder, comfortMax): builder.PrependInt64Slot(6, comfortMax, 0)
def AddComfortMax(builder, comfortMax):
    return CafeRankExcelAddComfortMax(builder, comfortMax)
def CafeRankExcelAddRank(builder, rank): builder.PrependInt64Slot(7, rank, 0)
def AddRank(builder, rank):
    return CafeRankExcelAddRank(builder, rank)
def CafeRankExcelAddRecipeId(builder, recipeId): builder.PrependInt64Slot(8, recipeId, 0)
def AddRecipeId(builder, recipeId):
    return CafeRankExcelAddRecipeId(builder, recipeId)
def CafeRankExcelAddTagCountMax(builder, tagCountMax): builder.PrependInt64Slot(9, tagCountMax, 0)
def AddTagCountMax(builder, tagCountMax):
    return CafeRankExcelAddTagCountMax(builder, tagCountMax)
def CafeRankExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CafeRankExcelEnd(builder)