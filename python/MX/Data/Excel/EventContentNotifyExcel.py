# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentNotifyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentNotifyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentNotifyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentNotifyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentNotifyExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentNotifyExcel
    def EventNotifyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def EventTargetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def ShortcutEventTargetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def IsShortcutEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def EventContentNotifyExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return EventContentNotifyExcelStart(builder)
def EventContentNotifyExcelAddId(builder, id): builder.PrependInt32Slot(0, id, 0)
def AddId(builder, id):
    return EventContentNotifyExcelAddId(builder, id)
def EventContentNotifyExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(1, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return EventContentNotifyExcelAddLocalizeEtcId(builder, localizeEtcId)
def EventContentNotifyExcelAddIconPath(builder, iconPath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconPath), 0)
def AddIconPath(builder, iconPath):
    return EventContentNotifyExcelAddIconPath(builder, iconPath)
def EventContentNotifyExcelAddEventNotifyType(builder, eventNotifyType): builder.PrependInt32Slot(3, eventNotifyType, 0)
def AddEventNotifyType(builder, eventNotifyType):
    return EventContentNotifyExcelAddEventNotifyType(builder, eventNotifyType)
def EventContentNotifyExcelAddEventTargetType(builder, eventTargetType): builder.PrependInt32Slot(4, eventTargetType, 0)
def AddEventTargetType(builder, eventTargetType):
    return EventContentNotifyExcelAddEventTargetType(builder, eventTargetType)
def EventContentNotifyExcelAddShortcutEventTargetType(builder, shortcutEventTargetType): builder.PrependInt32Slot(5, shortcutEventTargetType, 0)
def AddShortcutEventTargetType(builder, shortcutEventTargetType):
    return EventContentNotifyExcelAddShortcutEventTargetType(builder, shortcutEventTargetType)
def EventContentNotifyExcelAddIsShortcutEnable(builder, isShortcutEnable): builder.PrependBoolSlot(6, isShortcutEnable, 0)
def AddIsShortcutEnable(builder, isShortcutEnable):
    return EventContentNotifyExcelAddIsShortcutEnable(builder, isShortcutEnable)
def EventContentNotifyExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentNotifyExcelEnd(builder)