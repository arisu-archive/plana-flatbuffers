# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AssistRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AssistRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAssistRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AssistRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AssistRewardExcel
    def RewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AssistRewardExcel
    def EchelonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AssistRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AssistRewardExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AssistRewardExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def AssistRewardExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return AssistRewardExcelStart(builder)
def AssistRewardExcelAddRewardType(builder, rewardType): builder.PrependInt32Slot(0, rewardType, 0)
def AddRewardType(builder, rewardType):
    return AssistRewardExcelAddRewardType(builder, rewardType)
def AssistRewardExcelAddEchelonType(builder, echelonType): builder.PrependInt32Slot(1, echelonType, 0)
def AddEchelonType(builder, echelonType):
    return AssistRewardExcelAddEchelonType(builder, echelonType)
def AssistRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(2, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return AssistRewardExcelAddRewardParcelType(builder, rewardParcelType)
def AssistRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependInt64Slot(3, rewardParcelId, 0)
def AddRewardParcelId(builder, rewardParcelId):
    return AssistRewardExcelAddRewardParcelId(builder, rewardParcelId)
def AssistRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependInt64Slot(4, rewardParcelAmount, 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return AssistRewardExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def AssistRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AssistRewardExcelEnd(builder)