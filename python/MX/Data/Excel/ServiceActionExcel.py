# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ServiceActionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServiceActionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsServiceActionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ServiceActionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ServiceActionExcel
    def ServiceActionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ServiceActionExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ServiceActionExcel
    def GoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ServiceActionExcelStart(builder):
    builder.StartObject(3)

def Start(builder):
    ServiceActionExcelStart(builder)

def ServiceActionExcelAddServiceActionType(builder, serviceActionType):
    builder.PrependInt32Slot(0, serviceActionType, 0)

def AddServiceActionType(builder, serviceActionType):
    ServiceActionExcelAddServiceActionType(builder, serviceActionType)

def ServiceActionExcelAddIsLegacy(builder, isLegacy):
    builder.PrependBoolSlot(1, isLegacy, 0)

def AddIsLegacy(builder, isLegacy):
    ServiceActionExcelAddIsLegacy(builder, isLegacy)

def ServiceActionExcelAddGoodsId(builder, goodsId):
    builder.PrependInt64Slot(2, goodsId, 0)

def AddGoodsId(builder, goodsId):
    ServiceActionExcelAddGoodsId(builder, goodsId)

def ServiceActionExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ServiceActionExcelEnd(builder)
