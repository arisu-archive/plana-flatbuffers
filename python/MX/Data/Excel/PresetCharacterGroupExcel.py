# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PresetCharacterGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PresetCharacterGroupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPresetCharacterGroupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PresetCharacterGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PresetCharacterGroupExcel
    def PresetCharacterGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def GetPresetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PresetCharacterGroupExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def FavorExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def FavorRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def StarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def ExSkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PassiveSkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def ExtraPassiveSkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def CommonSkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def LeaderSkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipSlot01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PresetCharacterGroupExcel
    def EquipSlotTier01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipSlotLevel01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipSlot02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PresetCharacterGroupExcel
    def EquipSlotTier02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipSlotLevel02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipSlot03(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PresetCharacterGroupExcel
    def EquipSlotTier03(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipSlotLevel03(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipCharacterWeapon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PresetCharacterGroupExcel
    def EquipCharacterWeaponTier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipCharacterWeaponLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipCharacterGear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PresetCharacterGroupExcel
    def EquipCharacterGearTier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def EquipCharacterGearLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PotentialType01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PotentialLevel01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PotentialType02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PotentialLevel02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PotentialType03(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PresetCharacterGroupExcel
    def PotentialLevel03(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PresetCharacterGroupExcelStart(builder):
    builder.StartObject(33)

def Start(builder):
    PresetCharacterGroupExcelStart(builder)

def PresetCharacterGroupExcelAddPresetCharacterGroupId(builder, presetCharacterGroupId):
    builder.PrependInt64Slot(0, presetCharacterGroupId, 0)

def AddPresetCharacterGroupId(builder, presetCharacterGroupId):
    PresetCharacterGroupExcelAddPresetCharacterGroupId(builder, presetCharacterGroupId)

def PresetCharacterGroupExcelAddGetPresetType(builder, getPresetType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(getPresetType), 0)

def AddGetPresetType(builder, getPresetType):
    PresetCharacterGroupExcelAddGetPresetType(builder, getPresetType)

def PresetCharacterGroupExcelAddLevel(builder, level):
    builder.PrependInt32Slot(2, level, 0)

def AddLevel(builder, level):
    PresetCharacterGroupExcelAddLevel(builder, level)

def PresetCharacterGroupExcelAddExp(builder, exp):
    builder.PrependInt32Slot(3, exp, 0)

def AddExp(builder, exp):
    PresetCharacterGroupExcelAddExp(builder, exp)

def PresetCharacterGroupExcelAddFavorExp(builder, favorExp):
    builder.PrependInt32Slot(4, favorExp, 0)

def AddFavorExp(builder, favorExp):
    PresetCharacterGroupExcelAddFavorExp(builder, favorExp)

def PresetCharacterGroupExcelAddFavorRank(builder, favorRank):
    builder.PrependInt32Slot(5, favorRank, 0)

def AddFavorRank(builder, favorRank):
    PresetCharacterGroupExcelAddFavorRank(builder, favorRank)

def PresetCharacterGroupExcelAddStarGrade(builder, starGrade):
    builder.PrependInt32Slot(6, starGrade, 0)

def AddStarGrade(builder, starGrade):
    PresetCharacterGroupExcelAddStarGrade(builder, starGrade)

def PresetCharacterGroupExcelAddExSkillLevel(builder, exSkillLevel):
    builder.PrependInt32Slot(7, exSkillLevel, 0)

def AddExSkillLevel(builder, exSkillLevel):
    PresetCharacterGroupExcelAddExSkillLevel(builder, exSkillLevel)

def PresetCharacterGroupExcelAddPassiveSkillLevel(builder, passiveSkillLevel):
    builder.PrependInt32Slot(8, passiveSkillLevel, 0)

def AddPassiveSkillLevel(builder, passiveSkillLevel):
    PresetCharacterGroupExcelAddPassiveSkillLevel(builder, passiveSkillLevel)

def PresetCharacterGroupExcelAddExtraPassiveSkillLevel(builder, extraPassiveSkillLevel):
    builder.PrependInt32Slot(9, extraPassiveSkillLevel, 0)

def AddExtraPassiveSkillLevel(builder, extraPassiveSkillLevel):
    PresetCharacterGroupExcelAddExtraPassiveSkillLevel(builder, extraPassiveSkillLevel)

def PresetCharacterGroupExcelAddCommonSkillLevel(builder, commonSkillLevel):
    builder.PrependInt32Slot(10, commonSkillLevel, 0)

def AddCommonSkillLevel(builder, commonSkillLevel):
    PresetCharacterGroupExcelAddCommonSkillLevel(builder, commonSkillLevel)

def PresetCharacterGroupExcelAddLeaderSkillLevel(builder, leaderSkillLevel):
    builder.PrependInt32Slot(11, leaderSkillLevel, 0)

def AddLeaderSkillLevel(builder, leaderSkillLevel):
    PresetCharacterGroupExcelAddLeaderSkillLevel(builder, leaderSkillLevel)

def PresetCharacterGroupExcelAddEquipSlot01(builder, equipSlot01):
    builder.PrependBoolSlot(12, equipSlot01, 0)

def AddEquipSlot01(builder, equipSlot01):
    PresetCharacterGroupExcelAddEquipSlot01(builder, equipSlot01)

def PresetCharacterGroupExcelAddEquipSlotTier01(builder, equipSlotTier01):
    builder.PrependInt32Slot(13, equipSlotTier01, 0)

def AddEquipSlotTier01(builder, equipSlotTier01):
    PresetCharacterGroupExcelAddEquipSlotTier01(builder, equipSlotTier01)

def PresetCharacterGroupExcelAddEquipSlotLevel01(builder, equipSlotLevel01):
    builder.PrependInt32Slot(14, equipSlotLevel01, 0)

def AddEquipSlotLevel01(builder, equipSlotLevel01):
    PresetCharacterGroupExcelAddEquipSlotLevel01(builder, equipSlotLevel01)

def PresetCharacterGroupExcelAddEquipSlot02(builder, equipSlot02):
    builder.PrependBoolSlot(15, equipSlot02, 0)

def AddEquipSlot02(builder, equipSlot02):
    PresetCharacterGroupExcelAddEquipSlot02(builder, equipSlot02)

def PresetCharacterGroupExcelAddEquipSlotTier02(builder, equipSlotTier02):
    builder.PrependInt32Slot(16, equipSlotTier02, 0)

def AddEquipSlotTier02(builder, equipSlotTier02):
    PresetCharacterGroupExcelAddEquipSlotTier02(builder, equipSlotTier02)

def PresetCharacterGroupExcelAddEquipSlotLevel02(builder, equipSlotLevel02):
    builder.PrependInt32Slot(17, equipSlotLevel02, 0)

def AddEquipSlotLevel02(builder, equipSlotLevel02):
    PresetCharacterGroupExcelAddEquipSlotLevel02(builder, equipSlotLevel02)

def PresetCharacterGroupExcelAddEquipSlot03(builder, equipSlot03):
    builder.PrependBoolSlot(18, equipSlot03, 0)

def AddEquipSlot03(builder, equipSlot03):
    PresetCharacterGroupExcelAddEquipSlot03(builder, equipSlot03)

def PresetCharacterGroupExcelAddEquipSlotTier03(builder, equipSlotTier03):
    builder.PrependInt32Slot(19, equipSlotTier03, 0)

def AddEquipSlotTier03(builder, equipSlotTier03):
    PresetCharacterGroupExcelAddEquipSlotTier03(builder, equipSlotTier03)

def PresetCharacterGroupExcelAddEquipSlotLevel03(builder, equipSlotLevel03):
    builder.PrependInt32Slot(20, equipSlotLevel03, 0)

def AddEquipSlotLevel03(builder, equipSlotLevel03):
    PresetCharacterGroupExcelAddEquipSlotLevel03(builder, equipSlotLevel03)

def PresetCharacterGroupExcelAddEquipCharacterWeapon(builder, equipCharacterWeapon):
    builder.PrependBoolSlot(21, equipCharacterWeapon, 0)

def AddEquipCharacterWeapon(builder, equipCharacterWeapon):
    PresetCharacterGroupExcelAddEquipCharacterWeapon(builder, equipCharacterWeapon)

def PresetCharacterGroupExcelAddEquipCharacterWeaponTier(builder, equipCharacterWeaponTier):
    builder.PrependInt32Slot(22, equipCharacterWeaponTier, 0)

def AddEquipCharacterWeaponTier(builder, equipCharacterWeaponTier):
    PresetCharacterGroupExcelAddEquipCharacterWeaponTier(builder, equipCharacterWeaponTier)

def PresetCharacterGroupExcelAddEquipCharacterWeaponLevel(builder, equipCharacterWeaponLevel):
    builder.PrependInt32Slot(23, equipCharacterWeaponLevel, 0)

def AddEquipCharacterWeaponLevel(builder, equipCharacterWeaponLevel):
    PresetCharacterGroupExcelAddEquipCharacterWeaponLevel(builder, equipCharacterWeaponLevel)

def PresetCharacterGroupExcelAddEquipCharacterGear(builder, equipCharacterGear):
    builder.PrependBoolSlot(24, equipCharacterGear, 0)

def AddEquipCharacterGear(builder, equipCharacterGear):
    PresetCharacterGroupExcelAddEquipCharacterGear(builder, equipCharacterGear)

def PresetCharacterGroupExcelAddEquipCharacterGearTier(builder, equipCharacterGearTier):
    builder.PrependInt32Slot(25, equipCharacterGearTier, 0)

def AddEquipCharacterGearTier(builder, equipCharacterGearTier):
    PresetCharacterGroupExcelAddEquipCharacterGearTier(builder, equipCharacterGearTier)

def PresetCharacterGroupExcelAddEquipCharacterGearLevel(builder, equipCharacterGearLevel):
    builder.PrependInt32Slot(26, equipCharacterGearLevel, 0)

def AddEquipCharacterGearLevel(builder, equipCharacterGearLevel):
    PresetCharacterGroupExcelAddEquipCharacterGearLevel(builder, equipCharacterGearLevel)

def PresetCharacterGroupExcelAddPotentialType01(builder, potentialType01):
    builder.PrependInt32Slot(27, potentialType01, 0)

def AddPotentialType01(builder, potentialType01):
    PresetCharacterGroupExcelAddPotentialType01(builder, potentialType01)

def PresetCharacterGroupExcelAddPotentialLevel01(builder, potentialLevel01):
    builder.PrependInt32Slot(28, potentialLevel01, 0)

def AddPotentialLevel01(builder, potentialLevel01):
    PresetCharacterGroupExcelAddPotentialLevel01(builder, potentialLevel01)

def PresetCharacterGroupExcelAddPotentialType02(builder, potentialType02):
    builder.PrependInt32Slot(29, potentialType02, 0)

def AddPotentialType02(builder, potentialType02):
    PresetCharacterGroupExcelAddPotentialType02(builder, potentialType02)

def PresetCharacterGroupExcelAddPotentialLevel02(builder, potentialLevel02):
    builder.PrependInt32Slot(30, potentialLevel02, 0)

def AddPotentialLevel02(builder, potentialLevel02):
    PresetCharacterGroupExcelAddPotentialLevel02(builder, potentialLevel02)

def PresetCharacterGroupExcelAddPotentialType03(builder, potentialType03):
    builder.PrependInt32Slot(31, potentialType03, 0)

def AddPotentialType03(builder, potentialType03):
    PresetCharacterGroupExcelAddPotentialType03(builder, potentialType03)

def PresetCharacterGroupExcelAddPotentialLevel03(builder, potentialLevel03):
    builder.PrependInt32Slot(32, potentialLevel03, 0)

def AddPotentialLevel03(builder, potentialLevel03):
    PresetCharacterGroupExcelAddPotentialLevel03(builder, potentialLevel03)

def PresetCharacterGroupExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return PresetCharacterGroupExcelEnd(builder)
