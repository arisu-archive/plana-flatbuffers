# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentDiceRaceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentDiceRaceExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentDiceRaceExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentDiceRaceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentDiceRaceExcel
    def DiceCostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceExcel
    def DiceRaceEventType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventContentDiceRaceExcel
    def DiceRaceEventTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceExcel
    def DiceRaceEventTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # EventContentDiceRaceExcel
    def DiceRacePawnPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentDiceRaceExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceExcel
    def FixedDiceIcon(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventContentDiceRaceExcel
    def FixedDiceIconLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceExcel
    def FixedDiceIconIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # EventContentDiceRaceExcel
    def IsUsingFixedDice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentDiceRaceExcel
    def SkipableLap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EventContentDiceRaceExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return EventContentDiceRaceExcelStart(builder)
def EventContentDiceRaceExcelAddDiceCostGoodsId(builder, diceCostGoodsId): builder.PrependInt64Slot(0, diceCostGoodsId, 0)
def AddDiceCostGoodsId(builder, diceCostGoodsId):
    return EventContentDiceRaceExcelAddDiceCostGoodsId(builder, diceCostGoodsId)
def EventContentDiceRaceExcelAddDiceRaceEventType(builder, diceRaceEventType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(diceRaceEventType), 0)
def AddDiceRaceEventType(builder, diceRaceEventType):
    return EventContentDiceRaceExcelAddDiceRaceEventType(builder, diceRaceEventType)
def EventContentDiceRaceExcelStartDiceRaceEventTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDiceRaceEventTypeVector(builder, numElems):
    return EventContentDiceRaceExcelStartDiceRaceEventTypeVector(builder, numElems)
def EventContentDiceRaceExcelAddDiceRacePawnPrefab(builder, diceRacePawnPrefab): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(diceRacePawnPrefab), 0)
def AddDiceRacePawnPrefab(builder, diceRacePawnPrefab):
    return EventContentDiceRaceExcelAddDiceRacePawnPrefab(builder, diceRacePawnPrefab)
def EventContentDiceRaceExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(3, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentDiceRaceExcelAddEventContentId(builder, eventContentId)
def EventContentDiceRaceExcelAddFixedDiceIcon(builder, fixedDiceIcon): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(fixedDiceIcon), 0)
def AddFixedDiceIcon(builder, fixedDiceIcon):
    return EventContentDiceRaceExcelAddFixedDiceIcon(builder, fixedDiceIcon)
def EventContentDiceRaceExcelStartFixedDiceIconVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFixedDiceIconVector(builder, numElems):
    return EventContentDiceRaceExcelStartFixedDiceIconVector(builder, numElems)
def EventContentDiceRaceExcelAddIsUsingFixedDice(builder, isUsingFixedDice): builder.PrependBoolSlot(5, isUsingFixedDice, 0)
def AddIsUsingFixedDice(builder, isUsingFixedDice):
    return EventContentDiceRaceExcelAddIsUsingFixedDice(builder, isUsingFixedDice)
def EventContentDiceRaceExcelAddSkipableLap(builder, skipableLap): builder.PrependInt32Slot(6, skipableLap, 0)
def AddSkipableLap(builder, skipableLap):
    return EventContentDiceRaceExcelAddSkipableLap(builder, skipableLap)
def EventContentDiceRaceExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentDiceRaceExcelEnd(builder)