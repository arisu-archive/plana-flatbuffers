# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentFortuneGachaShopExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentFortuneGachaShopExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentFortuneGachaShopExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentFortuneGachaShopExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentFortuneGachaShopExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def Grade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def CostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentFortuneGachaShopExcel
    def FortuneGachaGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def Prob(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def ProbModifyValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def ProbModifyLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentFortuneGachaShopExcel
    def RewardParcelAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def EventContentFortuneGachaShopExcelStart(builder):
    builder.StartObject(12)

def Start(builder):
    EventContentFortuneGachaShopExcelStart(builder)

def EventContentFortuneGachaShopExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    EventContentFortuneGachaShopExcelAddEventContentId(builder, eventContentId)

def EventContentFortuneGachaShopExcelAddId(builder, id):
    builder.PrependInt64Slot(1, id, 0)

def AddId(builder, id):
    EventContentFortuneGachaShopExcelAddId(builder, id)

def EventContentFortuneGachaShopExcelAddGrade(builder, grade):
    builder.PrependInt32Slot(2, grade, 0)

def AddGrade(builder, grade):
    EventContentFortuneGachaShopExcelAddGrade(builder, grade)

def EventContentFortuneGachaShopExcelAddCostGoodsId(builder, costGoodsId):
    builder.PrependInt64Slot(3, costGoodsId, 0)

def AddCostGoodsId(builder, costGoodsId):
    EventContentFortuneGachaShopExcelAddCostGoodsId(builder, costGoodsId)

def EventContentFortuneGachaShopExcelAddIsLegacy(builder, isLegacy):
    builder.PrependBoolSlot(4, isLegacy, 0)

def AddIsLegacy(builder, isLegacy):
    EventContentFortuneGachaShopExcelAddIsLegacy(builder, isLegacy)

def EventContentFortuneGachaShopExcelAddFortuneGachaGroupId(builder, fortuneGachaGroupId):
    builder.PrependInt32Slot(5, fortuneGachaGroupId, 0)

def AddFortuneGachaGroupId(builder, fortuneGachaGroupId):
    EventContentFortuneGachaShopExcelAddFortuneGachaGroupId(builder, fortuneGachaGroupId)

def EventContentFortuneGachaShopExcelAddProb(builder, prob):
    builder.PrependInt32Slot(6, prob, 0)

def AddProb(builder, prob):
    EventContentFortuneGachaShopExcelAddProb(builder, prob)

def EventContentFortuneGachaShopExcelAddProbModifyValue(builder, probModifyValue):
    builder.PrependInt32Slot(7, probModifyValue, 0)

def AddProbModifyValue(builder, probModifyValue):
    EventContentFortuneGachaShopExcelAddProbModifyValue(builder, probModifyValue)

def EventContentFortuneGachaShopExcelAddProbModifyLimit(builder, probModifyLimit):
    builder.PrependInt32Slot(8, probModifyLimit, 0)

def AddProbModifyLimit(builder, probModifyLimit):
    EventContentFortuneGachaShopExcelAddProbModifyLimit(builder, probModifyLimit)

def EventContentFortuneGachaShopExcelAddRewardParcelType(builder, rewardParcelType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)

def AddRewardParcelType(builder, rewardParcelType):
    EventContentFortuneGachaShopExcelAddRewardParcelType(builder, rewardParcelType)

def EventContentFortuneGachaShopExcelStartRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardParcelTypeVector(builder, numElems):
    return EventContentFortuneGachaShopExcelStartRewardParcelTypeVector(builder, numElems)

def EventContentFortuneGachaShopExcelAddRewardParcelId(builder, rewardParcelId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)

def AddRewardParcelId(builder, rewardParcelId):
    EventContentFortuneGachaShopExcelAddRewardParcelId(builder, rewardParcelId)

def EventContentFortuneGachaShopExcelStartRewardParcelIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardParcelIdVector(builder, numElems):
    return EventContentFortuneGachaShopExcelStartRewardParcelIdVector(builder, numElems)

def EventContentFortuneGachaShopExcelAddRewardParcelAmount(builder, rewardParcelAmount):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelAmount), 0)

def AddRewardParcelAmount(builder, rewardParcelAmount):
    EventContentFortuneGachaShopExcelAddRewardParcelAmount(builder, rewardParcelAmount)

def EventContentFortuneGachaShopExcelStartRewardParcelAmountVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRewardParcelAmountVector(builder, numElems):
    return EventContentFortuneGachaShopExcelStartRewardParcelAmountVector(builder, numElems)

def EventContentFortuneGachaShopExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentFortuneGachaShopExcelEnd(builder)
