# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MultiFloorRaidStatChangeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MultiFloorRaidStatChangeExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMultiFloorRaidStatChangeExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MultiFloorRaidStatChangeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MultiFloorRaidStatChangeExcel
    def StatChangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MultiFloorRaidStatChangeExcel
    def StatAdd(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatAddAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatAddLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatAddIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # MultiFloorRaidStatChangeExcel
    def StatMultiply(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatMultiplyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatMultiplyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def StatMultiplyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MultiFloorRaidStatChangeExcel
    def ApplyCharacterId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MultiFloorRaidStatChangeExcel
    def ApplyCharacterIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def ApplyCharacterIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MultiFloorRaidStatChangeExcel
    def ApplyCharacterIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def MultiFloorRaidStatChangeExcelStart(builder):
    builder.StartObject(5)

def Start(builder):
    MultiFloorRaidStatChangeExcelStart(builder)

def MultiFloorRaidStatChangeExcelAddStatChangeId(builder, statChangeId):
    builder.PrependInt64Slot(0, statChangeId, 0)

def AddStatChangeId(builder, statChangeId):
    MultiFloorRaidStatChangeExcelAddStatChangeId(builder, statChangeId)

def MultiFloorRaidStatChangeExcelAddStatType(builder, statType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(statType), 0)

def AddStatType(builder, statType):
    MultiFloorRaidStatChangeExcelAddStatType(builder, statType)

def MultiFloorRaidStatChangeExcelStartStatTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStatTypeVector(builder, numElems):
    return MultiFloorRaidStatChangeExcelStartStatTypeVector(builder, numElems)

def MultiFloorRaidStatChangeExcelAddStatAdd(builder, statAdd):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(statAdd), 0)

def AddStatAdd(builder, statAdd):
    MultiFloorRaidStatChangeExcelAddStatAdd(builder, statAdd)

def MultiFloorRaidStatChangeExcelStartStatAddVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartStatAddVector(builder, numElems):
    return MultiFloorRaidStatChangeExcelStartStatAddVector(builder, numElems)

def MultiFloorRaidStatChangeExcelAddStatMultiply(builder, statMultiply):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(statMultiply), 0)

def AddStatMultiply(builder, statMultiply):
    MultiFloorRaidStatChangeExcelAddStatMultiply(builder, statMultiply)

def MultiFloorRaidStatChangeExcelStartStatMultiplyVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartStatMultiplyVector(builder, numElems):
    return MultiFloorRaidStatChangeExcelStartStatMultiplyVector(builder, numElems)

def MultiFloorRaidStatChangeExcelAddApplyCharacterId(builder, applyCharacterId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(applyCharacterId), 0)

def AddApplyCharacterId(builder, applyCharacterId):
    MultiFloorRaidStatChangeExcelAddApplyCharacterId(builder, applyCharacterId)

def MultiFloorRaidStatChangeExcelStartApplyCharacterIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartApplyCharacterIdVector(builder, numElems):
    return MultiFloorRaidStatChangeExcelStartApplyCharacterIdVector(builder, numElems)

def MultiFloorRaidStatChangeExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MultiFloorRaidStatChangeExcelEnd(builder)
