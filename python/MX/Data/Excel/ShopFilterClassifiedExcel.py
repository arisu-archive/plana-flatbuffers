# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopFilterClassifiedExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopFilterClassifiedExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopFilterClassifiedExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopFilterClassifiedExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopFilterClassifiedExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def ConsumeParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def ConsumeParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def GoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def ShopFilterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ShopFilterClassifiedExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return ShopFilterClassifiedExcelStart(builder)
def ShopFilterClassifiedExcelAddCategoryType(builder, categoryType): builder.PrependInt32Slot(0, categoryType, 0)
def AddCategoryType(builder, categoryType):
    return ShopFilterClassifiedExcelAddCategoryType(builder, categoryType)
def ShopFilterClassifiedExcelAddConsumeParcelId(builder, consumeParcelId): builder.PrependInt64Slot(1, consumeParcelId, 0)
def AddConsumeParcelId(builder, consumeParcelId):
    return ShopFilterClassifiedExcelAddConsumeParcelId(builder, consumeParcelId)
def ShopFilterClassifiedExcelAddConsumeParcelType(builder, consumeParcelType): builder.PrependInt32Slot(2, consumeParcelType, 0)
def AddConsumeParcelType(builder, consumeParcelType):
    return ShopFilterClassifiedExcelAddConsumeParcelType(builder, consumeParcelType)
def ShopFilterClassifiedExcelAddGoodsId(builder, goodsId): builder.PrependInt64Slot(3, goodsId, 0)
def AddGoodsId(builder, goodsId):
    return ShopFilterClassifiedExcelAddGoodsId(builder, goodsId)
def ShopFilterClassifiedExcelAddId(builder, id): builder.PrependInt64Slot(4, id, 0)
def AddId(builder, id):
    return ShopFilterClassifiedExcelAddId(builder, id)
def ShopFilterClassifiedExcelAddShopFilterType(builder, shopFilterType): builder.PrependInt32Slot(5, shopFilterType, 0)
def AddShopFilterType(builder, shopFilterType):
    return ShopFilterClassifiedExcelAddShopFilterType(builder, shopFilterType)
def ShopFilterClassifiedExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ShopFilterClassifiedExcelEnd(builder)