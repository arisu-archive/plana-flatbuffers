# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopFilterClassifiedExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopFilterClassifiedExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopFilterClassifiedExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopFilterClassifiedExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopFilterClassifiedExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def ConsumeParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def ConsumeParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def ShopFilterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopFilterClassifiedExcel
    def GoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ShopFilterClassifiedExcelStart(builder):
    builder.StartObject(6)

def Start(builder):
    ShopFilterClassifiedExcelStart(builder)

def ShopFilterClassifiedExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    ShopFilterClassifiedExcelAddId(builder, id)

def ShopFilterClassifiedExcelAddCategoryType(builder, categoryType):
    builder.PrependInt32Slot(1, categoryType, 0)

def AddCategoryType(builder, categoryType):
    ShopFilterClassifiedExcelAddCategoryType(builder, categoryType)

def ShopFilterClassifiedExcelAddConsumeParcelType(builder, consumeParcelType):
    builder.PrependInt32Slot(2, consumeParcelType, 0)

def AddConsumeParcelType(builder, consumeParcelType):
    ShopFilterClassifiedExcelAddConsumeParcelType(builder, consumeParcelType)

def ShopFilterClassifiedExcelAddConsumeParcelId(builder, consumeParcelId):
    builder.PrependInt64Slot(3, consumeParcelId, 0)

def AddConsumeParcelId(builder, consumeParcelId):
    ShopFilterClassifiedExcelAddConsumeParcelId(builder, consumeParcelId)

def ShopFilterClassifiedExcelAddShopFilterType(builder, shopFilterType):
    builder.PrependInt32Slot(4, shopFilterType, 0)

def AddShopFilterType(builder, shopFilterType):
    ShopFilterClassifiedExcelAddShopFilterType(builder, shopFilterType)

def ShopFilterClassifiedExcelAddGoodsId(builder, goodsId):
    builder.PrependInt64Slot(5, goodsId, 0)

def AddGoodsId(builder, goodsId):
    ShopFilterClassifiedExcelAddGoodsId(builder, goodsId)

def ShopFilterClassifiedExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShopFilterClassifiedExcelEnd(builder)
