# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGInfoExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGInfoExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGInfoExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGInfoExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGInfoExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGInfoExcel
    def CcgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGInfoExcel
    def CostParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGInfoExcel
    def CostParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGInfoExcel
    def CostParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGInfoExcel
    def CardBackPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameCCGInfoExcel
    def PerkCostParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGInfoExcel
    def PerkCostParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameCCGInfoExcelStart(builder):
    builder.StartObject(8)

def Start(builder):
    MinigameCCGInfoExcelStart(builder)

def MinigameCCGInfoExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    MinigameCCGInfoExcelAddEventContentId(builder, eventContentId)

def MinigameCCGInfoExcelAddCcgId(builder, ccgId):
    builder.PrependInt64Slot(1, ccgId, 0)

def AddCcgId(builder, ccgId):
    MinigameCCGInfoExcelAddCcgId(builder, ccgId)

def MinigameCCGInfoExcelAddCostParcelType(builder, costParcelType):
    builder.PrependInt32Slot(2, costParcelType, 0)

def AddCostParcelType(builder, costParcelType):
    MinigameCCGInfoExcelAddCostParcelType(builder, costParcelType)

def MinigameCCGInfoExcelAddCostParcelId(builder, costParcelId):
    builder.PrependInt64Slot(3, costParcelId, 0)

def AddCostParcelId(builder, costParcelId):
    MinigameCCGInfoExcelAddCostParcelId(builder, costParcelId)

def MinigameCCGInfoExcelAddCostParcelAmount(builder, costParcelAmount):
    builder.PrependInt32Slot(4, costParcelAmount, 0)

def AddCostParcelAmount(builder, costParcelAmount):
    MinigameCCGInfoExcelAddCostParcelAmount(builder, costParcelAmount)

def MinigameCCGInfoExcelAddCardBackPath(builder, cardBackPath):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(cardBackPath), 0)

def AddCardBackPath(builder, cardBackPath):
    MinigameCCGInfoExcelAddCardBackPath(builder, cardBackPath)

def MinigameCCGInfoExcelAddPerkCostParcelType(builder, perkCostParcelType):
    builder.PrependInt32Slot(6, perkCostParcelType, 0)

def AddPerkCostParcelType(builder, perkCostParcelType):
    MinigameCCGInfoExcelAddPerkCostParcelType(builder, perkCostParcelType)

def MinigameCCGInfoExcelAddPerkCostParcelId(builder, perkCostParcelId):
    builder.PrependInt64Slot(7, perkCostParcelId, 0)

def AddPerkCostParcelId(builder, perkCostParcelId):
    MinigameCCGInfoExcelAddPerkCostParcelId(builder, perkCostParcelId)

def MinigameCCGInfoExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MinigameCCGInfoExcelEnd(builder)
