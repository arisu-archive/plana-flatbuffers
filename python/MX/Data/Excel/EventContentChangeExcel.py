# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentChangeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentChangeExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentChangeExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentChangeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentChangeExcel
    def ChangeCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def ChangeCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def ChangeCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def RewardAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def IsLast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentChangeExcel
    def ChangeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentChangeExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentChangeExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return EventContentChangeExcelStart(builder)
def EventContentChangeExcelAddChangeCostAmount(builder, changeCostAmount): builder.PrependInt32Slot(0, changeCostAmount, 0)
def AddChangeCostAmount(builder, changeCostAmount):
    return EventContentChangeExcelAddChangeCostAmount(builder, changeCostAmount)
def EventContentChangeExcelAddChangeCostId(builder, changeCostId): builder.PrependInt64Slot(1, changeCostId, 0)
def AddChangeCostId(builder, changeCostId):
    return EventContentChangeExcelAddChangeCostId(builder, changeCostId)
def EventContentChangeExcelAddChangeCostType(builder, changeCostType): builder.PrependInt32Slot(2, changeCostType, 0)
def AddChangeCostType(builder, changeCostType):
    return EventContentChangeExcelAddChangeCostType(builder, changeCostType)
def EventContentChangeExcelAddRewardAmount(builder, rewardAmount): builder.PrependInt32Slot(3, rewardAmount, 0)
def AddRewardAmount(builder, rewardAmount):
    return EventContentChangeExcelAddRewardAmount(builder, rewardAmount)
def EventContentChangeExcelAddRewardId(builder, rewardId): builder.PrependInt64Slot(4, rewardId, 0)
def AddRewardId(builder, rewardId):
    return EventContentChangeExcelAddRewardId(builder, rewardId)
def EventContentChangeExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(5, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return EventContentChangeExcelAddRewardParcelType(builder, rewardParcelType)
def EventContentChangeExcelAddIsLast(builder, isLast): builder.PrependBoolSlot(6, isLast, 0)
def AddIsLast(builder, isLast):
    return EventContentChangeExcelAddIsLast(builder, isLast)
def EventContentChangeExcelAddChangeCount(builder, changeCount): builder.PrependInt64Slot(7, changeCount, 0)
def AddChangeCount(builder, changeCount):
    return EventContentChangeExcelAddChangeCount(builder, changeCount)
def EventContentChangeExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(8, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentChangeExcelAddEventContentId(builder, eventContentId)
def EventContentChangeExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentChangeExcelEnd(builder)