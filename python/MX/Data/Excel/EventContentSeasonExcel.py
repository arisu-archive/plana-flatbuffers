# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentSeasonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentSeasonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentSeasonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentSeasonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentSeasonExcel
    def ScenarioContentCollectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def MiniEventShortCutScenarioModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def RewardTagPermanent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventContentStageRewardIdPermanent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventContentReleaseType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventAssist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentSeasonExcel
    def CardBgImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def MinigameMissionBgImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def MinigameMissionBgPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def MinigameVictoryPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def MinigameLobbyPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def ShiftMainBgImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def ShiftTriggerStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def MainBgImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def MainBannerImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def BeforehandScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentSeasonExcel
    def BeforehandScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentSeasonExcel
    def BeforehandScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentSeasonExcel
    def BeforehandScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # EventContentSeasonExcel
    def MinigamePrologScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def BeforehandBgImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def SubIconParcelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def MainIconParcelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def ExtensionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def EventContentCloseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def EventContentCloseNoteTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def EventContentOpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def BeforehandExposedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def EventChangeOpenCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def MainEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def SubEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentSeasonExcel
    def SubEventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def IconOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentSeasonExcel
    def OpenConditionContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentSeasonExcel
    def IsReturn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentSeasonExcel
    def OriginalEventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentSeasonExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentSeasonExcelStart(builder): builder.StartObject(38)
def Start(builder):
    return EventContentSeasonExcelStart(builder)
def EventContentSeasonExcelAddScenarioContentCollectionGroupId(builder, scenarioContentCollectionGroupId): builder.PrependInt64Slot(0, scenarioContentCollectionGroupId, 0)
def AddScenarioContentCollectionGroupId(builder, scenarioContentCollectionGroupId):
    return EventContentSeasonExcelAddScenarioContentCollectionGroupId(builder, scenarioContentCollectionGroupId)
def EventContentSeasonExcelAddMiniEventShortCutScenarioModeId(builder, miniEventShortCutScenarioModeId): builder.PrependInt64Slot(1, miniEventShortCutScenarioModeId, 0)
def AddMiniEventShortCutScenarioModeId(builder, miniEventShortCutScenarioModeId):
    return EventContentSeasonExcelAddMiniEventShortCutScenarioModeId(builder, miniEventShortCutScenarioModeId)
def EventContentSeasonExcelAddRewardTagPermanent(builder, rewardTagPermanent): builder.PrependInt32Slot(2, rewardTagPermanent, 0)
def AddRewardTagPermanent(builder, rewardTagPermanent):
    return EventContentSeasonExcelAddRewardTagPermanent(builder, rewardTagPermanent)
def EventContentSeasonExcelAddEventContentStageRewardIdPermanent(builder, eventContentStageRewardIdPermanent): builder.PrependInt64Slot(3, eventContentStageRewardIdPermanent, 0)
def AddEventContentStageRewardIdPermanent(builder, eventContentStageRewardIdPermanent):
    return EventContentSeasonExcelAddEventContentStageRewardIdPermanent(builder, eventContentStageRewardIdPermanent)
def EventContentSeasonExcelAddEventContentReleaseType(builder, eventContentReleaseType): builder.PrependInt32Slot(4, eventContentReleaseType, 0)
def AddEventContentReleaseType(builder, eventContentReleaseType):
    return EventContentSeasonExcelAddEventContentReleaseType(builder, eventContentReleaseType)
def EventContentSeasonExcelAddEventAssist(builder, eventAssist): builder.PrependBoolSlot(5, eventAssist, 0)
def AddEventAssist(builder, eventAssist):
    return EventContentSeasonExcelAddEventAssist(builder, eventAssist)
def EventContentSeasonExcelAddCardBgImagePath(builder, cardBgImagePath): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cardBgImagePath), 0)
def AddCardBgImagePath(builder, cardBgImagePath):
    return EventContentSeasonExcelAddCardBgImagePath(builder, cardBgImagePath)
def EventContentSeasonExcelAddMinigameMissionBgImagePath(builder, minigameMissionBgImagePath): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(minigameMissionBgImagePath), 0)
def AddMinigameMissionBgImagePath(builder, minigameMissionBgImagePath):
    return EventContentSeasonExcelAddMinigameMissionBgImagePath(builder, minigameMissionBgImagePath)
def EventContentSeasonExcelAddMinigameMissionBgPrefabName(builder, minigameMissionBgPrefabName): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(minigameMissionBgPrefabName), 0)
def AddMinigameMissionBgPrefabName(builder, minigameMissionBgPrefabName):
    return EventContentSeasonExcelAddMinigameMissionBgPrefabName(builder, minigameMissionBgPrefabName)
def EventContentSeasonExcelAddMinigameVictoryPrefabName(builder, minigameVictoryPrefabName): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(minigameVictoryPrefabName), 0)
def AddMinigameVictoryPrefabName(builder, minigameVictoryPrefabName):
    return EventContentSeasonExcelAddMinigameVictoryPrefabName(builder, minigameVictoryPrefabName)
def EventContentSeasonExcelAddMinigameLobbyPrefabName(builder, minigameLobbyPrefabName): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(minigameLobbyPrefabName), 0)
def AddMinigameLobbyPrefabName(builder, minigameLobbyPrefabName):
    return EventContentSeasonExcelAddMinigameLobbyPrefabName(builder, minigameLobbyPrefabName)
def EventContentSeasonExcelAddShiftMainBgImagePath(builder, shiftMainBgImagePath): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(shiftMainBgImagePath), 0)
def AddShiftMainBgImagePath(builder, shiftMainBgImagePath):
    return EventContentSeasonExcelAddShiftMainBgImagePath(builder, shiftMainBgImagePath)
def EventContentSeasonExcelAddShiftTriggerStageId(builder, shiftTriggerStageId): builder.PrependInt64Slot(12, shiftTriggerStageId, 0)
def AddShiftTriggerStageId(builder, shiftTriggerStageId):
    return EventContentSeasonExcelAddShiftTriggerStageId(builder, shiftTriggerStageId)
def EventContentSeasonExcelAddMainBgImagePath(builder, mainBgImagePath): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mainBgImagePath), 0)
def AddMainBgImagePath(builder, mainBgImagePath):
    return EventContentSeasonExcelAddMainBgImagePath(builder, mainBgImagePath)
def EventContentSeasonExcelAddMainBannerImagePath(builder, mainBannerImagePath): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(mainBannerImagePath), 0)
def AddMainBannerImagePath(builder, mainBannerImagePath):
    return EventContentSeasonExcelAddMainBannerImagePath(builder, mainBannerImagePath)
def EventContentSeasonExcelAddBeforehandScenarioGroupId(builder, beforehandScenarioGroupId): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(beforehandScenarioGroupId), 0)
def AddBeforehandScenarioGroupId(builder, beforehandScenarioGroupId):
    return EventContentSeasonExcelAddBeforehandScenarioGroupId(builder, beforehandScenarioGroupId)
def EventContentSeasonExcelStartBeforehandScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartBeforehandScenarioGroupIdVector(builder, numElems):
    return EventContentSeasonExcelStartBeforehandScenarioGroupIdVector(builder, numElems)
def EventContentSeasonExcelAddMinigamePrologScenarioGroupId(builder, minigamePrologScenarioGroupId): builder.PrependInt64Slot(16, minigamePrologScenarioGroupId, 0)
def AddMinigamePrologScenarioGroupId(builder, minigamePrologScenarioGroupId):
    return EventContentSeasonExcelAddMinigamePrologScenarioGroupId(builder, minigamePrologScenarioGroupId)
def EventContentSeasonExcelAddBeforehandBgImagePath(builder, beforehandBgImagePath): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(beforehandBgImagePath), 0)
def AddBeforehandBgImagePath(builder, beforehandBgImagePath):
    return EventContentSeasonExcelAddBeforehandBgImagePath(builder, beforehandBgImagePath)
def EventContentSeasonExcelAddSubIconParcelPath(builder, subIconParcelPath): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(subIconParcelPath), 0)
def AddSubIconParcelPath(builder, subIconParcelPath):
    return EventContentSeasonExcelAddSubIconParcelPath(builder, subIconParcelPath)
def EventContentSeasonExcelAddMainIconParcelPath(builder, mainIconParcelPath): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(mainIconParcelPath), 0)
def AddMainIconParcelPath(builder, mainIconParcelPath):
    return EventContentSeasonExcelAddMainIconParcelPath(builder, mainIconParcelPath)
def EventContentSeasonExcelAddExtensionTime(builder, extensionTime): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(extensionTime), 0)
def AddExtensionTime(builder, extensionTime):
    return EventContentSeasonExcelAddExtensionTime(builder, extensionTime)
def EventContentSeasonExcelAddEventContentCloseTime(builder, eventContentCloseTime): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(eventContentCloseTime), 0)
def AddEventContentCloseTime(builder, eventContentCloseTime):
    return EventContentSeasonExcelAddEventContentCloseTime(builder, eventContentCloseTime)
def EventContentSeasonExcelAddEventContentCloseNoteTime(builder, eventContentCloseNoteTime): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(eventContentCloseNoteTime), 0)
def AddEventContentCloseNoteTime(builder, eventContentCloseNoteTime):
    return EventContentSeasonExcelAddEventContentCloseNoteTime(builder, eventContentCloseNoteTime)
def EventContentSeasonExcelAddEventContentOpenTime(builder, eventContentOpenTime): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(eventContentOpenTime), 0)
def AddEventContentOpenTime(builder, eventContentOpenTime):
    return EventContentSeasonExcelAddEventContentOpenTime(builder, eventContentOpenTime)
def EventContentSeasonExcelAddBeforehandExposedTime(builder, beforehandExposedTime): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(beforehandExposedTime), 0)
def AddBeforehandExposedTime(builder, beforehandExposedTime):
    return EventContentSeasonExcelAddBeforehandExposedTime(builder, beforehandExposedTime)
def EventContentSeasonExcelAddEventChangeOpenCondition(builder, eventChangeOpenCondition): builder.PrependInt64Slot(25, eventChangeOpenCondition, 0)
def AddEventChangeOpenCondition(builder, eventChangeOpenCondition):
    return EventContentSeasonExcelAddEventChangeOpenCondition(builder, eventChangeOpenCondition)
def EventContentSeasonExcelAddMainEventId(builder, mainEventId): builder.PrependInt64Slot(26, mainEventId, 0)
def AddMainEventId(builder, mainEventId):
    return EventContentSeasonExcelAddMainEventId(builder, mainEventId)
def EventContentSeasonExcelAddEventItemId(builder, eventItemId): builder.PrependInt64Slot(27, eventItemId, 0)
def AddEventItemId(builder, eventItemId):
    return EventContentSeasonExcelAddEventItemId(builder, eventItemId)
def EventContentSeasonExcelAddSubEvent(builder, subEvent): builder.PrependBoolSlot(28, subEvent, 0)
def AddSubEvent(builder, subEvent):
    return EventContentSeasonExcelAddSubEvent(builder, subEvent)
def EventContentSeasonExcelAddSubEventType(builder, subEventType): builder.PrependInt32Slot(29, subEventType, 0)
def AddSubEventType(builder, subEventType):
    return EventContentSeasonExcelAddSubEventType(builder, subEventType)
def EventContentSeasonExcelAddIconOrder(builder, iconOrder): builder.PrependInt32Slot(30, iconOrder, 0)
def AddIconOrder(builder, iconOrder):
    return EventContentSeasonExcelAddIconOrder(builder, iconOrder)
def EventContentSeasonExcelAddEventDisplay(builder, eventDisplay): builder.PrependBoolSlot(31, eventDisplay, 0)
def AddEventDisplay(builder, eventDisplay):
    return EventContentSeasonExcelAddEventDisplay(builder, eventDisplay)
def EventContentSeasonExcelAddOpenConditionContent(builder, openConditionContent): builder.PrependInt32Slot(32, openConditionContent, 0)
def AddOpenConditionContent(builder, openConditionContent):
    return EventContentSeasonExcelAddOpenConditionContent(builder, openConditionContent)
def EventContentSeasonExcelAddEventContentType(builder, eventContentType): builder.PrependInt32Slot(33, eventContentType, 0)
def AddEventContentType(builder, eventContentType):
    return EventContentSeasonExcelAddEventContentType(builder, eventContentType)
def EventContentSeasonExcelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return EventContentSeasonExcelAddName(builder, name)
def EventContentSeasonExcelAddIsReturn(builder, isReturn): builder.PrependBoolSlot(35, isReturn, 0)
def AddIsReturn(builder, isReturn):
    return EventContentSeasonExcelAddIsReturn(builder, isReturn)
def EventContentSeasonExcelAddOriginalEventContentId(builder, originalEventContentId): builder.PrependInt64Slot(36, originalEventContentId, 0)
def AddOriginalEventContentId(builder, originalEventContentId):
    return EventContentSeasonExcelAddOriginalEventContentId(builder, originalEventContentId)
def EventContentSeasonExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(37, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentSeasonExcelAddEventContentId(builder, eventContentId)
def EventContentSeasonExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentSeasonExcelEnd(builder)