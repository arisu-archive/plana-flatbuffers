# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldRaidStageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldRaidStageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorldRaidStageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorldRaidStageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldRaidStageExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def SaveCurrentLocalBossHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def AllyPassiveSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # WorldRaidStageExcel
    def AllyPassiveSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # WorldRaidStageExcel
    def AllyPassiveSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidStageExcel
    def AllyPassiveSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # WorldRaidStageExcel
    def AllyPassiveSkill(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WorldRaidStageExcel
    def AllyPassiveSkillLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidStageExcel
    def AllyPassiveSkillIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # WorldRaidStageExcel
    def DamageToWorldBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def BossBgInfoKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def ShowSkillCard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def IsRaidScenarioBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def FixedEchelonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def UseFixedEchelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def ClearScenarioKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def EnterScenarioKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def TimeLinePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def PhaseChangeTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidStageExcel
    def VictoryTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseEnd(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseEndAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseEndLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseEndIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseStart(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseStartAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseStartLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePhaseStartIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WorldRaidStageExcel
    def BattleReadyTimelinePathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidStageExcel
    def BattleReadyTimelinePathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # WorldRaidStageExcel
    def RaidRewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def RaidBattleEndRewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def ReEnterAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def RaidEnterAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def DifficultyOpenCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def WorldRaidDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def AssistCharacterLimitCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def BossCharacterId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidStageExcel
    def BossCharacterIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidStageExcel
    def BossCharacterIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidStageExcel
    def BossCharacterIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # WorldRaidStageExcel
    def RaidCharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def BgPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidStageExcel
    def PortraitPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidStageExcel
    def WorldRaidBossGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidStageExcel
    def UseBossAiPhaseSync(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def UseBossIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidStageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def WorldRaidStageExcelStart(builder): builder.StartObject(35)
def Start(builder):
    return WorldRaidStageExcelStart(builder)
def WorldRaidStageExcelAddEchelonExtensionType(builder, echelonExtensionType): builder.PrependInt32Slot(0, echelonExtensionType, 0)
def AddEchelonExtensionType(builder, echelonExtensionType):
    return WorldRaidStageExcelAddEchelonExtensionType(builder, echelonExtensionType)
def WorldRaidStageExcelAddSaveCurrentLocalBossHp(builder, saveCurrentLocalBossHp): builder.PrependBoolSlot(1, saveCurrentLocalBossHp, 0)
def AddSaveCurrentLocalBossHp(builder, saveCurrentLocalBossHp):
    return WorldRaidStageExcelAddSaveCurrentLocalBossHp(builder, saveCurrentLocalBossHp)
def WorldRaidStageExcelAddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(allyPassiveSkillLevel), 0)
def AddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel):
    return WorldRaidStageExcelAddAllyPassiveSkillLevel(builder, allyPassiveSkillLevel)
def WorldRaidStageExcelStartAllyPassiveSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAllyPassiveSkillLevelVector(builder, numElems):
    return WorldRaidStageExcelStartAllyPassiveSkillLevelVector(builder, numElems)
def WorldRaidStageExcelAddAllyPassiveSkill(builder, allyPassiveSkill): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(allyPassiveSkill), 0)
def AddAllyPassiveSkill(builder, allyPassiveSkill):
    return WorldRaidStageExcelAddAllyPassiveSkill(builder, allyPassiveSkill)
def WorldRaidStageExcelStartAllyPassiveSkillVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAllyPassiveSkillVector(builder, numElems):
    return WorldRaidStageExcelStartAllyPassiveSkillVector(builder, numElems)
def WorldRaidStageExcelAddDamageToWorldBoss(builder, damageToWorldBoss): builder.PrependInt64Slot(4, damageToWorldBoss, 0)
def AddDamageToWorldBoss(builder, damageToWorldBoss):
    return WorldRaidStageExcelAddDamageToWorldBoss(builder, damageToWorldBoss)
def WorldRaidStageExcelAddBossBgInfoKey(builder, bossBgInfoKey): builder.PrependUint32Slot(5, bossBgInfoKey, 0)
def AddBossBgInfoKey(builder, bossBgInfoKey):
    return WorldRaidStageExcelAddBossBgInfoKey(builder, bossBgInfoKey)
def WorldRaidStageExcelAddShowSkillCard(builder, showSkillCard): builder.PrependBoolSlot(6, showSkillCard, 0)
def AddShowSkillCard(builder, showSkillCard):
    return WorldRaidStageExcelAddShowSkillCard(builder, showSkillCard)
def WorldRaidStageExcelAddIsRaidScenarioBattle(builder, isRaidScenarioBattle): builder.PrependBoolSlot(7, isRaidScenarioBattle, 0)
def AddIsRaidScenarioBattle(builder, isRaidScenarioBattle):
    return WorldRaidStageExcelAddIsRaidScenarioBattle(builder, isRaidScenarioBattle)
def WorldRaidStageExcelAddFixedEchelonId(builder, fixedEchelonId): builder.PrependInt64Slot(8, fixedEchelonId, 0)
def AddFixedEchelonId(builder, fixedEchelonId):
    return WorldRaidStageExcelAddFixedEchelonId(builder, fixedEchelonId)
def WorldRaidStageExcelAddUseFixedEchelon(builder, useFixedEchelon): builder.PrependBoolSlot(9, useFixedEchelon, 0)
def AddUseFixedEchelon(builder, useFixedEchelon):
    return WorldRaidStageExcelAddUseFixedEchelon(builder, useFixedEchelon)
def WorldRaidStageExcelAddClearScenarioKey(builder, clearScenarioKey): builder.PrependInt64Slot(10, clearScenarioKey, 0)
def AddClearScenarioKey(builder, clearScenarioKey):
    return WorldRaidStageExcelAddClearScenarioKey(builder, clearScenarioKey)
def WorldRaidStageExcelAddEnterScenarioKey(builder, enterScenarioKey): builder.PrependInt64Slot(11, enterScenarioKey, 0)
def AddEnterScenarioKey(builder, enterScenarioKey):
    return WorldRaidStageExcelAddEnterScenarioKey(builder, enterScenarioKey)
def WorldRaidStageExcelAddTimeLinePhase(builder, timeLinePhase): builder.PrependInt64Slot(12, timeLinePhase, 0)
def AddTimeLinePhase(builder, timeLinePhase):
    return WorldRaidStageExcelAddTimeLinePhase(builder, timeLinePhase)
def WorldRaidStageExcelAddPhaseChangeTimelinePath(builder, phaseChangeTimelinePath): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(phaseChangeTimelinePath), 0)
def AddPhaseChangeTimelinePath(builder, phaseChangeTimelinePath):
    return WorldRaidStageExcelAddPhaseChangeTimelinePath(builder, phaseChangeTimelinePath)
def WorldRaidStageExcelAddVictoryTimelinePath(builder, victoryTimelinePath): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(victoryTimelinePath), 0)
def AddVictoryTimelinePath(builder, victoryTimelinePath):
    return WorldRaidStageExcelAddVictoryTimelinePath(builder, victoryTimelinePath)
def WorldRaidStageExcelAddBattleReadyTimelinePhaseEnd(builder, battleReadyTimelinePhaseEnd): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(battleReadyTimelinePhaseEnd), 0)
def AddBattleReadyTimelinePhaseEnd(builder, battleReadyTimelinePhaseEnd):
    return WorldRaidStageExcelAddBattleReadyTimelinePhaseEnd(builder, battleReadyTimelinePhaseEnd)
def WorldRaidStageExcelStartBattleReadyTimelinePhaseEndVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBattleReadyTimelinePhaseEndVector(builder, numElems):
    return WorldRaidStageExcelStartBattleReadyTimelinePhaseEndVector(builder, numElems)
def WorldRaidStageExcelAddBattleReadyTimelinePhaseStart(builder, battleReadyTimelinePhaseStart): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(battleReadyTimelinePhaseStart), 0)
def AddBattleReadyTimelinePhaseStart(builder, battleReadyTimelinePhaseStart):
    return WorldRaidStageExcelAddBattleReadyTimelinePhaseStart(builder, battleReadyTimelinePhaseStart)
def WorldRaidStageExcelStartBattleReadyTimelinePhaseStartVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBattleReadyTimelinePhaseStartVector(builder, numElems):
    return WorldRaidStageExcelStartBattleReadyTimelinePhaseStartVector(builder, numElems)
def WorldRaidStageExcelAddBattleReadyTimelinePath(builder, battleReadyTimelinePath): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(battleReadyTimelinePath), 0)
def AddBattleReadyTimelinePath(builder, battleReadyTimelinePath):
    return WorldRaidStageExcelAddBattleReadyTimelinePath(builder, battleReadyTimelinePath)
def WorldRaidStageExcelStartBattleReadyTimelinePathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBattleReadyTimelinePathVector(builder, numElems):
    return WorldRaidStageExcelStartBattleReadyTimelinePathVector(builder, numElems)
def WorldRaidStageExcelAddRaidRewardGroupId(builder, raidRewardGroupId): builder.PrependInt64Slot(18, raidRewardGroupId, 0)
def AddRaidRewardGroupId(builder, raidRewardGroupId):
    return WorldRaidStageExcelAddRaidRewardGroupId(builder, raidRewardGroupId)
def WorldRaidStageExcelAddRaidBattleEndRewardGroupId(builder, raidBattleEndRewardGroupId): builder.PrependInt64Slot(19, raidBattleEndRewardGroupId, 0)
def AddRaidBattleEndRewardGroupId(builder, raidBattleEndRewardGroupId):
    return WorldRaidStageExcelAddRaidBattleEndRewardGroupId(builder, raidBattleEndRewardGroupId)
def WorldRaidStageExcelAddGroundId(builder, groundId): builder.PrependInt64Slot(20, groundId, 0)
def AddGroundId(builder, groundId):
    return WorldRaidStageExcelAddGroundId(builder, groundId)
def WorldRaidStageExcelAddBattleDuration(builder, battleDuration): builder.PrependInt64Slot(21, battleDuration, 0)
def AddBattleDuration(builder, battleDuration):
    return WorldRaidStageExcelAddBattleDuration(builder, battleDuration)
def WorldRaidStageExcelAddReEnterAmount(builder, reEnterAmount): builder.PrependInt64Slot(22, reEnterAmount, 0)
def AddReEnterAmount(builder, reEnterAmount):
    return WorldRaidStageExcelAddReEnterAmount(builder, reEnterAmount)
def WorldRaidStageExcelAddRaidEnterAmount(builder, raidEnterAmount): builder.PrependInt64Slot(23, raidEnterAmount, 0)
def AddRaidEnterAmount(builder, raidEnterAmount):
    return WorldRaidStageExcelAddRaidEnterAmount(builder, raidEnterAmount)
def WorldRaidStageExcelAddDifficultyOpenCondition(builder, difficultyOpenCondition): builder.PrependBoolSlot(24, difficultyOpenCondition, 0)
def AddDifficultyOpenCondition(builder, difficultyOpenCondition):
    return WorldRaidStageExcelAddDifficultyOpenCondition(builder, difficultyOpenCondition)
def WorldRaidStageExcelAddWorldRaidDifficulty(builder, worldRaidDifficulty): builder.PrependInt32Slot(25, worldRaidDifficulty, 0)
def AddWorldRaidDifficulty(builder, worldRaidDifficulty):
    return WorldRaidStageExcelAddWorldRaidDifficulty(builder, worldRaidDifficulty)
def WorldRaidStageExcelAddAssistCharacterLimitCount(builder, assistCharacterLimitCount): builder.PrependInt64Slot(26, assistCharacterLimitCount, 0)
def AddAssistCharacterLimitCount(builder, assistCharacterLimitCount):
    return WorldRaidStageExcelAddAssistCharacterLimitCount(builder, assistCharacterLimitCount)
def WorldRaidStageExcelAddBossCharacterId(builder, bossCharacterId): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(bossCharacterId), 0)
def AddBossCharacterId(builder, bossCharacterId):
    return WorldRaidStageExcelAddBossCharacterId(builder, bossCharacterId)
def WorldRaidStageExcelStartBossCharacterIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartBossCharacterIdVector(builder, numElems):
    return WorldRaidStageExcelStartBossCharacterIdVector(builder, numElems)
def WorldRaidStageExcelAddRaidCharacterId(builder, raidCharacterId): builder.PrependInt64Slot(28, raidCharacterId, 0)
def AddRaidCharacterId(builder, raidCharacterId):
    return WorldRaidStageExcelAddRaidCharacterId(builder, raidCharacterId)
def WorldRaidStageExcelAddBgPath(builder, bgPath): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(bgPath), 0)
def AddBgPath(builder, bgPath):
    return WorldRaidStageExcelAddBgPath(builder, bgPath)
def WorldRaidStageExcelAddPortraitPath(builder, portraitPath): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(portraitPath), 0)
def AddPortraitPath(builder, portraitPath):
    return WorldRaidStageExcelAddPortraitPath(builder, portraitPath)
def WorldRaidStageExcelAddWorldRaidBossGroupId(builder, worldRaidBossGroupId): builder.PrependInt64Slot(31, worldRaidBossGroupId, 0)
def AddWorldRaidBossGroupId(builder, worldRaidBossGroupId):
    return WorldRaidStageExcelAddWorldRaidBossGroupId(builder, worldRaidBossGroupId)
def WorldRaidStageExcelAddUseBossAiPhaseSync(builder, useBossAiPhaseSync): builder.PrependBoolSlot(32, useBossAiPhaseSync, 0)
def AddUseBossAiPhaseSync(builder, useBossAiPhaseSync):
    return WorldRaidStageExcelAddUseBossAiPhaseSync(builder, useBossAiPhaseSync)
def WorldRaidStageExcelAddUseBossIndex(builder, useBossIndex): builder.PrependBoolSlot(33, useBossIndex, 0)
def AddUseBossIndex(builder, useBossIndex):
    return WorldRaidStageExcelAddUseBossIndex(builder, useBossIndex)
def WorldRaidStageExcelAddId(builder, id): builder.PrependInt64Slot(34, id, 0)
def AddId(builder, id):
    return WorldRaidStageExcelAddId(builder, id)
def WorldRaidStageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return WorldRaidStageExcelEnd(builder)