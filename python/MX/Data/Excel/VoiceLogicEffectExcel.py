# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VoiceLogicEffectExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VoiceLogicEffectExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVoiceLogicEffectExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VoiceLogicEffectExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VoiceLogicEffectExcel
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # VoiceLogicEffectExcel
    def VoiceHash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VoiceLogicEffectExcel
    def VoiceHashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # VoiceLogicEffectExcel
    def VoiceHashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VoiceLogicEffectExcel
    def VoiceHashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # VoiceLogicEffectExcel
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VoiceLogicEffectExcel
    def Self(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VoiceLogicEffectExcel
    def LogicEffectNameHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def VoiceLogicEffectExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return VoiceLogicEffectExcelStart(builder)
def VoiceLogicEffectExcelAddVoiceId(builder, voiceId): builder.PrependUint32Slot(0, voiceId, 0)
def AddVoiceId(builder, voiceId):
    return VoiceLogicEffectExcelAddVoiceId(builder, voiceId)
def VoiceLogicEffectExcelAddVoiceHash(builder, voiceHash): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(voiceHash), 0)
def AddVoiceHash(builder, voiceHash):
    return VoiceLogicEffectExcelAddVoiceHash(builder, voiceHash)
def VoiceLogicEffectExcelStartVoiceHashVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVoiceHashVector(builder, numElems):
    return VoiceLogicEffectExcelStartVoiceHashVector(builder, numElems)
def VoiceLogicEffectExcelAddPriority(builder, priority): builder.PrependInt32Slot(2, priority, 0)
def AddPriority(builder, priority):
    return VoiceLogicEffectExcelAddPriority(builder, priority)
def VoiceLogicEffectExcelAddSelf(builder, self): builder.PrependBoolSlot(3, self, 0)
def AddSelf(builder, self):
    return VoiceLogicEffectExcelAddSelf(builder, self)
def VoiceLogicEffectExcelAddLogicEffectNameHash(builder, logicEffectNameHash): builder.PrependUint32Slot(4, logicEffectNameHash, 0)
def AddLogicEffectNameHash(builder, logicEffectNameHash):
    return VoiceLogicEffectExcelAddLogicEffectNameHash(builder, logicEffectNameHash)
def VoiceLogicEffectExcelEnd(builder): return builder.EndObject()
def End(builder):
    return VoiceLogicEffectExcelEnd(builder)