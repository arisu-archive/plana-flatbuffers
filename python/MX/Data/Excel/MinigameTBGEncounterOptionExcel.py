# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGEncounterOptionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGEncounterOptionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGEncounterOptionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGEncounterOptionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGEncounterOptionExcel
    def OptionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def SlotIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def OptionTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterOptionExcel
    def OptionSuccessLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterOptionExcel
    def OptionSuccessRewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def OptionSuccessOrHigherDiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def OptionGreatSuccessOrHigherDiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def OptionFailLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterOptionExcel
    def OptionFailLessDiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def RunawayOrHigherDiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterOptionExcel
    def RewardHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MinigameTBGEncounterOptionExcelStart(builder):
    builder.StartObject(12)

def Start(builder):
    MinigameTBGEncounterOptionExcelStart(builder)

def MinigameTBGEncounterOptionExcelAddOptionGroupId(builder, optionGroupId):
    builder.PrependInt64Slot(0, optionGroupId, 0)

def AddOptionGroupId(builder, optionGroupId):
    MinigameTBGEncounterOptionExcelAddOptionGroupId(builder, optionGroupId)

def MinigameTBGEncounterOptionExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(1, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    MinigameTBGEncounterOptionExcelAddUniqueId(builder, uniqueId)

def MinigameTBGEncounterOptionExcelAddSlotIndex(builder, slotIndex):
    builder.PrependInt32Slot(2, slotIndex, 0)

def AddSlotIndex(builder, slotIndex):
    MinigameTBGEncounterOptionExcelAddSlotIndex(builder, slotIndex)

def MinigameTBGEncounterOptionExcelAddOptionTitleLocalize(builder, optionTitleLocalize):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(optionTitleLocalize), 0)

def AddOptionTitleLocalize(builder, optionTitleLocalize):
    MinigameTBGEncounterOptionExcelAddOptionTitleLocalize(builder, optionTitleLocalize)

def MinigameTBGEncounterOptionExcelAddOptionSuccessLocalize(builder, optionSuccessLocalize):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(optionSuccessLocalize), 0)

def AddOptionSuccessLocalize(builder, optionSuccessLocalize):
    MinigameTBGEncounterOptionExcelAddOptionSuccessLocalize(builder, optionSuccessLocalize)

def MinigameTBGEncounterOptionExcelAddOptionSuccessRewardGroupId(builder, optionSuccessRewardGroupId):
    builder.PrependInt64Slot(5, optionSuccessRewardGroupId, 0)

def AddOptionSuccessRewardGroupId(builder, optionSuccessRewardGroupId):
    MinigameTBGEncounterOptionExcelAddOptionSuccessRewardGroupId(builder, optionSuccessRewardGroupId)

def MinigameTBGEncounterOptionExcelAddOptionSuccessOrHigherDiceCount(builder, optionSuccessOrHigherDiceCount):
    builder.PrependInt32Slot(6, optionSuccessOrHigherDiceCount, 0)

def AddOptionSuccessOrHigherDiceCount(builder, optionSuccessOrHigherDiceCount):
    MinigameTBGEncounterOptionExcelAddOptionSuccessOrHigherDiceCount(builder, optionSuccessOrHigherDiceCount)

def MinigameTBGEncounterOptionExcelAddOptionGreatSuccessOrHigherDiceCount(builder, optionGreatSuccessOrHigherDiceCount):
    builder.PrependInt32Slot(7, optionGreatSuccessOrHigherDiceCount, 0)

def AddOptionGreatSuccessOrHigherDiceCount(builder, optionGreatSuccessOrHigherDiceCount):
    MinigameTBGEncounterOptionExcelAddOptionGreatSuccessOrHigherDiceCount(builder, optionGreatSuccessOrHigherDiceCount)

def MinigameTBGEncounterOptionExcelAddOptionFailLocalize(builder, optionFailLocalize):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(optionFailLocalize), 0)

def AddOptionFailLocalize(builder, optionFailLocalize):
    MinigameTBGEncounterOptionExcelAddOptionFailLocalize(builder, optionFailLocalize)

def MinigameTBGEncounterOptionExcelAddOptionFailLessDiceCount(builder, optionFailLessDiceCount):
    builder.PrependInt32Slot(9, optionFailLessDiceCount, 0)

def AddOptionFailLessDiceCount(builder, optionFailLessDiceCount):
    MinigameTBGEncounterOptionExcelAddOptionFailLessDiceCount(builder, optionFailLessDiceCount)

def MinigameTBGEncounterOptionExcelAddRunawayOrHigherDiceCount(builder, runawayOrHigherDiceCount):
    builder.PrependInt32Slot(10, runawayOrHigherDiceCount, 0)

def AddRunawayOrHigherDiceCount(builder, runawayOrHigherDiceCount):
    MinigameTBGEncounterOptionExcelAddRunawayOrHigherDiceCount(builder, runawayOrHigherDiceCount)

def MinigameTBGEncounterOptionExcelAddRewardHide(builder, rewardHide):
    builder.PrependBoolSlot(11, rewardHide, 0)

def AddRewardHide(builder, rewardHide):
    MinigameTBGEncounterOptionExcelAddRewardHide(builder, rewardHide)

def MinigameTBGEncounterOptionExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MinigameTBGEncounterOptionExcelEnd(builder)
