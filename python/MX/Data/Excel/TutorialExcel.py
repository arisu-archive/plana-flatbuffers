# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TutorialExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TutorialExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTutorialExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TutorialExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TutorialExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TutorialExcel
    def CompletionReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TutorialExcel
    def CompulsoryTutorial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TutorialExcel
    def DescriptionTutorial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TutorialExcel
    def TutorialStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TutorialExcel
    def UiName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TutorialExcel
    def UiNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TutorialExcel
    def UiNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # TutorialExcel
    def TutorialParentName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TutorialExcel
    def TutorialParentNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TutorialExcel
    def TutorialParentNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def TutorialExcelStart(builder):
    builder.StartObject(7)

def Start(builder):
    TutorialExcelStart(builder)

def TutorialExcelAddId(builder, id):
    builder.PrependInt64Slot(0, id, 0)

def AddId(builder, id):
    TutorialExcelAddId(builder, id)

def TutorialExcelAddCompletionReportEventName(builder, completionReportEventName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(completionReportEventName), 0)

def AddCompletionReportEventName(builder, completionReportEventName):
    TutorialExcelAddCompletionReportEventName(builder, completionReportEventName)

def TutorialExcelAddCompulsoryTutorial(builder, compulsoryTutorial):
    builder.PrependBoolSlot(2, compulsoryTutorial, 0)

def AddCompulsoryTutorial(builder, compulsoryTutorial):
    TutorialExcelAddCompulsoryTutorial(builder, compulsoryTutorial)

def TutorialExcelAddDescriptionTutorial(builder, descriptionTutorial):
    builder.PrependBoolSlot(3, descriptionTutorial, 0)

def AddDescriptionTutorial(builder, descriptionTutorial):
    TutorialExcelAddDescriptionTutorial(builder, descriptionTutorial)

def TutorialExcelAddTutorialStageId(builder, tutorialStageId):
    builder.PrependInt64Slot(4, tutorialStageId, 0)

def AddTutorialStageId(builder, tutorialStageId):
    TutorialExcelAddTutorialStageId(builder, tutorialStageId)

def TutorialExcelAddUiName(builder, uiName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(uiName), 0)

def AddUiName(builder, uiName):
    TutorialExcelAddUiName(builder, uiName)

def TutorialExcelStartUiNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUiNameVector(builder, numElems):
    return TutorialExcelStartUiNameVector(builder, numElems)

def TutorialExcelAddTutorialParentName(builder, tutorialParentName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tutorialParentName), 0)

def AddTutorialParentName(builder, tutorialParentName):
    TutorialExcelAddTutorialParentName(builder, tutorialParentName)

def TutorialExcelStartTutorialParentNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTutorialParentNameVector(builder, numElems):
    return TutorialExcelStartTutorialParentNameVector(builder, numElems)

def TutorialExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return TutorialExcelEnd(builder)
