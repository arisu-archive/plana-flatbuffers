# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioBGNameExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioBGNameExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioBGNameExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioBGNameExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioBGNameExcel
    def SpineLocalPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def SpineLocalPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def SpineScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScenarioBGNameExcel
    def AnimationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGNameExcel
    def AnimationRoot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGNameExcel
    def BgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def BgFileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGNameExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ScenarioBGNameExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return ScenarioBGNameExcelStart(builder)
def ScenarioBGNameExcelAddSpineLocalPosY(builder, spineLocalPosY): builder.PrependInt32Slot(0, spineLocalPosY, 0)
def AddSpineLocalPosY(builder, spineLocalPosY):
    return ScenarioBGNameExcelAddSpineLocalPosY(builder, spineLocalPosY)
def ScenarioBGNameExcelAddSpineLocalPosX(builder, spineLocalPosX): builder.PrependInt32Slot(1, spineLocalPosX, 0)
def AddSpineLocalPosX(builder, spineLocalPosX):
    return ScenarioBGNameExcelAddSpineLocalPosX(builder, spineLocalPosX)
def ScenarioBGNameExcelAddSpineScale(builder, spineScale): builder.PrependFloat32Slot(2, spineScale, 0.0)
def AddSpineScale(builder, spineScale):
    return ScenarioBGNameExcelAddSpineScale(builder, spineScale)
def ScenarioBGNameExcelAddAnimationName(builder, animationName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(animationName), 0)
def AddAnimationName(builder, animationName):
    return ScenarioBGNameExcelAddAnimationName(builder, animationName)
def ScenarioBGNameExcelAddAnimationRoot(builder, animationRoot): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(animationRoot), 0)
def AddAnimationRoot(builder, animationRoot):
    return ScenarioBGNameExcelAddAnimationRoot(builder, animationRoot)
def ScenarioBGNameExcelAddBgType(builder, bgType): builder.PrependInt32Slot(5, bgType, 0)
def AddBgType(builder, bgType):
    return ScenarioBGNameExcelAddBgType(builder, bgType)
def ScenarioBGNameExcelAddBgFileName(builder, bgFileName): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(bgFileName), 0)
def AddBgFileName(builder, bgFileName):
    return ScenarioBGNameExcelAddBgFileName(builder, bgFileName)
def ScenarioBGNameExcelAddProductionStep(builder, productionStep): builder.PrependInt32Slot(7, productionStep, 0)
def AddProductionStep(builder, productionStep):
    return ScenarioBGNameExcelAddProductionStep(builder, productionStep)
def ScenarioBGNameExcelAddName(builder, name): builder.PrependUint32Slot(8, name, 0)
def AddName(builder, name):
    return ScenarioBGNameExcelAddName(builder, name)
def ScenarioBGNameExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ScenarioBGNameExcelEnd(builder)