# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConquestRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConquestRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestRewardExcel
    def IsDisplayed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConquestRewardExcel
    def RewardAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestRewardExcel
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestRewardExcel
    def RewardProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestRewardExcel
    def RewardTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConquestRewardExcelStart(builder): builder.StartObject(7)
def Start(builder):
    return ConquestRewardExcelStart(builder)
def ConquestRewardExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(0, groupId, 0)
def AddGroupId(builder, groupId):
    return ConquestRewardExcelAddGroupId(builder, groupId)
def ConquestRewardExcelAddIsDisplayed(builder, isDisplayed): builder.PrependBoolSlot(1, isDisplayed, 0)
def AddIsDisplayed(builder, isDisplayed):
    return ConquestRewardExcelAddIsDisplayed(builder, isDisplayed)
def ConquestRewardExcelAddRewardAmount(builder, rewardAmount): builder.PrependInt32Slot(2, rewardAmount, 0)
def AddRewardAmount(builder, rewardAmount):
    return ConquestRewardExcelAddRewardAmount(builder, rewardAmount)
def ConquestRewardExcelAddRewardId(builder, rewardId): builder.PrependInt64Slot(3, rewardId, 0)
def AddRewardId(builder, rewardId):
    return ConquestRewardExcelAddRewardId(builder, rewardId)
def ConquestRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependInt32Slot(4, rewardParcelType, 0)
def AddRewardParcelType(builder, rewardParcelType):
    return ConquestRewardExcelAddRewardParcelType(builder, rewardParcelType)
def ConquestRewardExcelAddRewardProb(builder, rewardProb): builder.PrependInt32Slot(5, rewardProb, 0)
def AddRewardProb(builder, rewardProb):
    return ConquestRewardExcelAddRewardProb(builder, rewardProb)
def ConquestRewardExcelAddRewardTag(builder, rewardTag): builder.PrependInt32Slot(6, rewardTag, 0)
def AddRewardTag(builder, rewardTag):
    return ConquestRewardExcelAddRewardTag(builder, rewardTag)
def ConquestRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConquestRewardExcelEnd(builder)