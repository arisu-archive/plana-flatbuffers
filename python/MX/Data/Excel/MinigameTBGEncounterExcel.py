# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGEncounterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGEncounterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGEncounterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGEncounterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGEncounterExcel
    def AllThema(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameTBGEncounterExcel
    def AllyAttackLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def AttackDefenceLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryOption1Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryOption2Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryOption3Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def ClearStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def DefeatStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EncounterTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyAttackLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyNameLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def OptionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def RewardHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameTBGEncounterExcel
    def RunawayStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def StoryImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def ThemaIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def ThemaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameTBGEncounterExcelStart(builder): builder.StartObject(23)
def Start(builder):
    return MinigameTBGEncounterExcelStart(builder)
def MinigameTBGEncounterExcelAddAllThema(builder, allThema): builder.PrependBoolSlot(0, allThema, 0)
def AddAllThema(builder, allThema):
    return MinigameTBGEncounterExcelAddAllThema(builder, allThema)
def MinigameTBGEncounterExcelAddAllyAttackLocalize(builder, allyAttackLocalize): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(allyAttackLocalize), 0)
def AddAllyAttackLocalize(builder, allyAttackLocalize):
    return MinigameTBGEncounterExcelAddAllyAttackLocalize(builder, allyAttackLocalize)
def MinigameTBGEncounterExcelAddAttackDefenceLocalize(builder, attackDefenceLocalize): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(attackDefenceLocalize), 0)
def AddAttackDefenceLocalize(builder, attackDefenceLocalize):
    return MinigameTBGEncounterExcelAddAttackDefenceLocalize(builder, attackDefenceLocalize)
def MinigameTBGEncounterExcelAddBeforeStoryLocalize(builder, beforeStoryLocalize): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryLocalize), 0)
def AddBeforeStoryLocalize(builder, beforeStoryLocalize):
    return MinigameTBGEncounterExcelAddBeforeStoryLocalize(builder, beforeStoryLocalize)
def MinigameTBGEncounterExcelAddBeforeStoryOption1Localize(builder, beforeStoryOption1Localize): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryOption1Localize), 0)
def AddBeforeStoryOption1Localize(builder, beforeStoryOption1Localize):
    return MinigameTBGEncounterExcelAddBeforeStoryOption1Localize(builder, beforeStoryOption1Localize)
def MinigameTBGEncounterExcelAddBeforeStoryOption2Localize(builder, beforeStoryOption2Localize): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryOption2Localize), 0)
def AddBeforeStoryOption2Localize(builder, beforeStoryOption2Localize):
    return MinigameTBGEncounterExcelAddBeforeStoryOption2Localize(builder, beforeStoryOption2Localize)
def MinigameTBGEncounterExcelAddBeforeStoryOption3Localize(builder, beforeStoryOption3Localize): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryOption3Localize), 0)
def AddBeforeStoryOption3Localize(builder, beforeStoryOption3Localize):
    return MinigameTBGEncounterExcelAddBeforeStoryOption3Localize(builder, beforeStoryOption3Localize)
def MinigameTBGEncounterExcelAddClearStoryLocalize(builder, clearStoryLocalize): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(clearStoryLocalize), 0)
def AddClearStoryLocalize(builder, clearStoryLocalize):
    return MinigameTBGEncounterExcelAddClearStoryLocalize(builder, clearStoryLocalize)
def MinigameTBGEncounterExcelAddDefeatStoryLocalize(builder, defeatStoryLocalize): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(defeatStoryLocalize), 0)
def AddDefeatStoryLocalize(builder, defeatStoryLocalize):
    return MinigameTBGEncounterExcelAddDefeatStoryLocalize(builder, defeatStoryLocalize)
def MinigameTBGEncounterExcelAddEncounterTitleLocalize(builder, encounterTitleLocalize): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(encounterTitleLocalize), 0)
def AddEncounterTitleLocalize(builder, encounterTitleLocalize):
    return MinigameTBGEncounterExcelAddEncounterTitleLocalize(builder, encounterTitleLocalize)
def MinigameTBGEncounterExcelAddEnemyAttackLocalize(builder, enemyAttackLocalize): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(enemyAttackLocalize), 0)
def AddEnemyAttackLocalize(builder, enemyAttackLocalize):
    return MinigameTBGEncounterExcelAddEnemyAttackLocalize(builder, enemyAttackLocalize)
def MinigameTBGEncounterExcelAddEnemyImagePath(builder, enemyImagePath): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(enemyImagePath), 0)
def AddEnemyImagePath(builder, enemyImagePath):
    return MinigameTBGEncounterExcelAddEnemyImagePath(builder, enemyImagePath)
def MinigameTBGEncounterExcelAddEnemyNameLocalize(builder, enemyNameLocalize): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enemyNameLocalize), 0)
def AddEnemyNameLocalize(builder, enemyNameLocalize):
    return MinigameTBGEncounterExcelAddEnemyNameLocalize(builder, enemyNameLocalize)
def MinigameTBGEncounterExcelAddEnemyPrefabName(builder, enemyPrefabName): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPrefabName), 0)
def AddEnemyPrefabName(builder, enemyPrefabName):
    return MinigameTBGEncounterExcelAddEnemyPrefabName(builder, enemyPrefabName)
def MinigameTBGEncounterExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(14, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return MinigameTBGEncounterExcelAddEventContentId(builder, eventContentId)
def MinigameTBGEncounterExcelAddObjectType(builder, objectType): builder.PrependInt32Slot(15, objectType, 0)
def AddObjectType(builder, objectType):
    return MinigameTBGEncounterExcelAddObjectType(builder, objectType)
def MinigameTBGEncounterExcelAddOptionGroupId(builder, optionGroupId): builder.PrependInt64Slot(16, optionGroupId, 0)
def AddOptionGroupId(builder, optionGroupId):
    return MinigameTBGEncounterExcelAddOptionGroupId(builder, optionGroupId)
def MinigameTBGEncounterExcelAddRewardHide(builder, rewardHide): builder.PrependBoolSlot(17, rewardHide, 0)
def AddRewardHide(builder, rewardHide):
    return MinigameTBGEncounterExcelAddRewardHide(builder, rewardHide)
def MinigameTBGEncounterExcelAddRunawayStoryLocalize(builder, runawayStoryLocalize): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(runawayStoryLocalize), 0)
def AddRunawayStoryLocalize(builder, runawayStoryLocalize):
    return MinigameTBGEncounterExcelAddRunawayStoryLocalize(builder, runawayStoryLocalize)
def MinigameTBGEncounterExcelAddStoryImagePath(builder, storyImagePath): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(storyImagePath), 0)
def AddStoryImagePath(builder, storyImagePath):
    return MinigameTBGEncounterExcelAddStoryImagePath(builder, storyImagePath)
def MinigameTBGEncounterExcelAddThemaIndex(builder, themaIndex): builder.PrependInt32Slot(20, themaIndex, 0)
def AddThemaIndex(builder, themaIndex):
    return MinigameTBGEncounterExcelAddThemaIndex(builder, themaIndex)
def MinigameTBGEncounterExcelAddThemaType(builder, themaType): builder.PrependInt32Slot(21, themaType, 0)
def AddThemaType(builder, themaType):
    return MinigameTBGEncounterExcelAddThemaType(builder, themaType)
def MinigameTBGEncounterExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(22, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return MinigameTBGEncounterExcelAddUniqueId(builder, uniqueId)
def MinigameTBGEncounterExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameTBGEncounterExcelEnd(builder)