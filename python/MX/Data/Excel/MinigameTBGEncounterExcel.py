# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGEncounterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGEncounterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGEncounterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGEncounterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGEncounterExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def AllThema(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameTBGEncounterExcel
    def ThemaIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def ThemaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def EnemyImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyPrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyNameLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def OptionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGEncounterExcel
    def RewardHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameTBGEncounterExcel
    def EncounterTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def StoryImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryOption1Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryOption2Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def BeforeStoryOption3Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def AllyAttackLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def EnemyAttackLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def AttackDefenceLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def ClearStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def DefeatStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGEncounterExcel
    def RunawayStoryLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MinigameTBGEncounterExcelStart(builder):
    builder.StartObject(23)

def Start(builder):
    MinigameTBGEncounterExcelStart(builder)

def MinigameTBGEncounterExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    MinigameTBGEncounterExcelAddEventContentId(builder, eventContentId)

def MinigameTBGEncounterExcelAddUniqueId(builder, uniqueId):
    builder.PrependInt64Slot(1, uniqueId, 0)

def AddUniqueId(builder, uniqueId):
    MinigameTBGEncounterExcelAddUniqueId(builder, uniqueId)

def MinigameTBGEncounterExcelAddAllThema(builder, allThema):
    builder.PrependBoolSlot(2, allThema, 0)

def AddAllThema(builder, allThema):
    MinigameTBGEncounterExcelAddAllThema(builder, allThema)

def MinigameTBGEncounterExcelAddThemaIndex(builder, themaIndex):
    builder.PrependInt32Slot(3, themaIndex, 0)

def AddThemaIndex(builder, themaIndex):
    MinigameTBGEncounterExcelAddThemaIndex(builder, themaIndex)

def MinigameTBGEncounterExcelAddThemaType(builder, themaType):
    builder.PrependInt32Slot(4, themaType, 0)

def AddThemaType(builder, themaType):
    MinigameTBGEncounterExcelAddThemaType(builder, themaType)

def MinigameTBGEncounterExcelAddObjectType(builder, objectType):
    builder.PrependInt32Slot(5, objectType, 0)

def AddObjectType(builder, objectType):
    MinigameTBGEncounterExcelAddObjectType(builder, objectType)

def MinigameTBGEncounterExcelAddEnemyImagePath(builder, enemyImagePath):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyImagePath), 0)

def AddEnemyImagePath(builder, enemyImagePath):
    MinigameTBGEncounterExcelAddEnemyImagePath(builder, enemyImagePath)

def MinigameTBGEncounterExcelAddEnemyPrefabName(builder, enemyPrefabName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPrefabName), 0)

def AddEnemyPrefabName(builder, enemyPrefabName):
    MinigameTBGEncounterExcelAddEnemyPrefabName(builder, enemyPrefabName)

def MinigameTBGEncounterExcelAddEnemyNameLocalize(builder, enemyNameLocalize):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(enemyNameLocalize), 0)

def AddEnemyNameLocalize(builder, enemyNameLocalize):
    MinigameTBGEncounterExcelAddEnemyNameLocalize(builder, enemyNameLocalize)

def MinigameTBGEncounterExcelAddOptionGroupId(builder, optionGroupId):
    builder.PrependInt64Slot(9, optionGroupId, 0)

def AddOptionGroupId(builder, optionGroupId):
    MinigameTBGEncounterExcelAddOptionGroupId(builder, optionGroupId)

def MinigameTBGEncounterExcelAddRewardHide(builder, rewardHide):
    builder.PrependBoolSlot(10, rewardHide, 0)

def AddRewardHide(builder, rewardHide):
    MinigameTBGEncounterExcelAddRewardHide(builder, rewardHide)

def MinigameTBGEncounterExcelAddEncounterTitleLocalize(builder, encounterTitleLocalize):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(encounterTitleLocalize), 0)

def AddEncounterTitleLocalize(builder, encounterTitleLocalize):
    MinigameTBGEncounterExcelAddEncounterTitleLocalize(builder, encounterTitleLocalize)

def MinigameTBGEncounterExcelAddStoryImagePath(builder, storyImagePath):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(storyImagePath), 0)

def AddStoryImagePath(builder, storyImagePath):
    MinigameTBGEncounterExcelAddStoryImagePath(builder, storyImagePath)

def MinigameTBGEncounterExcelAddBeforeStoryLocalize(builder, beforeStoryLocalize):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryLocalize), 0)

def AddBeforeStoryLocalize(builder, beforeStoryLocalize):
    MinigameTBGEncounterExcelAddBeforeStoryLocalize(builder, beforeStoryLocalize)

def MinigameTBGEncounterExcelAddBeforeStoryOption1Localize(builder, beforeStoryOption1Localize):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryOption1Localize), 0)

def AddBeforeStoryOption1Localize(builder, beforeStoryOption1Localize):
    MinigameTBGEncounterExcelAddBeforeStoryOption1Localize(builder, beforeStoryOption1Localize)

def MinigameTBGEncounterExcelAddBeforeStoryOption2Localize(builder, beforeStoryOption2Localize):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryOption2Localize), 0)

def AddBeforeStoryOption2Localize(builder, beforeStoryOption2Localize):
    MinigameTBGEncounterExcelAddBeforeStoryOption2Localize(builder, beforeStoryOption2Localize)

def MinigameTBGEncounterExcelAddBeforeStoryOption3Localize(builder, beforeStoryOption3Localize):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(beforeStoryOption3Localize), 0)

def AddBeforeStoryOption3Localize(builder, beforeStoryOption3Localize):
    MinigameTBGEncounterExcelAddBeforeStoryOption3Localize(builder, beforeStoryOption3Localize)

def MinigameTBGEncounterExcelAddAllyAttackLocalize(builder, allyAttackLocalize):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(allyAttackLocalize), 0)

def AddAllyAttackLocalize(builder, allyAttackLocalize):
    MinigameTBGEncounterExcelAddAllyAttackLocalize(builder, allyAttackLocalize)

def MinigameTBGEncounterExcelAddEnemyAttackLocalize(builder, enemyAttackLocalize):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(enemyAttackLocalize), 0)

def AddEnemyAttackLocalize(builder, enemyAttackLocalize):
    MinigameTBGEncounterExcelAddEnemyAttackLocalize(builder, enemyAttackLocalize)

def MinigameTBGEncounterExcelAddAttackDefenceLocalize(builder, attackDefenceLocalize):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(attackDefenceLocalize), 0)

def AddAttackDefenceLocalize(builder, attackDefenceLocalize):
    MinigameTBGEncounterExcelAddAttackDefenceLocalize(builder, attackDefenceLocalize)

def MinigameTBGEncounterExcelAddClearStoryLocalize(builder, clearStoryLocalize):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(clearStoryLocalize), 0)

def AddClearStoryLocalize(builder, clearStoryLocalize):
    MinigameTBGEncounterExcelAddClearStoryLocalize(builder, clearStoryLocalize)

def MinigameTBGEncounterExcelAddDefeatStoryLocalize(builder, defeatStoryLocalize):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(defeatStoryLocalize), 0)

def AddDefeatStoryLocalize(builder, defeatStoryLocalize):
    MinigameTBGEncounterExcelAddDefeatStoryLocalize(builder, defeatStoryLocalize)

def MinigameTBGEncounterExcelAddRunawayStoryLocalize(builder, runawayStoryLocalize):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(runawayStoryLocalize), 0)

def AddRunawayStoryLocalize(builder, runawayStoryLocalize):
    MinigameTBGEncounterExcelAddRunawayStoryLocalize(builder, runawayStoryLocalize)

def MinigameTBGEncounterExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return MinigameTBGEncounterExcelEnd(builder)
