# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGLevelExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGLevelExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGLevelExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGLevelExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGLevelExcel
    def BackgroundPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameCCGLevelExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGLevelExcel
    def CcgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGLevelExcel
    def FloorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGLevelExcel
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MinigameCCGLevelExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return MinigameCCGLevelExcelStart(builder)
def MinigameCCGLevelExcelAddBackgroundPath(builder, backgroundPath): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundPath), 0)
def AddBackgroundPath(builder, backgroundPath):
    return MinigameCCGLevelExcelAddBackgroundPath(builder, backgroundPath)
def MinigameCCGLevelExcelAddBgmId(builder, bgmId): builder.PrependInt64Slot(1, bgmId, 0)
def AddBgmId(builder, bgmId):
    return MinigameCCGLevelExcelAddBgmId(builder, bgmId)
def MinigameCCGLevelExcelAddCcgId(builder, ccgId): builder.PrependInt64Slot(2, ccgId, 0)
def AddCcgId(builder, ccgId):
    return MinigameCCGLevelExcelAddCcgId(builder, ccgId)
def MinigameCCGLevelExcelAddFloorIndex(builder, floorIndex): builder.PrependInt32Slot(3, floorIndex, 0)
def AddFloorIndex(builder, floorIndex):
    return MinigameCCGLevelExcelAddFloorIndex(builder, floorIndex)
def MinigameCCGLevelExcelAddLevelId(builder, levelId): builder.PrependInt64Slot(4, levelId, 0)
def AddLevelId(builder, levelId):
    return MinigameCCGLevelExcelAddLevelId(builder, levelId)
def MinigameCCGLevelExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameCCGLevelExcelEnd(builder)