# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TerrainAdaptationFactorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TerrainAdaptationFactorExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTerrainAdaptationFactorExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TerrainAdaptationFactorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TerrainAdaptationFactorExcel
    def TerrainAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def TerrainAdaptationStat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def ShotFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def BlockFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def AccuracyFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def DodgeFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def AttackPowerFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TerrainAdaptationFactorExcelStart(builder):
    builder.StartObject(7)

def Start(builder):
    TerrainAdaptationFactorExcelStart(builder)

def TerrainAdaptationFactorExcelAddTerrainAdaptation(builder, terrainAdaptation):
    builder.PrependInt32Slot(0, terrainAdaptation, 0)

def AddTerrainAdaptation(builder, terrainAdaptation):
    TerrainAdaptationFactorExcelAddTerrainAdaptation(builder, terrainAdaptation)

def TerrainAdaptationFactorExcelAddTerrainAdaptationStat(builder, terrainAdaptationStat):
    builder.PrependInt32Slot(1, terrainAdaptationStat, 0)

def AddTerrainAdaptationStat(builder, terrainAdaptationStat):
    TerrainAdaptationFactorExcelAddTerrainAdaptationStat(builder, terrainAdaptationStat)

def TerrainAdaptationFactorExcelAddShotFactor(builder, shotFactor):
    builder.PrependInt64Slot(2, shotFactor, 0)

def AddShotFactor(builder, shotFactor):
    TerrainAdaptationFactorExcelAddShotFactor(builder, shotFactor)

def TerrainAdaptationFactorExcelAddBlockFactor(builder, blockFactor):
    builder.PrependInt64Slot(3, blockFactor, 0)

def AddBlockFactor(builder, blockFactor):
    TerrainAdaptationFactorExcelAddBlockFactor(builder, blockFactor)

def TerrainAdaptationFactorExcelAddAccuracyFactor(builder, accuracyFactor):
    builder.PrependInt64Slot(4, accuracyFactor, 0)

def AddAccuracyFactor(builder, accuracyFactor):
    TerrainAdaptationFactorExcelAddAccuracyFactor(builder, accuracyFactor)

def TerrainAdaptationFactorExcelAddDodgeFactor(builder, dodgeFactor):
    builder.PrependInt64Slot(5, dodgeFactor, 0)

def AddDodgeFactor(builder, dodgeFactor):
    TerrainAdaptationFactorExcelAddDodgeFactor(builder, dodgeFactor)

def TerrainAdaptationFactorExcelAddAttackPowerFactor(builder, attackPowerFactor):
    builder.PrependInt64Slot(6, attackPowerFactor, 0)

def AddAttackPowerFactor(builder, attackPowerFactor):
    TerrainAdaptationFactorExcelAddAttackPowerFactor(builder, attackPowerFactor)

def TerrainAdaptationFactorExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return TerrainAdaptationFactorExcelEnd(builder)
