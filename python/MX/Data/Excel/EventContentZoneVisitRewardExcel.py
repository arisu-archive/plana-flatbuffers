# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentZoneVisitRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentZoneVisitRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentZoneVisitRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentZoneVisitRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentZoneVisitRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentZoneVisitRewardExcel
    def EventContentLocationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentZoneVisitRewardExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentZoneVisitRewardExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentZoneVisitRewardExcel
    def CharacterDevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def EventContentZoneVisitRewardExcelStart(builder):
    builder.StartObject(9)

def Start(builder):
    EventContentZoneVisitRewardExcelStart(builder)

def EventContentZoneVisitRewardExcelAddEventContentId(builder, eventContentId):
    builder.PrependInt64Slot(0, eventContentId, 0)

def AddEventContentId(builder, eventContentId):
    EventContentZoneVisitRewardExcelAddEventContentId(builder, eventContentId)

def EventContentZoneVisitRewardExcelAddEventContentLocationId(builder, eventContentLocationId):
    builder.PrependInt64Slot(1, eventContentLocationId, 0)

def AddEventContentLocationId(builder, eventContentLocationId):
    EventContentZoneVisitRewardExcelAddEventContentLocationId(builder, eventContentLocationId)

def EventContentZoneVisitRewardExcelAddDevName(builder, devName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(devName), 0)

def AddDevName(builder, devName):
    EventContentZoneVisitRewardExcelAddDevName(builder, devName)

def EventContentZoneVisitRewardExcelAddCharacterId(builder, characterId):
    builder.PrependInt64Slot(3, characterId, 0)

def AddCharacterId(builder, characterId):
    EventContentZoneVisitRewardExcelAddCharacterId(builder, characterId)

def EventContentZoneVisitRewardExcelAddCharacterDevName(builder, characterDevName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(characterDevName), 0)

def AddCharacterDevName(builder, characterDevName):
    EventContentZoneVisitRewardExcelAddCharacterDevName(builder, characterDevName)

def EventContentZoneVisitRewardExcelAddVisitRewardParcelType(builder, visitRewardParcelType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(visitRewardParcelType), 0)

def AddVisitRewardParcelType(builder, visitRewardParcelType):
    EventContentZoneVisitRewardExcelAddVisitRewardParcelType(builder, visitRewardParcelType)

def EventContentZoneVisitRewardExcelStartVisitRewardParcelTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVisitRewardParcelTypeVector(builder, numElems):
    return EventContentZoneVisitRewardExcelStartVisitRewardParcelTypeVector(builder, numElems)

def EventContentZoneVisitRewardExcelAddVisitRewardParcelId(builder, visitRewardParcelId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(visitRewardParcelId), 0)

def AddVisitRewardParcelId(builder, visitRewardParcelId):
    EventContentZoneVisitRewardExcelAddVisitRewardParcelId(builder, visitRewardParcelId)

def EventContentZoneVisitRewardExcelStartVisitRewardParcelIdVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartVisitRewardParcelIdVector(builder, numElems):
    return EventContentZoneVisitRewardExcelStartVisitRewardParcelIdVector(builder, numElems)

def EventContentZoneVisitRewardExcelAddVisitRewardAmount(builder, visitRewardAmount):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(visitRewardAmount), 0)

def AddVisitRewardAmount(builder, visitRewardAmount):
    EventContentZoneVisitRewardExcelAddVisitRewardAmount(builder, visitRewardAmount)

def EventContentZoneVisitRewardExcelStartVisitRewardAmountVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartVisitRewardAmountVector(builder, numElems):
    return EventContentZoneVisitRewardExcelStartVisitRewardAmountVector(builder, numElems)

def EventContentZoneVisitRewardExcelAddVisitRewardProb(builder, visitRewardProb):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(visitRewardProb), 0)

def AddVisitRewardProb(builder, visitRewardProb):
    EventContentZoneVisitRewardExcelAddVisitRewardProb(builder, visitRewardProb)

def EventContentZoneVisitRewardExcelStartVisitRewardProbVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartVisitRewardProbVector(builder, numElems):
    return EventContentZoneVisitRewardExcelStartVisitRewardProbVector(builder, numElems)

def EventContentZoneVisitRewardExcelEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventContentZoneVisitRewardExcelEnd(builder)
