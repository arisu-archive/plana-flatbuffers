# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TacticSkipExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TacticSkipExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTacticSkipExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TacticSkipExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TacticSkipExcel
    def LevelDiff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TacticSkipExcel
    def HpResult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TacticSkipExcelStart(builder): builder.StartObject(2)
def Start(builder):
    return TacticSkipExcelStart(builder)
def TacticSkipExcelAddLevelDiff(builder, levelDiff): builder.PrependInt32Slot(0, levelDiff, 0)
def AddLevelDiff(builder, levelDiff):
    return TacticSkipExcelAddLevelDiff(builder, levelDiff)
def TacticSkipExcelAddHpResult(builder, hpResult): builder.PrependInt64Slot(1, hpResult, 0)
def AddHpResult(builder, hpResult):
    return TacticSkipExcelAddHpResult(builder, hpResult)
def TacticSkipExcelEnd(builder): return builder.EndObject()
def End(builder):
    return TacticSkipExcelEnd(builder)