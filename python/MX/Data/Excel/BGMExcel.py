# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BGMExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BGMExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBGMExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BGMExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BGMExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BGMExcel
    def LoopEndTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BGMExcel
    def LoopEndTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # BGMExcel
    def LoopEndTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def LoopEndTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # BGMExcel
    def LoopOffsetTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BGMExcel
    def LoopOffsetTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # BGMExcel
    def LoopOffsetTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def LoopOffsetTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # BGMExcel
    def LoopStartTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BGMExcel
    def LoopStartTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # BGMExcel
    def LoopStartTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def LoopStartTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # BGMExcel
    def LoopTranstionTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BGMExcel
    def LoopTranstionTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # BGMExcel
    def LoopTranstionTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def LoopTranstionTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # BGMExcel
    def Nation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BGMExcel
    def NationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # BGMExcel
    def NationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def NationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # BGMExcel
    def Path(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # BGMExcel
    def PathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def PathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # BGMExcel
    def Volume(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # BGMExcel
    def VolumeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # BGMExcel
    def VolumeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BGMExcel
    def VolumeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def BGMExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return BGMExcelStart(builder)
def BGMExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return BGMExcelAddId(builder, id)
def BGMExcelAddLoopEndTime(builder, loopEndTime): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(loopEndTime), 0)
def AddLoopEndTime(builder, loopEndTime):
    return BGMExcelAddLoopEndTime(builder, loopEndTime)
def BGMExcelStartLoopEndTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLoopEndTimeVector(builder, numElems):
    return BGMExcelStartLoopEndTimeVector(builder, numElems)
def BGMExcelAddLoopOffsetTime(builder, loopOffsetTime): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(loopOffsetTime), 0)
def AddLoopOffsetTime(builder, loopOffsetTime):
    return BGMExcelAddLoopOffsetTime(builder, loopOffsetTime)
def BGMExcelStartLoopOffsetTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLoopOffsetTimeVector(builder, numElems):
    return BGMExcelStartLoopOffsetTimeVector(builder, numElems)
def BGMExcelAddLoopStartTime(builder, loopStartTime): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(loopStartTime), 0)
def AddLoopStartTime(builder, loopStartTime):
    return BGMExcelAddLoopStartTime(builder, loopStartTime)
def BGMExcelStartLoopStartTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLoopStartTimeVector(builder, numElems):
    return BGMExcelStartLoopStartTimeVector(builder, numElems)
def BGMExcelAddLoopTranstionTime(builder, loopTranstionTime): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(loopTranstionTime), 0)
def AddLoopTranstionTime(builder, loopTranstionTime):
    return BGMExcelAddLoopTranstionTime(builder, loopTranstionTime)
def BGMExcelStartLoopTranstionTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLoopTranstionTimeVector(builder, numElems):
    return BGMExcelStartLoopTranstionTimeVector(builder, numElems)
def BGMExcelAddNation(builder, nation): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(nation), 0)
def AddNation(builder, nation):
    return BGMExcelAddNation(builder, nation)
def BGMExcelStartNationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNationVector(builder, numElems):
    return BGMExcelStartNationVector(builder, numElems)
def BGMExcelAddPath(builder, path): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def AddPath(builder, path):
    return BGMExcelAddPath(builder, path)
def BGMExcelStartPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPathVector(builder, numElems):
    return BGMExcelStartPathVector(builder, numElems)
def BGMExcelAddVolume(builder, volume): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(volume), 0)
def AddVolume(builder, volume):
    return BGMExcelAddVolume(builder, volume)
def BGMExcelStartVolumeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVolumeVector(builder, numElems):
    return BGMExcelStartVolumeVector(builder, numElems)
def BGMExcelEnd(builder): return builder.EndObject()
def End(builder):
    return BGMExcelEnd(builder)