# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameCCGRewardCardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameCCGRewardCardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameCCGRewardCardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameCCGRewardCardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameCCGRewardCardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardCardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardCardExcel
    def EntityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardCardExcel
    def CardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameCCGRewardCardExcel
    def CardRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MinigameCCGRewardCardExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return MinigameCCGRewardCardExcelStart(builder)
def MinigameCCGRewardCardExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return MinigameCCGRewardCardExcelAddId(builder, id)
def MinigameCCGRewardCardExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(1, groupId, 0)
def AddGroupId(builder, groupId):
    return MinigameCCGRewardCardExcelAddGroupId(builder, groupId)
def MinigameCCGRewardCardExcelAddEntityType(builder, entityType): builder.PrependInt32Slot(2, entityType, 0)
def AddEntityType(builder, entityType):
    return MinigameCCGRewardCardExcelAddEntityType(builder, entityType)
def MinigameCCGRewardCardExcelAddCardId(builder, cardId): builder.PrependInt64Slot(3, cardId, 0)
def AddCardId(builder, cardId):
    return MinigameCCGRewardCardExcelAddCardId(builder, cardId)
def MinigameCCGRewardCardExcelAddCardRarity(builder, cardRarity): builder.PrependInt32Slot(4, cardRarity, 0)
def AddCardRarity(builder, cardRarity):
    return MinigameCCGRewardCardExcelAddCardRarity(builder, cardRarity)
def MinigameCCGRewardCardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return MinigameCCGRewardCardExcelEnd(builder)