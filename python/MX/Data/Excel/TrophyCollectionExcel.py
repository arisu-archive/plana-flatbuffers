# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrophyCollectionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrophyCollectionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrophyCollectionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrophyCollectionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrophyCollectionExcel
    def FurnitureId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TrophyCollectionExcel
    def FurnitureIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TrophyCollectionExcel
    def FurnitureIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrophyCollectionExcel
    def FurnitureIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # TrophyCollectionExcel
    def LocalizeCodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TrophyCollectionExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TrophyCollectionExcelStart(builder): builder.StartObject(3)
def Start(builder):
    return TrophyCollectionExcelStart(builder)
def TrophyCollectionExcelAddFurnitureId(builder, furnitureId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureId), 0)
def AddFurnitureId(builder, furnitureId):
    return TrophyCollectionExcelAddFurnitureId(builder, furnitureId)
def TrophyCollectionExcelStartFurnitureIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartFurnitureIdVector(builder, numElems):
    return TrophyCollectionExcelStartFurnitureIdVector(builder, numElems)
def TrophyCollectionExcelAddLocalizeCodeId(builder, localizeCodeId): builder.PrependUint32Slot(1, localizeCodeId, 0)
def AddLocalizeCodeId(builder, localizeCodeId):
    return TrophyCollectionExcelAddLocalizeCodeId(builder, localizeCodeId)
def TrophyCollectionExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(2, groupId, 0)
def AddGroupId(builder, groupId):
    return TrophyCollectionExcelAddGroupId(builder, groupId)
def TrophyCollectionExcelEnd(builder): return builder.EndObject()
def End(builder):
    return TrophyCollectionExcelEnd(builder)