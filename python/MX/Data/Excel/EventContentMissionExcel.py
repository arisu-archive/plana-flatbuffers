# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentMissionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentMissionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentMissionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentMissionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentMissionExcel
    def ConditionRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentMissionExcel
    def ConditionRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentMissionExcel
    def ConditionRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def ConditionRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # EventContentMissionExcel
    def ConditionRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentMissionExcel
    def ConditionRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentMissionExcel
    def ConditionRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def ConditionRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # EventContentMissionExcel
    def ConditionRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentMissionExcel
    def ConditionRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentMissionExcel
    def ConditionRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def ConditionRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EventContentMissionExcel
    def MissionRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentMissionExcel
    def MissionRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentMissionExcel
    def MissionRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def MissionRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EventContentMissionExcel
    def MissionRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentMissionExcel
    def MissionRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentMissionExcel
    def MissionRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def MissionRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # EventContentMissionExcel
    def MissionRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentMissionExcel
    def MissionRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentMissionExcel
    def MissionRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def MissionRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EventContentMissionExcel
    def CompleteConditionMissionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def CompleteConditionMissionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentMissionExcel
    def CompleteConditionMissionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentMissionExcel
    def CompleteConditionMissionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def CompleteConditionMissionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # EventContentMissionExcel
    def RewardIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentMissionExcel
    def CompleteConditionParameterTag(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentMissionExcel
    def CompleteConditionParameterTagAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentMissionExcel
    def CompleteConditionParameterTagLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def CompleteConditionParameterTagIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # EventContentMissionExcel
    def CompleteConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentMissionExcel
    def CompleteConditionParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentMissionExcel
    def CompleteConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def CompleteConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # EventContentMissionExcel
    def CompleteConditionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def IsCompleteExtensionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentMissionExcel
    def CompleteConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def ChallengeStageShortcut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def ShortcutUi(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventContentMissionExcel
    def ShortcutUiLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def ShortcutUiIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # EventContentMissionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def AccountType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def PreMissionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentMissionExcel
    def PreMissionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentMissionExcel
    def PreMissionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentMissionExcel
    def PreMissionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # EventContentMissionExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def ViewFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentMissionExcel
    def ToastImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentMissionExcel
    def ToastDisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def ResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentMissionExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentMissionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentMissionExcelStart(builder): builder.StartObject(30)
def Start(builder):
    return EventContentMissionExcelStart(builder)
def EventContentMissionExcelAddConditionRewardAmount(builder, conditionRewardAmount): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(conditionRewardAmount), 0)
def AddConditionRewardAmount(builder, conditionRewardAmount):
    return EventContentMissionExcelAddConditionRewardAmount(builder, conditionRewardAmount)
def EventContentMissionExcelStartConditionRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConditionRewardAmountVector(builder, numElems):
    return EventContentMissionExcelStartConditionRewardAmountVector(builder, numElems)
def EventContentMissionExcelAddConditionRewardParcelId(builder, conditionRewardParcelId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(conditionRewardParcelId), 0)
def AddConditionRewardParcelId(builder, conditionRewardParcelId):
    return EventContentMissionExcelAddConditionRewardParcelId(builder, conditionRewardParcelId)
def EventContentMissionExcelStartConditionRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionRewardParcelIdVector(builder, numElems):
    return EventContentMissionExcelStartConditionRewardParcelIdVector(builder, numElems)
def EventContentMissionExcelAddConditionRewardParcelType(builder, conditionRewardParcelType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(conditionRewardParcelType), 0)
def AddConditionRewardParcelType(builder, conditionRewardParcelType):
    return EventContentMissionExcelAddConditionRewardParcelType(builder, conditionRewardParcelType)
def EventContentMissionExcelStartConditionRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConditionRewardParcelTypeVector(builder, numElems):
    return EventContentMissionExcelStartConditionRewardParcelTypeVector(builder, numElems)
def EventContentMissionExcelAddMissionRewardAmount(builder, missionRewardAmount): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionRewardAmount), 0)
def AddMissionRewardAmount(builder, missionRewardAmount):
    return EventContentMissionExcelAddMissionRewardAmount(builder, missionRewardAmount)
def EventContentMissionExcelStartMissionRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMissionRewardAmountVector(builder, numElems):
    return EventContentMissionExcelStartMissionRewardAmountVector(builder, numElems)
def EventContentMissionExcelAddMissionRewardParcelId(builder, missionRewardParcelId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionRewardParcelId), 0)
def AddMissionRewardParcelId(builder, missionRewardParcelId):
    return EventContentMissionExcelAddMissionRewardParcelId(builder, missionRewardParcelId)
def EventContentMissionExcelStartMissionRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartMissionRewardParcelIdVector(builder, numElems):
    return EventContentMissionExcelStartMissionRewardParcelIdVector(builder, numElems)
def EventContentMissionExcelAddMissionRewardParcelType(builder, missionRewardParcelType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(missionRewardParcelType), 0)
def AddMissionRewardParcelType(builder, missionRewardParcelType):
    return EventContentMissionExcelAddMissionRewardParcelType(builder, missionRewardParcelType)
def EventContentMissionExcelStartMissionRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMissionRewardParcelTypeVector(builder, numElems):
    return EventContentMissionExcelStartMissionRewardParcelTypeVector(builder, numElems)
def EventContentMissionExcelAddCompleteConditionMissionCount(builder, completeConditionMissionCount): builder.PrependInt64Slot(6, completeConditionMissionCount, 0)
def AddCompleteConditionMissionCount(builder, completeConditionMissionCount):
    return EventContentMissionExcelAddCompleteConditionMissionCount(builder, completeConditionMissionCount)
def EventContentMissionExcelAddCompleteConditionMissionId(builder, completeConditionMissionId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(completeConditionMissionId), 0)
def AddCompleteConditionMissionId(builder, completeConditionMissionId):
    return EventContentMissionExcelAddCompleteConditionMissionId(builder, completeConditionMissionId)
def EventContentMissionExcelStartCompleteConditionMissionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCompleteConditionMissionIdVector(builder, numElems):
    return EventContentMissionExcelStartCompleteConditionMissionIdVector(builder, numElems)
def EventContentMissionExcelAddRewardIcon(builder, rewardIcon): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rewardIcon), 0)
def AddRewardIcon(builder, rewardIcon):
    return EventContentMissionExcelAddRewardIcon(builder, rewardIcon)
def EventContentMissionExcelAddCompleteConditionParameterTag(builder, completeConditionParameterTag): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(completeConditionParameterTag), 0)
def AddCompleteConditionParameterTag(builder, completeConditionParameterTag):
    return EventContentMissionExcelAddCompleteConditionParameterTag(builder, completeConditionParameterTag)
def EventContentMissionExcelStartCompleteConditionParameterTagVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCompleteConditionParameterTagVector(builder, numElems):
    return EventContentMissionExcelStartCompleteConditionParameterTagVector(builder, numElems)
def EventContentMissionExcelAddCompleteConditionParameter(builder, completeConditionParameter): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(completeConditionParameter), 0)
def AddCompleteConditionParameter(builder, completeConditionParameter):
    return EventContentMissionExcelAddCompleteConditionParameter(builder, completeConditionParameter)
def EventContentMissionExcelStartCompleteConditionParameterVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCompleteConditionParameterVector(builder, numElems):
    return EventContentMissionExcelStartCompleteConditionParameterVector(builder, numElems)
def EventContentMissionExcelAddCompleteConditionCount(builder, completeConditionCount): builder.PrependInt64Slot(11, completeConditionCount, 0)
def AddCompleteConditionCount(builder, completeConditionCount):
    return EventContentMissionExcelAddCompleteConditionCount(builder, completeConditionCount)
def EventContentMissionExcelAddIsCompleteExtensionTime(builder, isCompleteExtensionTime): builder.PrependBoolSlot(12, isCompleteExtensionTime, 0)
def AddIsCompleteExtensionTime(builder, isCompleteExtensionTime):
    return EventContentMissionExcelAddIsCompleteExtensionTime(builder, isCompleteExtensionTime)
def EventContentMissionExcelAddCompleteConditionType(builder, completeConditionType): builder.PrependInt32Slot(13, completeConditionType, 0)
def AddCompleteConditionType(builder, completeConditionType):
    return EventContentMissionExcelAddCompleteConditionType(builder, completeConditionType)
def EventContentMissionExcelAddChallengeStageShortcut(builder, challengeStageShortcut): builder.PrependInt64Slot(14, challengeStageShortcut, 0)
def AddChallengeStageShortcut(builder, challengeStageShortcut):
    return EventContentMissionExcelAddChallengeStageShortcut(builder, challengeStageShortcut)
def EventContentMissionExcelAddShortcutUi(builder, shortcutUi): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(shortcutUi), 0)
def AddShortcutUi(builder, shortcutUi):
    return EventContentMissionExcelAddShortcutUi(builder, shortcutUi)
def EventContentMissionExcelStartShortcutUiVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartShortcutUiVector(builder, numElems):
    return EventContentMissionExcelStartShortcutUiVector(builder, numElems)
def EventContentMissionExcelAddAccountLevel(builder, accountLevel): builder.PrependInt64Slot(16, accountLevel, 0)
def AddAccountLevel(builder, accountLevel):
    return EventContentMissionExcelAddAccountLevel(builder, accountLevel)
def EventContentMissionExcelAddAccountType(builder, accountType): builder.PrependInt32Slot(17, accountType, 0)
def AddAccountType(builder, accountType):
    return EventContentMissionExcelAddAccountType(builder, accountType)
def EventContentMissionExcelAddPreMissionId(builder, preMissionId): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionId), 0)
def AddPreMissionId(builder, preMissionId):
    return EventContentMissionExcelAddPreMissionId(builder, preMissionId)
def EventContentMissionExcelStartPreMissionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPreMissionIdVector(builder, numElems):
    return EventContentMissionExcelStartPreMissionIdVector(builder, numElems)
def EventContentMissionExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(19, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return EventContentMissionExcelAddDisplayOrder(builder, displayOrder)
def EventContentMissionExcelAddViewFlag(builder, viewFlag): builder.PrependBoolSlot(20, viewFlag, 0)
def AddViewFlag(builder, viewFlag):
    return EventContentMissionExcelAddViewFlag(builder, viewFlag)
def EventContentMissionExcelAddToastImagePath(builder, toastImagePath): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(toastImagePath), 0)
def AddToastImagePath(builder, toastImagePath):
    return EventContentMissionExcelAddToastImagePath(builder, toastImagePath)
def EventContentMissionExcelAddToastDisplayType(builder, toastDisplayType): builder.PrependInt32Slot(22, toastDisplayType, 0)
def AddToastDisplayType(builder, toastDisplayType):
    return EventContentMissionExcelAddToastDisplayType(builder, toastDisplayType)
def EventContentMissionExcelAddResetType(builder, resetType): builder.PrependInt32Slot(23, resetType, 0)
def AddResetType(builder, resetType):
    return EventContentMissionExcelAddResetType(builder, resetType)
def EventContentMissionExcelAddDescription(builder, description): builder.PrependUint32Slot(24, description, 0)
def AddDescription(builder, description):
    return EventContentMissionExcelAddDescription(builder, description)
def EventContentMissionExcelAddCategory(builder, category): builder.PrependInt32Slot(25, category, 0)
def AddCategory(builder, category):
    return EventContentMissionExcelAddCategory(builder, category)
def EventContentMissionExcelAddGroupName(builder, groupName): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)
def AddGroupName(builder, groupName):
    return EventContentMissionExcelAddGroupName(builder, groupName)
def EventContentMissionExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(27, groupId, 0)
def AddGroupId(builder, groupId):
    return EventContentMissionExcelAddGroupId(builder, groupId)
def EventContentMissionExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(28, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentMissionExcelAddEventContentId(builder, eventContentId)
def EventContentMissionExcelAddId(builder, id): builder.PrependInt64Slot(29, id, 0)
def AddId(builder, id):
    return EventContentMissionExcelAddId(builder, id)
def EventContentMissionExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentMissionExcelEnd(builder)