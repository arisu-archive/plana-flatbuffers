# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Excel

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatsTransExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatsTransExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterStatsTransExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterStatsTransExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatsTransExcel
    def TransSupportStats(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatsTransExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatsTransExcel
    def TransSupportStatsFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatsTransExcel
    def StatTransType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CharacterStatsTransExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return CharacterStatsTransExcelStart(builder)
def CharacterStatsTransExcelAddTransSupportStats(builder, transSupportStats): builder.PrependInt32Slot(0, transSupportStats, 0)
def AddTransSupportStats(builder, transSupportStats):
    return CharacterStatsTransExcelAddTransSupportStats(builder, transSupportStats)
def CharacterStatsTransExcelAddEchelonExtensionType(builder, echelonExtensionType): builder.PrependInt32Slot(1, echelonExtensionType, 0)
def AddEchelonExtensionType(builder, echelonExtensionType):
    return CharacterStatsTransExcelAddEchelonExtensionType(builder, echelonExtensionType)
def CharacterStatsTransExcelAddTransSupportStatsFactor(builder, transSupportStatsFactor): builder.PrependInt32Slot(2, transSupportStatsFactor, 0)
def AddTransSupportStatsFactor(builder, transSupportStatsFactor):
    return CharacterStatsTransExcelAddTransSupportStatsFactor(builder, transSupportStatsFactor)
def CharacterStatsTransExcelAddStatTransType(builder, statTransType): builder.PrependInt32Slot(3, statTransType, 0)
def AddStatTransType(builder, statTransType):
    return CharacterStatsTransExcelAddStatTransType(builder, statTransType)
def CharacterStatsTransExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterStatsTransExcelEnd(builder)