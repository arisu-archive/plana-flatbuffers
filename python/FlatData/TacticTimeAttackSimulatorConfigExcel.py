# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TacticTimeAttackSimulatorConfigExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TacticTimeAttackSimulatorConfigExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTacticTimeAttackSimulatorConfigExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TacticTimeAttackSimulatorConfigExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TacticTimeAttackSimulatorConfigExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TacticTimeAttackSimulatorConfigExcel
    def Repeat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TacticTimeAttackSimulatorConfigExcel
    def PresetGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TacticTimeAttackSimulatorConfigExcel
    def AttackStrikerNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TacticTimeAttackSimulatorConfigExcel
    def AttackSpecialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TacticTimeAttackSimulatorConfigExcel
    def GeasId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TacticTimeAttackSimulatorConfigExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return TacticTimeAttackSimulatorConfigExcelStart(builder)
def TacticTimeAttackSimulatorConfigExcelAddOrder(builder, order): builder.PrependInt64Slot(0, order, 0)
def AddOrder(builder, order):
    return TacticTimeAttackSimulatorConfigExcelAddOrder(builder, order)
def TacticTimeAttackSimulatorConfigExcelAddRepeat(builder, repeat): builder.PrependInt64Slot(1, repeat, 0)
def AddRepeat(builder, repeat):
    return TacticTimeAttackSimulatorConfigExcelAddRepeat(builder, repeat)
def TacticTimeAttackSimulatorConfigExcelAddPresetGroupId(builder, presetGroupId): builder.PrependInt64Slot(2, presetGroupId, 0)
def AddPresetGroupId(builder, presetGroupId):
    return TacticTimeAttackSimulatorConfigExcelAddPresetGroupId(builder, presetGroupId)
def TacticTimeAttackSimulatorConfigExcelAddAttackStrikerNum(builder, attackStrikerNum): builder.PrependInt64Slot(3, attackStrikerNum, 0)
def AddAttackStrikerNum(builder, attackStrikerNum):
    return TacticTimeAttackSimulatorConfigExcelAddAttackStrikerNum(builder, attackStrikerNum)
def TacticTimeAttackSimulatorConfigExcelAddAttackSpecialNum(builder, attackSpecialNum): builder.PrependInt64Slot(4, attackSpecialNum, 0)
def AddAttackSpecialNum(builder, attackSpecialNum):
    return TacticTimeAttackSimulatorConfigExcelAddAttackSpecialNum(builder, attackSpecialNum)
def TacticTimeAttackSimulatorConfigExcelAddGeasId(builder, geasId): builder.PrependInt64Slot(5, geasId, 0)
def AddGeasId(builder, geasId):
    return TacticTimeAttackSimulatorConfigExcelAddGeasId(builder, geasId)
def TacticTimeAttackSimulatorConfigExcelEnd(builder): return builder.EndObject()
def End(builder):
    return TacticTimeAttackSimulatorConfigExcelEnd(builder)