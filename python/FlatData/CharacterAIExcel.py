# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterAIExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterAIExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterAIExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterAIExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterAIExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def EngageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def Positioning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def CheckCanUseAutoSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterAIExcel
    def DistanceReduceRatioObstaclePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def DistanceReduceObstaclePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def DistanceReduceRatioFormationPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def DistanceReduceFormationPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def MinimumPositionGap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def CanUseObstacleOfKneelMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterAIExcel
    def CanUseObstacleOfStandMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterAIExcel
    def HasTargetSwitchingMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CharacterAIExcelStart(builder): builder.StartObject(12)
def Start(builder):
    return CharacterAIExcelStart(builder)
def CharacterAIExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return CharacterAIExcelAddId(builder, id)
def CharacterAIExcelAddEngageType(builder, engageType): builder.PrependInt32Slot(1, engageType, 0)
def AddEngageType(builder, engageType):
    return CharacterAIExcelAddEngageType(builder, engageType)
def CharacterAIExcelAddPositioning(builder, positioning): builder.PrependInt32Slot(2, positioning, 0)
def AddPositioning(builder, positioning):
    return CharacterAIExcelAddPositioning(builder, positioning)
def CharacterAIExcelAddCheckCanUseAutoSkill(builder, checkCanUseAutoSkill): builder.PrependBoolSlot(3, checkCanUseAutoSkill, 0)
def AddCheckCanUseAutoSkill(builder, checkCanUseAutoSkill):
    return CharacterAIExcelAddCheckCanUseAutoSkill(builder, checkCanUseAutoSkill)
def CharacterAIExcelAddDistanceReduceRatioObstaclePath(builder, distanceReduceRatioObstaclePath): builder.PrependInt64Slot(4, distanceReduceRatioObstaclePath, 0)
def AddDistanceReduceRatioObstaclePath(builder, distanceReduceRatioObstaclePath):
    return CharacterAIExcelAddDistanceReduceRatioObstaclePath(builder, distanceReduceRatioObstaclePath)
def CharacterAIExcelAddDistanceReduceObstaclePath(builder, distanceReduceObstaclePath): builder.PrependInt64Slot(5, distanceReduceObstaclePath, 0)
def AddDistanceReduceObstaclePath(builder, distanceReduceObstaclePath):
    return CharacterAIExcelAddDistanceReduceObstaclePath(builder, distanceReduceObstaclePath)
def CharacterAIExcelAddDistanceReduceRatioFormationPath(builder, distanceReduceRatioFormationPath): builder.PrependInt64Slot(6, distanceReduceRatioFormationPath, 0)
def AddDistanceReduceRatioFormationPath(builder, distanceReduceRatioFormationPath):
    return CharacterAIExcelAddDistanceReduceRatioFormationPath(builder, distanceReduceRatioFormationPath)
def CharacterAIExcelAddDistanceReduceFormationPath(builder, distanceReduceFormationPath): builder.PrependInt64Slot(7, distanceReduceFormationPath, 0)
def AddDistanceReduceFormationPath(builder, distanceReduceFormationPath):
    return CharacterAIExcelAddDistanceReduceFormationPath(builder, distanceReduceFormationPath)
def CharacterAIExcelAddMinimumPositionGap(builder, minimumPositionGap): builder.PrependInt64Slot(8, minimumPositionGap, 0)
def AddMinimumPositionGap(builder, minimumPositionGap):
    return CharacterAIExcelAddMinimumPositionGap(builder, minimumPositionGap)
def CharacterAIExcelAddCanUseObstacleOfKneelMotion(builder, canUseObstacleOfKneelMotion): builder.PrependBoolSlot(9, canUseObstacleOfKneelMotion, 0)
def AddCanUseObstacleOfKneelMotion(builder, canUseObstacleOfKneelMotion):
    return CharacterAIExcelAddCanUseObstacleOfKneelMotion(builder, canUseObstacleOfKneelMotion)
def CharacterAIExcelAddCanUseObstacleOfStandMotion(builder, canUseObstacleOfStandMotion): builder.PrependBoolSlot(10, canUseObstacleOfStandMotion, 0)
def AddCanUseObstacleOfStandMotion(builder, canUseObstacleOfStandMotion):
    return CharacterAIExcelAddCanUseObstacleOfStandMotion(builder, canUseObstacleOfStandMotion)
def CharacterAIExcelAddHasTargetSwitchingMotion(builder, hasTargetSwitchingMotion): builder.PrependBoolSlot(11, hasTargetSwitchingMotion, 0)
def AddHasTargetSwitchingMotion(builder, hasTargetSwitchingMotion):
    return CharacterAIExcelAddHasTargetSwitchingMotion(builder, hasTargetSwitchingMotion)
def CharacterAIExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterAIExcelEnd(builder)