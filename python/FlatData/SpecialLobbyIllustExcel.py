# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpecialLobbyIllustExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpecialLobbyIllustExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpecialLobbyIllustExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpecialLobbyIllustExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpecialLobbyIllustExcel
    def CharacterCostumeUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SpecialLobbyIllustExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpecialLobbyIllustExcel
    def PrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpecialLobbyIllustExcel
    def RewardTextureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpecialLobbyIllustExcel
    def SlotTextureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpecialLobbyIllustExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def SpecialLobbyIllustExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return SpecialLobbyIllustExcelStart(builder)
def SpecialLobbyIllustExcelAddCharacterCostumeUniqueId(builder, characterCostumeUniqueId): builder.PrependInt64Slot(0, characterCostumeUniqueId, 0)
def AddCharacterCostumeUniqueId(builder, characterCostumeUniqueId):
    return SpecialLobbyIllustExcelAddCharacterCostumeUniqueId(builder, characterCostumeUniqueId)
def SpecialLobbyIllustExcelAddDevName(builder, devName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(devName), 0)
def AddDevName(builder, devName):
    return SpecialLobbyIllustExcelAddDevName(builder, devName)
def SpecialLobbyIllustExcelAddPrefabName(builder, prefabName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(prefabName), 0)
def AddPrefabName(builder, prefabName):
    return SpecialLobbyIllustExcelAddPrefabName(builder, prefabName)
def SpecialLobbyIllustExcelAddRewardTextureName(builder, rewardTextureName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardTextureName), 0)
def AddRewardTextureName(builder, rewardTextureName):
    return SpecialLobbyIllustExcelAddRewardTextureName(builder, rewardTextureName)
def SpecialLobbyIllustExcelAddSlotTextureName(builder, slotTextureName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(slotTextureName), 0)
def AddSlotTextureName(builder, slotTextureName):
    return SpecialLobbyIllustExcelAddSlotTextureName(builder, slotTextureName)
def SpecialLobbyIllustExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(5, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return SpecialLobbyIllustExcelAddUniqueId(builder, uniqueId)
def SpecialLobbyIllustExcelEnd(builder): return builder.EndObject()
def End(builder):
    return SpecialLobbyIllustExcelEnd(builder)