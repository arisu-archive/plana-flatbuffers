# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LimitedStageSeasonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LimitedStageSeasonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLimitedStageSeasonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LimitedStageSeasonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LimitedStageSeasonExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageSeasonExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageSeasonExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageSeasonExcel
    def TypeACount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageSeasonExcel
    def TypeBCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageSeasonExcel
    def TypeCCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def LimitedStageSeasonExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return LimitedStageSeasonExcelStart(builder)
def LimitedStageSeasonExcelAddEndDate(builder, endDate): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)
def AddEndDate(builder, endDate):
    return LimitedStageSeasonExcelAddEndDate(builder, endDate)
def LimitedStageSeasonExcelAddId(builder, id): builder.PrependInt64Slot(1, id, 0)
def AddId(builder, id):
    return LimitedStageSeasonExcelAddId(builder, id)
def LimitedStageSeasonExcelAddStartDate(builder, startDate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)
def AddStartDate(builder, startDate):
    return LimitedStageSeasonExcelAddStartDate(builder, startDate)
def LimitedStageSeasonExcelAddTypeACount(builder, typeACount): builder.PrependInt64Slot(3, typeACount, 0)
def AddTypeACount(builder, typeACount):
    return LimitedStageSeasonExcelAddTypeACount(builder, typeACount)
def LimitedStageSeasonExcelAddTypeBCount(builder, typeBCount): builder.PrependInt64Slot(4, typeBCount, 0)
def AddTypeBCount(builder, typeBCount):
    return LimitedStageSeasonExcelAddTypeBCount(builder, typeBCount)
def LimitedStageSeasonExcelAddTypeCCount(builder, typeCCount): builder.PrependInt64Slot(5, typeCCount, 0)
def AddTypeCCount(builder, typeCCount):
    return LimitedStageSeasonExcelAddTypeCCount(builder, typeCCount)
def LimitedStageSeasonExcelEnd(builder): return builder.EndObject()
def End(builder):
    return LimitedStageSeasonExcelEnd(builder)