# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BattleLevelFactorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BattleLevelFactorExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBattleLevelFactorExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BattleLevelFactorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BattleLevelFactorExcel
    def LevelDiff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BattleLevelFactorExcel
    def DamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def BattleLevelFactorExcelStart(builder): builder.StartObject(2)
def Start(builder):
    return BattleLevelFactorExcelStart(builder)
def BattleLevelFactorExcelAddLevelDiff(builder, levelDiff): builder.PrependInt32Slot(0, levelDiff, 0)
def AddLevelDiff(builder, levelDiff):
    return BattleLevelFactorExcelAddLevelDiff(builder, levelDiff)
def BattleLevelFactorExcelAddDamageRate(builder, damageRate): builder.PrependInt64Slot(1, damageRate, 0)
def AddDamageRate(builder, damageRate):
    return BattleLevelFactorExcelAddDamageRate(builder, damageRate)
def BattleLevelFactorExcelEnd(builder): return builder.EndObject()
def End(builder):
    return BattleLevelFactorExcelEnd(builder)