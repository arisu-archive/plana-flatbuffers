# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstFieldExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstFieldExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstFieldExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstFieldExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstFieldExcel
    def DialogSmoothTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def TalkDialogDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def ThinkDialogDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def IdleThinkDelayMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def IdleThinkDelayMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstFieldExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return ConstFieldExcelStart(builder)
def ConstFieldExcelAddDialogSmoothTime(builder, dialogSmoothTime): builder.PrependInt32Slot(0, dialogSmoothTime, 0)
def AddDialogSmoothTime(builder, dialogSmoothTime):
    return ConstFieldExcelAddDialogSmoothTime(builder, dialogSmoothTime)
def ConstFieldExcelAddTalkDialogDurationDefault(builder, talkDialogDurationDefault): builder.PrependInt32Slot(1, talkDialogDurationDefault, 0)
def AddTalkDialogDurationDefault(builder, talkDialogDurationDefault):
    return ConstFieldExcelAddTalkDialogDurationDefault(builder, talkDialogDurationDefault)
def ConstFieldExcelAddThinkDialogDurationDefault(builder, thinkDialogDurationDefault): builder.PrependInt32Slot(2, thinkDialogDurationDefault, 0)
def AddThinkDialogDurationDefault(builder, thinkDialogDurationDefault):
    return ConstFieldExcelAddThinkDialogDurationDefault(builder, thinkDialogDurationDefault)
def ConstFieldExcelAddIdleThinkDelayMin(builder, idleThinkDelayMin): builder.PrependInt32Slot(3, idleThinkDelayMin, 0)
def AddIdleThinkDelayMin(builder, idleThinkDelayMin):
    return ConstFieldExcelAddIdleThinkDelayMin(builder, idleThinkDelayMin)
def ConstFieldExcelAddIdleThinkDelayMax(builder, idleThinkDelayMax): builder.PrependInt32Slot(4, idleThinkDelayMax, 0)
def AddIdleThinkDelayMax(builder, idleThinkDelayMax):
    return ConstFieldExcelAddIdleThinkDelayMax(builder, idleThinkDelayMax)
def ConstFieldExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConstFieldExcelEnd(builder)