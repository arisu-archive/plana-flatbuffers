# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LimitedStageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LimitedStageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLimitedStageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LimitedStageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LimitedStageExcel
    def ChallengeDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # LimitedStageExcel
    def BuffContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def InstantClear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # LimitedStageExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StrategyEnvironment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def BgmIdD0807648(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageExcel
    def RecommandLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def MaxTurn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StrategyMapBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageExcel
    def StrategyMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageExcel
    def ClearScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # LimitedStageExcel
    def ClearScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # LimitedStageExcel
    def ClearScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LimitedStageExcel
    def ClearScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # LimitedStageExcel
    def EnterScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # LimitedStageExcel
    def EnterScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # LimitedStageExcel
    def EnterScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LimitedStageExcel
    def EnterScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # LimitedStageExcel
    def StarConditionTurnCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StarConditionTacticRankSCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageEnterEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageEnterCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def OpenEventPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def OpenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def PrevStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def StageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageExcel
    def StageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LimitedStageExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LimitedStageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def LimitedStageExcelStart(builder): builder.StartObject(32)
def Start(builder):
    return LimitedStageExcelStart(builder)
def LimitedStageExcelAddChallengeDisplay(builder, challengeDisplay): builder.PrependBoolSlot(0, challengeDisplay, 0)
def AddChallengeDisplay(builder, challengeDisplay):
    return LimitedStageExcelAddChallengeDisplay(builder, challengeDisplay)
def LimitedStageExcelAddBuffContentId(builder, buffContentId): builder.PrependInt64Slot(1, buffContentId, 0)
def AddBuffContentId(builder, buffContentId):
    return LimitedStageExcelAddBuffContentId(builder, buffContentId)
def LimitedStageExcelAddInstantClear(builder, instantClear): builder.PrependBoolSlot(2, instantClear, 0)
def AddInstantClear(builder, instantClear):
    return LimitedStageExcelAddInstantClear(builder, instantClear)
def LimitedStageExcelAddBgmId(builder, bgmId): builder.PrependInt64Slot(3, bgmId, 0)
def AddBgmId(builder, bgmId):
    return LimitedStageExcelAddBgmId(builder, bgmId)
def LimitedStageExcelAddContentType(builder, contentType): builder.PrependInt32Slot(4, contentType, 0)
def AddContentType(builder, contentType):
    return LimitedStageExcelAddContentType(builder, contentType)
def LimitedStageExcelAddGroundId(builder, groundId): builder.PrependInt64Slot(5, groundId, 0)
def AddGroundId(builder, groundId):
    return LimitedStageExcelAddGroundId(builder, groundId)
def LimitedStageExcelAddStrategyEnvironment(builder, strategyEnvironment): builder.PrependInt32Slot(6, strategyEnvironment, 0)
def AddStrategyEnvironment(builder, strategyEnvironment):
    return LimitedStageExcelAddStrategyEnvironment(builder, strategyEnvironment)
def LimitedStageExcelAddBgmIdD0807648(builder, bgmIdD0807648): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(bgmIdD0807648), 0)
def AddBgmIdD0807648(builder, bgmIdD0807648):
    return LimitedStageExcelAddBgmIdD0807648(builder, bgmIdD0807648)
def LimitedStageExcelAddRecommandLevel(builder, recommandLevel): builder.PrependInt32Slot(8, recommandLevel, 0)
def AddRecommandLevel(builder, recommandLevel):
    return LimitedStageExcelAddRecommandLevel(builder, recommandLevel)
def LimitedStageExcelAddStageTopography(builder, stageTopography): builder.PrependInt32Slot(9, stageTopography, 0)
def AddStageTopography(builder, stageTopography):
    return LimitedStageExcelAddStageTopography(builder, stageTopography)
def LimitedStageExcelAddMaxTurn(builder, maxTurn): builder.PrependInt32Slot(10, maxTurn, 0)
def AddMaxTurn(builder, maxTurn):
    return LimitedStageExcelAddMaxTurn(builder, maxTurn)
def LimitedStageExcelAddStageRewardId(builder, stageRewardId): builder.PrependInt64Slot(11, stageRewardId, 0)
def AddStageRewardId(builder, stageRewardId):
    return LimitedStageExcelAddStageRewardId(builder, stageRewardId)
def LimitedStageExcelAddStrategyMapBg(builder, strategyMapBg): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(strategyMapBg), 0)
def AddStrategyMapBg(builder, strategyMapBg):
    return LimitedStageExcelAddStrategyMapBg(builder, strategyMapBg)
def LimitedStageExcelAddStrategyMap(builder, strategyMap): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(strategyMap), 0)
def AddStrategyMap(builder, strategyMap):
    return LimitedStageExcelAddStrategyMap(builder, strategyMap)
def LimitedStageExcelAddClearScenarioGroupId(builder, clearScenarioGroupId): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(clearScenarioGroupId), 0)
def AddClearScenarioGroupId(builder, clearScenarioGroupId):
    return LimitedStageExcelAddClearScenarioGroupId(builder, clearScenarioGroupId)
def LimitedStageExcelStartClearScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartClearScenarioGroupIdVector(builder, numElems):
    return LimitedStageExcelStartClearScenarioGroupIdVector(builder, numElems)
def LimitedStageExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(enterScenarioGroupId), 0)
def AddEnterScenarioGroupId(builder, enterScenarioGroupId):
    return LimitedStageExcelAddEnterScenarioGroupId(builder, enterScenarioGroupId)
def LimitedStageExcelStartEnterScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEnterScenarioGroupIdVector(builder, numElems):
    return LimitedStageExcelStartEnterScenarioGroupIdVector(builder, numElems)
def LimitedStageExcelAddStarConditionTurnCount(builder, starConditionTurnCount): builder.PrependInt64Slot(16, starConditionTurnCount, 0)
def AddStarConditionTurnCount(builder, starConditionTurnCount):
    return LimitedStageExcelAddStarConditionTurnCount(builder, starConditionTurnCount)
def LimitedStageExcelAddStarConditionTacticRankSCount(builder, starConditionTacticRankSCount): builder.PrependInt64Slot(17, starConditionTacticRankSCount, 0)
def AddStarConditionTacticRankSCount(builder, starConditionTacticRankSCount):
    return LimitedStageExcelAddStarConditionTacticRankSCount(builder, starConditionTacticRankSCount)
def LimitedStageExcelAddStageEnterEchelonCount(builder, stageEnterEchelonCount): builder.PrependInt32Slot(18, stageEnterEchelonCount, 0)
def AddStageEnterEchelonCount(builder, stageEnterEchelonCount):
    return LimitedStageExcelAddStageEnterEchelonCount(builder, stageEnterEchelonCount)
def LimitedStageExcelAddStageEnterCostAmount(builder, stageEnterCostAmount): builder.PrependInt32Slot(19, stageEnterCostAmount, 0)
def AddStageEnterCostAmount(builder, stageEnterCostAmount):
    return LimitedStageExcelAddStageEnterCostAmount(builder, stageEnterCostAmount)
def LimitedStageExcelAddStageEnterCostId(builder, stageEnterCostId): builder.PrependInt64Slot(20, stageEnterCostId, 0)
def AddStageEnterCostId(builder, stageEnterCostId):
    return LimitedStageExcelAddStageEnterCostId(builder, stageEnterCostId)
def LimitedStageExcelAddStageEnterCostType(builder, stageEnterCostType): builder.PrependInt32Slot(21, stageEnterCostType, 0)
def AddStageEnterCostType(builder, stageEnterCostType):
    return LimitedStageExcelAddStageEnterCostType(builder, stageEnterCostType)
def LimitedStageExcelAddBattleDuration(builder, battleDuration): builder.PrependInt64Slot(22, battleDuration, 0)
def AddBattleDuration(builder, battleDuration):
    return LimitedStageExcelAddBattleDuration(builder, battleDuration)
def LimitedStageExcelAddOpenEventPoint(builder, openEventPoint): builder.PrependInt64Slot(23, openEventPoint, 0)
def AddOpenEventPoint(builder, openEventPoint):
    return LimitedStageExcelAddOpenEventPoint(builder, openEventPoint)
def LimitedStageExcelAddOpenDate(builder, openDate): builder.PrependInt64Slot(24, openDate, 0)
def AddOpenDate(builder, openDate):
    return LimitedStageExcelAddOpenDate(builder, openDate)
def LimitedStageExcelAddPrevStageId(builder, prevStageId): builder.PrependInt64Slot(25, prevStageId, 0)
def AddPrevStageId(builder, prevStageId):
    return LimitedStageExcelAddPrevStageId(builder, prevStageId)
def LimitedStageExcelAddStageDisplay(builder, stageDisplay): builder.PrependInt32Slot(26, stageDisplay, 0)
def AddStageDisplay(builder, stageDisplay):
    return LimitedStageExcelAddStageDisplay(builder, stageDisplay)
def LimitedStageExcelAddStageNumber(builder, stageNumber): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(stageNumber), 0)
def AddStageNumber(builder, stageNumber):
    return LimitedStageExcelAddStageNumber(builder, stageNumber)
def LimitedStageExcelAddStageDifficulty(builder, stageDifficulty): builder.PrependInt32Slot(28, stageDifficulty, 0)
def AddStageDifficulty(builder, stageDifficulty):
    return LimitedStageExcelAddStageDifficulty(builder, stageDifficulty)
def LimitedStageExcelAddSeasonId(builder, seasonId): builder.PrependInt64Slot(29, seasonId, 0)
def AddSeasonId(builder, seasonId):
    return LimitedStageExcelAddSeasonId(builder, seasonId)
def LimitedStageExcelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return LimitedStageExcelAddName(builder, name)
def LimitedStageExcelAddId(builder, id): builder.PrependInt64Slot(31, id, 0)
def AddId(builder, id):
    return LimitedStageExcelAddId(builder, id)
def LimitedStageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return LimitedStageExcelEnd(builder)