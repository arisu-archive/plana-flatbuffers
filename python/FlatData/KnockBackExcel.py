# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KnockBackExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KnockBackExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKnockBackExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KnockBackExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KnockBackExcel
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # KnockBackExcel
    def Dist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # KnockBackExcel
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def KnockBackExcelStart(builder): builder.StartObject(3)
def Start(builder):
    return KnockBackExcelStart(builder)
def KnockBackExcelAddSpeed(builder, speed): builder.PrependFloat32Slot(0, speed, 0.0)
def AddSpeed(builder, speed):
    return KnockBackExcelAddSpeed(builder, speed)
def KnockBackExcelAddDist(builder, dist): builder.PrependFloat32Slot(1, dist, 0.0)
def AddDist(builder, dist):
    return KnockBackExcelAddDist(builder, dist)
def KnockBackExcelAddIndex(builder, index): builder.PrependInt64Slot(2, index, 0)
def AddIndex(builder, index):
    return KnockBackExcelAddIndex(builder, index)
def KnockBackExcelEnd(builder): return builder.EndObject()
def End(builder):
    return KnockBackExcelEnd(builder)