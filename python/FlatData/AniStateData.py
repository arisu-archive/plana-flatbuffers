# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AniStateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AniStateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAniStateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AniStateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AniStateData
    def StateName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AniStateData
    def StatePrefix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AniStateData
    def StateNameWithPrefix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AniStateData
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AniStateData
    def SpeedParameterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AniStateData
    def SpeedParamter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AniStateData
    def StateSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AniStateData
    def ClipName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AniStateData
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AniStateData
    def FrameRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AniStateData
    def IsLooping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AniStateData
    def Events(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatData.AniEventData import AniEventData
            obj = AniEventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AniStateData
    def EventsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AniStateData
    def EventsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def AniStateDataStart(builder):
    builder.StartObject(12)

def Start(builder):
    AniStateDataStart(builder)

def AniStateDataAddStateName(builder, stateName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stateName), 0)

def AddStateName(builder, stateName):
    AniStateDataAddStateName(builder, stateName)

def AniStateDataAddStatePrefix(builder, statePrefix):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(statePrefix), 0)

def AddStatePrefix(builder, statePrefix):
    AniStateDataAddStatePrefix(builder, statePrefix)

def AniStateDataAddStateNameWithPrefix(builder, stateNameWithPrefix):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stateNameWithPrefix), 0)

def AddStateNameWithPrefix(builder, stateNameWithPrefix):
    AniStateDataAddStateNameWithPrefix(builder, stateNameWithPrefix)

def AniStateDataAddTag(builder, tag):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tag), 0)

def AddTag(builder, tag):
    AniStateDataAddTag(builder, tag)

def AniStateDataAddSpeedParameterName(builder, speedParameterName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(speedParameterName), 0)

def AddSpeedParameterName(builder, speedParameterName):
    AniStateDataAddSpeedParameterName(builder, speedParameterName)

def AniStateDataAddSpeedParamter(builder, speedParamter):
    builder.PrependFloat32Slot(5, speedParamter, 0.0)

def AddSpeedParamter(builder, speedParamter):
    AniStateDataAddSpeedParamter(builder, speedParamter)

def AniStateDataAddStateSpeed(builder, stateSpeed):
    builder.PrependFloat32Slot(6, stateSpeed, 0.0)

def AddStateSpeed(builder, stateSpeed):
    AniStateDataAddStateSpeed(builder, stateSpeed)

def AniStateDataAddClipName(builder, clipName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(clipName), 0)

def AddClipName(builder, clipName):
    AniStateDataAddClipName(builder, clipName)

def AniStateDataAddLength(builder, length):
    builder.PrependFloat32Slot(8, length, 0.0)

def AddLength(builder, length):
    AniStateDataAddLength(builder, length)

def AniStateDataAddFrameRate(builder, frameRate):
    builder.PrependFloat32Slot(9, frameRate, 0.0)

def AddFrameRate(builder, frameRate):
    AniStateDataAddFrameRate(builder, frameRate)

def AniStateDataAddIsLooping(builder, isLooping):
    builder.PrependBoolSlot(10, isLooping, 0)

def AddIsLooping(builder, isLooping):
    AniStateDataAddIsLooping(builder, isLooping)

def AniStateDataAddEvents(builder, events):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(events), 0)

def AddEvents(builder, events):
    AniStateDataAddEvents(builder, events)

def AniStateDataStartEventsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEventsVector(builder, numElems):
    return AniStateDataStartEventsVector(builder, numElems)

def AniStateDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return AniStateDataEnd(builder)
