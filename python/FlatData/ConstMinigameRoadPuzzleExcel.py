# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstMinigameRoadPuzzleExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstMinigameRoadPuzzleExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstMinigameRoadPuzzleExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstMinigameRoadPuzzleExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstMinigameRoadPuzzleExcel
    def RoadPuzzleMapBoundaryOffsetLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def RoadPuzzleMapBoundaryOffsetRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def RoadPuzzleMapBoundaryOffsetTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def RoadPuzzleMapBoundaryOffsetBottom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def RoadPuzzleMapCenterOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def RoadPuzzleMapCenterOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def CameraAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def CameraZoomMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def CameraZoomMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def CameraZoomDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def StageLoadingProgressTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameRoadPuzzleExcel
    def TileRotationDegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameRoadPuzzleExcel
    def StartStageIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameRoadPuzzleExcel
    def LoopStageIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstMinigameRoadPuzzleExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return ConstMinigameRoadPuzzleExcelStart(builder)
def ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetLeft(builder, roadPuzzleMapBoundaryOffsetLeft): builder.PrependFloat32Slot(0, roadPuzzleMapBoundaryOffsetLeft, 0.0)
def AddRoadPuzzleMapBoundaryOffsetLeft(builder, roadPuzzleMapBoundaryOffsetLeft):
    return ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetLeft(builder, roadPuzzleMapBoundaryOffsetLeft)
def ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetRight(builder, roadPuzzleMapBoundaryOffsetRight): builder.PrependFloat32Slot(1, roadPuzzleMapBoundaryOffsetRight, 0.0)
def AddRoadPuzzleMapBoundaryOffsetRight(builder, roadPuzzleMapBoundaryOffsetRight):
    return ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetRight(builder, roadPuzzleMapBoundaryOffsetRight)
def ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetTop(builder, roadPuzzleMapBoundaryOffsetTop): builder.PrependFloat32Slot(2, roadPuzzleMapBoundaryOffsetTop, 0.0)
def AddRoadPuzzleMapBoundaryOffsetTop(builder, roadPuzzleMapBoundaryOffsetTop):
    return ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetTop(builder, roadPuzzleMapBoundaryOffsetTop)
def ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetBottom(builder, roadPuzzleMapBoundaryOffsetBottom): builder.PrependFloat32Slot(3, roadPuzzleMapBoundaryOffsetBottom, 0.0)
def AddRoadPuzzleMapBoundaryOffsetBottom(builder, roadPuzzleMapBoundaryOffsetBottom):
    return ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapBoundaryOffsetBottom(builder, roadPuzzleMapBoundaryOffsetBottom)
def ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetX(builder, roadPuzzleMapCenterOffsetX): builder.PrependFloat32Slot(4, roadPuzzleMapCenterOffsetX, 0.0)
def AddRoadPuzzleMapCenterOffsetX(builder, roadPuzzleMapCenterOffsetX):
    return ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetX(builder, roadPuzzleMapCenterOffsetX)
def ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetY(builder, roadPuzzleMapCenterOffsetY): builder.PrependFloat32Slot(5, roadPuzzleMapCenterOffsetY, 0.0)
def AddRoadPuzzleMapCenterOffsetY(builder, roadPuzzleMapCenterOffsetY):
    return ConstMinigameRoadPuzzleExcelAddRoadPuzzleMapCenterOffsetY(builder, roadPuzzleMapCenterOffsetY)
def ConstMinigameRoadPuzzleExcelAddCameraAngle(builder, cameraAngle): builder.PrependFloat32Slot(6, cameraAngle, 0.0)
def AddCameraAngle(builder, cameraAngle):
    return ConstMinigameRoadPuzzleExcelAddCameraAngle(builder, cameraAngle)
def ConstMinigameRoadPuzzleExcelAddCameraZoomMax(builder, cameraZoomMax): builder.PrependFloat32Slot(7, cameraZoomMax, 0.0)
def AddCameraZoomMax(builder, cameraZoomMax):
    return ConstMinigameRoadPuzzleExcelAddCameraZoomMax(builder, cameraZoomMax)
def ConstMinigameRoadPuzzleExcelAddCameraZoomMin(builder, cameraZoomMin): builder.PrependFloat32Slot(8, cameraZoomMin, 0.0)
def AddCameraZoomMin(builder, cameraZoomMin):
    return ConstMinigameRoadPuzzleExcelAddCameraZoomMin(builder, cameraZoomMin)
def ConstMinigameRoadPuzzleExcelAddCameraZoomDefault(builder, cameraZoomDefault): builder.PrependFloat32Slot(9, cameraZoomDefault, 0.0)
def AddCameraZoomDefault(builder, cameraZoomDefault):
    return ConstMinigameRoadPuzzleExcelAddCameraZoomDefault(builder, cameraZoomDefault)
def ConstMinigameRoadPuzzleExcelAddStageLoadingProgressTime(builder, stageLoadingProgressTime): builder.PrependFloat32Slot(10, stageLoadingProgressTime, 0.0)
def AddStageLoadingProgressTime(builder, stageLoadingProgressTime):
    return ConstMinigameRoadPuzzleExcelAddStageLoadingProgressTime(builder, stageLoadingProgressTime)
def ConstMinigameRoadPuzzleExcelAddTileRotationDegree(builder, tileRotationDegree): builder.PrependInt32Slot(11, tileRotationDegree, 0)
def AddTileRotationDegree(builder, tileRotationDegree):
    return ConstMinigameRoadPuzzleExcelAddTileRotationDegree(builder, tileRotationDegree)
def ConstMinigameRoadPuzzleExcelAddStartStageIndex(builder, startStageIndex): builder.PrependInt32Slot(12, startStageIndex, 0)
def AddStartStageIndex(builder, startStageIndex):
    return ConstMinigameRoadPuzzleExcelAddStartStageIndex(builder, startStageIndex)
def ConstMinigameRoadPuzzleExcelAddLoopStageIndex(builder, loopStageIndex): builder.PrependInt32Slot(13, loopStageIndex, 0)
def AddLoopStageIndex(builder, loopStageIndex):
    return ConstMinigameRoadPuzzleExcelAddLoopStageIndex(builder, loopStageIndex)
def ConstMinigameRoadPuzzleExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConstMinigameRoadPuzzleExcelEnd(builder)