# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstCommonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstCommonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstCommonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstCommonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstCommonExcel
    def CafeSummonTicketBuyLimitForValidate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeCameraDragThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCommonExcel
    def BattlePassExpIconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCommonExcel
    def BattlePassEndImminentDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BattlePassFlavorTextIdleDurationMilliSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ExpiryBattlePassItemReceiveDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RankBracketPercentage1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeTravelSyncIntervalByMillisec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeRandomVisitMinLastLogin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeRandomVisitMinComfortBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MaxBlockedUserCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AssistStrangerMaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AssistStrangerMinLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PotentialOpenConditionCharacterLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PotentialBonusStatMaxLevelHealPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PotentialBonusStatMaxLevelAttackPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PotentialBonusStatMaxLevelMaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharacterMaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeckShowCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeckWorldRaidSaveConditionCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeckAverageDeckCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BirthdayMailParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BirthdayMailParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BirthdayMailParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BirthdayMailRemainDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BirthdayMailStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCommonExcel
    def EmblemDefaultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RenewalDisplayOrderDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BeforehandGachaGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BeforehandGachaCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharProfilePopupRowIntervalJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharProfilePopupRowIntervalKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharProfileRowIntervalJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharProfileRowIntervalKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FormationPresetEchelonSlotTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FormationPresetEchelonTabTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FormationPresetRecentNumberOfEchelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FormationPresetNumberOfEchelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FormationPresetNumberOfEchelonTab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FriendIdCardCommentMaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def WorldRaidGemEnterAmout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def WorldRaidGemEnterCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def IdCardDefaultBgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def IdCardDefaultCharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FriendsMaxApplicant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FriendsSearchRequestCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MaxFriendsRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MaxFriendsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def DDosCheckIntervalInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def DDosDetectCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RecommendedFriendsLvDifferenceLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BirthDayDDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharacterEquipmentGearSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftOpenExpTier3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftOpenExpTier2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftOpenExpTier1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MaxApMasterCoinPerWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CommonFavorItemTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ConstCommonExcel
    def CommonFavorItemTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ConstCommonExcel
    def CommonFavorItemTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstCommonExcel
    def CommonFavorItemTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        return o == 0

    # ConstCommonExcel
    def MonthlyProductRepurchasePopupLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClanLeaderTransferLastLoginLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TimeAttackDungeonEnterCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TimeAttackDungeonEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TimeAttackDungeonEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TimeAttackDungoenPlayCountPerTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TimeAttackDungeonScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCommonExcel
    def RaidTicketCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RaidEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RaidEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ShowRaidMyListCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def WeaponLvUpCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MonthlyProductCheckDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AccountLinkReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LimitedStagePointPerApMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LimitedStagePointPerApMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LimitedStagePointAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LimitedStageEntryTimeBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LimitedStageEntryTimeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LimitedStageDailyClearCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeSummonCoolTimeFromHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AccountCommentMaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ExtraPassiveSkillLevelMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PassiveSkillLevelMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PublicSkillLevelMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ExSkillLevelMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeck3StarViewCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeck2StarViewCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeck1StarViewCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeckNoStarViewCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClearDeckStorageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MailStorageHardCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MailStorageSoftCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RequestTimeOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCommonExcel
    def UiLabelCharacterWrap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCommonExcel
    def PostExpiredDayGameManager(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(202))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PostExpiredDayInventoryOverflow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PostExpiredDayAttendance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftBaseGoldRequired(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConstCommonExcel
    def CraftBaseGoldRequiredAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConstCommonExcel
    def CraftBaseGoldRequiredLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstCommonExcel
    def CraftBaseGoldRequiredIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        return o == 0

    # ConstCommonExcel
    def RaidOpponentListAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def RaidTacticPlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def WeekDungoenTacticPlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(214))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AdventureStrategyPlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(216))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TutorialShopCategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(218))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TutorialCharacterDefaultCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(220))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TutorialSpeedButtonStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(222))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TutorialHardStage11(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(224))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PrologueScenarioId02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(226))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def PrologueScenarioId01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(228))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ScreenshotToLobbyButtonHideDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(230))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def LobbyToScreenModeWaitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(232))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CallNameMaximumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(234))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CallNameMinimumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(236))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CallNameRenameCoolTimeFromHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(238))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClanWordBalloonMaxCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(240))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClanRejoinCoolTimeFromSecond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(242))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClanMaxApplicant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(244))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClanSearchResultCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(246))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ClanMaxMember(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(248))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def JoinOrCreateClanCoolTimeFromHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(250))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ScenarioAutoDelayMillisec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(252))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCommonExcel
    def EquipmentSlotOpenLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(254))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ConstCommonExcel
    def EquipmentSlotOpenLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(254))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ConstCommonExcel
    def EquipmentSlotOpenLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(254))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstCommonExcel
    def EquipmentSlotOpenLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(254))
        return o == 0

    # ConstCommonExcel
    def TutorialGachaGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(256))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BeforehandGachaShopId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(258))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TutorialGachaShopId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(260))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftLeafNodeGenerateLv2Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(262))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftLeafNodeGenerateLv1Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(264))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MassangerMessageExpireDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(266))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AcademyTicketCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(268))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AcademyEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(270))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AcademyEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(272))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftTicketConsumeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(274))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftTicketItemUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(276))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ShiftingCraftSlotMaxCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(278))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ShiftingCraftTicketConsumeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(280))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ShiftingCraftDuration(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(282))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ConstCommonExcel
    def ShiftingCraftDurationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(282))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ConstCommonExcel
    def ShiftingCraftDurationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(282))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstCommonExcel
    def ShiftingCraftDurationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(282))
        return o == 0

    # ConstCommonExcel
    def CraftLimitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(284))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CraftDuration(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(286))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ConstCommonExcel
    def CraftDurationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(286))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ConstCommonExcel
    def CraftDurationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(286))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstCommonExcel
    def CraftDurationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(286))
        return o == 0

    # ConstCommonExcel
    def NicknameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(288))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def EquipLvUpCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(290))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ExpEquipInsertLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(292))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def EquipmentLvUpCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(294))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CharacterLvUpCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(296))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ExpItemInsertAccelTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(298))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def ExpItemInsertLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(300))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MissionToastLifeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(302))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AccountExpRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(304))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def SupportSquadExpBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(306))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def MainSquadExpBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(308))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AccountMaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(310))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def EnterDeposit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(312))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def StageFailedCurrencyRefundRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(314))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def WeekDungeonFindGiftRewardLimitCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(316))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeSetGroupApplyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(318))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeProductionDecimalPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(320))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeAutoChargePeriodInMsc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(322))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def FindGiftTimeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(324))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeBubbleIdleDurationMilliSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(326))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeMonologueDefaultDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(328))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafeMonologueIntervalMillisec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(330))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CafePresetSlotCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(332))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def AcademyFavorZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(334))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def GachaPercentage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(336))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def BaseTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(338))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def TacticRankClearTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(340))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def HardStageCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(342))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def HardAdventurePlayCountRecoverDailyNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(344))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CampaignMainStageBestRecord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(346))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCommonExcel
    def CampaignMainStageMaxRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(348))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstCommonExcelStart(builder): builder.StartObject(173)
def Start(builder):
    return ConstCommonExcelStart(builder)
def ConstCommonExcelAddCafeSummonTicketBuyLimitForValidate(builder, cafeSummonTicketBuyLimitForValidate): builder.PrependInt32Slot(0, cafeSummonTicketBuyLimitForValidate, 0)
def AddCafeSummonTicketBuyLimitForValidate(builder, cafeSummonTicketBuyLimitForValidate):
    return ConstCommonExcelAddCafeSummonTicketBuyLimitForValidate(builder, cafeSummonTicketBuyLimitForValidate)
def ConstCommonExcelAddCafeCameraDragThreshold(builder, cafeCameraDragThreshold): builder.PrependFloat32Slot(1, cafeCameraDragThreshold, 0.0)
def AddCafeCameraDragThreshold(builder, cafeCameraDragThreshold):
    return ConstCommonExcelAddCafeCameraDragThreshold(builder, cafeCameraDragThreshold)
def ConstCommonExcelAddBattlePassExpIconPath(builder, battlePassExpIconPath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(battlePassExpIconPath), 0)
def AddBattlePassExpIconPath(builder, battlePassExpIconPath):
    return ConstCommonExcelAddBattlePassExpIconPath(builder, battlePassExpIconPath)
def ConstCommonExcelAddBattlePassEndImminentDay(builder, battlePassEndImminentDay): builder.PrependInt32Slot(3, battlePassEndImminentDay, 0)
def AddBattlePassEndImminentDay(builder, battlePassEndImminentDay):
    return ConstCommonExcelAddBattlePassEndImminentDay(builder, battlePassEndImminentDay)
def ConstCommonExcelAddBattlePassFlavorTextIdleDurationMilliSec(builder, battlePassFlavorTextIdleDurationMilliSec): builder.PrependInt64Slot(4, battlePassFlavorTextIdleDurationMilliSec, 0)
def AddBattlePassFlavorTextIdleDurationMilliSec(builder, battlePassFlavorTextIdleDurationMilliSec):
    return ConstCommonExcelAddBattlePassFlavorTextIdleDurationMilliSec(builder, battlePassFlavorTextIdleDurationMilliSec)
def ConstCommonExcelAddExpiryBattlePassItemReceiveDay(builder, expiryBattlePassItemReceiveDay): builder.PrependInt32Slot(5, expiryBattlePassItemReceiveDay, 0)
def AddExpiryBattlePassItemReceiveDay(builder, expiryBattlePassItemReceiveDay):
    return ConstCommonExcelAddExpiryBattlePassItemReceiveDay(builder, expiryBattlePassItemReceiveDay)
def ConstCommonExcelAddRankBracketPercentage7(builder, rankBracketPercentage7): builder.PrependInt32Slot(6, rankBracketPercentage7, 0)
def AddRankBracketPercentage7(builder, rankBracketPercentage7):
    return ConstCommonExcelAddRankBracketPercentage7(builder, rankBracketPercentage7)
def ConstCommonExcelAddRankBracketPercentage6(builder, rankBracketPercentage6): builder.PrependInt32Slot(7, rankBracketPercentage6, 0)
def AddRankBracketPercentage6(builder, rankBracketPercentage6):
    return ConstCommonExcelAddRankBracketPercentage6(builder, rankBracketPercentage6)
def ConstCommonExcelAddRankBracketPercentage5(builder, rankBracketPercentage5): builder.PrependInt32Slot(8, rankBracketPercentage5, 0)
def AddRankBracketPercentage5(builder, rankBracketPercentage5):
    return ConstCommonExcelAddRankBracketPercentage5(builder, rankBracketPercentage5)
def ConstCommonExcelAddRankBracketPercentage4(builder, rankBracketPercentage4): builder.PrependInt32Slot(9, rankBracketPercentage4, 0)
def AddRankBracketPercentage4(builder, rankBracketPercentage4):
    return ConstCommonExcelAddRankBracketPercentage4(builder, rankBracketPercentage4)
def ConstCommonExcelAddRankBracketPercentage3(builder, rankBracketPercentage3): builder.PrependInt32Slot(10, rankBracketPercentage3, 0)
def AddRankBracketPercentage3(builder, rankBracketPercentage3):
    return ConstCommonExcelAddRankBracketPercentage3(builder, rankBracketPercentage3)
def ConstCommonExcelAddRankBracketPercentage2(builder, rankBracketPercentage2): builder.PrependInt32Slot(11, rankBracketPercentage2, 0)
def AddRankBracketPercentage2(builder, rankBracketPercentage2):
    return ConstCommonExcelAddRankBracketPercentage2(builder, rankBracketPercentage2)
def ConstCommonExcelAddRankBracketPercentage1(builder, rankBracketPercentage1): builder.PrependInt32Slot(12, rankBracketPercentage1, 0)
def AddRankBracketPercentage1(builder, rankBracketPercentage1):
    return ConstCommonExcelAddRankBracketPercentage1(builder, rankBracketPercentage1)
def ConstCommonExcelAddCafeTravelSyncIntervalByMillisec(builder, cafeTravelSyncIntervalByMillisec): builder.PrependInt32Slot(13, cafeTravelSyncIntervalByMillisec, 0)
def AddCafeTravelSyncIntervalByMillisec(builder, cafeTravelSyncIntervalByMillisec):
    return ConstCommonExcelAddCafeTravelSyncIntervalByMillisec(builder, cafeTravelSyncIntervalByMillisec)
def ConstCommonExcelAddCafeRandomVisitMinLastLogin(builder, cafeRandomVisitMinLastLogin): builder.PrependInt32Slot(14, cafeRandomVisitMinLastLogin, 0)
def AddCafeRandomVisitMinLastLogin(builder, cafeRandomVisitMinLastLogin):
    return ConstCommonExcelAddCafeRandomVisitMinLastLogin(builder, cafeRandomVisitMinLastLogin)
def ConstCommonExcelAddCafeRandomVisitMinComfortBonus(builder, cafeRandomVisitMinComfortBonus): builder.PrependInt64Slot(15, cafeRandomVisitMinComfortBonus, 0)
def AddCafeRandomVisitMinComfortBonus(builder, cafeRandomVisitMinComfortBonus):
    return ConstCommonExcelAddCafeRandomVisitMinComfortBonus(builder, cafeRandomVisitMinComfortBonus)
def ConstCommonExcelAddMaxBlockedUserCount(builder, maxBlockedUserCount): builder.PrependInt32Slot(16, maxBlockedUserCount, 0)
def AddMaxBlockedUserCount(builder, maxBlockedUserCount):
    return ConstCommonExcelAddMaxBlockedUserCount(builder, maxBlockedUserCount)
def ConstCommonExcelAddAssistStrangerMaxLevel(builder, assistStrangerMaxLevel): builder.PrependInt32Slot(17, assistStrangerMaxLevel, 0)
def AddAssistStrangerMaxLevel(builder, assistStrangerMaxLevel):
    return ConstCommonExcelAddAssistStrangerMaxLevel(builder, assistStrangerMaxLevel)
def ConstCommonExcelAddAssistStrangerMinLevel(builder, assistStrangerMinLevel): builder.PrependInt32Slot(18, assistStrangerMinLevel, 0)
def AddAssistStrangerMinLevel(builder, assistStrangerMinLevel):
    return ConstCommonExcelAddAssistStrangerMinLevel(builder, assistStrangerMinLevel)
def ConstCommonExcelAddPotentialOpenConditionCharacterLevel(builder, potentialOpenConditionCharacterLevel): builder.PrependInt32Slot(19, potentialOpenConditionCharacterLevel, 0)
def AddPotentialOpenConditionCharacterLevel(builder, potentialOpenConditionCharacterLevel):
    return ConstCommonExcelAddPotentialOpenConditionCharacterLevel(builder, potentialOpenConditionCharacterLevel)
def ConstCommonExcelAddPotentialBonusStatMaxLevelHealPower(builder, potentialBonusStatMaxLevelHealPower): builder.PrependInt32Slot(20, potentialBonusStatMaxLevelHealPower, 0)
def AddPotentialBonusStatMaxLevelHealPower(builder, potentialBonusStatMaxLevelHealPower):
    return ConstCommonExcelAddPotentialBonusStatMaxLevelHealPower(builder, potentialBonusStatMaxLevelHealPower)
def ConstCommonExcelAddPotentialBonusStatMaxLevelAttackPower(builder, potentialBonusStatMaxLevelAttackPower): builder.PrependInt32Slot(21, potentialBonusStatMaxLevelAttackPower, 0)
def AddPotentialBonusStatMaxLevelAttackPower(builder, potentialBonusStatMaxLevelAttackPower):
    return ConstCommonExcelAddPotentialBonusStatMaxLevelAttackPower(builder, potentialBonusStatMaxLevelAttackPower)
def ConstCommonExcelAddPotentialBonusStatMaxLevelMaxHp(builder, potentialBonusStatMaxLevelMaxHp): builder.PrependInt32Slot(22, potentialBonusStatMaxLevelMaxHp, 0)
def AddPotentialBonusStatMaxLevelMaxHp(builder, potentialBonusStatMaxLevelMaxHp):
    return ConstCommonExcelAddPotentialBonusStatMaxLevelMaxHp(builder, potentialBonusStatMaxLevelMaxHp)
def ConstCommonExcelAddCharacterMaxLevel(builder, characterMaxLevel): builder.PrependInt32Slot(23, characterMaxLevel, 0)
def AddCharacterMaxLevel(builder, characterMaxLevel):
    return ConstCommonExcelAddCharacterMaxLevel(builder, characterMaxLevel)
def ConstCommonExcelAddClearDeckShowCount(builder, clearDeckShowCount): builder.PrependInt32Slot(24, clearDeckShowCount, 0)
def AddClearDeckShowCount(builder, clearDeckShowCount):
    return ConstCommonExcelAddClearDeckShowCount(builder, clearDeckShowCount)
def ConstCommonExcelAddClearDeckWorldRaidSaveConditionCoefficient(builder, clearDeckWorldRaidSaveConditionCoefficient): builder.PrependInt32Slot(25, clearDeckWorldRaidSaveConditionCoefficient, 0)
def AddClearDeckWorldRaidSaveConditionCoefficient(builder, clearDeckWorldRaidSaveConditionCoefficient):
    return ConstCommonExcelAddClearDeckWorldRaidSaveConditionCoefficient(builder, clearDeckWorldRaidSaveConditionCoefficient)
def ConstCommonExcelAddClearDeckAverageDeckCount(builder, clearDeckAverageDeckCount): builder.PrependInt32Slot(26, clearDeckAverageDeckCount, 0)
def AddClearDeckAverageDeckCount(builder, clearDeckAverageDeckCount):
    return ConstCommonExcelAddClearDeckAverageDeckCount(builder, clearDeckAverageDeckCount)
def ConstCommonExcelAddBirthdayMailParcelAmount(builder, birthdayMailParcelAmount): builder.PrependInt32Slot(27, birthdayMailParcelAmount, 0)
def AddBirthdayMailParcelAmount(builder, birthdayMailParcelAmount):
    return ConstCommonExcelAddBirthdayMailParcelAmount(builder, birthdayMailParcelAmount)
def ConstCommonExcelAddBirthdayMailParcelId(builder, birthdayMailParcelId): builder.PrependInt64Slot(28, birthdayMailParcelId, 0)
def AddBirthdayMailParcelId(builder, birthdayMailParcelId):
    return ConstCommonExcelAddBirthdayMailParcelId(builder, birthdayMailParcelId)
def ConstCommonExcelAddBirthdayMailParcelType(builder, birthdayMailParcelType): builder.PrependInt32Slot(29, birthdayMailParcelType, 0)
def AddBirthdayMailParcelType(builder, birthdayMailParcelType):
    return ConstCommonExcelAddBirthdayMailParcelType(builder, birthdayMailParcelType)
def ConstCommonExcelAddBirthdayMailRemainDate(builder, birthdayMailRemainDate): builder.PrependInt32Slot(30, birthdayMailRemainDate, 0)
def AddBirthdayMailRemainDate(builder, birthdayMailRemainDate):
    return ConstCommonExcelAddBirthdayMailRemainDate(builder, birthdayMailRemainDate)
def ConstCommonExcelAddBirthdayMailStartDate(builder, birthdayMailStartDate): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(birthdayMailStartDate), 0)
def AddBirthdayMailStartDate(builder, birthdayMailStartDate):
    return ConstCommonExcelAddBirthdayMailStartDate(builder, birthdayMailStartDate)
def ConstCommonExcelAddEmblemDefaultId(builder, emblemDefaultId): builder.PrependInt64Slot(32, emblemDefaultId, 0)
def AddEmblemDefaultId(builder, emblemDefaultId):
    return ConstCommonExcelAddEmblemDefaultId(builder, emblemDefaultId)
def ConstCommonExcelAddRenewalDisplayOrderDay(builder, renewalDisplayOrderDay): builder.PrependInt32Slot(33, renewalDisplayOrderDay, 0)
def AddRenewalDisplayOrderDay(builder, renewalDisplayOrderDay):
    return ConstCommonExcelAddRenewalDisplayOrderDay(builder, renewalDisplayOrderDay)
def ConstCommonExcelAddBeforehandGachaGroupId(builder, beforehandGachaGroupId): builder.PrependInt32Slot(34, beforehandGachaGroupId, 0)
def AddBeforehandGachaGroupId(builder, beforehandGachaGroupId):
    return ConstCommonExcelAddBeforehandGachaGroupId(builder, beforehandGachaGroupId)
def ConstCommonExcelAddBeforehandGachaCount(builder, beforehandGachaCount): builder.PrependInt32Slot(35, beforehandGachaCount, 0)
def AddBeforehandGachaCount(builder, beforehandGachaCount):
    return ConstCommonExcelAddBeforehandGachaCount(builder, beforehandGachaCount)
def ConstCommonExcelAddCharProfilePopupRowIntervalJp(builder, charProfilePopupRowIntervalJp): builder.PrependInt32Slot(36, charProfilePopupRowIntervalJp, 0)
def AddCharProfilePopupRowIntervalJp(builder, charProfilePopupRowIntervalJp):
    return ConstCommonExcelAddCharProfilePopupRowIntervalJp(builder, charProfilePopupRowIntervalJp)
def ConstCommonExcelAddCharProfilePopupRowIntervalKr(builder, charProfilePopupRowIntervalKr): builder.PrependInt32Slot(37, charProfilePopupRowIntervalKr, 0)
def AddCharProfilePopupRowIntervalKr(builder, charProfilePopupRowIntervalKr):
    return ConstCommonExcelAddCharProfilePopupRowIntervalKr(builder, charProfilePopupRowIntervalKr)
def ConstCommonExcelAddCharProfileRowIntervalJp(builder, charProfileRowIntervalJp): builder.PrependInt32Slot(38, charProfileRowIntervalJp, 0)
def AddCharProfileRowIntervalJp(builder, charProfileRowIntervalJp):
    return ConstCommonExcelAddCharProfileRowIntervalJp(builder, charProfileRowIntervalJp)
def ConstCommonExcelAddCharProfileRowIntervalKr(builder, charProfileRowIntervalKr): builder.PrependInt32Slot(39, charProfileRowIntervalKr, 0)
def AddCharProfileRowIntervalKr(builder, charProfileRowIntervalKr):
    return ConstCommonExcelAddCharProfileRowIntervalKr(builder, charProfileRowIntervalKr)
def ConstCommonExcelAddFormationPresetEchelonSlotTextLength(builder, formationPresetEchelonSlotTextLength): builder.PrependInt32Slot(40, formationPresetEchelonSlotTextLength, 0)
def AddFormationPresetEchelonSlotTextLength(builder, formationPresetEchelonSlotTextLength):
    return ConstCommonExcelAddFormationPresetEchelonSlotTextLength(builder, formationPresetEchelonSlotTextLength)
def ConstCommonExcelAddFormationPresetEchelonTabTextLength(builder, formationPresetEchelonTabTextLength): builder.PrependInt32Slot(41, formationPresetEchelonTabTextLength, 0)
def AddFormationPresetEchelonTabTextLength(builder, formationPresetEchelonTabTextLength):
    return ConstCommonExcelAddFormationPresetEchelonTabTextLength(builder, formationPresetEchelonTabTextLength)
def ConstCommonExcelAddFormationPresetRecentNumberOfEchelon(builder, formationPresetRecentNumberOfEchelon): builder.PrependInt32Slot(42, formationPresetRecentNumberOfEchelon, 0)
def AddFormationPresetRecentNumberOfEchelon(builder, formationPresetRecentNumberOfEchelon):
    return ConstCommonExcelAddFormationPresetRecentNumberOfEchelon(builder, formationPresetRecentNumberOfEchelon)
def ConstCommonExcelAddFormationPresetNumberOfEchelon(builder, formationPresetNumberOfEchelon): builder.PrependInt32Slot(43, formationPresetNumberOfEchelon, 0)
def AddFormationPresetNumberOfEchelon(builder, formationPresetNumberOfEchelon):
    return ConstCommonExcelAddFormationPresetNumberOfEchelon(builder, formationPresetNumberOfEchelon)
def ConstCommonExcelAddFormationPresetNumberOfEchelonTab(builder, formationPresetNumberOfEchelonTab): builder.PrependInt32Slot(44, formationPresetNumberOfEchelonTab, 0)
def AddFormationPresetNumberOfEchelonTab(builder, formationPresetNumberOfEchelonTab):
    return ConstCommonExcelAddFormationPresetNumberOfEchelonTab(builder, formationPresetNumberOfEchelonTab)
def ConstCommonExcelAddFriendIdCardCommentMaxLength(builder, friendIdCardCommentMaxLength): builder.PrependInt64Slot(45, friendIdCardCommentMaxLength, 0)
def AddFriendIdCardCommentMaxLength(builder, friendIdCardCommentMaxLength):
    return ConstCommonExcelAddFriendIdCardCommentMaxLength(builder, friendIdCardCommentMaxLength)
def ConstCommonExcelAddWorldRaidGemEnterAmout(builder, worldRaidGemEnterAmout): builder.PrependInt64Slot(46, worldRaidGemEnterAmout, 0)
def AddWorldRaidGemEnterAmout(builder, worldRaidGemEnterAmout):
    return ConstCommonExcelAddWorldRaidGemEnterAmout(builder, worldRaidGemEnterAmout)
def ConstCommonExcelAddWorldRaidGemEnterCost(builder, worldRaidGemEnterCost): builder.PrependInt64Slot(47, worldRaidGemEnterCost, 0)
def AddWorldRaidGemEnterCost(builder, worldRaidGemEnterCost):
    return ConstCommonExcelAddWorldRaidGemEnterCost(builder, worldRaidGemEnterCost)
def ConstCommonExcelAddIdCardDefaultBgId(builder, idCardDefaultBgId): builder.PrependInt64Slot(48, idCardDefaultBgId, 0)
def AddIdCardDefaultBgId(builder, idCardDefaultBgId):
    return ConstCommonExcelAddIdCardDefaultBgId(builder, idCardDefaultBgId)
def ConstCommonExcelAddIdCardDefaultCharacterId(builder, idCardDefaultCharacterId): builder.PrependInt64Slot(49, idCardDefaultCharacterId, 0)
def AddIdCardDefaultCharacterId(builder, idCardDefaultCharacterId):
    return ConstCommonExcelAddIdCardDefaultCharacterId(builder, idCardDefaultCharacterId)
def ConstCommonExcelAddFriendsMaxApplicant(builder, friendsMaxApplicant): builder.PrependInt32Slot(50, friendsMaxApplicant, 0)
def AddFriendsMaxApplicant(builder, friendsMaxApplicant):
    return ConstCommonExcelAddFriendsMaxApplicant(builder, friendsMaxApplicant)
def ConstCommonExcelAddFriendsSearchRequestCount(builder, friendsSearchRequestCount): builder.PrependInt32Slot(51, friendsSearchRequestCount, 0)
def AddFriendsSearchRequestCount(builder, friendsSearchRequestCount):
    return ConstCommonExcelAddFriendsSearchRequestCount(builder, friendsSearchRequestCount)
def ConstCommonExcelAddMaxFriendsRequest(builder, maxFriendsRequest): builder.PrependInt32Slot(52, maxFriendsRequest, 0)
def AddMaxFriendsRequest(builder, maxFriendsRequest):
    return ConstCommonExcelAddMaxFriendsRequest(builder, maxFriendsRequest)
def ConstCommonExcelAddMaxFriendsCount(builder, maxFriendsCount): builder.PrependInt32Slot(53, maxFriendsCount, 0)
def AddMaxFriendsCount(builder, maxFriendsCount):
    return ConstCommonExcelAddMaxFriendsCount(builder, maxFriendsCount)
def ConstCommonExcelAddDDosCheckIntervalInSeconds(builder, dDosCheckIntervalInSeconds): builder.PrependInt32Slot(54, dDosCheckIntervalInSeconds, 0)
def AddDDosCheckIntervalInSeconds(builder, dDosCheckIntervalInSeconds):
    return ConstCommonExcelAddDDosCheckIntervalInSeconds(builder, dDosCheckIntervalInSeconds)
def ConstCommonExcelAddDDosDetectCount(builder, dDosDetectCount): builder.PrependInt32Slot(55, dDosDetectCount, 0)
def AddDDosDetectCount(builder, dDosDetectCount):
    return ConstCommonExcelAddDDosDetectCount(builder, dDosDetectCount)
def ConstCommonExcelAddRecommendedFriendsLvDifferenceLimit(builder, recommendedFriendsLvDifferenceLimit): builder.PrependInt32Slot(56, recommendedFriendsLvDifferenceLimit, 0)
def AddRecommendedFriendsLvDifferenceLimit(builder, recommendedFriendsLvDifferenceLimit):
    return ConstCommonExcelAddRecommendedFriendsLvDifferenceLimit(builder, recommendedFriendsLvDifferenceLimit)
def ConstCommonExcelAddBirthDayDDay(builder, birthDayDDay): builder.PrependInt32Slot(57, birthDayDDay, 0)
def AddBirthDayDDay(builder, birthDayDDay):
    return ConstCommonExcelAddBirthDayDDay(builder, birthDayDDay)
def ConstCommonExcelAddCharacterEquipmentGearSlot(builder, characterEquipmentGearSlot): builder.PrependInt64Slot(58, characterEquipmentGearSlot, 0)
def AddCharacterEquipmentGearSlot(builder, characterEquipmentGearSlot):
    return ConstCommonExcelAddCharacterEquipmentGearSlot(builder, characterEquipmentGearSlot)
def ConstCommonExcelAddCraftOpenExpTier3(builder, craftOpenExpTier3): builder.PrependInt64Slot(59, craftOpenExpTier3, 0)
def AddCraftOpenExpTier3(builder, craftOpenExpTier3):
    return ConstCommonExcelAddCraftOpenExpTier3(builder, craftOpenExpTier3)
def ConstCommonExcelAddCraftOpenExpTier2(builder, craftOpenExpTier2): builder.PrependInt64Slot(60, craftOpenExpTier2, 0)
def AddCraftOpenExpTier2(builder, craftOpenExpTier2):
    return ConstCommonExcelAddCraftOpenExpTier2(builder, craftOpenExpTier2)
def ConstCommonExcelAddCraftOpenExpTier1(builder, craftOpenExpTier1): builder.PrependInt64Slot(61, craftOpenExpTier1, 0)
def AddCraftOpenExpTier1(builder, craftOpenExpTier1):
    return ConstCommonExcelAddCraftOpenExpTier1(builder, craftOpenExpTier1)
def ConstCommonExcelAddMaxApMasterCoinPerWeek(builder, maxApMasterCoinPerWeek): builder.PrependInt64Slot(62, maxApMasterCoinPerWeek, 0)
def AddMaxApMasterCoinPerWeek(builder, maxApMasterCoinPerWeek):
    return ConstCommonExcelAddMaxApMasterCoinPerWeek(builder, maxApMasterCoinPerWeek)
def ConstCommonExcelAddCommonFavorItemTags(builder, commonFavorItemTags): builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(commonFavorItemTags), 0)
def AddCommonFavorItemTags(builder, commonFavorItemTags):
    return ConstCommonExcelAddCommonFavorItemTags(builder, commonFavorItemTags)
def ConstCommonExcelStartCommonFavorItemTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCommonFavorItemTagsVector(builder, numElems):
    return ConstCommonExcelStartCommonFavorItemTagsVector(builder, numElems)
def ConstCommonExcelAddMonthlyProductRepurchasePopupLimit(builder, monthlyProductRepurchasePopupLimit): builder.PrependInt32Slot(64, monthlyProductRepurchasePopupLimit, 0)
def AddMonthlyProductRepurchasePopupLimit(builder, monthlyProductRepurchasePopupLimit):
    return ConstCommonExcelAddMonthlyProductRepurchasePopupLimit(builder, monthlyProductRepurchasePopupLimit)
def ConstCommonExcelAddClanLeaderTransferLastLoginLimit(builder, clanLeaderTransferLastLoginLimit): builder.PrependInt64Slot(65, clanLeaderTransferLastLoginLimit, 0)
def AddClanLeaderTransferLastLoginLimit(builder, clanLeaderTransferLastLoginLimit):
    return ConstCommonExcelAddClanLeaderTransferLastLoginLimit(builder, clanLeaderTransferLastLoginLimit)
def ConstCommonExcelAddTimeAttackDungeonEnterCost(builder, timeAttackDungeonEnterCost): builder.PrependInt64Slot(66, timeAttackDungeonEnterCost, 0)
def AddTimeAttackDungeonEnterCost(builder, timeAttackDungeonEnterCost):
    return ConstCommonExcelAddTimeAttackDungeonEnterCost(builder, timeAttackDungeonEnterCost)
def ConstCommonExcelAddTimeAttackDungeonEnterCostId(builder, timeAttackDungeonEnterCostId): builder.PrependInt64Slot(67, timeAttackDungeonEnterCostId, 0)
def AddTimeAttackDungeonEnterCostId(builder, timeAttackDungeonEnterCostId):
    return ConstCommonExcelAddTimeAttackDungeonEnterCostId(builder, timeAttackDungeonEnterCostId)
def ConstCommonExcelAddTimeAttackDungeonEnterCostType(builder, timeAttackDungeonEnterCostType): builder.PrependInt32Slot(68, timeAttackDungeonEnterCostType, 0)
def AddTimeAttackDungeonEnterCostType(builder, timeAttackDungeonEnterCostType):
    return ConstCommonExcelAddTimeAttackDungeonEnterCostType(builder, timeAttackDungeonEnterCostType)
def ConstCommonExcelAddTimeAttackDungoenPlayCountPerTicket(builder, timeAttackDungoenPlayCountPerTicket): builder.PrependInt32Slot(69, timeAttackDungoenPlayCountPerTicket, 0)
def AddTimeAttackDungoenPlayCountPerTicket(builder, timeAttackDungoenPlayCountPerTicket):
    return ConstCommonExcelAddTimeAttackDungoenPlayCountPerTicket(builder, timeAttackDungoenPlayCountPerTicket)
def ConstCommonExcelAddTimeAttackDungeonScenarioId(builder, timeAttackDungeonScenarioId): builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(timeAttackDungeonScenarioId), 0)
def AddTimeAttackDungeonScenarioId(builder, timeAttackDungeonScenarioId):
    return ConstCommonExcelAddTimeAttackDungeonScenarioId(builder, timeAttackDungeonScenarioId)
def ConstCommonExcelAddRaidTicketCost(builder, raidTicketCost): builder.PrependInt64Slot(71, raidTicketCost, 0)
def AddRaidTicketCost(builder, raidTicketCost):
    return ConstCommonExcelAddRaidTicketCost(builder, raidTicketCost)
def ConstCommonExcelAddRaidEnterCostId(builder, raidEnterCostId): builder.PrependInt64Slot(72, raidEnterCostId, 0)
def AddRaidEnterCostId(builder, raidEnterCostId):
    return ConstCommonExcelAddRaidEnterCostId(builder, raidEnterCostId)
def ConstCommonExcelAddRaidEnterCostType(builder, raidEnterCostType): builder.PrependInt32Slot(73, raidEnterCostType, 0)
def AddRaidEnterCostType(builder, raidEnterCostType):
    return ConstCommonExcelAddRaidEnterCostType(builder, raidEnterCostType)
def ConstCommonExcelAddShowRaidMyListCount(builder, showRaidMyListCount): builder.PrependInt32Slot(74, showRaidMyListCount, 0)
def AddShowRaidMyListCount(builder, showRaidMyListCount):
    return ConstCommonExcelAddShowRaidMyListCount(builder, showRaidMyListCount)
def ConstCommonExcelAddWeaponLvUpCoefficient(builder, weaponLvUpCoefficient): builder.PrependInt32Slot(75, weaponLvUpCoefficient, 0)
def AddWeaponLvUpCoefficient(builder, weaponLvUpCoefficient):
    return ConstCommonExcelAddWeaponLvUpCoefficient(builder, weaponLvUpCoefficient)
def ConstCommonExcelAddMonthlyProductCheckDays(builder, monthlyProductCheckDays): builder.PrependInt32Slot(76, monthlyProductCheckDays, 0)
def AddMonthlyProductCheckDays(builder, monthlyProductCheckDays):
    return ConstCommonExcelAddMonthlyProductCheckDays(builder, monthlyProductCheckDays)
def ConstCommonExcelAddAccountLinkReward(builder, accountLinkReward): builder.PrependInt32Slot(77, accountLinkReward, 0)
def AddAccountLinkReward(builder, accountLinkReward):
    return ConstCommonExcelAddAccountLinkReward(builder, accountLinkReward)
def ConstCommonExcelAddLimitedStagePointPerApMax(builder, limitedStagePointPerApMax): builder.PrependInt64Slot(78, limitedStagePointPerApMax, 0)
def AddLimitedStagePointPerApMax(builder, limitedStagePointPerApMax):
    return ConstCommonExcelAddLimitedStagePointPerApMax(builder, limitedStagePointPerApMax)
def ConstCommonExcelAddLimitedStagePointPerApMin(builder, limitedStagePointPerApMin): builder.PrependInt64Slot(79, limitedStagePointPerApMin, 0)
def AddLimitedStagePointPerApMin(builder, limitedStagePointPerApMin):
    return ConstCommonExcelAddLimitedStagePointPerApMin(builder, limitedStagePointPerApMin)
def ConstCommonExcelAddLimitedStagePointAmount(builder, limitedStagePointAmount): builder.PrependInt64Slot(80, limitedStagePointAmount, 0)
def AddLimitedStagePointAmount(builder, limitedStagePointAmount):
    return ConstCommonExcelAddLimitedStagePointAmount(builder, limitedStagePointAmount)
def ConstCommonExcelAddLimitedStageEntryTimeBuffer(builder, limitedStageEntryTimeBuffer): builder.PrependInt64Slot(81, limitedStageEntryTimeBuffer, 0)
def AddLimitedStageEntryTimeBuffer(builder, limitedStageEntryTimeBuffer):
    return ConstCommonExcelAddLimitedStageEntryTimeBuffer(builder, limitedStageEntryTimeBuffer)
def ConstCommonExcelAddLimitedStageEntryTimeLimit(builder, limitedStageEntryTimeLimit): builder.PrependInt64Slot(82, limitedStageEntryTimeLimit, 0)
def AddLimitedStageEntryTimeLimit(builder, limitedStageEntryTimeLimit):
    return ConstCommonExcelAddLimitedStageEntryTimeLimit(builder, limitedStageEntryTimeLimit)
def ConstCommonExcelAddLimitedStageDailyClearCount(builder, limitedStageDailyClearCount): builder.PrependInt64Slot(83, limitedStageDailyClearCount, 0)
def AddLimitedStageDailyClearCount(builder, limitedStageDailyClearCount):
    return ConstCommonExcelAddLimitedStageDailyClearCount(builder, limitedStageDailyClearCount)
def ConstCommonExcelAddCafeSummonCoolTimeFromHour(builder, cafeSummonCoolTimeFromHour): builder.PrependInt32Slot(84, cafeSummonCoolTimeFromHour, 0)
def AddCafeSummonCoolTimeFromHour(builder, cafeSummonCoolTimeFromHour):
    return ConstCommonExcelAddCafeSummonCoolTimeFromHour(builder, cafeSummonCoolTimeFromHour)
def ConstCommonExcelAddAccountCommentMaxLength(builder, accountCommentMaxLength): builder.PrependInt32Slot(85, accountCommentMaxLength, 0)
def AddAccountCommentMaxLength(builder, accountCommentMaxLength):
    return ConstCommonExcelAddAccountCommentMaxLength(builder, accountCommentMaxLength)
def ConstCommonExcelAddExtraPassiveSkillLevelMax(builder, extraPassiveSkillLevelMax): builder.PrependInt32Slot(86, extraPassiveSkillLevelMax, 0)
def AddExtraPassiveSkillLevelMax(builder, extraPassiveSkillLevelMax):
    return ConstCommonExcelAddExtraPassiveSkillLevelMax(builder, extraPassiveSkillLevelMax)
def ConstCommonExcelAddPassiveSkillLevelMax(builder, passiveSkillLevelMax): builder.PrependInt32Slot(87, passiveSkillLevelMax, 0)
def AddPassiveSkillLevelMax(builder, passiveSkillLevelMax):
    return ConstCommonExcelAddPassiveSkillLevelMax(builder, passiveSkillLevelMax)
def ConstCommonExcelAddPublicSkillLevelMax(builder, publicSkillLevelMax): builder.PrependInt32Slot(88, publicSkillLevelMax, 0)
def AddPublicSkillLevelMax(builder, publicSkillLevelMax):
    return ConstCommonExcelAddPublicSkillLevelMax(builder, publicSkillLevelMax)
def ConstCommonExcelAddExSkillLevelMax(builder, exSkillLevelMax): builder.PrependInt32Slot(89, exSkillLevelMax, 0)
def AddExSkillLevelMax(builder, exSkillLevelMax):
    return ConstCommonExcelAddExSkillLevelMax(builder, exSkillLevelMax)
def ConstCommonExcelAddClearDeck3StarViewCount(builder, clearDeck3StarViewCount): builder.PrependInt32Slot(90, clearDeck3StarViewCount, 0)
def AddClearDeck3StarViewCount(builder, clearDeck3StarViewCount):
    return ConstCommonExcelAddClearDeck3StarViewCount(builder, clearDeck3StarViewCount)
def ConstCommonExcelAddClearDeck2StarViewCount(builder, clearDeck2StarViewCount): builder.PrependInt32Slot(91, clearDeck2StarViewCount, 0)
def AddClearDeck2StarViewCount(builder, clearDeck2StarViewCount):
    return ConstCommonExcelAddClearDeck2StarViewCount(builder, clearDeck2StarViewCount)
def ConstCommonExcelAddClearDeck1StarViewCount(builder, clearDeck1StarViewCount): builder.PrependInt32Slot(92, clearDeck1StarViewCount, 0)
def AddClearDeck1StarViewCount(builder, clearDeck1StarViewCount):
    return ConstCommonExcelAddClearDeck1StarViewCount(builder, clearDeck1StarViewCount)
def ConstCommonExcelAddClearDeckNoStarViewCount(builder, clearDeckNoStarViewCount): builder.PrependInt32Slot(93, clearDeckNoStarViewCount, 0)
def AddClearDeckNoStarViewCount(builder, clearDeckNoStarViewCount):
    return ConstCommonExcelAddClearDeckNoStarViewCount(builder, clearDeckNoStarViewCount)
def ConstCommonExcelAddClearDeckStorageSize(builder, clearDeckStorageSize): builder.PrependInt32Slot(94, clearDeckStorageSize, 0)
def AddClearDeckStorageSize(builder, clearDeckStorageSize):
    return ConstCommonExcelAddClearDeckStorageSize(builder, clearDeckStorageSize)
def ConstCommonExcelAddMailStorageHardCap(builder, mailStorageHardCap): builder.PrependInt32Slot(95, mailStorageHardCap, 0)
def AddMailStorageHardCap(builder, mailStorageHardCap):
    return ConstCommonExcelAddMailStorageHardCap(builder, mailStorageHardCap)
def ConstCommonExcelAddMailStorageSoftCap(builder, mailStorageSoftCap): builder.PrependInt32Slot(96, mailStorageSoftCap, 0)
def AddMailStorageSoftCap(builder, mailStorageSoftCap):
    return ConstCommonExcelAddMailStorageSoftCap(builder, mailStorageSoftCap)
def ConstCommonExcelAddRequestTimeOut(builder, requestTimeOut): builder.PrependFloat32Slot(97, requestTimeOut, 0.0)
def AddRequestTimeOut(builder, requestTimeOut):
    return ConstCommonExcelAddRequestTimeOut(builder, requestTimeOut)
def ConstCommonExcelAddUiLabelCharacterWrap(builder, uiLabelCharacterWrap): builder.PrependUOffsetTRelativeSlot(98, flatbuffers.number_types.UOffsetTFlags.py_type(uiLabelCharacterWrap), 0)
def AddUiLabelCharacterWrap(builder, uiLabelCharacterWrap):
    return ConstCommonExcelAddUiLabelCharacterWrap(builder, uiLabelCharacterWrap)
def ConstCommonExcelAddPostExpiredDayGameManager(builder, postExpiredDayGameManager): builder.PrependInt32Slot(99, postExpiredDayGameManager, 0)
def AddPostExpiredDayGameManager(builder, postExpiredDayGameManager):
    return ConstCommonExcelAddPostExpiredDayGameManager(builder, postExpiredDayGameManager)
def ConstCommonExcelAddPostExpiredDayInventoryOverflow(builder, postExpiredDayInventoryOverflow): builder.PrependInt32Slot(100, postExpiredDayInventoryOverflow, 0)
def AddPostExpiredDayInventoryOverflow(builder, postExpiredDayInventoryOverflow):
    return ConstCommonExcelAddPostExpiredDayInventoryOverflow(builder, postExpiredDayInventoryOverflow)
def ConstCommonExcelAddPostExpiredDayAttendance(builder, postExpiredDayAttendance): builder.PrependInt32Slot(101, postExpiredDayAttendance, 0)
def AddPostExpiredDayAttendance(builder, postExpiredDayAttendance):
    return ConstCommonExcelAddPostExpiredDayAttendance(builder, postExpiredDayAttendance)
def ConstCommonExcelAddCraftBaseGoldRequired(builder, craftBaseGoldRequired): builder.PrependUOffsetTRelativeSlot(102, flatbuffers.number_types.UOffsetTFlags.py_type(craftBaseGoldRequired), 0)
def AddCraftBaseGoldRequired(builder, craftBaseGoldRequired):
    return ConstCommonExcelAddCraftBaseGoldRequired(builder, craftBaseGoldRequired)
def ConstCommonExcelStartCraftBaseGoldRequiredVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCraftBaseGoldRequiredVector(builder, numElems):
    return ConstCommonExcelStartCraftBaseGoldRequiredVector(builder, numElems)
def ConstCommonExcelAddRaidOpponentListAmount(builder, raidOpponentListAmount): builder.PrependInt64Slot(103, raidOpponentListAmount, 0)
def AddRaidOpponentListAmount(builder, raidOpponentListAmount):
    return ConstCommonExcelAddRaidOpponentListAmount(builder, raidOpponentListAmount)
def ConstCommonExcelAddRaidTacticPlayTimeLimitInSeconds(builder, raidTacticPlayTimeLimitInSeconds): builder.PrependInt64Slot(104, raidTacticPlayTimeLimitInSeconds, 0)
def AddRaidTacticPlayTimeLimitInSeconds(builder, raidTacticPlayTimeLimitInSeconds):
    return ConstCommonExcelAddRaidTacticPlayTimeLimitInSeconds(builder, raidTacticPlayTimeLimitInSeconds)
def ConstCommonExcelAddWeekDungoenTacticPlayTimeLimitInSeconds(builder, weekDungoenTacticPlayTimeLimitInSeconds): builder.PrependInt64Slot(105, weekDungoenTacticPlayTimeLimitInSeconds, 0)
def AddWeekDungoenTacticPlayTimeLimitInSeconds(builder, weekDungoenTacticPlayTimeLimitInSeconds):
    return ConstCommonExcelAddWeekDungoenTacticPlayTimeLimitInSeconds(builder, weekDungoenTacticPlayTimeLimitInSeconds)
def ConstCommonExcelAddAdventureStrategyPlayTimeLimitInSeconds(builder, adventureStrategyPlayTimeLimitInSeconds): builder.PrependInt64Slot(106, adventureStrategyPlayTimeLimitInSeconds, 0)
def AddAdventureStrategyPlayTimeLimitInSeconds(builder, adventureStrategyPlayTimeLimitInSeconds):
    return ConstCommonExcelAddAdventureStrategyPlayTimeLimitInSeconds(builder, adventureStrategyPlayTimeLimitInSeconds)
def ConstCommonExcelAddTutorialShopCategoryType(builder, tutorialShopCategoryType): builder.PrependInt32Slot(107, tutorialShopCategoryType, 0)
def AddTutorialShopCategoryType(builder, tutorialShopCategoryType):
    return ConstCommonExcelAddTutorialShopCategoryType(builder, tutorialShopCategoryType)
def ConstCommonExcelAddTutorialCharacterDefaultCount(builder, tutorialCharacterDefaultCount): builder.PrependInt64Slot(108, tutorialCharacterDefaultCount, 0)
def AddTutorialCharacterDefaultCount(builder, tutorialCharacterDefaultCount):
    return ConstCommonExcelAddTutorialCharacterDefaultCount(builder, tutorialCharacterDefaultCount)
def ConstCommonExcelAddTutorialSpeedButtonStage(builder, tutorialSpeedButtonStage): builder.PrependInt64Slot(109, tutorialSpeedButtonStage, 0)
def AddTutorialSpeedButtonStage(builder, tutorialSpeedButtonStage):
    return ConstCommonExcelAddTutorialSpeedButtonStage(builder, tutorialSpeedButtonStage)
def ConstCommonExcelAddTutorialHardStage11(builder, tutorialHardStage11): builder.PrependInt64Slot(110, tutorialHardStage11, 0)
def AddTutorialHardStage11(builder, tutorialHardStage11):
    return ConstCommonExcelAddTutorialHardStage11(builder, tutorialHardStage11)
def ConstCommonExcelAddPrologueScenarioId02(builder, prologueScenarioId02): builder.PrependInt64Slot(111, prologueScenarioId02, 0)
def AddPrologueScenarioId02(builder, prologueScenarioId02):
    return ConstCommonExcelAddPrologueScenarioId02(builder, prologueScenarioId02)
def ConstCommonExcelAddPrologueScenarioId01(builder, prologueScenarioId01): builder.PrependInt64Slot(112, prologueScenarioId01, 0)
def AddPrologueScenarioId01(builder, prologueScenarioId01):
    return ConstCommonExcelAddPrologueScenarioId01(builder, prologueScenarioId01)
def ConstCommonExcelAddScreenshotToLobbyButtonHideDelay(builder, screenshotToLobbyButtonHideDelay): builder.PrependInt64Slot(113, screenshotToLobbyButtonHideDelay, 0)
def AddScreenshotToLobbyButtonHideDelay(builder, screenshotToLobbyButtonHideDelay):
    return ConstCommonExcelAddScreenshotToLobbyButtonHideDelay(builder, screenshotToLobbyButtonHideDelay)
def ConstCommonExcelAddLobbyToScreenModeWaitTime(builder, lobbyToScreenModeWaitTime): builder.PrependInt64Slot(114, lobbyToScreenModeWaitTime, 0)
def AddLobbyToScreenModeWaitTime(builder, lobbyToScreenModeWaitTime):
    return ConstCommonExcelAddLobbyToScreenModeWaitTime(builder, lobbyToScreenModeWaitTime)
def ConstCommonExcelAddCallNameMaximumLength(builder, callNameMaximumLength): builder.PrependInt64Slot(115, callNameMaximumLength, 0)
def AddCallNameMaximumLength(builder, callNameMaximumLength):
    return ConstCommonExcelAddCallNameMaximumLength(builder, callNameMaximumLength)
def ConstCommonExcelAddCallNameMinimumLength(builder, callNameMinimumLength): builder.PrependInt64Slot(116, callNameMinimumLength, 0)
def AddCallNameMinimumLength(builder, callNameMinimumLength):
    return ConstCommonExcelAddCallNameMinimumLength(builder, callNameMinimumLength)
def ConstCommonExcelAddCallNameRenameCoolTimeFromHour(builder, callNameRenameCoolTimeFromHour): builder.PrependInt64Slot(117, callNameRenameCoolTimeFromHour, 0)
def AddCallNameRenameCoolTimeFromHour(builder, callNameRenameCoolTimeFromHour):
    return ConstCommonExcelAddCallNameRenameCoolTimeFromHour(builder, callNameRenameCoolTimeFromHour)
def ConstCommonExcelAddClanWordBalloonMaxCharacter(builder, clanWordBalloonMaxCharacter): builder.PrependInt32Slot(118, clanWordBalloonMaxCharacter, 0)
def AddClanWordBalloonMaxCharacter(builder, clanWordBalloonMaxCharacter):
    return ConstCommonExcelAddClanWordBalloonMaxCharacter(builder, clanWordBalloonMaxCharacter)
def ConstCommonExcelAddClanRejoinCoolTimeFromSecond(builder, clanRejoinCoolTimeFromSecond): builder.PrependInt64Slot(119, clanRejoinCoolTimeFromSecond, 0)
def AddClanRejoinCoolTimeFromSecond(builder, clanRejoinCoolTimeFromSecond):
    return ConstCommonExcelAddClanRejoinCoolTimeFromSecond(builder, clanRejoinCoolTimeFromSecond)
def ConstCommonExcelAddClanMaxApplicant(builder, clanMaxApplicant): builder.PrependInt64Slot(120, clanMaxApplicant, 0)
def AddClanMaxApplicant(builder, clanMaxApplicant):
    return ConstCommonExcelAddClanMaxApplicant(builder, clanMaxApplicant)
def ConstCommonExcelAddClanSearchResultCount(builder, clanSearchResultCount): builder.PrependInt64Slot(121, clanSearchResultCount, 0)
def AddClanSearchResultCount(builder, clanSearchResultCount):
    return ConstCommonExcelAddClanSearchResultCount(builder, clanSearchResultCount)
def ConstCommonExcelAddClanMaxMember(builder, clanMaxMember): builder.PrependInt64Slot(122, clanMaxMember, 0)
def AddClanMaxMember(builder, clanMaxMember):
    return ConstCommonExcelAddClanMaxMember(builder, clanMaxMember)
def ConstCommonExcelAddJoinOrCreateClanCoolTimeFromHour(builder, joinOrCreateClanCoolTimeFromHour): builder.PrependInt64Slot(123, joinOrCreateClanCoolTimeFromHour, 0)
def AddJoinOrCreateClanCoolTimeFromHour(builder, joinOrCreateClanCoolTimeFromHour):
    return ConstCommonExcelAddJoinOrCreateClanCoolTimeFromHour(builder, joinOrCreateClanCoolTimeFromHour)
def ConstCommonExcelAddScenarioAutoDelayMillisec(builder, scenarioAutoDelayMillisec): builder.PrependFloat32Slot(124, scenarioAutoDelayMillisec, 0.0)
def AddScenarioAutoDelayMillisec(builder, scenarioAutoDelayMillisec):
    return ConstCommonExcelAddScenarioAutoDelayMillisec(builder, scenarioAutoDelayMillisec)
def ConstCommonExcelAddEquipmentSlotOpenLevel(builder, equipmentSlotOpenLevel): builder.PrependUOffsetTRelativeSlot(125, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentSlotOpenLevel), 0)
def AddEquipmentSlotOpenLevel(builder, equipmentSlotOpenLevel):
    return ConstCommonExcelAddEquipmentSlotOpenLevel(builder, equipmentSlotOpenLevel)
def ConstCommonExcelStartEquipmentSlotOpenLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEquipmentSlotOpenLevelVector(builder, numElems):
    return ConstCommonExcelStartEquipmentSlotOpenLevelVector(builder, numElems)
def ConstCommonExcelAddTutorialGachaGoodsId(builder, tutorialGachaGoodsId): builder.PrependInt32Slot(126, tutorialGachaGoodsId, 0)
def AddTutorialGachaGoodsId(builder, tutorialGachaGoodsId):
    return ConstCommonExcelAddTutorialGachaGoodsId(builder, tutorialGachaGoodsId)
def ConstCommonExcelAddBeforehandGachaShopId(builder, beforehandGachaShopId): builder.PrependInt32Slot(127, beforehandGachaShopId, 0)
def AddBeforehandGachaShopId(builder, beforehandGachaShopId):
    return ConstCommonExcelAddBeforehandGachaShopId(builder, beforehandGachaShopId)
def ConstCommonExcelAddTutorialGachaShopId(builder, tutorialGachaShopId): builder.PrependInt32Slot(128, tutorialGachaShopId, 0)
def AddTutorialGachaShopId(builder, tutorialGachaShopId):
    return ConstCommonExcelAddTutorialGachaShopId(builder, tutorialGachaShopId)
def ConstCommonExcelAddCraftLeafNodeGenerateLv2Count(builder, craftLeafNodeGenerateLv2Count): builder.PrependInt32Slot(129, craftLeafNodeGenerateLv2Count, 0)
def AddCraftLeafNodeGenerateLv2Count(builder, craftLeafNodeGenerateLv2Count):
    return ConstCommonExcelAddCraftLeafNodeGenerateLv2Count(builder, craftLeafNodeGenerateLv2Count)
def ConstCommonExcelAddCraftLeafNodeGenerateLv1Count(builder, craftLeafNodeGenerateLv1Count): builder.PrependInt32Slot(130, craftLeafNodeGenerateLv1Count, 0)
def AddCraftLeafNodeGenerateLv1Count(builder, craftLeafNodeGenerateLv1Count):
    return ConstCommonExcelAddCraftLeafNodeGenerateLv1Count(builder, craftLeafNodeGenerateLv1Count)
def ConstCommonExcelAddMassangerMessageExpireDay(builder, massangerMessageExpireDay): builder.PrependInt32Slot(131, massangerMessageExpireDay, 0)
def AddMassangerMessageExpireDay(builder, massangerMessageExpireDay):
    return ConstCommonExcelAddMassangerMessageExpireDay(builder, massangerMessageExpireDay)
def ConstCommonExcelAddAcademyTicketCost(builder, academyTicketCost): builder.PrependInt32Slot(132, academyTicketCost, 0)
def AddAcademyTicketCost(builder, academyTicketCost):
    return ConstCommonExcelAddAcademyTicketCost(builder, academyTicketCost)
def ConstCommonExcelAddAcademyEnterCostId(builder, academyEnterCostId): builder.PrependInt64Slot(133, academyEnterCostId, 0)
def AddAcademyEnterCostId(builder, academyEnterCostId):
    return ConstCommonExcelAddAcademyEnterCostId(builder, academyEnterCostId)
def ConstCommonExcelAddAcademyEnterCostType(builder, academyEnterCostType): builder.PrependInt32Slot(134, academyEnterCostType, 0)
def AddAcademyEnterCostType(builder, academyEnterCostType):
    return ConstCommonExcelAddAcademyEnterCostType(builder, academyEnterCostType)
def ConstCommonExcelAddCraftTicketConsumeAmount(builder, craftTicketConsumeAmount): builder.PrependInt32Slot(135, craftTicketConsumeAmount, 0)
def AddCraftTicketConsumeAmount(builder, craftTicketConsumeAmount):
    return ConstCommonExcelAddCraftTicketConsumeAmount(builder, craftTicketConsumeAmount)
def ConstCommonExcelAddCraftTicketItemUniqueId(builder, craftTicketItemUniqueId): builder.PrependInt32Slot(136, craftTicketItemUniqueId, 0)
def AddCraftTicketItemUniqueId(builder, craftTicketItemUniqueId):
    return ConstCommonExcelAddCraftTicketItemUniqueId(builder, craftTicketItemUniqueId)
def ConstCommonExcelAddShiftingCraftSlotMaxCapacity(builder, shiftingCraftSlotMaxCapacity): builder.PrependInt32Slot(137, shiftingCraftSlotMaxCapacity, 0)
def AddShiftingCraftSlotMaxCapacity(builder, shiftingCraftSlotMaxCapacity):
    return ConstCommonExcelAddShiftingCraftSlotMaxCapacity(builder, shiftingCraftSlotMaxCapacity)
def ConstCommonExcelAddShiftingCraftTicketConsumeAmount(builder, shiftingCraftTicketConsumeAmount): builder.PrependInt32Slot(138, shiftingCraftTicketConsumeAmount, 0)
def AddShiftingCraftTicketConsumeAmount(builder, shiftingCraftTicketConsumeAmount):
    return ConstCommonExcelAddShiftingCraftTicketConsumeAmount(builder, shiftingCraftTicketConsumeAmount)
def ConstCommonExcelAddShiftingCraftDuration(builder, shiftingCraftDuration): builder.PrependUOffsetTRelativeSlot(139, flatbuffers.number_types.UOffsetTFlags.py_type(shiftingCraftDuration), 0)
def AddShiftingCraftDuration(builder, shiftingCraftDuration):
    return ConstCommonExcelAddShiftingCraftDuration(builder, shiftingCraftDuration)
def ConstCommonExcelStartShiftingCraftDurationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartShiftingCraftDurationVector(builder, numElems):
    return ConstCommonExcelStartShiftingCraftDurationVector(builder, numElems)
def ConstCommonExcelAddCraftLimitTime(builder, craftLimitTime): builder.PrependInt32Slot(140, craftLimitTime, 0)
def AddCraftLimitTime(builder, craftLimitTime):
    return ConstCommonExcelAddCraftLimitTime(builder, craftLimitTime)
def ConstCommonExcelAddCraftDuration(builder, craftDuration): builder.PrependUOffsetTRelativeSlot(141, flatbuffers.number_types.UOffsetTFlags.py_type(craftDuration), 0)
def AddCraftDuration(builder, craftDuration):
    return ConstCommonExcelAddCraftDuration(builder, craftDuration)
def ConstCommonExcelStartCraftDurationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCraftDurationVector(builder, numElems):
    return ConstCommonExcelStartCraftDurationVector(builder, numElems)
def ConstCommonExcelAddNicknameLength(builder, nicknameLength): builder.PrependInt32Slot(142, nicknameLength, 0)
def AddNicknameLength(builder, nicknameLength):
    return ConstCommonExcelAddNicknameLength(builder, nicknameLength)
def ConstCommonExcelAddEquipLvUpCoefficient(builder, equipLvUpCoefficient): builder.PrependInt32Slot(143, equipLvUpCoefficient, 0)
def AddEquipLvUpCoefficient(builder, equipLvUpCoefficient):
    return ConstCommonExcelAddEquipLvUpCoefficient(builder, equipLvUpCoefficient)
def ConstCommonExcelAddExpEquipInsertLimit(builder, expEquipInsertLimit): builder.PrependInt32Slot(144, expEquipInsertLimit, 0)
def AddExpEquipInsertLimit(builder, expEquipInsertLimit):
    return ConstCommonExcelAddExpEquipInsertLimit(builder, expEquipInsertLimit)
def ConstCommonExcelAddEquipmentLvUpCoefficient(builder, equipmentLvUpCoefficient): builder.PrependInt32Slot(145, equipmentLvUpCoefficient, 0)
def AddEquipmentLvUpCoefficient(builder, equipmentLvUpCoefficient):
    return ConstCommonExcelAddEquipmentLvUpCoefficient(builder, equipmentLvUpCoefficient)
def ConstCommonExcelAddCharacterLvUpCoefficient(builder, characterLvUpCoefficient): builder.PrependInt32Slot(146, characterLvUpCoefficient, 0)
def AddCharacterLvUpCoefficient(builder, characterLvUpCoefficient):
    return ConstCommonExcelAddCharacterLvUpCoefficient(builder, characterLvUpCoefficient)
def ConstCommonExcelAddExpItemInsertAccelTime(builder, expItemInsertAccelTime): builder.PrependInt32Slot(147, expItemInsertAccelTime, 0)
def AddExpItemInsertAccelTime(builder, expItemInsertAccelTime):
    return ConstCommonExcelAddExpItemInsertAccelTime(builder, expItemInsertAccelTime)
def ConstCommonExcelAddExpItemInsertLimit(builder, expItemInsertLimit): builder.PrependInt32Slot(148, expItemInsertLimit, 0)
def AddExpItemInsertLimit(builder, expItemInsertLimit):
    return ConstCommonExcelAddExpItemInsertLimit(builder, expItemInsertLimit)
def ConstCommonExcelAddMissionToastLifeTime(builder, missionToastLifeTime): builder.PrependInt32Slot(149, missionToastLifeTime, 0)
def AddMissionToastLifeTime(builder, missionToastLifeTime):
    return ConstCommonExcelAddMissionToastLifeTime(builder, missionToastLifeTime)
def ConstCommonExcelAddAccountExpRatio(builder, accountExpRatio): builder.PrependInt32Slot(150, accountExpRatio, 0)
def AddAccountExpRatio(builder, accountExpRatio):
    return ConstCommonExcelAddAccountExpRatio(builder, accountExpRatio)
def ConstCommonExcelAddSupportSquadExpBonus(builder, supportSquadExpBonus): builder.PrependInt32Slot(151, supportSquadExpBonus, 0)
def AddSupportSquadExpBonus(builder, supportSquadExpBonus):
    return ConstCommonExcelAddSupportSquadExpBonus(builder, supportSquadExpBonus)
def ConstCommonExcelAddMainSquadExpBonus(builder, mainSquadExpBonus): builder.PrependInt32Slot(152, mainSquadExpBonus, 0)
def AddMainSquadExpBonus(builder, mainSquadExpBonus):
    return ConstCommonExcelAddMainSquadExpBonus(builder, mainSquadExpBonus)
def ConstCommonExcelAddAccountMaxLevel(builder, accountMaxLevel): builder.PrependInt32Slot(153, accountMaxLevel, 0)
def AddAccountMaxLevel(builder, accountMaxLevel):
    return ConstCommonExcelAddAccountMaxLevel(builder, accountMaxLevel)
def ConstCommonExcelAddEnterDeposit(builder, enterDeposit): builder.PrependInt32Slot(154, enterDeposit, 0)
def AddEnterDeposit(builder, enterDeposit):
    return ConstCommonExcelAddEnterDeposit(builder, enterDeposit)
def ConstCommonExcelAddStageFailedCurrencyRefundRate(builder, stageFailedCurrencyRefundRate): builder.PrependInt32Slot(155, stageFailedCurrencyRefundRate, 0)
def AddStageFailedCurrencyRefundRate(builder, stageFailedCurrencyRefundRate):
    return ConstCommonExcelAddStageFailedCurrencyRefundRate(builder, stageFailedCurrencyRefundRate)
def ConstCommonExcelAddWeekDungeonFindGiftRewardLimitCount(builder, weekDungeonFindGiftRewardLimitCount): builder.PrependInt32Slot(156, weekDungeonFindGiftRewardLimitCount, 0)
def AddWeekDungeonFindGiftRewardLimitCount(builder, weekDungeonFindGiftRewardLimitCount):
    return ConstCommonExcelAddWeekDungeonFindGiftRewardLimitCount(builder, weekDungeonFindGiftRewardLimitCount)
def ConstCommonExcelAddCafeSetGroupApplyCount(builder, cafeSetGroupApplyCount): builder.PrependInt32Slot(157, cafeSetGroupApplyCount, 0)
def AddCafeSetGroupApplyCount(builder, cafeSetGroupApplyCount):
    return ConstCommonExcelAddCafeSetGroupApplyCount(builder, cafeSetGroupApplyCount)
def ConstCommonExcelAddCafeProductionDecimalPosition(builder, cafeProductionDecimalPosition): builder.PrependInt32Slot(158, cafeProductionDecimalPosition, 0)
def AddCafeProductionDecimalPosition(builder, cafeProductionDecimalPosition):
    return ConstCommonExcelAddCafeProductionDecimalPosition(builder, cafeProductionDecimalPosition)
def ConstCommonExcelAddCafeAutoChargePeriodInMsc(builder, cafeAutoChargePeriodInMsc): builder.PrependInt32Slot(159, cafeAutoChargePeriodInMsc, 0)
def AddCafeAutoChargePeriodInMsc(builder, cafeAutoChargePeriodInMsc):
    return ConstCommonExcelAddCafeAutoChargePeriodInMsc(builder, cafeAutoChargePeriodInMsc)
def ConstCommonExcelAddFindGiftTimeLimit(builder, findGiftTimeLimit): builder.PrependInt32Slot(160, findGiftTimeLimit, 0)
def AddFindGiftTimeLimit(builder, findGiftTimeLimit):
    return ConstCommonExcelAddFindGiftTimeLimit(builder, findGiftTimeLimit)
def ConstCommonExcelAddCafeBubbleIdleDurationMilliSec(builder, cafeBubbleIdleDurationMilliSec): builder.PrependInt64Slot(161, cafeBubbleIdleDurationMilliSec, 0)
def AddCafeBubbleIdleDurationMilliSec(builder, cafeBubbleIdleDurationMilliSec):
    return ConstCommonExcelAddCafeBubbleIdleDurationMilliSec(builder, cafeBubbleIdleDurationMilliSec)
def ConstCommonExcelAddCafeMonologueDefaultDuration(builder, cafeMonologueDefaultDuration): builder.PrependInt64Slot(162, cafeMonologueDefaultDuration, 0)
def AddCafeMonologueDefaultDuration(builder, cafeMonologueDefaultDuration):
    return ConstCommonExcelAddCafeMonologueDefaultDuration(builder, cafeMonologueDefaultDuration)
def ConstCommonExcelAddCafeMonologueIntervalMillisec(builder, cafeMonologueIntervalMillisec): builder.PrependInt64Slot(163, cafeMonologueIntervalMillisec, 0)
def AddCafeMonologueIntervalMillisec(builder, cafeMonologueIntervalMillisec):
    return ConstCommonExcelAddCafeMonologueIntervalMillisec(builder, cafeMonologueIntervalMillisec)
def ConstCommonExcelAddCafePresetSlotCount(builder, cafePresetSlotCount): builder.PrependInt32Slot(164, cafePresetSlotCount, 0)
def AddCafePresetSlotCount(builder, cafePresetSlotCount):
    return ConstCommonExcelAddCafePresetSlotCount(builder, cafePresetSlotCount)
def ConstCommonExcelAddAcademyFavorZoneId(builder, academyFavorZoneId): builder.PrependInt64Slot(165, academyFavorZoneId, 0)
def AddAcademyFavorZoneId(builder, academyFavorZoneId):
    return ConstCommonExcelAddAcademyFavorZoneId(builder, academyFavorZoneId)
def ConstCommonExcelAddGachaPercentage(builder, gachaPercentage): builder.PrependInt32Slot(166, gachaPercentage, 0)
def AddGachaPercentage(builder, gachaPercentage):
    return ConstCommonExcelAddGachaPercentage(builder, gachaPercentage)
def ConstCommonExcelAddBaseTimeScale(builder, baseTimeScale): builder.PrependInt64Slot(167, baseTimeScale, 0)
def AddBaseTimeScale(builder, baseTimeScale):
    return ConstCommonExcelAddBaseTimeScale(builder, baseTimeScale)
def ConstCommonExcelAddTacticRankClearTime(builder, tacticRankClearTime): builder.PrependInt32Slot(168, tacticRankClearTime, 0)
def AddTacticRankClearTime(builder, tacticRankClearTime):
    return ConstCommonExcelAddTacticRankClearTime(builder, tacticRankClearTime)
def ConstCommonExcelAddHardStageCount(builder, hardStageCount): builder.PrependInt32Slot(169, hardStageCount, 0)
def AddHardStageCount(builder, hardStageCount):
    return ConstCommonExcelAddHardStageCount(builder, hardStageCount)
def ConstCommonExcelAddHardAdventurePlayCountRecoverDailyNumber(builder, hardAdventurePlayCountRecoverDailyNumber): builder.PrependInt32Slot(170, hardAdventurePlayCountRecoverDailyNumber, 0)
def AddHardAdventurePlayCountRecoverDailyNumber(builder, hardAdventurePlayCountRecoverDailyNumber):
    return ConstCommonExcelAddHardAdventurePlayCountRecoverDailyNumber(builder, hardAdventurePlayCountRecoverDailyNumber)
def ConstCommonExcelAddCampaignMainStageBestRecord(builder, campaignMainStageBestRecord): builder.PrependInt32Slot(171, campaignMainStageBestRecord, 0)
def AddCampaignMainStageBestRecord(builder, campaignMainStageBestRecord):
    return ConstCommonExcelAddCampaignMainStageBestRecord(builder, campaignMainStageBestRecord)
def ConstCommonExcelAddCampaignMainStageMaxRank(builder, campaignMainStageMaxRank): builder.PrependInt32Slot(172, campaignMainStageMaxRank, 0)
def AddCampaignMainStageMaxRank(builder, campaignMainStageMaxRank):
    return ConstCommonExcelAddCampaignMainStageMaxRank(builder, campaignMainStageMaxRank)
def ConstCommonExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConstCommonExcelEnd(builder)