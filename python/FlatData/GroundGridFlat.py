# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GroundGridFlat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GroundGridFlat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGroundGridFlat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GroundGridFlat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GroundGridFlat
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundGridFlat
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundGridFlat
    def StartX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundGridFlat
    def StartY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundGridFlat
    def Gap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundGridFlat
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatData.GroundNodeFlat import GroundNodeFlat
            obj = GroundNodeFlat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroundGridFlat
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundGridFlat
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # GroundGridFlat
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GroundGridFlatStart(builder): builder.StartObject(7)
def Start(builder):
    return GroundGridFlatStart(builder)
def GroundGridFlatAddX(builder, x): builder.PrependInt32Slot(0, x, 0)
def AddX(builder, x):
    return GroundGridFlatAddX(builder, x)
def GroundGridFlatAddY(builder, y): builder.PrependInt32Slot(1, y, 0)
def AddY(builder, y):
    return GroundGridFlatAddY(builder, y)
def GroundGridFlatAddStartX(builder, startX): builder.PrependFloat32Slot(2, startX, 0.0)
def AddStartX(builder, startX):
    return GroundGridFlatAddStartX(builder, startX)
def GroundGridFlatAddStartY(builder, startY): builder.PrependFloat32Slot(3, startY, 0.0)
def AddStartY(builder, startY):
    return GroundGridFlatAddStartY(builder, startY)
def GroundGridFlatAddGap(builder, gap): builder.PrependFloat32Slot(4, gap, 0.0)
def AddGap(builder, gap):
    return GroundGridFlatAddGap(builder, gap)
def GroundGridFlatAddNodes(builder, nodes): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)
def AddNodes(builder, nodes):
    return GroundGridFlatAddNodes(builder, nodes)
def GroundGridFlatStartNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNodesVector(builder, numElems):
    return GroundGridFlatStartNodesVector(builder, numElems)
def GroundGridFlatAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return GroundGridFlatAddVersion(builder, version)
def GroundGridFlatEnd(builder): return builder.EndObject()
def End(builder):
    return GroundGridFlatEnd(builder)