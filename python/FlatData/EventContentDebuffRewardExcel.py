# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentDebuffRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentDebuffRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentDebuffRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentDebuffRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentDebuffRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDebuffRewardExcel
    def EventStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDebuffRewardExcel
    def EventContentItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDebuffRewardExcel
    def RewardPercentage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def EventContentDebuffRewardExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return EventContentDebuffRewardExcelStart(builder)
def EventContentDebuffRewardExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return EventContentDebuffRewardExcelAddEventContentId(builder, eventContentId)
def EventContentDebuffRewardExcelAddEventStageId(builder, eventStageId): builder.PrependInt64Slot(1, eventStageId, 0)
def AddEventStageId(builder, eventStageId):
    return EventContentDebuffRewardExcelAddEventStageId(builder, eventStageId)
def EventContentDebuffRewardExcelAddEventContentItemType(builder, eventContentItemType): builder.PrependInt32Slot(2, eventContentItemType, 0)
def AddEventContentItemType(builder, eventContentItemType):
    return EventContentDebuffRewardExcelAddEventContentItemType(builder, eventContentItemType)
def EventContentDebuffRewardExcelAddRewardPercentage(builder, rewardPercentage): builder.PrependInt64Slot(3, rewardPercentage, 0)
def AddRewardPercentage(builder, rewardPercentage):
    return EventContentDebuffRewardExcelAddRewardPercentage(builder, rewardPercentage)
def EventContentDebuffRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EventContentDebuffRewardExcelEnd(builder)