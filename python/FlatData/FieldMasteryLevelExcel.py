# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldMasteryLevelExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldMasteryLevelExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldMasteryLevelExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldMasteryLevelExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldMasteryLevelExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryLevelExcel
    def Id(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldMasteryLevelExcel
    def IdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldMasteryLevelExcel
    def IdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldMasteryLevelExcel
    def IdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FieldMasteryLevelExcel
    def Exp(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldMasteryLevelExcel
    def ExpAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldMasteryLevelExcel
    def ExpLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldMasteryLevelExcel
    def ExpIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FieldMasteryLevelExcel
    def TotalExp(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldMasteryLevelExcel
    def TotalExpAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldMasteryLevelExcel
    def TotalExpLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldMasteryLevelExcel
    def TotalExpIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FieldMasteryLevelExcel
    def RewardId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldMasteryLevelExcel
    def RewardIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldMasteryLevelExcel
    def RewardIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldMasteryLevelExcel
    def RewardIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def FieldMasteryLevelExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return FieldMasteryLevelExcelStart(builder)
def FieldMasteryLevelExcelAddLevel(builder, level): builder.PrependInt32Slot(0, level, 0)
def AddLevel(builder, level):
    return FieldMasteryLevelExcelAddLevel(builder, level)
def FieldMasteryLevelExcelAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return FieldMasteryLevelExcelAddId(builder, id)
def FieldMasteryLevelExcelStartIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartIdVector(builder, numElems):
    return FieldMasteryLevelExcelStartIdVector(builder, numElems)
def FieldMasteryLevelExcelAddExp(builder, exp): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(exp), 0)
def AddExp(builder, exp):
    return FieldMasteryLevelExcelAddExp(builder, exp)
def FieldMasteryLevelExcelStartExpVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartExpVector(builder, numElems):
    return FieldMasteryLevelExcelStartExpVector(builder, numElems)
def FieldMasteryLevelExcelAddTotalExp(builder, totalExp): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(totalExp), 0)
def AddTotalExp(builder, totalExp):
    return FieldMasteryLevelExcelAddTotalExp(builder, totalExp)
def FieldMasteryLevelExcelStartTotalExpVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartTotalExpVector(builder, numElems):
    return FieldMasteryLevelExcelStartTotalExpVector(builder, numElems)
def FieldMasteryLevelExcelAddRewardId(builder, rewardId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardId), 0)
def AddRewardId(builder, rewardId):
    return FieldMasteryLevelExcelAddRewardId(builder, rewardId)
def FieldMasteryLevelExcelStartRewardIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardIdVector(builder, numElems):
    return FieldMasteryLevelExcelStartRewardIdVector(builder, numElems)
def FieldMasteryLevelExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FieldMasteryLevelExcelEnd(builder)