# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TagExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TagExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTagExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TagExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TagExcel
    def Furniture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TagExcel
    def None(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def TagExcelStart(builder): builder.StartObject(2)
def Start(builder):
    return TagExcelStart(builder)
def TagExcelAddFurniture(builder, furniture): builder.PrependInt32Slot(0, furniture, 0)
def AddFurniture(builder, furniture):
    return TagExcelAddFurniture(builder, furniture)
def TagExcelAddNone(builder, none): builder.PrependInt32Slot(1, none, 0)
def AddNone(builder, none):
    return TagExcelAddNone(builder, none)
def TagExcelEnd(builder): return builder.EndObject()
def End(builder):
    return TagExcelEnd(builder)