# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DefaultParcelExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DefaultParcelExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDefaultParcelExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DefaultParcelExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DefaultParcelExcel
    def ParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DefaultParcelExcel
    def ParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DefaultParcelExcel
    def ParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def DefaultParcelExcelStart(builder): builder.StartObject(3)
def Start(builder):
    return DefaultParcelExcelStart(builder)
def DefaultParcelExcelAddParcelType(builder, parcelType): builder.PrependInt32Slot(0, parcelType, 0)
def AddParcelType(builder, parcelType):
    return DefaultParcelExcelAddParcelType(builder, parcelType)
def DefaultParcelExcelAddParcelId(builder, parcelId): builder.PrependInt64Slot(1, parcelId, 0)
def AddParcelId(builder, parcelId):
    return DefaultParcelExcelAddParcelId(builder, parcelId)
def DefaultParcelExcelAddParcelAmount(builder, parcelAmount): builder.PrependInt64Slot(2, parcelAmount, 0)
def AddParcelAmount(builder, parcelAmount):
    return DefaultParcelExcelAddParcelAmount(builder, parcelAmount)
def DefaultParcelExcelEnd(builder): return builder.EndObject()
def End(builder):
    return DefaultParcelExcelEnd(builder)