# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimeAttackDungeonRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeAttackDungeonRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeAttackDungeonRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeAttackDungeonRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimeAttackDungeonRewardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardMaxPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TimeAttackDungeonRewardExcel
    def RewardMinPoint(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardMinPointAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardMinPointLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardMinPointIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelDefaultAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelDefaultAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelDefaultAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelDefaultAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelMaxAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelMaxAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelMaxAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonRewardExcel
    def RewardParcelMaxAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def TimeAttackDungeonRewardExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return TimeAttackDungeonRewardExcelStart(builder)
def TimeAttackDungeonRewardExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return TimeAttackDungeonRewardExcelAddId(builder, id)
def TimeAttackDungeonRewardExcelAddRewardMaxPoint(builder, rewardMaxPoint): builder.PrependInt64Slot(1, rewardMaxPoint, 0)
def AddRewardMaxPoint(builder, rewardMaxPoint):
    return TimeAttackDungeonRewardExcelAddRewardMaxPoint(builder, rewardMaxPoint)
def TimeAttackDungeonRewardExcelAddRewardType(builder, rewardType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardType), 0)
def AddRewardType(builder, rewardType):
    return TimeAttackDungeonRewardExcelAddRewardType(builder, rewardType)
def TimeAttackDungeonRewardExcelStartRewardTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardTypeVector(builder, numElems):
    return TimeAttackDungeonRewardExcelStartRewardTypeVector(builder, numElems)
def TimeAttackDungeonRewardExcelAddRewardMinPoint(builder, rewardMinPoint): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardMinPoint), 0)
def AddRewardMinPoint(builder, rewardMinPoint):
    return TimeAttackDungeonRewardExcelAddRewardMinPoint(builder, rewardMinPoint)
def TimeAttackDungeonRewardExcelStartRewardMinPointVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardMinPointVector(builder, numElems):
    return TimeAttackDungeonRewardExcelStartRewardMinPointVector(builder, numElems)
def TimeAttackDungeonRewardExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)
def AddRewardParcelType(builder, rewardParcelType):
    return TimeAttackDungeonRewardExcelAddRewardParcelType(builder, rewardParcelType)
def TimeAttackDungeonRewardExcelStartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParcelTypeVector(builder, numElems):
    return TimeAttackDungeonRewardExcelStartRewardParcelTypeVector(builder, numElems)
def TimeAttackDungeonRewardExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)
def AddRewardParcelId(builder, rewardParcelId):
    return TimeAttackDungeonRewardExcelAddRewardParcelId(builder, rewardParcelId)
def TimeAttackDungeonRewardExcelStartRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelIdVector(builder, numElems):
    return TimeAttackDungeonRewardExcelStartRewardParcelIdVector(builder, numElems)
def TimeAttackDungeonRewardExcelAddRewardParcelDefaultAmount(builder, rewardParcelDefaultAmount): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelDefaultAmount), 0)
def AddRewardParcelDefaultAmount(builder, rewardParcelDefaultAmount):
    return TimeAttackDungeonRewardExcelAddRewardParcelDefaultAmount(builder, rewardParcelDefaultAmount)
def TimeAttackDungeonRewardExcelStartRewardParcelDefaultAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelDefaultAmountVector(builder, numElems):
    return TimeAttackDungeonRewardExcelStartRewardParcelDefaultAmountVector(builder, numElems)
def TimeAttackDungeonRewardExcelAddRewardParcelMaxAmount(builder, rewardParcelMaxAmount): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelMaxAmount), 0)
def AddRewardParcelMaxAmount(builder, rewardParcelMaxAmount):
    return TimeAttackDungeonRewardExcelAddRewardParcelMaxAmount(builder, rewardParcelMaxAmount)
def TimeAttackDungeonRewardExcelStartRewardParcelMaxAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelMaxAmountVector(builder, numElems):
    return TimeAttackDungeonRewardExcelStartRewardParcelMaxAmountVector(builder, numElems)
def TimeAttackDungeonRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return TimeAttackDungeonRewardExcelEnd(builder)