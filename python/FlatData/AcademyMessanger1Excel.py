# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AcademyMessanger1Excel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AcademyMessanger1Excel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAcademyMessanger1Excel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AcademyMessanger1Excel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AcademyMessanger1Excel
    def MessageGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def MessageCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def ConditionValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def PreConditionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def PreConditionFavorScheduleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def FavorScheduleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def NextGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def FeedbackTimeMillisec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AcademyMessanger1Excel
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyMessanger1Excel
    def MessageKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyMessanger1Excel
    def MessageJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AcademyMessanger1ExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return AcademyMessanger1ExcelStart(builder)
def AcademyMessanger1ExcelAddMessageGroupId(builder, messageGroupId): builder.PrependInt64Slot(0, messageGroupId, 0)
def AddMessageGroupId(builder, messageGroupId):
    return AcademyMessanger1ExcelAddMessageGroupId(builder, messageGroupId)
def AcademyMessanger1ExcelAddId(builder, id): builder.PrependInt64Slot(1, id, 0)
def AddId(builder, id):
    return AcademyMessanger1ExcelAddId(builder, id)
def AcademyMessanger1ExcelAddCharacterId(builder, characterId): builder.PrependInt64Slot(2, characterId, 0)
def AddCharacterId(builder, characterId):
    return AcademyMessanger1ExcelAddCharacterId(builder, characterId)
def AcademyMessanger1ExcelAddMessageCondition(builder, messageCondition): builder.PrependInt32Slot(3, messageCondition, 0)
def AddMessageCondition(builder, messageCondition):
    return AcademyMessanger1ExcelAddMessageCondition(builder, messageCondition)
def AcademyMessanger1ExcelAddConditionValue(builder, conditionValue): builder.PrependInt64Slot(4, conditionValue, 0)
def AddConditionValue(builder, conditionValue):
    return AcademyMessanger1ExcelAddConditionValue(builder, conditionValue)
def AcademyMessanger1ExcelAddPreConditionGroupId(builder, preConditionGroupId): builder.PrependInt64Slot(5, preConditionGroupId, 0)
def AddPreConditionGroupId(builder, preConditionGroupId):
    return AcademyMessanger1ExcelAddPreConditionGroupId(builder, preConditionGroupId)
def AcademyMessanger1ExcelAddPreConditionFavorScheduleId(builder, preConditionFavorScheduleId): builder.PrependInt64Slot(6, preConditionFavorScheduleId, 0)
def AddPreConditionFavorScheduleId(builder, preConditionFavorScheduleId):
    return AcademyMessanger1ExcelAddPreConditionFavorScheduleId(builder, preConditionFavorScheduleId)
def AcademyMessanger1ExcelAddFavorScheduleId(builder, favorScheduleId): builder.PrependInt64Slot(7, favorScheduleId, 0)
def AddFavorScheduleId(builder, favorScheduleId):
    return AcademyMessanger1ExcelAddFavorScheduleId(builder, favorScheduleId)
def AcademyMessanger1ExcelAddNextGroupId(builder, nextGroupId): builder.PrependInt64Slot(8, nextGroupId, 0)
def AddNextGroupId(builder, nextGroupId):
    return AcademyMessanger1ExcelAddNextGroupId(builder, nextGroupId)
def AcademyMessanger1ExcelAddFeedbackTimeMillisec(builder, feedbackTimeMillisec): builder.PrependInt64Slot(9, feedbackTimeMillisec, 0)
def AddFeedbackTimeMillisec(builder, feedbackTimeMillisec):
    return AcademyMessanger1ExcelAddFeedbackTimeMillisec(builder, feedbackTimeMillisec)
def AcademyMessanger1ExcelAddMessageType(builder, messageType): builder.PrependInt32Slot(10, messageType, 0)
def AddMessageType(builder, messageType):
    return AcademyMessanger1ExcelAddMessageType(builder, messageType)
def AcademyMessanger1ExcelAddImagePath(builder, imagePath): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(imagePath), 0)
def AddImagePath(builder, imagePath):
    return AcademyMessanger1ExcelAddImagePath(builder, imagePath)
def AcademyMessanger1ExcelAddMessageKr(builder, messageKr): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(messageKr), 0)
def AddMessageKr(builder, messageKr):
    return AcademyMessanger1ExcelAddMessageKr(builder, messageKr)
def AcademyMessanger1ExcelAddMessageJp(builder, messageJp): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(messageJp), 0)
def AddMessageJp(builder, messageJp):
    return AcademyMessanger1ExcelAddMessageJp(builder, messageJp)
def AcademyMessanger1ExcelEnd(builder): return builder.EndObject()
def End(builder):
    return AcademyMessanger1ExcelEnd(builder)