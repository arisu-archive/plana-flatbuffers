# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldRaidSeasonManageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldRaidSeasonManageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorldRaidSeasonManageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorldRaidSeasonManageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldRaidSeasonManageExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidSeasonManageExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidSeasonManageExcel
    def EnterTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WorldRaidSeasonManageExcel
    def WorldRaidLobbyScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidSeasonManageExcel
    def WorldRaidLobbyBanner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidSeasonManageExcel
    def WorldRaidLobbyBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidSeasonManageExcel
    def WorldRaidLobbyBannerShow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def SeasonOpenCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidSeasonManageExcel
    def WorldRaidLobbyEnterScenario(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidSeasonManageExcel
    def CanPlayNotSeasonTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def WorldRaidUniqueThemeLobbyUi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def WorldRaidUniqueThemeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidSeasonManageExcel
    def CanWorldRaidGemEnter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def HideWorldRaidTicketUi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def HideWorldRaidBossCompleteRewardUi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def UseWorldRaidCommonToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidSeasonManageExcel
    def OpenRaidBossGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidSeasonManageExcel
    def OpenRaidBossGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidSeasonManageExcel
    def OpenRaidBossGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidSeasonManageExcel
    def OpenRaidBossGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # WorldRaidSeasonManageExcel
    def BossSpawnTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WorldRaidSeasonManageExcel
    def BossSpawnTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidSeasonManageExcel
    def BossSpawnTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # WorldRaidSeasonManageExcel
    def EliminateTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WorldRaidSeasonManageExcel
    def EliminateTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidSeasonManageExcel
    def EliminateTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # WorldRaidSeasonManageExcel
    def ScenarioOutputConditionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidSeasonManageExcel
    def ScenarioOutputConditionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidSeasonManageExcel
    def ScenarioOutputConditionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidSeasonManageExcel
    def ScenarioOutputConditionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # WorldRaidSeasonManageExcel
    def ConditionScenarioGroupid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidSeasonManageExcel
    def ConditionScenarioGroupidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidSeasonManageExcel
    def ConditionScenarioGroupidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidSeasonManageExcel
    def ConditionScenarioGroupidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # WorldRaidSeasonManageExcel
    def WorldRaidMapEnterOperator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidSeasonManageExcel
    def UseFavorRankBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def WorldRaidSeasonManageExcelStart(builder): builder.StartObject(23)
def Start(builder):
    return WorldRaidSeasonManageExcelStart(builder)
def WorldRaidSeasonManageExcelAddSeasonId(builder, seasonId): builder.PrependInt64Slot(0, seasonId, 0)
def AddSeasonId(builder, seasonId):
    return WorldRaidSeasonManageExcelAddSeasonId(builder, seasonId)
def WorldRaidSeasonManageExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(1, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return WorldRaidSeasonManageExcelAddEventContentId(builder, eventContentId)
def WorldRaidSeasonManageExcelAddEnterTicket(builder, enterTicket): builder.PrependInt32Slot(2, enterTicket, 0)
def AddEnterTicket(builder, enterTicket):
    return WorldRaidSeasonManageExcelAddEnterTicket(builder, enterTicket)
def WorldRaidSeasonManageExcelAddWorldRaidLobbyScene(builder, worldRaidLobbyScene): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(worldRaidLobbyScene), 0)
def AddWorldRaidLobbyScene(builder, worldRaidLobbyScene):
    return WorldRaidSeasonManageExcelAddWorldRaidLobbyScene(builder, worldRaidLobbyScene)
def WorldRaidSeasonManageExcelAddWorldRaidLobbyBanner(builder, worldRaidLobbyBanner): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(worldRaidLobbyBanner), 0)
def AddWorldRaidLobbyBanner(builder, worldRaidLobbyBanner):
    return WorldRaidSeasonManageExcelAddWorldRaidLobbyBanner(builder, worldRaidLobbyBanner)
def WorldRaidSeasonManageExcelAddWorldRaidLobbyBg(builder, worldRaidLobbyBg): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(worldRaidLobbyBg), 0)
def AddWorldRaidLobbyBg(builder, worldRaidLobbyBg):
    return WorldRaidSeasonManageExcelAddWorldRaidLobbyBg(builder, worldRaidLobbyBg)
def WorldRaidSeasonManageExcelAddWorldRaidLobbyBannerShow(builder, worldRaidLobbyBannerShow): builder.PrependBoolSlot(6, worldRaidLobbyBannerShow, 0)
def AddWorldRaidLobbyBannerShow(builder, worldRaidLobbyBannerShow):
    return WorldRaidSeasonManageExcelAddWorldRaidLobbyBannerShow(builder, worldRaidLobbyBannerShow)
def WorldRaidSeasonManageExcelAddSeasonOpenCondition(builder, seasonOpenCondition): builder.PrependInt64Slot(7, seasonOpenCondition, 0)
def AddSeasonOpenCondition(builder, seasonOpenCondition):
    return WorldRaidSeasonManageExcelAddSeasonOpenCondition(builder, seasonOpenCondition)
def WorldRaidSeasonManageExcelAddWorldRaidLobbyEnterScenario(builder, worldRaidLobbyEnterScenario): builder.PrependInt64Slot(8, worldRaidLobbyEnterScenario, 0)
def AddWorldRaidLobbyEnterScenario(builder, worldRaidLobbyEnterScenario):
    return WorldRaidSeasonManageExcelAddWorldRaidLobbyEnterScenario(builder, worldRaidLobbyEnterScenario)
def WorldRaidSeasonManageExcelAddCanPlayNotSeasonTime(builder, canPlayNotSeasonTime): builder.PrependBoolSlot(9, canPlayNotSeasonTime, 0)
def AddCanPlayNotSeasonTime(builder, canPlayNotSeasonTime):
    return WorldRaidSeasonManageExcelAddCanPlayNotSeasonTime(builder, canPlayNotSeasonTime)
def WorldRaidSeasonManageExcelAddWorldRaidUniqueThemeLobbyUi(builder, worldRaidUniqueThemeLobbyUi): builder.PrependBoolSlot(10, worldRaidUniqueThemeLobbyUi, 0)
def AddWorldRaidUniqueThemeLobbyUi(builder, worldRaidUniqueThemeLobbyUi):
    return WorldRaidSeasonManageExcelAddWorldRaidUniqueThemeLobbyUi(builder, worldRaidUniqueThemeLobbyUi)
def WorldRaidSeasonManageExcelAddWorldRaidUniqueThemeName(builder, worldRaidUniqueThemeName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(worldRaidUniqueThemeName), 0)
def AddWorldRaidUniqueThemeName(builder, worldRaidUniqueThemeName):
    return WorldRaidSeasonManageExcelAddWorldRaidUniqueThemeName(builder, worldRaidUniqueThemeName)
def WorldRaidSeasonManageExcelAddCanWorldRaidGemEnter(builder, canWorldRaidGemEnter): builder.PrependBoolSlot(12, canWorldRaidGemEnter, 0)
def AddCanWorldRaidGemEnter(builder, canWorldRaidGemEnter):
    return WorldRaidSeasonManageExcelAddCanWorldRaidGemEnter(builder, canWorldRaidGemEnter)
def WorldRaidSeasonManageExcelAddHideWorldRaidTicketUi(builder, hideWorldRaidTicketUi): builder.PrependBoolSlot(13, hideWorldRaidTicketUi, 0)
def AddHideWorldRaidTicketUi(builder, hideWorldRaidTicketUi):
    return WorldRaidSeasonManageExcelAddHideWorldRaidTicketUi(builder, hideWorldRaidTicketUi)
def WorldRaidSeasonManageExcelAddHideWorldRaidBossCompleteRewardUi(builder, hideWorldRaidBossCompleteRewardUi): builder.PrependBoolSlot(14, hideWorldRaidBossCompleteRewardUi, 0)
def AddHideWorldRaidBossCompleteRewardUi(builder, hideWorldRaidBossCompleteRewardUi):
    return WorldRaidSeasonManageExcelAddHideWorldRaidBossCompleteRewardUi(builder, hideWorldRaidBossCompleteRewardUi)
def WorldRaidSeasonManageExcelAddUseWorldRaidCommonToast(builder, useWorldRaidCommonToast): builder.PrependBoolSlot(15, useWorldRaidCommonToast, 0)
def AddUseWorldRaidCommonToast(builder, useWorldRaidCommonToast):
    return WorldRaidSeasonManageExcelAddUseWorldRaidCommonToast(builder, useWorldRaidCommonToast)
def WorldRaidSeasonManageExcelAddOpenRaidBossGroupId(builder, openRaidBossGroupId): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(openRaidBossGroupId), 0)
def AddOpenRaidBossGroupId(builder, openRaidBossGroupId):
    return WorldRaidSeasonManageExcelAddOpenRaidBossGroupId(builder, openRaidBossGroupId)
def WorldRaidSeasonManageExcelStartOpenRaidBossGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOpenRaidBossGroupIdVector(builder, numElems):
    return WorldRaidSeasonManageExcelStartOpenRaidBossGroupIdVector(builder, numElems)
def WorldRaidSeasonManageExcelAddBossSpawnTime(builder, bossSpawnTime): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(bossSpawnTime), 0)
def AddBossSpawnTime(builder, bossSpawnTime):
    return WorldRaidSeasonManageExcelAddBossSpawnTime(builder, bossSpawnTime)
def WorldRaidSeasonManageExcelStartBossSpawnTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBossSpawnTimeVector(builder, numElems):
    return WorldRaidSeasonManageExcelStartBossSpawnTimeVector(builder, numElems)
def WorldRaidSeasonManageExcelAddEliminateTime(builder, eliminateTime): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(eliminateTime), 0)
def AddEliminateTime(builder, eliminateTime):
    return WorldRaidSeasonManageExcelAddEliminateTime(builder, eliminateTime)
def WorldRaidSeasonManageExcelStartEliminateTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEliminateTimeVector(builder, numElems):
    return WorldRaidSeasonManageExcelStartEliminateTimeVector(builder, numElems)
def WorldRaidSeasonManageExcelAddScenarioOutputConditionId(builder, scenarioOutputConditionId): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioOutputConditionId), 0)
def AddScenarioOutputConditionId(builder, scenarioOutputConditionId):
    return WorldRaidSeasonManageExcelAddScenarioOutputConditionId(builder, scenarioOutputConditionId)
def WorldRaidSeasonManageExcelStartScenarioOutputConditionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartScenarioOutputConditionIdVector(builder, numElems):
    return WorldRaidSeasonManageExcelStartScenarioOutputConditionIdVector(builder, numElems)
def WorldRaidSeasonManageExcelAddConditionScenarioGroupid(builder, conditionScenarioGroupid): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(conditionScenarioGroupid), 0)
def AddConditionScenarioGroupid(builder, conditionScenarioGroupid):
    return WorldRaidSeasonManageExcelAddConditionScenarioGroupid(builder, conditionScenarioGroupid)
def WorldRaidSeasonManageExcelStartConditionScenarioGroupidVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionScenarioGroupidVector(builder, numElems):
    return WorldRaidSeasonManageExcelStartConditionScenarioGroupidVector(builder, numElems)
def WorldRaidSeasonManageExcelAddWorldRaidMapEnterOperator(builder, worldRaidMapEnterOperator): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(worldRaidMapEnterOperator), 0)
def AddWorldRaidMapEnterOperator(builder, worldRaidMapEnterOperator):
    return WorldRaidSeasonManageExcelAddWorldRaidMapEnterOperator(builder, worldRaidMapEnterOperator)
def WorldRaidSeasonManageExcelAddUseFavorRankBuff(builder, useFavorRankBuff): builder.PrependBoolSlot(22, useFavorRankBuff, 0)
def AddUseFavorRankBuff(builder, useFavorRankBuff):
    return WorldRaidSeasonManageExcelAddUseFavorRankBuff(builder, useFavorRankBuff)
def WorldRaidSeasonManageExcelEnd(builder): return builder.EndObject()
def End(builder):
    return WorldRaidSeasonManageExcelEnd(builder)