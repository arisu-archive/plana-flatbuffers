# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldSceneExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldSceneExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldSceneExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldSceneExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldSceneExcel
    def ConditionalBgmId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def ConditionalBgmIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FieldSceneExcel
    def EndConditionalBgmInteractionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def EndConditionalBgmInteractionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgmInteractionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgmInteractionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FieldSceneExcel
    def EndConditionalBgmScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def EndConditionalBgmScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgmScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def EndConditionalBgmScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FieldSceneExcel
    def BeginConditionalBgmInteractionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmInteractionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmInteractionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmInteractionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FieldSceneExcel
    def BeginConditionalBgmScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def BeginConditionalBgmScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # FieldSceneExcel
    def ConditionalBgmQuestId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldSceneExcel
    def ConditionalBgmQuestIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmQuestIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldSceneExcel
    def ConditionalBgmQuestIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # FieldSceneExcel
    def BgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def DesignLevelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldSceneExcel
    def ArtLevelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldSceneExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def DateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldSceneExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FieldSceneExcelStart(builder): builder.StartObject(12)
def Start(builder):
    return FieldSceneExcelStart(builder)
def FieldSceneExcelAddConditionalBgmId(builder, conditionalBgmId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(conditionalBgmId), 0)
def AddConditionalBgmId(builder, conditionalBgmId):
    return FieldSceneExcelAddConditionalBgmId(builder, conditionalBgmId)
def FieldSceneExcelStartConditionalBgmIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionalBgmIdVector(builder, numElems):
    return FieldSceneExcelStartConditionalBgmIdVector(builder, numElems)
def FieldSceneExcelAddEndConditionalBgmInteractionId(builder, endConditionalBgmInteractionId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endConditionalBgmInteractionId), 0)
def AddEndConditionalBgmInteractionId(builder, endConditionalBgmInteractionId):
    return FieldSceneExcelAddEndConditionalBgmInteractionId(builder, endConditionalBgmInteractionId)
def FieldSceneExcelStartEndConditionalBgmInteractionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEndConditionalBgmInteractionIdVector(builder, numElems):
    return FieldSceneExcelStartEndConditionalBgmInteractionIdVector(builder, numElems)
def FieldSceneExcelAddEndConditionalBgmScenarioGroupId(builder, endConditionalBgmScenarioGroupId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endConditionalBgmScenarioGroupId), 0)
def AddEndConditionalBgmScenarioGroupId(builder, endConditionalBgmScenarioGroupId):
    return FieldSceneExcelAddEndConditionalBgmScenarioGroupId(builder, endConditionalBgmScenarioGroupId)
def FieldSceneExcelStartEndConditionalBgmScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEndConditionalBgmScenarioGroupIdVector(builder, numElems):
    return FieldSceneExcelStartEndConditionalBgmScenarioGroupIdVector(builder, numElems)
def FieldSceneExcelAddBeginConditionalBgmInteractionId(builder, beginConditionalBgmInteractionId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(beginConditionalBgmInteractionId), 0)
def AddBeginConditionalBgmInteractionId(builder, beginConditionalBgmInteractionId):
    return FieldSceneExcelAddBeginConditionalBgmInteractionId(builder, beginConditionalBgmInteractionId)
def FieldSceneExcelStartBeginConditionalBgmInteractionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartBeginConditionalBgmInteractionIdVector(builder, numElems):
    return FieldSceneExcelStartBeginConditionalBgmInteractionIdVector(builder, numElems)
def FieldSceneExcelAddBeginConditionalBgmScenarioGroupId(builder, beginConditionalBgmScenarioGroupId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(beginConditionalBgmScenarioGroupId), 0)
def AddBeginConditionalBgmScenarioGroupId(builder, beginConditionalBgmScenarioGroupId):
    return FieldSceneExcelAddBeginConditionalBgmScenarioGroupId(builder, beginConditionalBgmScenarioGroupId)
def FieldSceneExcelStartBeginConditionalBgmScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartBeginConditionalBgmScenarioGroupIdVector(builder, numElems):
    return FieldSceneExcelStartBeginConditionalBgmScenarioGroupIdVector(builder, numElems)
def FieldSceneExcelAddConditionalBgmQuestId(builder, conditionalBgmQuestId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(conditionalBgmQuestId), 0)
def AddConditionalBgmQuestId(builder, conditionalBgmQuestId):
    return FieldSceneExcelAddConditionalBgmQuestId(builder, conditionalBgmQuestId)
def FieldSceneExcelStartConditionalBgmQuestIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionalBgmQuestIdVector(builder, numElems):
    return FieldSceneExcelStartConditionalBgmQuestIdVector(builder, numElems)
def FieldSceneExcelAddBgmId(builder, bgmId): builder.PrependInt64Slot(6, bgmId, 0)
def AddBgmId(builder, bgmId):
    return FieldSceneExcelAddBgmId(builder, bgmId)
def FieldSceneExcelAddDesignLevelPath(builder, designLevelPath): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(designLevelPath), 0)
def AddDesignLevelPath(builder, designLevelPath):
    return FieldSceneExcelAddDesignLevelPath(builder, designLevelPath)
def FieldSceneExcelAddArtLevelPath(builder, artLevelPath): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(artLevelPath), 0)
def AddArtLevelPath(builder, artLevelPath):
    return FieldSceneExcelAddArtLevelPath(builder, artLevelPath)
def FieldSceneExcelAddGroupId(builder, groupId): builder.PrependInt64Slot(9, groupId, 0)
def AddGroupId(builder, groupId):
    return FieldSceneExcelAddGroupId(builder, groupId)
def FieldSceneExcelAddDateId(builder, dateId): builder.PrependInt64Slot(10, dateId, 0)
def AddDateId(builder, dateId):
    return FieldSceneExcelAddDateId(builder, dateId)
def FieldSceneExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(11, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return FieldSceneExcelAddUniqueId(builder, uniqueId)
def FieldSceneExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FieldSceneExcelEnd(builder)