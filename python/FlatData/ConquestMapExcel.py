# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestMapExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestMapExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConquestMapExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConquestMapExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestMapExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestMapExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestMapExcel
    def MapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestMapExcel
    def StepIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestMapExcel
    def ConquestMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestMapExcel
    def StepEnterScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestMapExcel
    def StepOpenConditionType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ConquestMapExcel
    def StepOpenConditionTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ConquestMapExcel
    def StepOpenConditionTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConquestMapExcel
    def StepOpenConditionTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ConquestMapExcel
    def StepOpenConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ConquestMapExcel
    def StepOpenConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConquestMapExcel
    def StepOpenConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # ConquestMapExcel
    def MapGoalLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestMapExcel
    def StepGoalLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestMapExcel
    def StepNameLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestMapExcel
    def ConquestMapBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestMapExcel
    def CameraSettingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ConquestMapExcelStart(builder): builder.StartObject(13)
def Start(builder):
    return ConquestMapExcelStart(builder)
def ConquestMapExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(0, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return ConquestMapExcelAddEventContentId(builder, eventContentId)
def ConquestMapExcelAddDevName(builder, devName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(devName), 0)
def AddDevName(builder, devName):
    return ConquestMapExcelAddDevName(builder, devName)
def ConquestMapExcelAddMapDifficulty(builder, mapDifficulty): builder.PrependInt32Slot(2, mapDifficulty, 0)
def AddMapDifficulty(builder, mapDifficulty):
    return ConquestMapExcelAddMapDifficulty(builder, mapDifficulty)
def ConquestMapExcelAddStepIndex(builder, stepIndex): builder.PrependInt32Slot(3, stepIndex, 0)
def AddStepIndex(builder, stepIndex):
    return ConquestMapExcelAddStepIndex(builder, stepIndex)
def ConquestMapExcelAddConquestMap(builder, conquestMap): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(conquestMap), 0)
def AddConquestMap(builder, conquestMap):
    return ConquestMapExcelAddConquestMap(builder, conquestMap)
def ConquestMapExcelAddStepEnterScenarioGroupId(builder, stepEnterScenarioGroupId): builder.PrependInt64Slot(5, stepEnterScenarioGroupId, 0)
def AddStepEnterScenarioGroupId(builder, stepEnterScenarioGroupId):
    return ConquestMapExcelAddStepEnterScenarioGroupId(builder, stepEnterScenarioGroupId)
def ConquestMapExcelAddStepOpenConditionType(builder, stepOpenConditionType): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(stepOpenConditionType), 0)
def AddStepOpenConditionType(builder, stepOpenConditionType):
    return ConquestMapExcelAddStepOpenConditionType(builder, stepOpenConditionType)
def ConquestMapExcelStartStepOpenConditionTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStepOpenConditionTypeVector(builder, numElems):
    return ConquestMapExcelStartStepOpenConditionTypeVector(builder, numElems)
def ConquestMapExcelAddStepOpenConditionParameter(builder, stepOpenConditionParameter): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(stepOpenConditionParameter), 0)
def AddStepOpenConditionParameter(builder, stepOpenConditionParameter):
    return ConquestMapExcelAddStepOpenConditionParameter(builder, stepOpenConditionParameter)
def ConquestMapExcelStartStepOpenConditionParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStepOpenConditionParameterVector(builder, numElems):
    return ConquestMapExcelStartStepOpenConditionParameterVector(builder, numElems)
def ConquestMapExcelAddMapGoalLocalize(builder, mapGoalLocalize): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(mapGoalLocalize), 0)
def AddMapGoalLocalize(builder, mapGoalLocalize):
    return ConquestMapExcelAddMapGoalLocalize(builder, mapGoalLocalize)
def ConquestMapExcelAddStepGoalLocalize(builder, stepGoalLocalize): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(stepGoalLocalize), 0)
def AddStepGoalLocalize(builder, stepGoalLocalize):
    return ConquestMapExcelAddStepGoalLocalize(builder, stepGoalLocalize)
def ConquestMapExcelAddStepNameLocalize(builder, stepNameLocalize): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(stepNameLocalize), 0)
def AddStepNameLocalize(builder, stepNameLocalize):
    return ConquestMapExcelAddStepNameLocalize(builder, stepNameLocalize)
def ConquestMapExcelAddConquestMapBg(builder, conquestMapBg): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(conquestMapBg), 0)
def AddConquestMapBg(builder, conquestMapBg):
    return ConquestMapExcelAddConquestMapBg(builder, conquestMapBg)
def ConquestMapExcelAddCameraSettingId(builder, cameraSettingId): builder.PrependInt64Slot(12, cameraSettingId, 0)
def AddCameraSettingId(builder, cameraSettingId):
    return ConquestMapExcelAddCameraSettingId(builder, cameraSettingId)
def ConquestMapExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConquestMapExcelEnd(builder)