# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopRefreshExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopRefreshExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopRefreshExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopRefreshExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopRefreshExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopRefreshExcel
    def GoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def IsBundle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopRefreshExcel
    def VisibleAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def RefreshGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def Prob(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopRefreshExcel
    def BuyReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopRefreshExcel
    def DisplayTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ShopRefreshExcelStart(builder): builder.StartObject(12)
def Start(builder):
    return ShopRefreshExcelStart(builder)
def ShopRefreshExcelAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def AddId(builder, id):
    return ShopRefreshExcelAddId(builder, id)
def ShopRefreshExcelAddLocalizeEtcId(builder, localizeEtcId): builder.PrependUint32Slot(1, localizeEtcId, 0)
def AddLocalizeEtcId(builder, localizeEtcId):
    return ShopRefreshExcelAddLocalizeEtcId(builder, localizeEtcId)
def ShopRefreshExcelAddIsLegacy(builder, isLegacy): builder.PrependBoolSlot(2, isLegacy, 0)
def AddIsLegacy(builder, isLegacy):
    return ShopRefreshExcelAddIsLegacy(builder, isLegacy)
def ShopRefreshExcelAddGoodsId(builder, goodsId): builder.PrependInt64Slot(3, goodsId, 0)
def AddGoodsId(builder, goodsId):
    return ShopRefreshExcelAddGoodsId(builder, goodsId)
def ShopRefreshExcelAddIsBundle(builder, isBundle): builder.PrependBoolSlot(4, isBundle, 0)
def AddIsBundle(builder, isBundle):
    return ShopRefreshExcelAddIsBundle(builder, isBundle)
def ShopRefreshExcelAddVisibleAmount(builder, visibleAmount): builder.PrependInt64Slot(5, visibleAmount, 0)
def AddVisibleAmount(builder, visibleAmount):
    return ShopRefreshExcelAddVisibleAmount(builder, visibleAmount)
def ShopRefreshExcelAddDisplayOrder(builder, displayOrder): builder.PrependInt64Slot(6, displayOrder, 0)
def AddDisplayOrder(builder, displayOrder):
    return ShopRefreshExcelAddDisplayOrder(builder, displayOrder)
def ShopRefreshExcelAddCategoryType(builder, categoryType): builder.PrependInt32Slot(7, categoryType, 0)
def AddCategoryType(builder, categoryType):
    return ShopRefreshExcelAddCategoryType(builder, categoryType)
def ShopRefreshExcelAddRefreshGroup(builder, refreshGroup): builder.PrependInt32Slot(8, refreshGroup, 0)
def AddRefreshGroup(builder, refreshGroup):
    return ShopRefreshExcelAddRefreshGroup(builder, refreshGroup)
def ShopRefreshExcelAddProb(builder, prob): builder.PrependInt32Slot(9, prob, 0)
def AddProb(builder, prob):
    return ShopRefreshExcelAddProb(builder, prob)
def ShopRefreshExcelAddBuyReportEventName(builder, buyReportEventName): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(buyReportEventName), 0)
def AddBuyReportEventName(builder, buyReportEventName):
    return ShopRefreshExcelAddBuyReportEventName(builder, buyReportEventName)
def ShopRefreshExcelAddDisplayTag(builder, displayTag): builder.PrependInt32Slot(11, displayTag, 0)
def AddDisplayTag(builder, displayTag):
    return ShopRefreshExcelAddDisplayTag(builder, displayTag)
def ShopRefreshExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ShopRefreshExcelEnd(builder)