# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterLevelStatFactorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterLevelStatFactorExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterLevelStatFactorExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterLevelStatFactorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterLevelStatFactorExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterLevelStatFactorExcel
    def CriticalFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterLevelStatFactorExcel
    def StabilityFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterLevelStatFactorExcel
    def DefenceFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterLevelStatFactorExcel
    def AccuracyFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterLevelStatFactorExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return CharacterLevelStatFactorExcelStart(builder)
def CharacterLevelStatFactorExcelAddLevel(builder, level): builder.PrependInt64Slot(0, level, 0)
def AddLevel(builder, level):
    return CharacterLevelStatFactorExcelAddLevel(builder, level)
def CharacterLevelStatFactorExcelAddCriticalFactor(builder, criticalFactor): builder.PrependInt64Slot(1, criticalFactor, 0)
def AddCriticalFactor(builder, criticalFactor):
    return CharacterLevelStatFactorExcelAddCriticalFactor(builder, criticalFactor)
def CharacterLevelStatFactorExcelAddStabilityFactor(builder, stabilityFactor): builder.PrependInt64Slot(2, stabilityFactor, 0)
def AddStabilityFactor(builder, stabilityFactor):
    return CharacterLevelStatFactorExcelAddStabilityFactor(builder, stabilityFactor)
def CharacterLevelStatFactorExcelAddDefenceFactor(builder, defenceFactor): builder.PrependInt64Slot(3, defenceFactor, 0)
def AddDefenceFactor(builder, defenceFactor):
    return CharacterLevelStatFactorExcelAddDefenceFactor(builder, defenceFactor)
def CharacterLevelStatFactorExcelAddAccuracyFactor(builder, accuracyFactor): builder.PrependInt64Slot(4, accuracyFactor, 0)
def AddAccuracyFactor(builder, accuracyFactor):
    return CharacterLevelStatFactorExcelAddAccuracyFactor(builder, accuracyFactor)
def CharacterLevelStatFactorExcelEnd(builder): return builder.EndObject()
def End(builder):
    return CharacterLevelStatFactorExcelEnd(builder)