# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldInteractionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldInteractionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldInteractionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldInteractionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldInteractionExcel
    def NegateCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FieldInteractionExcel
    def NegateConditionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # FieldInteractionExcel
    def NegateConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def NegateConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FieldInteractionExcel
    def ConditionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def ConditionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FieldInteractionExcel
    def ConditionType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldInteractionExcel
    def ConditionTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FieldInteractionExcel
    def ConditionIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def ConditionIndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FieldInteractionExcel
    def OnceOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FieldInteractionExcel
    def ConditionClassParameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def ConditionClassParametersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionClassParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionClassParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # FieldInteractionExcel
    def ConditionClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def InteractionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def InteractionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def InteractionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def InteractionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # FieldInteractionExcel
    def InteractionType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldInteractionExcel
    def InteractionTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FieldInteractionExcel
    def InteractionTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def InteractionTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FieldInteractionExcel
    def KeywordLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldInteractionExcel
    def ShowEmoji(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FieldInteractionExcel
    def FieldDateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def FieldSeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FieldInteractionExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return FieldInteractionExcelStart(builder)
def FieldInteractionExcelAddNegateCondition(builder, negateCondition): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(negateCondition), 0)
def AddNegateCondition(builder, negateCondition):
    return FieldInteractionExcelAddNegateCondition(builder, negateCondition)
def FieldInteractionExcelStartNegateConditionVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartNegateConditionVector(builder, numElems):
    return FieldInteractionExcelStartNegateConditionVector(builder, numElems)
def FieldInteractionExcelAddConditionId(builder, conditionId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(conditionId), 0)
def AddConditionId(builder, conditionId):
    return FieldInteractionExcelAddConditionId(builder, conditionId)
def FieldInteractionExcelStartConditionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionIdVector(builder, numElems):
    return FieldInteractionExcelStartConditionIdVector(builder, numElems)
def FieldInteractionExcelAddConditionType(builder, conditionType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(conditionType), 0)
def AddConditionType(builder, conditionType):
    return FieldInteractionExcelAddConditionType(builder, conditionType)
def FieldInteractionExcelStartConditionTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConditionTypeVector(builder, numElems):
    return FieldInteractionExcelStartConditionTypeVector(builder, numElems)
def FieldInteractionExcelAddConditionIndex(builder, conditionIndex): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(conditionIndex), 0)
def AddConditionIndex(builder, conditionIndex):
    return FieldInteractionExcelAddConditionIndex(builder, conditionIndex)
def FieldInteractionExcelStartConditionIndexVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionIndexVector(builder, numElems):
    return FieldInteractionExcelStartConditionIndexVector(builder, numElems)
def FieldInteractionExcelAddOnceOnly(builder, onceOnly): builder.PrependBoolSlot(4, onceOnly, 0)
def AddOnceOnly(builder, onceOnly):
    return FieldInteractionExcelAddOnceOnly(builder, onceOnly)
def FieldInteractionExcelAddConditionClassParameters(builder, conditionClassParameters): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(conditionClassParameters), 0)
def AddConditionClassParameters(builder, conditionClassParameters):
    return FieldInteractionExcelAddConditionClassParameters(builder, conditionClassParameters)
def FieldInteractionExcelStartConditionClassParametersVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartConditionClassParametersVector(builder, numElems):
    return FieldInteractionExcelStartConditionClassParametersVector(builder, numElems)
def FieldInteractionExcelAddConditionClass(builder, conditionClass): builder.PrependInt32Slot(6, conditionClass, 0)
def AddConditionClass(builder, conditionClass):
    return FieldInteractionExcelAddConditionClass(builder, conditionClass)
def FieldInteractionExcelAddInteractionId(builder, interactionId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(interactionId), 0)
def AddInteractionId(builder, interactionId):
    return FieldInteractionExcelAddInteractionId(builder, interactionId)
def FieldInteractionExcelStartInteractionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartInteractionIdVector(builder, numElems):
    return FieldInteractionExcelStartInteractionIdVector(builder, numElems)
def FieldInteractionExcelAddInteractionType(builder, interactionType): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(interactionType), 0)
def AddInteractionType(builder, interactionType):
    return FieldInteractionExcelAddInteractionType(builder, interactionType)
def FieldInteractionExcelStartInteractionTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInteractionTypeVector(builder, numElems):
    return FieldInteractionExcelStartInteractionTypeVector(builder, numElems)
def FieldInteractionExcelAddKeywordLocalize(builder, keywordLocalize): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(keywordLocalize), 0)
def AddKeywordLocalize(builder, keywordLocalize):
    return FieldInteractionExcelAddKeywordLocalize(builder, keywordLocalize)
def FieldInteractionExcelAddShowEmoji(builder, showEmoji): builder.PrependBoolSlot(10, showEmoji, 0)
def AddShowEmoji(builder, showEmoji):
    return FieldInteractionExcelAddShowEmoji(builder, showEmoji)
def FieldInteractionExcelAddFieldDateId(builder, fieldDateId): builder.PrependInt64Slot(11, fieldDateId, 0)
def AddFieldDateId(builder, fieldDateId):
    return FieldInteractionExcelAddFieldDateId(builder, fieldDateId)
def FieldInteractionExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(12, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return FieldInteractionExcelAddUniqueId(builder, uniqueId)
def FieldInteractionExcelAddFieldSeasonId(builder, fieldSeasonId): builder.PrependInt64Slot(13, fieldSeasonId, 0)
def AddFieldSeasonId(builder, fieldSeasonId):
    return FieldInteractionExcelAddFieldSeasonId(builder, fieldSeasonId)
def FieldInteractionExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FieldInteractionExcelEnd(builder)