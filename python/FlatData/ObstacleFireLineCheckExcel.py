# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObstacleFireLineCheckExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObstacleFireLineCheckExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObstacleFireLineCheckExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObstacleFireLineCheckExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObstacleFireLineCheckExcel
    def MyObstacleFireLineCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ObstacleFireLineCheckExcel
    def AllyObstacleFireLineCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ObstacleFireLineCheckExcel
    def EnemyObstacleFireLineCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ObstacleFireLineCheckExcel
    def EmptyObstacleFireLineCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ObstacleFireLineCheckExcelStart(builder): builder.StartObject(4)
def Start(builder):
    return ObstacleFireLineCheckExcelStart(builder)
def ObstacleFireLineCheckExcelAddMyObstacleFireLineCheck(builder, myObstacleFireLineCheck): builder.PrependBoolSlot(0, myObstacleFireLineCheck, 0)
def AddMyObstacleFireLineCheck(builder, myObstacleFireLineCheck):
    return ObstacleFireLineCheckExcelAddMyObstacleFireLineCheck(builder, myObstacleFireLineCheck)
def ObstacleFireLineCheckExcelAddAllyObstacleFireLineCheck(builder, allyObstacleFireLineCheck): builder.PrependBoolSlot(1, allyObstacleFireLineCheck, 0)
def AddAllyObstacleFireLineCheck(builder, allyObstacleFireLineCheck):
    return ObstacleFireLineCheckExcelAddAllyObstacleFireLineCheck(builder, allyObstacleFireLineCheck)
def ObstacleFireLineCheckExcelAddEnemyObstacleFireLineCheck(builder, enemyObstacleFireLineCheck): builder.PrependBoolSlot(2, enemyObstacleFireLineCheck, 0)
def AddEnemyObstacleFireLineCheck(builder, enemyObstacleFireLineCheck):
    return ObstacleFireLineCheckExcelAddEnemyObstacleFireLineCheck(builder, enemyObstacleFireLineCheck)
def ObstacleFireLineCheckExcelAddEmptyObstacleFireLineCheck(builder, emptyObstacleFireLineCheck): builder.PrependBoolSlot(3, emptyObstacleFireLineCheck, 0)
def AddEmptyObstacleFireLineCheck(builder, emptyObstacleFireLineCheck):
    return ObstacleFireLineCheckExcelAddEmptyObstacleFireLineCheck(builder, emptyObstacleFireLineCheck)
def ObstacleFireLineCheckExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ObstacleFireLineCheckExcelEnd(builder)