# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ClearDeckRuleExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClearDeckRuleExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClearDeckRuleExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ClearDeckRuleExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ClearDeckRuleExcel
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ClearDeckRuleExcel
    def SizeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ClearDeckRuleExcelStart(builder): builder.StartObject(2)
def Start(builder):
    return ClearDeckRuleExcelStart(builder)
def ClearDeckRuleExcelAddContentType(builder, contentType): builder.PrependInt32Slot(0, contentType, 0)
def AddContentType(builder, contentType):
    return ClearDeckRuleExcelAddContentType(builder, contentType)
def ClearDeckRuleExcelAddSizeLimit(builder, sizeLimit): builder.PrependInt64Slot(1, sizeLimit, 0)
def AddSizeLimit(builder, sizeLimit):
    return ClearDeckRuleExcelAddSizeLimit(builder, sizeLimit)
def ClearDeckRuleExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ClearDeckRuleExcelEnd(builder)