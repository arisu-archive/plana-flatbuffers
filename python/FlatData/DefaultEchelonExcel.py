# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DefaultEchelonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DefaultEchelonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDefaultEchelonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DefaultEchelonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DefaultEchelonExcel
    def EchlonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DefaultEchelonExcel
    def LeaderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DefaultEchelonExcel
    def MainId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DefaultEchelonExcel
    def MainIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # DefaultEchelonExcel
    def MainIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DefaultEchelonExcel
    def MainIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DefaultEchelonExcel
    def SupportId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DefaultEchelonExcel
    def SupportIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # DefaultEchelonExcel
    def SupportIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DefaultEchelonExcel
    def SupportIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DefaultEchelonExcel
    def TssId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def DefaultEchelonExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return DefaultEchelonExcelStart(builder)
def DefaultEchelonExcelAddEchlonId(builder, echlonId): builder.PrependInt32Slot(0, echlonId, 0)
def AddEchlonId(builder, echlonId):
    return DefaultEchelonExcelAddEchlonId(builder, echlonId)
def DefaultEchelonExcelAddLeaderId(builder, leaderId): builder.PrependInt64Slot(1, leaderId, 0)
def AddLeaderId(builder, leaderId):
    return DefaultEchelonExcelAddLeaderId(builder, leaderId)
def DefaultEchelonExcelAddMainId(builder, mainId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mainId), 0)
def AddMainId(builder, mainId):
    return DefaultEchelonExcelAddMainId(builder, mainId)
def DefaultEchelonExcelStartMainIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartMainIdVector(builder, numElems):
    return DefaultEchelonExcelStartMainIdVector(builder, numElems)
def DefaultEchelonExcelAddSupportId(builder, supportId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(supportId), 0)
def AddSupportId(builder, supportId):
    return DefaultEchelonExcelAddSupportId(builder, supportId)
def DefaultEchelonExcelStartSupportIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartSupportIdVector(builder, numElems):
    return DefaultEchelonExcelStartSupportIdVector(builder, numElems)
def DefaultEchelonExcelAddTssId(builder, tssId): builder.PrependInt64Slot(4, tssId, 0)
def AddTssId(builder, tssId):
    return DefaultEchelonExcelAddTssId(builder, tssId)
def DefaultEchelonExcelEnd(builder): return builder.EndObject()
def End(builder):
    return DefaultEchelonExcelEnd(builder)