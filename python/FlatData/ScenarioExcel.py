# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioExcel
    def None(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ScenarioExcel
    def NoneAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ScenarioExcel
    def NoneLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioExcel
    def NoneIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ScenarioExcel
    def Idle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ScenarioExcel
    def IdleAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ScenarioExcel
    def IdleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioExcel
    def IdleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ScenarioExcel
    def Cafe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioExcel
    def Talk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioExcel
    def Open(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioExcel
    def EnterConver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioExcel
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioExcel
    def Instant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioExcel
    def Prologue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ScenarioExcelStart(builder): builder.StartObject(9)
def Start(builder):
    return ScenarioExcelStart(builder)
def ScenarioExcelAddNone(builder, none): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(none), 0)
def AddNone(builder, none):
    return ScenarioExcelAddNone(builder, none)
def ScenarioExcelStartNoneVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNoneVector(builder, numElems):
    return ScenarioExcelStartNoneVector(builder, numElems)
def ScenarioExcelAddIdle(builder, idle): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idle), 0)
def AddIdle(builder, idle):
    return ScenarioExcelAddIdle(builder, idle)
def ScenarioExcelStartIdleVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartIdleVector(builder, numElems):
    return ScenarioExcelStartIdleVector(builder, numElems)
def ScenarioExcelAddCafe(builder, cafe): builder.PrependInt32Slot(2, cafe, 0)
def AddCafe(builder, cafe):
    return ScenarioExcelAddCafe(builder, cafe)
def ScenarioExcelAddTalk(builder, talk): builder.PrependInt32Slot(3, talk, 0)
def AddTalk(builder, talk):
    return ScenarioExcelAddTalk(builder, talk)
def ScenarioExcelAddOpen(builder, open): builder.PrependInt32Slot(4, open, 0)
def AddOpen(builder, open):
    return ScenarioExcelAddOpen(builder, open)
def ScenarioExcelAddEnterConver(builder, enterConver): builder.PrependInt32Slot(5, enterConver, 0)
def AddEnterConver(builder, enterConver):
    return ScenarioExcelAddEnterConver(builder, enterConver)
def ScenarioExcelAddCenter(builder, center): builder.PrependInt32Slot(6, center, 0)
def AddCenter(builder, center):
    return ScenarioExcelAddCenter(builder, center)
def ScenarioExcelAddInstant(builder, instant): builder.PrependInt32Slot(7, instant, 0)
def AddInstant(builder, instant):
    return ScenarioExcelAddInstant(builder, instant)
def ScenarioExcelAddPrologue(builder, prologue): builder.PrependInt32Slot(8, prologue, 0)
def AddPrologue(builder, prologue):
    return ScenarioExcelAddPrologue(builder, prologue)
def ScenarioExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ScenarioExcelEnd(builder)