# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstConquestExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstConquestExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstConquestExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstConquestExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstConquestExcel
    def AnimationUnitDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstConquestExcel
    def AnimationUnitAmountMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstConquestExcel
    def AnimationUnitAmountMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstConquestExcel
    def PlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstConquestExcel
    def AssistCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstConquestExcel
    def ManageUnitChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstConquestExcelStart(builder): builder.StartObject(6)
def Start(builder):
    return ConstConquestExcelStart(builder)
def ConstConquestExcelAddAnimationUnitDelay(builder, animationUnitDelay): builder.PrependFloat32Slot(0, animationUnitDelay, 0.0)
def AddAnimationUnitDelay(builder, animationUnitDelay):
    return ConstConquestExcelAddAnimationUnitDelay(builder, animationUnitDelay)
def ConstConquestExcelAddAnimationUnitAmountMax(builder, animationUnitAmountMax): builder.PrependInt32Slot(1, animationUnitAmountMax, 0)
def AddAnimationUnitAmountMax(builder, animationUnitAmountMax):
    return ConstConquestExcelAddAnimationUnitAmountMax(builder, animationUnitAmountMax)
def ConstConquestExcelAddAnimationUnitAmountMin(builder, animationUnitAmountMin): builder.PrependInt32Slot(2, animationUnitAmountMin, 0)
def AddAnimationUnitAmountMin(builder, animationUnitAmountMin):
    return ConstConquestExcelAddAnimationUnitAmountMin(builder, animationUnitAmountMin)
def ConstConquestExcelAddPlayTimeLimitInSeconds(builder, playTimeLimitInSeconds): builder.PrependInt32Slot(3, playTimeLimitInSeconds, 0)
def AddPlayTimeLimitInSeconds(builder, playTimeLimitInSeconds):
    return ConstConquestExcelAddPlayTimeLimitInSeconds(builder, playTimeLimitInSeconds)
def ConstConquestExcelAddAssistCount(builder, assistCount): builder.PrependInt32Slot(4, assistCount, 0)
def AddAssistCount(builder, assistCount):
    return ConstConquestExcelAddAssistCount(builder, assistCount)
def ConstConquestExcelAddManageUnitChange(builder, manageUnitChange): builder.PrependInt32Slot(5, manageUnitChange, 0)
def AddManageUnitChange(builder, manageUnitChange):
    return ConstConquestExcelAddManageUnitChange(builder, manageUnitChange)
def ConstConquestExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConstConquestExcelEnd(builder)