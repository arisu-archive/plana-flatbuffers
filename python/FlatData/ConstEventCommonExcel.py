# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstEventCommonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstEventCommonExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstEventCommonExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstEventCommonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstEventCommonExcel
    def EventContentHardStageCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def EventStrategyPlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def SubEventChangeLimitSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def SubEventInstantClear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstEventCommonExcel
    def CardShopProbWeightCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def CardShopProbWeightRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def MeetupScenarioReplayResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstEventCommonExcel
    def MeetupScenarioReplayTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstEventCommonExcel
    def SpecialOperactionCollectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureNormalVariationAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureLoopVariationAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureLimitVariationLoopCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureLimitVariationClearLoopCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def EventStoryReplayHideEventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstEventCommonExcelStart(builder): builder.StartObject(14)
def Start(builder):
    return ConstEventCommonExcelStart(builder)
def ConstEventCommonExcelAddEventContentHardStageCount(builder, eventContentHardStageCount): builder.PrependInt32Slot(0, eventContentHardStageCount, 0)
def AddEventContentHardStageCount(builder, eventContentHardStageCount):
    return ConstEventCommonExcelAddEventContentHardStageCount(builder, eventContentHardStageCount)
def ConstEventCommonExcelAddEventStrategyPlayTimeLimitInSeconds(builder, eventStrategyPlayTimeLimitInSeconds): builder.PrependInt64Slot(1, eventStrategyPlayTimeLimitInSeconds, 0)
def AddEventStrategyPlayTimeLimitInSeconds(builder, eventStrategyPlayTimeLimitInSeconds):
    return ConstEventCommonExcelAddEventStrategyPlayTimeLimitInSeconds(builder, eventStrategyPlayTimeLimitInSeconds)
def ConstEventCommonExcelAddSubEventChangeLimitSeconds(builder, subEventChangeLimitSeconds): builder.PrependInt64Slot(2, subEventChangeLimitSeconds, 0)
def AddSubEventChangeLimitSeconds(builder, subEventChangeLimitSeconds):
    return ConstEventCommonExcelAddSubEventChangeLimitSeconds(builder, subEventChangeLimitSeconds)
def ConstEventCommonExcelAddSubEventInstantClear(builder, subEventInstantClear): builder.PrependBoolSlot(3, subEventInstantClear, 0)
def AddSubEventInstantClear(builder, subEventInstantClear):
    return ConstEventCommonExcelAddSubEventInstantClear(builder, subEventInstantClear)
def ConstEventCommonExcelAddCardShopProbWeightCount(builder, cardShopProbWeightCount): builder.PrependInt64Slot(4, cardShopProbWeightCount, 0)
def AddCardShopProbWeightCount(builder, cardShopProbWeightCount):
    return ConstEventCommonExcelAddCardShopProbWeightCount(builder, cardShopProbWeightCount)
def ConstEventCommonExcelAddCardShopProbWeightRarity(builder, cardShopProbWeightRarity): builder.PrependInt32Slot(5, cardShopProbWeightRarity, 0)
def AddCardShopProbWeightRarity(builder, cardShopProbWeightRarity):
    return ConstEventCommonExcelAddCardShopProbWeightRarity(builder, cardShopProbWeightRarity)
def ConstEventCommonExcelAddMeetupScenarioReplayResource(builder, meetupScenarioReplayResource): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(meetupScenarioReplayResource), 0)
def AddMeetupScenarioReplayResource(builder, meetupScenarioReplayResource):
    return ConstEventCommonExcelAddMeetupScenarioReplayResource(builder, meetupScenarioReplayResource)
def ConstEventCommonExcelAddMeetupScenarioReplayTitleLocalize(builder, meetupScenarioReplayTitleLocalize): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(meetupScenarioReplayTitleLocalize), 0)
def AddMeetupScenarioReplayTitleLocalize(builder, meetupScenarioReplayTitleLocalize):
    return ConstEventCommonExcelAddMeetupScenarioReplayTitleLocalize(builder, meetupScenarioReplayTitleLocalize)
def ConstEventCommonExcelAddSpecialOperactionCollectionGroupId(builder, specialOperactionCollectionGroupId): builder.PrependInt64Slot(8, specialOperactionCollectionGroupId, 0)
def AddSpecialOperactionCollectionGroupId(builder, specialOperactionCollectionGroupId):
    return ConstEventCommonExcelAddSpecialOperactionCollectionGroupId(builder, specialOperactionCollectionGroupId)
def ConstEventCommonExcelAddTreasureNormalVariationAmount(builder, treasureNormalVariationAmount): builder.PrependInt32Slot(9, treasureNormalVariationAmount, 0)
def AddTreasureNormalVariationAmount(builder, treasureNormalVariationAmount):
    return ConstEventCommonExcelAddTreasureNormalVariationAmount(builder, treasureNormalVariationAmount)
def ConstEventCommonExcelAddTreasureLoopVariationAmount(builder, treasureLoopVariationAmount): builder.PrependInt32Slot(10, treasureLoopVariationAmount, 0)
def AddTreasureLoopVariationAmount(builder, treasureLoopVariationAmount):
    return ConstEventCommonExcelAddTreasureLoopVariationAmount(builder, treasureLoopVariationAmount)
def ConstEventCommonExcelAddTreasureLimitVariationLoopCount(builder, treasureLimitVariationLoopCount): builder.PrependInt32Slot(11, treasureLimitVariationLoopCount, 0)
def AddTreasureLimitVariationLoopCount(builder, treasureLimitVariationLoopCount):
    return ConstEventCommonExcelAddTreasureLimitVariationLoopCount(builder, treasureLimitVariationLoopCount)
def ConstEventCommonExcelAddTreasureLimitVariationClearLoopCount(builder, treasureLimitVariationClearLoopCount): builder.PrependInt32Slot(12, treasureLimitVariationClearLoopCount, 0)
def AddTreasureLimitVariationClearLoopCount(builder, treasureLimitVariationClearLoopCount):
    return ConstEventCommonExcelAddTreasureLimitVariationClearLoopCount(builder, treasureLimitVariationClearLoopCount)
def ConstEventCommonExcelAddEventStoryReplayHideEventContentId(builder, eventStoryReplayHideEventContentId): builder.PrependInt32Slot(13, eventStoryReplayHideEventContentId, 0)
def AddEventStoryReplayHideEventContentId(builder, eventStoryReplayHideEventContentId):
    return ConstEventCommonExcelAddEventStoryReplayHideEventContentId(builder, eventStoryReplayHideEventContentId)
def ConstEventCommonExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConstEventCommonExcelEnd(builder)