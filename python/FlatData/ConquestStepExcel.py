# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestStepExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestStepExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConquestStepExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConquestStepExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestStepExcel
    def TreasureBoxCountPerStepOpen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def TreasureBoxObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def UnexpectedEventPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestStepExcel
    def UnexpectedEventUnitId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ConquestStepExcel
    def StepEnterItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepEnterItemUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepEnterItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepEnterScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepGoalLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestStepExcel
    def Step(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def MapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ConquestStepExcelStart(builder): builder.StartObject(12)
def Start(builder):
    return ConquestStepExcelStart(builder)
def ConquestStepExcelAddTreasureBoxCountPerStepOpen(builder, treasureBoxCountPerStepOpen): builder.PrependInt32Slot(0, treasureBoxCountPerStepOpen, 0)
def AddTreasureBoxCountPerStepOpen(builder, treasureBoxCountPerStepOpen):
    return ConquestStepExcelAddTreasureBoxCountPerStepOpen(builder, treasureBoxCountPerStepOpen)
def ConquestStepExcelAddTreasureBoxObjectId(builder, treasureBoxObjectId): builder.PrependInt64Slot(1, treasureBoxObjectId, 0)
def AddTreasureBoxObjectId(builder, treasureBoxObjectId):
    return ConquestStepExcelAddTreasureBoxObjectId(builder, treasureBoxObjectId)
def ConquestStepExcelAddUnexpectedEventPrefab(builder, unexpectedEventPrefab): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unexpectedEventPrefab), 0)
def AddUnexpectedEventPrefab(builder, unexpectedEventPrefab):
    return ConquestStepExcelAddUnexpectedEventPrefab(builder, unexpectedEventPrefab)
def ConquestStepExcelAddUnexpectedEventUnitId(builder, unexpectedEventUnitId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unexpectedEventUnitId), 0)
def AddUnexpectedEventUnitId(builder, unexpectedEventUnitId):
    return ConquestStepExcelAddUnexpectedEventUnitId(builder, unexpectedEventUnitId)
def ConquestStepExcelStartUnexpectedEventUnitIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartUnexpectedEventUnitIdVector(builder, numElems):
    return ConquestStepExcelStartUnexpectedEventUnitIdVector(builder, numElems)
def ConquestStepExcelAddStepEnterItemAmount(builder, stepEnterItemAmount): builder.PrependInt64Slot(4, stepEnterItemAmount, 0)
def AddStepEnterItemAmount(builder, stepEnterItemAmount):
    return ConquestStepExcelAddStepEnterItemAmount(builder, stepEnterItemAmount)
def ConquestStepExcelAddStepEnterItemUniqueId(builder, stepEnterItemUniqueId): builder.PrependInt64Slot(5, stepEnterItemUniqueId, 0)
def AddStepEnterItemUniqueId(builder, stepEnterItemUniqueId):
    return ConquestStepExcelAddStepEnterItemUniqueId(builder, stepEnterItemUniqueId)
def ConquestStepExcelAddStepEnterItemType(builder, stepEnterItemType): builder.PrependInt32Slot(6, stepEnterItemType, 0)
def AddStepEnterItemType(builder, stepEnterItemType):
    return ConquestStepExcelAddStepEnterItemType(builder, stepEnterItemType)
def ConquestStepExcelAddStepEnterScenarioGroupId(builder, stepEnterScenarioGroupId): builder.PrependInt64Slot(7, stepEnterScenarioGroupId, 0)
def AddStepEnterScenarioGroupId(builder, stepEnterScenarioGroupId):
    return ConquestStepExcelAddStepEnterScenarioGroupId(builder, stepEnterScenarioGroupId)
def ConquestStepExcelAddStepGoalLocalize(builder, stepGoalLocalize): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(stepGoalLocalize), 0)
def AddStepGoalLocalize(builder, stepGoalLocalize):
    return ConquestStepExcelAddStepGoalLocalize(builder, stepGoalLocalize)
def ConquestStepExcelAddStep(builder, step): builder.PrependInt32Slot(9, step, 0)
def AddStep(builder, step):
    return ConquestStepExcelAddStep(builder, step)
def ConquestStepExcelAddMapDifficulty(builder, mapDifficulty): builder.PrependInt32Slot(10, mapDifficulty, 0)
def AddMapDifficulty(builder, mapDifficulty):
    return ConquestStepExcelAddMapDifficulty(builder, mapDifficulty)
def ConquestStepExcelAddEventContentId(builder, eventContentId): builder.PrependInt64Slot(11, eventContentId, 0)
def AddEventContentId(builder, eventContentId):
    return ConquestStepExcelAddEventContentId(builder, eventContentId)
def ConquestStepExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConquestStepExcelEnd(builder)