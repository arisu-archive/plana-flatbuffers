# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldQuestExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldQuestExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldQuestExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldQuestExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldQuestExcel
    def AssetPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldQuestExcel
    def FieldDateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def FieldSeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def IsDaily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FieldQuestExcel
    def Opendate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def Prob(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def QuestDescKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def QuestNamKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldQuestExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FieldQuestExcelStart(builder): builder.StartObject(10)
def Start(builder):
    return FieldQuestExcelStart(builder)
def FieldQuestExcelAddAssetPath(builder, assetPath): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(assetPath), 0)
def AddAssetPath(builder, assetPath):
    return FieldQuestExcelAddAssetPath(builder, assetPath)
def FieldQuestExcelAddFieldDateId(builder, fieldDateId): builder.PrependInt64Slot(1, fieldDateId, 0)
def AddFieldDateId(builder, fieldDateId):
    return FieldQuestExcelAddFieldDateId(builder, fieldDateId)
def FieldQuestExcelAddFieldSeasonId(builder, fieldSeasonId): builder.PrependInt64Slot(2, fieldSeasonId, 0)
def AddFieldSeasonId(builder, fieldSeasonId):
    return FieldQuestExcelAddFieldSeasonId(builder, fieldSeasonId)
def FieldQuestExcelAddIsDaily(builder, isDaily): builder.PrependBoolSlot(3, isDaily, 0)
def AddIsDaily(builder, isDaily):
    return FieldQuestExcelAddIsDaily(builder, isDaily)
def FieldQuestExcelAddOpendate(builder, opendate): builder.PrependInt64Slot(4, opendate, 0)
def AddOpendate(builder, opendate):
    return FieldQuestExcelAddOpendate(builder, opendate)
def FieldQuestExcelAddProb(builder, prob): builder.PrependInt32Slot(5, prob, 0)
def AddProb(builder, prob):
    return FieldQuestExcelAddProb(builder, prob)
def FieldQuestExcelAddQuestDescKey(builder, questDescKey): builder.PrependUint32Slot(6, questDescKey, 0)
def AddQuestDescKey(builder, questDescKey):
    return FieldQuestExcelAddQuestDescKey(builder, questDescKey)
def FieldQuestExcelAddQuestNamKey(builder, questNamKey): builder.PrependUint32Slot(7, questNamKey, 0)
def AddQuestNamKey(builder, questNamKey):
    return FieldQuestExcelAddQuestNamKey(builder, questNamKey)
def FieldQuestExcelAddRewardId(builder, rewardId): builder.PrependInt64Slot(8, rewardId, 0)
def AddRewardId(builder, rewardId):
    return FieldQuestExcelAddRewardId(builder, rewardId)
def FieldQuestExcelAddUniqueId(builder, uniqueId): builder.PrependInt64Slot(9, uniqueId, 0)
def AddUniqueId(builder, uniqueId):
    return FieldQuestExcelAddUniqueId(builder, uniqueId)
def FieldQuestExcelEnd(builder): return builder.EndObject()
def End(builder):
    return FieldQuestExcelEnd(builder)