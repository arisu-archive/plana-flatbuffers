# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstMinigameCCGExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstMinigameCCGExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstMinigameCCGExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstMinigameCCGExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstMinigameCCGExcel
    def TurnDrawCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def ConquestMapBoundaryOffsetRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def ConquestMapBoundaryOffsetTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def ConquestMapBoundaryOffsetBottom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def ConquestMapCenterOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def ConquestMapCenterOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def CameraAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def CameraZoomMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def CameraZoomMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def CameraZoomDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def ThemaLoadingProgressTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def MapAllyRotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMinigameCCGExcel
    def AniAllyBattleAttack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstMinigameCCGExcel
    def MaxHandCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def MaxCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def StartCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def TurnCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def StrikerSwapFrontCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def StrikerMaxEquipCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def StartDrawCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def CampReviveHealthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def BaseRewardRerollPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def SelectRewardOptionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMinigameCCGExcel
    def AlternativeCardImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ConstMinigameCCGExcelStart(builder): builder.StartObject(24)
def Start(builder):
    return ConstMinigameCCGExcelStart(builder)
def ConstMinigameCCGExcelAddTurnDrawCount(builder, turnDrawCount): builder.PrependInt32Slot(0, turnDrawCount, 0)
def AddTurnDrawCount(builder, turnDrawCount):
    return ConstMinigameCCGExcelAddTurnDrawCount(builder, turnDrawCount)
def ConstMinigameCCGExcelAddConquestMapBoundaryOffsetRight(builder, conquestMapBoundaryOffsetRight): builder.PrependFloat32Slot(1, conquestMapBoundaryOffsetRight, 0.0)
def AddConquestMapBoundaryOffsetRight(builder, conquestMapBoundaryOffsetRight):
    return ConstMinigameCCGExcelAddConquestMapBoundaryOffsetRight(builder, conquestMapBoundaryOffsetRight)
def ConstMinigameCCGExcelAddConquestMapBoundaryOffsetTop(builder, conquestMapBoundaryOffsetTop): builder.PrependFloat32Slot(2, conquestMapBoundaryOffsetTop, 0.0)
def AddConquestMapBoundaryOffsetTop(builder, conquestMapBoundaryOffsetTop):
    return ConstMinigameCCGExcelAddConquestMapBoundaryOffsetTop(builder, conquestMapBoundaryOffsetTop)
def ConstMinigameCCGExcelAddConquestMapBoundaryOffsetBottom(builder, conquestMapBoundaryOffsetBottom): builder.PrependFloat32Slot(3, conquestMapBoundaryOffsetBottom, 0.0)
def AddConquestMapBoundaryOffsetBottom(builder, conquestMapBoundaryOffsetBottom):
    return ConstMinigameCCGExcelAddConquestMapBoundaryOffsetBottom(builder, conquestMapBoundaryOffsetBottom)
def ConstMinigameCCGExcelAddConquestMapCenterOffsetX(builder, conquestMapCenterOffsetX): builder.PrependFloat32Slot(4, conquestMapCenterOffsetX, 0.0)
def AddConquestMapCenterOffsetX(builder, conquestMapCenterOffsetX):
    return ConstMinigameCCGExcelAddConquestMapCenterOffsetX(builder, conquestMapCenterOffsetX)
def ConstMinigameCCGExcelAddConquestMapCenterOffsetY(builder, conquestMapCenterOffsetY): builder.PrependFloat32Slot(5, conquestMapCenterOffsetY, 0.0)
def AddConquestMapCenterOffsetY(builder, conquestMapCenterOffsetY):
    return ConstMinigameCCGExcelAddConquestMapCenterOffsetY(builder, conquestMapCenterOffsetY)
def ConstMinigameCCGExcelAddCameraAngle(builder, cameraAngle): builder.PrependFloat32Slot(6, cameraAngle, 0.0)
def AddCameraAngle(builder, cameraAngle):
    return ConstMinigameCCGExcelAddCameraAngle(builder, cameraAngle)
def ConstMinigameCCGExcelAddCameraZoomMax(builder, cameraZoomMax): builder.PrependFloat32Slot(7, cameraZoomMax, 0.0)
def AddCameraZoomMax(builder, cameraZoomMax):
    return ConstMinigameCCGExcelAddCameraZoomMax(builder, cameraZoomMax)
def ConstMinigameCCGExcelAddCameraZoomMin(builder, cameraZoomMin): builder.PrependFloat32Slot(8, cameraZoomMin, 0.0)
def AddCameraZoomMin(builder, cameraZoomMin):
    return ConstMinigameCCGExcelAddCameraZoomMin(builder, cameraZoomMin)
def ConstMinigameCCGExcelAddCameraZoomDefault(builder, cameraZoomDefault): builder.PrependFloat32Slot(9, cameraZoomDefault, 0.0)
def AddCameraZoomDefault(builder, cameraZoomDefault):
    return ConstMinigameCCGExcelAddCameraZoomDefault(builder, cameraZoomDefault)
def ConstMinigameCCGExcelAddThemaLoadingProgressTime(builder, themaLoadingProgressTime): builder.PrependFloat32Slot(10, themaLoadingProgressTime, 0.0)
def AddThemaLoadingProgressTime(builder, themaLoadingProgressTime):
    return ConstMinigameCCGExcelAddThemaLoadingProgressTime(builder, themaLoadingProgressTime)
def ConstMinigameCCGExcelAddMapAllyRotation(builder, mapAllyRotation): builder.PrependFloat32Slot(11, mapAllyRotation, 0.0)
def AddMapAllyRotation(builder, mapAllyRotation):
    return ConstMinigameCCGExcelAddMapAllyRotation(builder, mapAllyRotation)
def ConstMinigameCCGExcelAddAniAllyBattleAttack(builder, aniAllyBattleAttack): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(aniAllyBattleAttack), 0)
def AddAniAllyBattleAttack(builder, aniAllyBattleAttack):
    return ConstMinigameCCGExcelAddAniAllyBattleAttack(builder, aniAllyBattleAttack)
def ConstMinigameCCGExcelAddMaxHandCount(builder, maxHandCount): builder.PrependInt32Slot(13, maxHandCount, 0)
def AddMaxHandCount(builder, maxHandCount):
    return ConstMinigameCCGExcelAddMaxHandCount(builder, maxHandCount)
def ConstMinigameCCGExcelAddMaxCost(builder, maxCost): builder.PrependInt32Slot(14, maxCost, 0)
def AddMaxCost(builder, maxCost):
    return ConstMinigameCCGExcelAddMaxCost(builder, maxCost)
def ConstMinigameCCGExcelAddStartCost(builder, startCost): builder.PrependInt32Slot(15, startCost, 0)
def AddStartCost(builder, startCost):
    return ConstMinigameCCGExcelAddStartCost(builder, startCost)
def ConstMinigameCCGExcelAddTurnCost(builder, turnCost): builder.PrependInt32Slot(16, turnCost, 0)
def AddTurnCost(builder, turnCost):
    return ConstMinigameCCGExcelAddTurnCost(builder, turnCost)
def ConstMinigameCCGExcelAddStrikerSwapFrontCost(builder, strikerSwapFrontCost): builder.PrependInt32Slot(17, strikerSwapFrontCost, 0)
def AddStrikerSwapFrontCost(builder, strikerSwapFrontCost):
    return ConstMinigameCCGExcelAddStrikerSwapFrontCost(builder, strikerSwapFrontCost)
def ConstMinigameCCGExcelAddStrikerMaxEquipCount(builder, strikerMaxEquipCount): builder.PrependInt32Slot(18, strikerMaxEquipCount, 0)
def AddStrikerMaxEquipCount(builder, strikerMaxEquipCount):
    return ConstMinigameCCGExcelAddStrikerMaxEquipCount(builder, strikerMaxEquipCount)
def ConstMinigameCCGExcelAddStartDrawCount(builder, startDrawCount): builder.PrependInt32Slot(19, startDrawCount, 0)
def AddStartDrawCount(builder, startDrawCount):
    return ConstMinigameCCGExcelAddStartDrawCount(builder, startDrawCount)
def ConstMinigameCCGExcelAddCampReviveHealthRate(builder, campReviveHealthRate): builder.PrependInt32Slot(20, campReviveHealthRate, 0)
def AddCampReviveHealthRate(builder, campReviveHealthRate):
    return ConstMinigameCCGExcelAddCampReviveHealthRate(builder, campReviveHealthRate)
def ConstMinigameCCGExcelAddBaseRewardRerollPoint(builder, baseRewardRerollPoint): builder.PrependInt32Slot(21, baseRewardRerollPoint, 0)
def AddBaseRewardRerollPoint(builder, baseRewardRerollPoint):
    return ConstMinigameCCGExcelAddBaseRewardRerollPoint(builder, baseRewardRerollPoint)
def ConstMinigameCCGExcelAddSelectRewardOptionCount(builder, selectRewardOptionCount): builder.PrependInt32Slot(22, selectRewardOptionCount, 0)
def AddSelectRewardOptionCount(builder, selectRewardOptionCount):
    return ConstMinigameCCGExcelAddSelectRewardOptionCount(builder, selectRewardOptionCount)
def ConstMinigameCCGExcelAddAlternativeCardImagePath(builder, alternativeCardImagePath): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(alternativeCardImagePath), 0)
def AddAlternativeCardImagePath(builder, alternativeCardImagePath):
    return ConstMinigameCCGExcelAddAlternativeCardImagePath(builder, alternativeCardImagePath)
def ConstMinigameCCGExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ConstMinigameCCGExcelEnd(builder)