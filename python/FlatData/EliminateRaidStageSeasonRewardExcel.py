# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EliminateRaidStageSeasonRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EliminateRaidStageSeasonRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEliminateRaidStageSeasonRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EliminateRaidStageSeasonRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardParcelUniqueNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EliminateRaidStageSeasonRewardExcel
    def SeasonRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def EliminateRaidStageSeasonRewardExcelStart(builder): builder.StartObject(5)
def Start(builder):
    return EliminateRaidStageSeasonRewardExcelStart(builder)
def EliminateRaidStageSeasonRewardExcelAddSeasonRewardId(builder, seasonRewardId): builder.PrependInt64Slot(0, seasonRewardId, 0)
def AddSeasonRewardId(builder, seasonRewardId):
    return EliminateRaidStageSeasonRewardExcelAddSeasonRewardId(builder, seasonRewardId)
def EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelType(builder, seasonRewardParcelType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(seasonRewardParcelType), 0)
def AddSeasonRewardParcelType(builder, seasonRewardParcelType):
    return EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelType(builder, seasonRewardParcelType)
def EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSeasonRewardParcelTypeVector(builder, numElems):
    return EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelTypeVector(builder, numElems)
def EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelUniqueId(builder, seasonRewardParcelUniqueId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(seasonRewardParcelUniqueId), 0)
def AddSeasonRewardParcelUniqueId(builder, seasonRewardParcelUniqueId):
    return EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelUniqueId(builder, seasonRewardParcelUniqueId)
def EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelUniqueIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartSeasonRewardParcelUniqueIdVector(builder, numElems):
    return EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelUniqueIdVector(builder, numElems)
def EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelUniqueName(builder, seasonRewardParcelUniqueName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(seasonRewardParcelUniqueName), 0)
def AddSeasonRewardParcelUniqueName(builder, seasonRewardParcelUniqueName):
    return EliminateRaidStageSeasonRewardExcelAddSeasonRewardParcelUniqueName(builder, seasonRewardParcelUniqueName)
def EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelUniqueNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSeasonRewardParcelUniqueNameVector(builder, numElems):
    return EliminateRaidStageSeasonRewardExcelStartSeasonRewardParcelUniqueNameVector(builder, numElems)
def EliminateRaidStageSeasonRewardExcelAddSeasonRewardAmount(builder, seasonRewardAmount): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(seasonRewardAmount), 0)
def AddSeasonRewardAmount(builder, seasonRewardAmount):
    return EliminateRaidStageSeasonRewardExcelAddSeasonRewardAmount(builder, seasonRewardAmount)
def EliminateRaidStageSeasonRewardExcelStartSeasonRewardAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartSeasonRewardAmountVector(builder, numElems):
    return EliminateRaidStageSeasonRewardExcelStartSeasonRewardAmountVector(builder, numElems)
def EliminateRaidStageSeasonRewardExcelEnd(builder): return builder.EndObject()
def End(builder):
    return EliminateRaidStageSeasonRewardExcelEnd(builder)