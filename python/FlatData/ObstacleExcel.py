# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObstacleExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObstacleExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObstacleExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObstacleExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObstacleExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ObstacleExcel
    def DestroyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ObstacleExcel
    def EnemyPoint1Osset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ObstacleExcel
    def EnemyPoint1OssetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ObstacleExcel
    def EnemyPoint1OssetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObstacleExcel
    def EnemyPoint1OssetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ObstacleExcel
    def EnemyPoint2Osset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ObstacleExcel
    def EnemyPoint2OssetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ObstacleExcel
    def EnemyPoint2OssetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObstacleExcel
    def EnemyPoint2OssetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ObstacleExcel
    def EvasionRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ObstacleExcel
    def Hp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleExcel
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleExcel
    def JumpAble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ObstacleExcel
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleExcel
    def Point1Offeset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ObstacleExcel
    def Point1OffesetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ObstacleExcel
    def Point1OffesetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObstacleExcel
    def Point1OffesetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # ObstacleExcel
    def Point2Offeset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ObstacleExcel
    def Point2OffesetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ObstacleExcel
    def Point2OffesetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObstacleExcel
    def Point2OffesetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # ObstacleExcel
    def PrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ObstacleExcel
    def SubObstacleId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ObstacleExcel
    def SubObstacleIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ObstacleExcel
    def SubObstacleIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObstacleExcel
    def SubObstacleIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # ObstacleExcel
    def SubOffset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ObstacleExcel
    def SubOffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ObstacleExcel
    def SubOffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObstacleExcel
    def SubOffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # ObstacleExcel
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ObstacleExcel
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ObstacleExcelStart(builder): builder.StartObject(16)
def Start(builder):
    return ObstacleExcelStart(builder)
def ObstacleExcelAddBlockRate(builder, blockRate): builder.PrependInt32Slot(0, blockRate, 0)
def AddBlockRate(builder, blockRate):
    return ObstacleExcelAddBlockRate(builder, blockRate)
def ObstacleExcelAddDestroyType(builder, destroyType): builder.PrependInt32Slot(1, destroyType, 0)
def AddDestroyType(builder, destroyType):
    return ObstacleExcelAddDestroyType(builder, destroyType)
def ObstacleExcelAddEnemyPoint1Osset(builder, enemyPoint1Osset): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPoint1Osset), 0)
def AddEnemyPoint1Osset(builder, enemyPoint1Osset):
    return ObstacleExcelAddEnemyPoint1Osset(builder, enemyPoint1Osset)
def ObstacleExcelStartEnemyPoint1OssetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEnemyPoint1OssetVector(builder, numElems):
    return ObstacleExcelStartEnemyPoint1OssetVector(builder, numElems)
def ObstacleExcelAddEnemyPoint2Osset(builder, enemyPoint2Osset): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enemyPoint2Osset), 0)
def AddEnemyPoint2Osset(builder, enemyPoint2Osset):
    return ObstacleExcelAddEnemyPoint2Osset(builder, enemyPoint2Osset)
def ObstacleExcelStartEnemyPoint2OssetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEnemyPoint2OssetVector(builder, numElems):
    return ObstacleExcelStartEnemyPoint2OssetVector(builder, numElems)
def ObstacleExcelAddEvasionRate(builder, evasionRate): builder.PrependInt32Slot(4, evasionRate, 0)
def AddEvasionRate(builder, evasionRate):
    return ObstacleExcelAddEvasionRate(builder, evasionRate)
def ObstacleExcelAddHp(builder, hp): builder.PrependInt64Slot(5, hp, 0)
def AddHp(builder, hp):
    return ObstacleExcelAddHp(builder, hp)
def ObstacleExcelAddIndex(builder, index): builder.PrependInt64Slot(6, index, 0)
def AddIndex(builder, index):
    return ObstacleExcelAddIndex(builder, index)
def ObstacleExcelAddJumpAble(builder, jumpAble): builder.PrependBoolSlot(7, jumpAble, 0)
def AddJumpAble(builder, jumpAble):
    return ObstacleExcelAddJumpAble(builder, jumpAble)
def ObstacleExcelAddMaxHp(builder, maxHp): builder.PrependInt64Slot(8, maxHp, 0)
def AddMaxHp(builder, maxHp):
    return ObstacleExcelAddMaxHp(builder, maxHp)
def ObstacleExcelAddPoint1Offeset(builder, point1Offeset): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(point1Offeset), 0)
def AddPoint1Offeset(builder, point1Offeset):
    return ObstacleExcelAddPoint1Offeset(builder, point1Offeset)
def ObstacleExcelStartPoint1OffesetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPoint1OffesetVector(builder, numElems):
    return ObstacleExcelStartPoint1OffesetVector(builder, numElems)
def ObstacleExcelAddPoint2Offeset(builder, point2Offeset): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(point2Offeset), 0)
def AddPoint2Offeset(builder, point2Offeset):
    return ObstacleExcelAddPoint2Offeset(builder, point2Offeset)
def ObstacleExcelStartPoint2OffesetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPoint2OffesetVector(builder, numElems):
    return ObstacleExcelStartPoint2OffesetVector(builder, numElems)
def ObstacleExcelAddPrefabName(builder, prefabName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(prefabName), 0)
def AddPrefabName(builder, prefabName):
    return ObstacleExcelAddPrefabName(builder, prefabName)
def ObstacleExcelAddSubObstacleId(builder, subObstacleId): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subObstacleId), 0)
def AddSubObstacleId(builder, subObstacleId):
    return ObstacleExcelAddSubObstacleId(builder, subObstacleId)
def ObstacleExcelStartSubObstacleIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartSubObstacleIdVector(builder, numElems):
    return ObstacleExcelStartSubObstacleIdVector(builder, numElems)
def ObstacleExcelAddSubOffset(builder, subOffset): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(subOffset), 0)
def AddSubOffset(builder, subOffset):
    return ObstacleExcelAddSubOffset(builder, subOffset)
def ObstacleExcelStartSubOffsetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSubOffsetVector(builder, numElems):
    return ObstacleExcelStartSubOffsetVector(builder, numElems)
def ObstacleExcelAddX(builder, x): builder.PrependFloat32Slot(14, x, 0.0)
def AddX(builder, x):
    return ObstacleExcelAddX(builder, x)
def ObstacleExcelAddZ(builder, z): builder.PrependFloat32Slot(15, z, 0.0)
def AddZ(builder, z):
    return ObstacleExcelAddZ(builder, z)
def ObstacleExcelEnd(builder): return builder.EndObject()
def End(builder):
    return ObstacleExcelEnd(builder)