# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DefaultMailExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DefaultMailExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDefaultMailExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DefaultMailExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DefaultMailExcel
    def RewardParcelAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DefaultMailExcel
    def RewardParcelAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # DefaultMailExcel
    def RewardParcelAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DefaultMailExcel
    def RewardParcelAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DefaultMailExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DefaultMailExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # DefaultMailExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DefaultMailExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DefaultMailExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DefaultMailExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DefaultMailExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DefaultMailExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DefaultMailExcel
    def MailSendPeriodTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DefaultMailExcel
    def MailSendPeriodFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DefaultMailExcel
    def MailType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DefaultMailExcel
    def LocalizeCodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DefaultMailExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def DefaultMailExcelStart(builder): builder.StartObject(8)
def Start(builder):
    return DefaultMailExcelStart(builder)
def DefaultMailExcelAddRewardParcelAmount(builder, rewardParcelAmount): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelAmount), 0)
def AddRewardParcelAmount(builder, rewardParcelAmount):
    return DefaultMailExcelAddRewardParcelAmount(builder, rewardParcelAmount)
def DefaultMailExcelStartRewardParcelAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelAmountVector(builder, numElems):
    return DefaultMailExcelStartRewardParcelAmountVector(builder, numElems)
def DefaultMailExcelAddRewardParcelId(builder, rewardParcelId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelId), 0)
def AddRewardParcelId(builder, rewardParcelId):
    return DefaultMailExcelAddRewardParcelId(builder, rewardParcelId)
def DefaultMailExcelStartRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartRewardParcelIdVector(builder, numElems):
    return DefaultMailExcelStartRewardParcelIdVector(builder, numElems)
def DefaultMailExcelAddRewardParcelType(builder, rewardParcelType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardParcelType), 0)
def AddRewardParcelType(builder, rewardParcelType):
    return DefaultMailExcelAddRewardParcelType(builder, rewardParcelType)
def DefaultMailExcelStartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRewardParcelTypeVector(builder, numElems):
    return DefaultMailExcelStartRewardParcelTypeVector(builder, numElems)
def DefaultMailExcelAddMailSendPeriodTo(builder, mailSendPeriodTo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mailSendPeriodTo), 0)
def AddMailSendPeriodTo(builder, mailSendPeriodTo):
    return DefaultMailExcelAddMailSendPeriodTo(builder, mailSendPeriodTo)
def DefaultMailExcelAddMailSendPeriodFrom(builder, mailSendPeriodFrom): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mailSendPeriodFrom), 0)
def AddMailSendPeriodFrom(builder, mailSendPeriodFrom):
    return DefaultMailExcelAddMailSendPeriodFrom(builder, mailSendPeriodFrom)
def DefaultMailExcelAddMailType(builder, mailType): builder.PrependInt32Slot(5, mailType, 0)
def AddMailType(builder, mailType):
    return DefaultMailExcelAddMailType(builder, mailType)
def DefaultMailExcelAddLocalizeCodeId(builder, localizeCodeId): builder.PrependUint32Slot(6, localizeCodeId, 0)
def AddLocalizeCodeId(builder, localizeCodeId):
    return DefaultMailExcelAddLocalizeCodeId(builder, localizeCodeId)
def DefaultMailExcelAddId(builder, id): builder.PrependInt64Slot(7, id, 0)
def AddId(builder, id):
    return DefaultMailExcelAddId(builder, id)
def DefaultMailExcelEnd(builder): return builder.EndObject()
def End(builder):
    return DefaultMailExcelEnd(builder)